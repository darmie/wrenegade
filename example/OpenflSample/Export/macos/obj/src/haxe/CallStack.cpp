// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_45b8f4f00d182e96_237_toString,"haxe.CallStack","toString",0xd59be738,"haxe.CallStack.toString","/usr/local/lib/haxe/std/haxe/CallStack.hx",237,0x6022c9c0)
static const ::String _hx_array_data_6d544b62_2[] = {
	HX_("\nCalled from ",bd,26,6b,81),
};
HX_LOCAL_STACK_FRAME(_hx_pos_45b8f4f00d182e96_247_itemToString,"haxe.CallStack","itemToString",0xc121696b,"haxe.CallStack.itemToString","/usr/local/lib/haxe/std/haxe/CallStack.hx",247,0x6022c9c0)
static const ::String _hx_array_data_6d544b62_4[] = {
	HX_("a C function",f4,1b,53,cb),
};
static const ::String _hx_array_data_6d544b62_5[] = {
	HX_("module ",f4,e1,fa,f7),
};
static const ::String _hx_array_data_6d544b62_6[] = {
	HX_(" (",08,1c,00,00),
};
static const ::String _hx_array_data_6d544b62_7[] = {
	HX_(" line ",8c,69,6d,40),
};
static const ::String _hx_array_data_6d544b62_8[] = {
	HX_(" column ",6a,f0,a7,19),
};
static const ::String _hx_array_data_6d544b62_9[] = {
	HX_(")",29,00,00,00),
};
static const ::String _hx_array_data_6d544b62_10[] = {
	HX_(".",2e,00,00,00),
};
static const ::String _hx_array_data_6d544b62_11[] = {
	HX_("local function #",b0,cd,97,ff),
};
namespace haxe{

void CallStack_obj::__construct() { }

Dynamic CallStack_obj::__CreateEmpty() { return new CallStack_obj; }

void *CallStack_obj::_hx_vtable = 0;

Dynamic CallStack_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CallStack_obj > _hx_result = new CallStack_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CallStack_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6207a884;
}

::Array< ::Dynamic> CallStack_obj::exceptionStack(){
	::Array< ::String > s =  ::__hxcpp_get_exception_stack();
	return ::haxe::CallStack_obj::makeStack(s);
}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CallStack_obj,exceptionStack,return )

::String CallStack_obj::toString(::Array< ::Dynamic> stack){
            	HX_GC_STACKFRAME(&_hx_pos_45b8f4f00d182e96_237_toString)
HXLINE( 238)		 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 239)		{
HXLINE( 239)			int _g = 0;
HXDLIN( 239)			while((_g < stack->length)){
HXLINE( 239)				 ::haxe::StackItem s = stack->__get(_g).StaticCast<  ::haxe::StackItem >();
HXDLIN( 239)				_g = (_g + 1);
HXLINE( 240)				{
HXLINE( 240)					if (hx::IsNotNull( b->charBuf )) {
HXLINE( 240)						b->flush();
            					}
HXDLIN( 240)					if (hx::IsNull( b->b )) {
HXLINE( 240)						b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_2,1);
            					}
            					else {
HXLINE( 240)						b->b->push(HX_("\nCalled from ",bd,26,6b,81));
            					}
            				}
HXLINE( 241)				::haxe::CallStack_obj::itemToString(b,s);
            			}
            		}
HXLINE( 243)		return b->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_obj,toString,return )

void CallStack_obj::itemToString( ::StringBuf b, ::haxe::StackItem s){
            	HX_STACKFRAME(&_hx_pos_45b8f4f00d182e96_247_itemToString)
HXDLIN( 247)		switch((int)(s->_hx_getIndex())){
            			case (int)0: {
HXLINE( 249)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 249)					b->flush();
            				}
HXDLIN( 249)				if (hx::IsNull( b->b )) {
HXLINE( 249)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_4,1);
            				}
            				else {
HXLINE( 249)					b->b->push(HX_("a C function",f4,1b,53,cb));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 250)				::String m = s->_hx_getString(0);
HXDLIN( 250)				{
HXLINE( 251)					{
HXLINE( 251)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 251)							b->flush();
            						}
HXDLIN( 251)						if (hx::IsNull( b->b )) {
HXLINE( 251)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_5,1);
            						}
            						else {
HXLINE( 251)							b->b->push(HX_("module ",f4,e1,fa,f7));
            						}
            					}
HXLINE( 252)					{
HXLINE( 252)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 252)							b->flush();
            						}
HXDLIN( 252)						if (hx::IsNull( b->b )) {
HXLINE( 252)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(m));
            						}
            						else {
HXLINE( 252)							::Array< ::String > b1 = b->b;
HXDLIN( 252)							b1->push(::Std_obj::string(m));
            						}
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 253)				 ::Dynamic col = s->_hx_getObject(3);
HXDLIN( 253)				int line = s->_hx_getInt(2);
HXDLIN( 253)				::String file = s->_hx_getString(1);
HXDLIN( 253)				 ::haxe::StackItem s1 = s->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
HXDLIN( 253)				{
HXLINE( 254)					if (hx::IsNotNull( s1 )) {
HXLINE( 255)						::haxe::CallStack_obj::itemToString(b,s1);
HXLINE( 256)						{
HXLINE( 256)							if (hx::IsNotNull( b->charBuf )) {
HXLINE( 256)								b->flush();
            							}
HXDLIN( 256)							if (hx::IsNull( b->b )) {
HXLINE( 256)								b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_6,1);
            							}
            							else {
HXLINE( 256)								b->b->push(HX_(" (",08,1c,00,00));
            							}
            						}
            					}
HXLINE( 258)					{
HXLINE( 258)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 258)							b->flush();
            						}
HXDLIN( 258)						if (hx::IsNull( b->b )) {
HXLINE( 258)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(file));
            						}
            						else {
HXLINE( 258)							::Array< ::String > b2 = b->b;
HXDLIN( 258)							b2->push(::Std_obj::string(file));
            						}
            					}
HXLINE( 259)					{
HXLINE( 259)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 259)							b->flush();
            						}
HXDLIN( 259)						if (hx::IsNull( b->b )) {
HXLINE( 259)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_7,1);
            						}
            						else {
HXLINE( 259)							b->b->push(HX_(" line ",8c,69,6d,40));
            						}
            					}
HXLINE( 260)					{
HXLINE( 260)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 260)							b->flush();
            						}
HXDLIN( 260)						if (hx::IsNull( b->b )) {
HXLINE( 260)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(line));
            						}
            						else {
HXLINE( 260)							::Array< ::String > b3 = b->b;
HXDLIN( 260)							b3->push(::Std_obj::string(line));
            						}
            					}
HXLINE( 261)					if (hx::IsNotNull( col )) {
HXLINE( 262)						{
HXLINE( 262)							if (hx::IsNotNull( b->charBuf )) {
HXLINE( 262)								b->flush();
            							}
HXDLIN( 262)							if (hx::IsNull( b->b )) {
HXLINE( 262)								b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_8,1);
            							}
            							else {
HXLINE( 262)								b->b->push(HX_(" column ",6a,f0,a7,19));
            							}
            						}
HXLINE( 263)						{
HXLINE( 263)							if (hx::IsNotNull( b->charBuf )) {
HXLINE( 263)								b->flush();
            							}
HXDLIN( 263)							if (hx::IsNull( b->b )) {
HXLINE( 263)								b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(col));
            							}
            							else {
HXLINE( 263)								::Array< ::String > b4 = b->b;
HXDLIN( 263)								b4->push(::Std_obj::string(col));
            							}
            						}
            					}
HXLINE( 265)					if (hx::IsNotNull( s1 )) {
HXLINE( 265)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 265)							b->flush();
            						}
HXDLIN( 265)						if (hx::IsNull( b->b )) {
HXLINE( 265)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_9,1);
            						}
            						else {
HXLINE( 265)							b->b->push(HX_(")",29,00,00,00));
            						}
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 266)				::String meth = s->_hx_getString(1);
HXDLIN( 266)				::String cname = s->_hx_getString(0);
HXDLIN( 266)				{
HXLINE( 267)					{
HXLINE( 267)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 267)							b->flush();
            						}
HXDLIN( 267)						if (hx::IsNull( b->b )) {
HXLINE( 267)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(cname));
            						}
            						else {
HXLINE( 267)							::Array< ::String > b5 = b->b;
HXDLIN( 267)							b5->push(::Std_obj::string(cname));
            						}
            					}
HXLINE( 268)					{
HXLINE( 268)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 268)							b->flush();
            						}
HXDLIN( 268)						if (hx::IsNull( b->b )) {
HXLINE( 268)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_10,1);
            						}
            						else {
HXLINE( 268)							b->b->push(HX_(".",2e,00,00,00));
            						}
            					}
HXLINE( 269)					{
HXLINE( 269)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 269)							b->flush();
            						}
HXDLIN( 269)						if (hx::IsNull( b->b )) {
HXLINE( 269)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(meth));
            						}
            						else {
HXLINE( 269)							::Array< ::String > b6 = b->b;
HXDLIN( 269)							b6->push(::Std_obj::string(meth));
            						}
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 270)				 ::Dynamic n = s->_hx_getObject(0);
HXDLIN( 270)				{
HXLINE( 271)					{
HXLINE( 271)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 271)							b->flush();
            						}
HXDLIN( 271)						if (hx::IsNull( b->b )) {
HXLINE( 271)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_6d544b62_11,1);
            						}
            						else {
HXLINE( 271)							b->b->push(HX_("local function #",b0,cd,97,ff));
            						}
            					}
HXLINE( 272)					{
HXLINE( 272)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 272)							b->flush();
            						}
HXDLIN( 272)						if (hx::IsNull( b->b )) {
HXLINE( 272)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(n));
            						}
            						else {
HXLINE( 272)							::Array< ::String > b7 = b->b;
HXDLIN( 272)							b7->push(::Std_obj::string(n));
            						}
            					}
            				}
            			}
            			break;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CallStack_obj,itemToString,(void))

::Array< ::Dynamic> CallStack_obj::makeStack( ::Dynamic s){
	::Array< ::String > stack = ( (::Array< ::String >)(s) );
	::Array< ::Dynamic> m = ::Array_obj< ::Dynamic>::__new();
	{
		int _g = 0;
		while((_g < stack->length)){
			::String func = stack->__get(_g);
			_g = (_g + 1);
			::Array< ::String > words = func.split(HX_("::",c0,32,00,00));
			if ((words->length == 0)) {
				m->push(::haxe::StackItem_obj::CFunction_dyn());
			}
			else {
				if ((words->length == 2)) {
					m->push(::haxe::StackItem_obj::Method(words->__get(0),words->__get(1)));
				}
				else {
					if ((words->length == 4)) {
						 ::haxe::StackItem _hx_tmp = ::haxe::StackItem_obj::Method(words->__get(0),words->__get(1));
						::String words1 = words->__get(2);
						m->push(::haxe::StackItem_obj::FilePos(_hx_tmp,words1,::Std_obj::parseInt(words->__get(3)),null()));
					}
				}
			}
		}
	}
	return m;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_obj,makeStack,return )


CallStack_obj::CallStack_obj()
{
}

bool CallStack_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"makeStack") ) { outValue = makeStack_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"itemToString") ) { outValue = itemToString_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"exceptionStack") ) { outValue = exceptionStack_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *CallStack_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CallStack_obj_sStaticStorageInfo = 0;
#endif

hx::Class CallStack_obj::__mClass;

static ::String CallStack_obj_sStaticFields[] = {
	HX_("exceptionStack",79,48,56,0b),
	HX_("toString",ac,d0,6e,38),
	HX_("itemToString",df,1c,98,1c),
	HX_("makeStack",7a,de,a3,57),
	::String(null())
};

void CallStack_obj::__register()
{
	CallStack_obj _hx_dummy;
	CallStack_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.CallStack",62,4b,54,6d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CallStack_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CallStack_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CallStack_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CallStack_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CallStack_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
