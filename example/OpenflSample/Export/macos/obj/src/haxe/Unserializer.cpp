// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe__Unserializer_DefaultResolver
#include <haxe/_Unserializer/DefaultResolver.h>
#endif
#ifndef INCLUDED_haxe__Unserializer_NullResolver
#include <haxe/_Unserializer/NullResolver.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2249f02c049a2193_104_new,"haxe.Unserializer","new",0xa8f5e205,"haxe.Unserializer.new","/usr/local/lib/haxe/std/haxe/Unserializer.hx",104,0x60de4a67)
HX_LOCAL_STACK_FRAME(_hx_pos_2249f02c049a2193_130_setResolver,"haxe.Unserializer","setResolver",0x5545046d,"haxe.Unserializer.setResolver","/usr/local/lib/haxe/std/haxe/Unserializer.hx",130,0x60de4a67)
HX_LOCAL_STACK_FRAME(_hx_pos_2249f02c049a2193_149_readDigits,"haxe.Unserializer","readDigits",0x75598b17,"haxe.Unserializer.readDigits","/usr/local/lib/haxe/std/haxe/Unserializer.hx",149,0x60de4a67)
HX_LOCAL_STACK_FRAME(_hx_pos_2249f02c049a2193_174_readFloat,"haxe.Unserializer","readFloat",0x5bd86dcb,"haxe.Unserializer.readFloat","/usr/local/lib/haxe/std/haxe/Unserializer.hx",174,0x60de4a67)
HX_LOCAL_STACK_FRAME(_hx_pos_2249f02c049a2193_188_unserializeObject,"haxe.Unserializer","unserializeObject",0x1b3e66eb,"haxe.Unserializer.unserializeObject","/usr/local/lib/haxe/std/haxe/Unserializer.hx",188,0x60de4a67)
HX_LOCAL_STACK_FRAME(_hx_pos_2249f02c049a2193_203_unserializeEnum,"haxe.Unserializer","unserializeEnum",0x5018b02d,"haxe.Unserializer.unserializeEnum","/usr/local/lib/haxe/std/haxe/Unserializer.hx",203,0x60de4a67)
HX_LOCAL_STACK_FRAME(_hx_pos_2249f02c049a2193_235_unserialize,"haxe.Unserializer","unserialize",0x92cca30c,"haxe.Unserializer.unserialize","/usr/local/lib/haxe/std/haxe/Unserializer.hx",235,0x60de4a67)
HX_LOCAL_STACK_FRAME(_hx_pos_2249f02c049a2193_72_initCodes,"haxe.Unserializer","initCodes",0xee42ccdb,"haxe.Unserializer.initCodes","/usr/local/lib/haxe/std/haxe/Unserializer.hx",72,0x60de4a67)
HX_LOCAL_STACK_FRAME(_hx_pos_2249f02c049a2193_468_run,"haxe.Unserializer","run",0xa8f8f8f0,"haxe.Unserializer.run","/usr/local/lib/haxe/std/haxe/Unserializer.hx",468,0x60de4a67)
HX_LOCAL_STACK_FRAME(_hx_pos_2249f02c049a2193_65_boot,"haxe.Unserializer","boot",0x2648e2ed,"haxe.Unserializer.boot","/usr/local/lib/haxe/std/haxe/Unserializer.hx",65,0x60de4a67)
HX_LOCAL_STACK_FRAME(_hx_pos_2249f02c049a2193_67_boot,"haxe.Unserializer","boot",0x2648e2ed,"haxe.Unserializer.boot","/usr/local/lib/haxe/std/haxe/Unserializer.hx",67,0x60de4a67)
HX_LOCAL_STACK_FRAME(_hx_pos_2249f02c049a2193_70_boot,"haxe.Unserializer","boot",0x2648e2ed,"haxe.Unserializer.boot","/usr/local/lib/haxe/std/haxe/Unserializer.hx",70,0x60de4a67)
namespace haxe{

void Unserializer_obj::__construct(::String buf){
            	HX_GC_STACKFRAME(&_hx_pos_2249f02c049a2193_104_new)
HXLINE( 105)		this->buf = buf;
HXLINE( 106)		this->length = buf.length;
HXLINE( 107)		this->pos = 0;
HXLINE( 111)		this->scache = ::Array_obj< ::String >::__new();
HXLINE( 112)		this->cache = ::cpp::VirtualArray_obj::__new();
HXLINE( 113)		 ::Dynamic r = ::haxe::Unserializer_obj::DEFAULT_RESOLVER;
HXLINE( 114)		if (hx::IsNull( r )) {
HXLINE( 115)			r =  ::haxe::_Unserializer::DefaultResolver_obj::__alloc( HX_CTX );
HXLINE( 116)			::haxe::Unserializer_obj::DEFAULT_RESOLVER = r;
            		}
HXLINE( 118)		this->resolver = r;
            	}

Dynamic Unserializer_obj::__CreateEmpty() { return new Unserializer_obj; }

void *Unserializer_obj::_hx_vtable = 0;

Dynamic Unserializer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Unserializer_obj > _hx_result = new Unserializer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Unserializer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7af2b435;
}

void Unserializer_obj::setResolver( ::Dynamic r){
            	HX_GC_STACKFRAME(&_hx_pos_2249f02c049a2193_130_setResolver)
HXDLIN( 130)		if (hx::IsNull( r )) {
HXLINE( 131)			if (hx::IsNull( ::haxe::_Unserializer::NullResolver_obj::instance )) {
HXLINE( 131)				::haxe::_Unserializer::NullResolver_obj::instance =  ::haxe::_Unserializer::NullResolver_obj::__alloc( HX_CTX );
            			}
HXDLIN( 131)			this->resolver = ::haxe::_Unserializer::NullResolver_obj::instance;
            		}
            		else {
HXLINE( 133)			this->resolver = r;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Unserializer_obj,setResolver,(void))

int Unserializer_obj::readDigits(){
            	HX_STACKFRAME(&_hx_pos_2249f02c049a2193_149_readDigits)
HXLINE( 150)		int k = 0;
HXLINE( 151)		bool s = false;
HXLINE( 152)		int fpos = this->pos;
HXLINE( 153)		while(true){
HXLINE( 154)			int c = this->buf.cca(this->pos);
HXLINE( 155)			if ((c == 0)) {
HXLINE( 156)				goto _hx_goto_2;
            			}
HXLINE( 157)			if ((c == 45)) {
HXLINE( 158)				if ((this->pos != fpos)) {
HXLINE( 159)					goto _hx_goto_2;
            				}
HXLINE( 160)				s = true;
HXLINE( 161)				this->pos++;
HXLINE( 162)				continue;
            			}
HXLINE( 164)			bool _hx_tmp;
HXDLIN( 164)			if ((c >= 48)) {
HXLINE( 164)				_hx_tmp = (c > 57);
            			}
            			else {
HXLINE( 164)				_hx_tmp = true;
            			}
HXDLIN( 164)			if (_hx_tmp) {
HXLINE( 165)				goto _hx_goto_2;
            			}
HXLINE( 166)			k = ((k * 10) + (c - 48));
HXLINE( 167)			this->pos++;
            		}
            		_hx_goto_2:;
HXLINE( 169)		if (s) {
HXLINE( 170)			k = (k * -1);
            		}
HXLINE( 171)		return k;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Unserializer_obj,readDigits,return )

Float Unserializer_obj::readFloat(){
            	HX_STACKFRAME(&_hx_pos_2249f02c049a2193_174_readFloat)
HXLINE( 175)		int p1 = this->pos;
HXLINE( 176)		while(true){
HXLINE( 177)			int c = this->buf.cca(this->pos);
HXLINE( 178)			if ((c == 0)) {
HXLINE( 178)				goto _hx_goto_4;
            			}
HXLINE( 180)			bool _hx_tmp;
HXDLIN( 180)			bool _hx_tmp1;
HXDLIN( 180)			bool _hx_tmp2;
HXDLIN( 180)			if ((c >= 43)) {
HXLINE( 180)				_hx_tmp2 = (c < 58);
            			}
            			else {
HXLINE( 180)				_hx_tmp2 = false;
            			}
HXDLIN( 180)			if (!(_hx_tmp2)) {
HXLINE( 180)				_hx_tmp1 = (c == 101);
            			}
            			else {
HXLINE( 180)				_hx_tmp1 = true;
            			}
HXDLIN( 180)			if (!(_hx_tmp1)) {
HXLINE( 180)				_hx_tmp = (c == 69);
            			}
            			else {
HXLINE( 180)				_hx_tmp = true;
            			}
HXDLIN( 180)			if (_hx_tmp) {
HXLINE( 181)				this->pos++;
            			}
            			else {
HXLINE( 183)				goto _hx_goto_4;
            			}
            		}
            		_hx_goto_4:;
HXLINE( 185)		return ::Std_obj::parseFloat(this->buf.substr(p1,(this->pos - p1)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Unserializer_obj,readFloat,return )

void Unserializer_obj::unserializeObject( ::Dynamic o){
            	HX_STACKFRAME(&_hx_pos_2249f02c049a2193_188_unserializeObject)
HXLINE( 189)		while(true){
HXLINE( 190)			if ((this->pos >= this->length)) {
HXLINE( 191)				HX_STACK_DO_THROW(HX_("Invalid object",e8,6c,b7,e2));
            			}
HXLINE( 192)			if ((this->buf.cca(this->pos) == 103)) {
HXLINE( 193)				goto _hx_goto_6;
            			}
HXLINE( 194)			 ::Dynamic k = this->unserialize();
HXLINE( 195)			if (!(::Std_obj::is(k,hx::ClassOf< ::String >()))) {
HXLINE( 196)				HX_STACK_DO_THROW(HX_("Invalid object key",67,5e,4c,fb));
            			}
HXLINE( 197)			 ::Dynamic v = this->unserialize();
HXLINE( 198)			::Reflect_obj::setField(o,( (::String)(k) ),v);
            		}
            		_hx_goto_6:;
HXLINE( 200)		this->pos++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Unserializer_obj,unserializeObject,(void))

 ::Dynamic Unserializer_obj::unserializeEnum(hx::Class edecl,::String tag){
            	HX_STACKFRAME(&_hx_pos_2249f02c049a2193_203_unserializeEnum)
HXLINE( 204)		if ((this->buf.cca(this->pos++) != 58)) {
HXLINE( 205)			HX_STACK_DO_THROW(HX_("Invalid enum format",ad,eb,77,c2));
            		}
HXLINE( 206)		int nargs = this->readDigits();
HXLINE( 207)		if ((nargs == 0)) {
HXLINE( 208)			return ::Type_obj::createEnum(edecl,tag,null());
            		}
HXLINE( 209)		::cpp::VirtualArray args = ::cpp::VirtualArray_obj::__new();
HXLINE( 210)		while(true){
HXLINE( 210)			nargs = (nargs - 1);
HXDLIN( 210)			if (!(((nargs + 1) > 0))) {
HXLINE( 210)				goto _hx_goto_8;
            			}
HXLINE( 211)			args->push(this->unserialize());
            		}
            		_hx_goto_8:;
HXLINE( 212)		return ::Type_obj::createEnum(edecl,tag,args);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Unserializer_obj,unserializeEnum,return )

 ::Dynamic Unserializer_obj::unserialize(){
            	HX_GC_STACKFRAME(&_hx_pos_2249f02c049a2193_235_unserialize)
HXLINE( 236)		switch((int)(this->buf.cca(this->pos++))){
            			case (int)65: {
HXLINE( 443)				::String name = ( (::String)(this->unserialize()) );
HXLINE( 444)				hx::Class cl = this->resolver->__Field(HX_("resolveClass",ac,bd,dd,80),hx::paccDynamic)(name);
HXLINE( 445)				if (hx::IsNull( cl )) {
HXLINE( 446)					HX_STACK_DO_THROW((HX_("Class not found ",13,56,74,ed) + name));
            				}
HXLINE( 447)				return cl;
            			}
            			break;
            			case (int)66: {
HXLINE( 449)				::String name1 = ( (::String)(this->unserialize()) );
HXLINE( 450)				hx::Class e = this->resolver->__Field(HX_("resolveEnum",0d,90,51,de),hx::paccDynamic)(name1);
HXLINE( 451)				if (hx::IsNull( e )) {
HXLINE( 452)					HX_STACK_DO_THROW((HX_("Enum not found ",aa,e1,55,fd) + name1));
            				}
HXLINE( 453)				return e;
            			}
            			break;
            			case (int)67: {
HXLINE( 432)				::String name2 = ( (::String)(this->unserialize()) );
HXLINE( 433)				hx::Class cl1 = this->resolver->__Field(HX_("resolveClass",ac,bd,dd,80),hx::paccDynamic)(name2);
HXLINE( 434)				if (hx::IsNull( cl1 )) {
HXLINE( 435)					HX_STACK_DO_THROW((HX_("Class not found ",13,56,74,ed) + name2));
            				}
HXLINE( 436)				 ::Dynamic o = ::Type_obj::createEmptyInstance(cl1);
HXLINE( 437)				this->cache->push(o);
HXLINE( 438)				o->__Field(HX_("hxUnserialize",37,db,b9,86),hx::paccDynamic)(hx::ObjectPtr<OBJ_>(this));
HXLINE( 439)				if ((this->buf.cca(this->pos++) != 103)) {
HXLINE( 440)					HX_STACK_DO_THROW(HX_("Invalid custom data",30,fa,ef,08));
            				}
HXLINE( 441)				return o;
            			}
            			break;
            			case (int)77: {
HXLINE( 366)				 ::haxe::ds::ObjectMap h =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE( 367)				this->cache->push(h);
HXLINE( 368)				::String buf = this->buf;
HXLINE( 369)				while((this->buf.cca(this->pos) != 104)){
HXLINE( 370)					 ::Dynamic s = this->unserialize();
HXLINE( 371)					h->set(s,this->unserialize());
            				}
HXLINE( 373)				this->pos++;
HXLINE( 374)				return h;
            			}
            			break;
            			case (int)82: {
HXLINE( 298)				int n = this->readDigits();
HXLINE( 299)				bool _hx_tmp;
HXDLIN( 299)				if ((n >= 0)) {
HXLINE( 299)					_hx_tmp = (n >= this->scache->length);
            				}
            				else {
HXLINE( 299)					_hx_tmp = true;
            				}
HXDLIN( 299)				if (_hx_tmp) {
HXLINE( 300)					HX_STACK_DO_THROW(HX_("Invalid string reference",25,57,28,1b));
            				}
HXLINE( 301)				return this->scache->__get(n);
            			}
            			break;
            			case (int)97: {
HXLINE( 265)				::String buf1 = this->buf;
HXLINE( 266)				::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXLINE( 267)				int cachePos = this->cache->get_length();
HXLINE( 268)				this->cache->push(a);
HXLINE( 269)				while(true){
HXLINE( 270)					int c = this->buf.cca(this->pos);
HXLINE( 271)					if ((c == 104)) {
HXLINE( 272)						this->pos++;
HXLINE( 273)						goto _hx_goto_11;
            					}
HXLINE( 275)					if ((c == 117)) {
HXLINE( 276)						this->pos++;
HXLINE( 277)						int n1 = this->readDigits();
HXLINE( 278)						a->set(((a->get_length() + n1) - 1),null());
            					}
            					else {
HXLINE( 280)						a->push(this->unserialize());
            					}
            				}
            				_hx_goto_11:;
HXLINE( 283)				return (this->cache->set(cachePos,_hx_reslove_virtual_array(a)));
            			}
            			break;
            			case (int)98: {
HXLINE( 343)				 ::haxe::ds::StringMap h1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 344)				this->cache->push(h1);
HXLINE( 345)				::String buf2 = this->buf;
HXLINE( 346)				while((this->buf.cca(this->pos) != 104)){
HXLINE( 347)					::String s1 = ( (::String)(this->unserialize()) );
HXLINE( 348)					h1->set(s1,this->unserialize());
            				}
HXLINE( 350)				this->pos++;
HXLINE( 351)				return h1;
            			}
            			break;
            			case (int)99: {
HXLINE( 305)				::String name3 = ( (::String)(this->unserialize()) );
HXLINE( 306)				hx::Class cl2 = this->resolver->__Field(HX_("resolveClass",ac,bd,dd,80),hx::paccDynamic)(name3);
HXLINE( 307)				if (hx::IsNull( cl2 )) {
HXLINE( 308)					HX_STACK_DO_THROW((HX_("Class not found ",13,56,74,ed) + name3));
            				}
HXLINE( 309)				 ::Dynamic o1 = ::Type_obj::createEmptyInstance(cl2);
HXLINE( 310)				this->cache->push(o1);
HXLINE( 311)				this->unserializeObject(o1);
HXLINE( 312)				return o1;
            			}
            			break;
            			case (int)100: {
HXLINE( 248)				return this->readFloat();
            			}
            			break;
            			case (int)102: {
HXLINE( 242)				return false;
            			}
            			break;
            			case (int)105: {
HXLINE( 246)				return this->readDigits();
            			}
            			break;
            			case (int)106: {
HXLINE( 322)				::String name4 = ( (::String)(this->unserialize()) );
HXLINE( 323)				hx::Class edecl = this->resolver->__Field(HX_("resolveEnum",0d,90,51,de),hx::paccDynamic)(name4);
HXLINE( 324)				if (hx::IsNull( edecl )) {
HXLINE( 325)					HX_STACK_DO_THROW((HX_("Enum not found ",aa,e1,55,fd) + name4));
            				}
HXLINE( 326)				this->pos++;
HXLINE( 327)				int index = this->readDigits();
HXLINE( 328)				::String tag = ::Type_obj::getEnumConstructs(edecl)->__get(index);
HXLINE( 329)				if (hx::IsNull( tag )) {
HXLINE( 330)					HX_STACK_DO_THROW((((HX_("Unknown enum index ",57,ca,63,30) + name4) + HX_("@",40,00,00,00)) + index));
            				}
HXLINE( 331)				 ::Dynamic e1 = this->unserializeEnum(edecl,tag);
HXLINE( 332)				this->cache->push(e1);
HXLINE( 333)				return e1;
            			}
            			break;
            			case (int)107: {
HXLINE( 259)				return ::Math_obj::NaN;
            			}
            			break;
            			case (int)108: {
HXLINE( 335)				 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 336)				this->cache->push(l);
HXLINE( 337)				::String buf3 = this->buf;
HXLINE( 338)				while((this->buf.cca(this->pos) != 104)){
HXLINE( 339)					l->add(this->unserialize());
            				}
HXLINE( 340)				this->pos++;
HXLINE( 341)				return l;
            			}
            			break;
            			case (int)109: {
HXLINE( 261)				return ::Math_obj::NEGATIVE_INFINITY;
            			}
            			break;
            			case (int)110: {
HXLINE( 238)				return null();
            			}
            			break;
            			case (int)111: {
HXLINE( 288)				 ::Dynamic o2 =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 289)				this->cache->push(o2);
HXLINE( 290)				this->unserializeObject(o2);
HXLINE( 291)				return o2;
            			}
            			break;
            			case (int)112: {
HXLINE( 263)				return ::Math_obj::POSITIVE_INFINITY;
            			}
            			break;
            			case (int)113: {
HXLINE( 353)				 ::haxe::ds::IntMap h2 =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 354)				this->cache->push(h2);
HXLINE( 355)				::String buf4 = this->buf;
HXLINE( 356)				int c1 = this->buf.cca(this->pos++);
HXLINE( 357)				while((c1 == 58)){
HXLINE( 358)					int i = this->readDigits();
HXLINE( 359)					h2->set(i,this->unserialize());
HXLINE( 360)					c1 = this->buf.cca(this->pos++);
            				}
HXLINE( 362)				if ((c1 != 104)) {
HXLINE( 363)					HX_STACK_DO_THROW(HX_("Invalid IntMap format",e1,c2,b1,71));
            				}
HXLINE( 364)				return h2;
            			}
            			break;
            			case (int)114: {
HXLINE( 293)				int n2 = this->readDigits();
HXLINE( 294)				bool _hx_tmp1;
HXDLIN( 294)				if ((n2 >= 0)) {
HXLINE( 294)					_hx_tmp1 = (n2 >= this->cache->get_length());
            				}
            				else {
HXLINE( 294)					_hx_tmp1 = true;
            				}
HXDLIN( 294)				if (_hx_tmp1) {
HXLINE( 295)					HX_STACK_DO_THROW(HX_("Invalid reference",42,99,8f,7d));
            				}
HXLINE( 296)				return this->cache->__get(n2);
            			}
            			break;
            			case (int)115: {
HXLINE( 391)				int len = this->readDigits();
HXLINE( 392)				::String buf5 = this->buf;
HXLINE( 393)				bool _hx_tmp2;
HXDLIN( 393)				if ((this->buf.cca(this->pos++) == 58)) {
HXLINE( 393)					_hx_tmp2 = ((this->length - this->pos) < len);
            				}
            				else {
HXLINE( 393)					_hx_tmp2 = true;
            				}
HXDLIN( 393)				if (_hx_tmp2) {
HXLINE( 394)					HX_STACK_DO_THROW(HX_("Invalid bytes length",e4,8a,d3,50));
            				}
HXLINE( 398)				::Array< int > codes = ::haxe::Unserializer_obj::CODES;
HXLINE( 399)				if (hx::IsNull( codes )) {
HXLINE( 400)					codes = ::haxe::Unserializer_obj::initCodes();
HXLINE( 401)					::haxe::Unserializer_obj::CODES = codes;
            				}
HXLINE( 403)				int i1 = this->pos;
HXLINE( 404)				int rest = (len & 3);
HXLINE( 405)				int size;
HXDLIN( 405)				if ((rest >= 2)) {
HXLINE( 405)					size = (rest - 1);
            				}
            				else {
HXLINE( 405)					size = 0;
            				}
HXDLIN( 405)				int size1 = (((len >> 2) * 3) + size);
HXLINE( 406)				int max = (i1 + (len - rest));
HXLINE( 407)				 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc(size1);
HXLINE( 408)				int bpos = 0;
HXLINE( 409)				while((i1 < max)){
HXLINE( 410)					i1 = (i1 + 1);
HXDLIN( 410)					int c11 = codes->__get(buf5.cca((i1 - 1)));
HXLINE( 411)					i1 = (i1 + 1);
HXDLIN( 411)					int c2 = codes->__get(buf5.cca((i1 - 1)));
HXLINE( 412)					{
HXLINE( 412)						bpos = (bpos + 1);
HXDLIN( 412)						bytes->b[(bpos - 1)] = ( (unsigned char)(((c11 << 2) | (c2 >> 4))) );
            					}
HXLINE( 413)					i1 = (i1 + 1);
HXDLIN( 413)					int c3 = codes->__get(buf5.cca((i1 - 1)));
HXLINE( 414)					{
HXLINE( 414)						bpos = (bpos + 1);
HXDLIN( 414)						bytes->b[(bpos - 1)] = ( (unsigned char)(((c2 << 4) | (c3 >> 2))) );
            					}
HXLINE( 415)					i1 = (i1 + 1);
HXDLIN( 415)					int c4 = codes->__get(buf5.cca((i1 - 1)));
HXLINE( 416)					{
HXLINE( 416)						bpos = (bpos + 1);
HXDLIN( 416)						bytes->b[(bpos - 1)] = ( (unsigned char)(((c3 << 6) | c4)) );
            					}
            				}
HXLINE( 418)				if ((rest >= 2)) {
HXLINE( 419)					i1 = (i1 + 1);
HXDLIN( 419)					int c12 = codes->__get(buf5.cca((i1 - 1)));
HXLINE( 420)					i1 = (i1 + 1);
HXDLIN( 420)					int c21 = codes->__get(buf5.cca((i1 - 1)));
HXLINE( 421)					{
HXLINE( 421)						bpos = (bpos + 1);
HXDLIN( 421)						bytes->b[(bpos - 1)] = ( (unsigned char)(((c12 << 2) | (c21 >> 4))) );
            					}
HXLINE( 422)					if ((rest == 3)) {
HXLINE( 423)						i1 = (i1 + 1);
HXDLIN( 423)						int c31 = codes->__get(buf5.cca((i1 - 1)));
HXLINE( 424)						{
HXLINE( 424)							bpos = (bpos + 1);
HXDLIN( 424)							bytes->b[(bpos - 1)] = ( (unsigned char)(((c21 << 4) | (c31 >> 2))) );
            						}
            					}
            				}
HXLINE( 428)				 ::haxe::Unserializer _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 428)				_hx_tmp3->pos = (_hx_tmp3->pos + len);
HXLINE( 429)				this->cache->push(bytes);
HXLINE( 430)				return bytes;
            			}
            			break;
            			case (int)116: {
HXLINE( 240)				return true;
            			}
            			break;
            			case (int)118: {
HXLINE( 376)				 ::Date d;
HXLINE( 377)				bool _hx_tmp4;
HXDLIN( 377)				bool _hx_tmp5;
HXDLIN( 377)				bool _hx_tmp6;
HXDLIN( 377)				bool _hx_tmp7;
HXDLIN( 377)				bool _hx_tmp8;
HXDLIN( 377)				bool _hx_tmp9;
HXDLIN( 377)				bool _hx_tmp10;
HXDLIN( 377)				bool _hx_tmp11;
HXDLIN( 377)				if ((this->buf.cca(this->pos) >= 48)) {
HXLINE( 377)					_hx_tmp11 = (this->buf.cca(this->pos) <= 57);
            				}
            				else {
HXLINE( 377)					_hx_tmp11 = false;
            				}
HXDLIN( 377)				if (_hx_tmp11) {
HXLINE( 377)					_hx_tmp10 = (this->buf.cca((this->pos + 1)) >= 48);
            				}
            				else {
HXLINE( 377)					_hx_tmp10 = false;
            				}
HXDLIN( 377)				if (_hx_tmp10) {
HXLINE( 377)					_hx_tmp9 = (this->buf.cca((this->pos + 1)) <= 57);
            				}
            				else {
HXLINE( 377)					_hx_tmp9 = false;
            				}
HXDLIN( 377)				if (_hx_tmp9) {
HXLINE( 377)					_hx_tmp8 = (this->buf.cca((this->pos + 2)) >= 48);
            				}
            				else {
HXLINE( 377)					_hx_tmp8 = false;
            				}
HXDLIN( 377)				if (_hx_tmp8) {
HXLINE( 377)					_hx_tmp7 = (this->buf.cca((this->pos + 2)) <= 57);
            				}
            				else {
HXLINE( 377)					_hx_tmp7 = false;
            				}
HXDLIN( 377)				if (_hx_tmp7) {
HXLINE( 377)					_hx_tmp6 = (this->buf.cca((this->pos + 3)) >= 48);
            				}
            				else {
HXLINE( 377)					_hx_tmp6 = false;
            				}
HXDLIN( 377)				if (_hx_tmp6) {
HXLINE( 377)					_hx_tmp5 = (this->buf.cca((this->pos + 3)) <= 57);
            				}
            				else {
HXLINE( 377)					_hx_tmp5 = false;
            				}
HXDLIN( 377)				if (_hx_tmp5) {
HXLINE( 377)					_hx_tmp4 = (this->buf.cca((this->pos + 4)) == 45);
            				}
            				else {
HXLINE( 377)					_hx_tmp4 = false;
            				}
HXDLIN( 377)				if (_hx_tmp4) {
HXLINE( 384)					d = ::Date_obj::fromString(this->buf.substr(this->pos,19));
HXLINE( 385)					 ::haxe::Unserializer _hx_tmp12 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 385)					_hx_tmp12->pos = (_hx_tmp12->pos + 19);
            				}
            				else {
HXLINE( 387)					d = ::Date_obj::fromTime(this->readFloat());
            				}
HXLINE( 388)				this->cache->push(d);
HXLINE( 389)				return d;
            			}
            			break;
            			case (int)119: {
HXLINE( 314)				::String name5 = ( (::String)(this->unserialize()) );
HXLINE( 315)				hx::Class edecl1 = this->resolver->__Field(HX_("resolveEnum",0d,90,51,de),hx::paccDynamic)(name5);
HXLINE( 316)				if (hx::IsNull( edecl1 )) {
HXLINE( 317)					HX_STACK_DO_THROW((HX_("Enum not found ",aa,e1,55,fd) + name5));
            				}
HXLINE( 318)				 ::Dynamic e2 = this->unserializeEnum(edecl1,( (::String)(this->unserialize()) ));
HXLINE( 319)				this->cache->push(e2);
HXLINE( 320)				return e2;
            			}
            			break;
            			case (int)120: {
HXLINE( 303)				HX_STACK_DO_THROW(this->unserialize());
            			}
            			break;
            			case (int)121: {
HXLINE( 250)				int len1 = this->readDigits();
HXLINE( 251)				bool _hx_tmp13;
HXDLIN( 251)				if ((this->buf.cca(this->pos++) == 58)) {
HXLINE( 251)					_hx_tmp13 = ((this->length - this->pos) < len1);
            				}
            				else {
HXLINE( 251)					_hx_tmp13 = true;
            				}
HXDLIN( 251)				if (_hx_tmp13) {
HXLINE( 252)					HX_STACK_DO_THROW(HX_("Invalid string length",4c,89,20,c9));
            				}
HXLINE( 253)				::String s2 = this->buf.substr(this->pos,len1);
HXLINE( 254)				 ::haxe::Unserializer _hx_tmp14 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 254)				_hx_tmp14->pos = (_hx_tmp14->pos + len1);
HXLINE( 255)				s2 = ::StringTools_obj::urlDecode(s2);
HXLINE( 256)				this->scache->push(s2);
HXLINE( 257)				return s2;
            			}
            			break;
            			case (int)122: {
HXLINE( 244)				return 0;
            			}
            			break;
            			default:{
            			}
            		}
HXLINE( 456)		this->pos--;
HXLINE( 457)		::String _hx_tmp15 = ((HX_("Invalid char ",81,66,ec,29) + this->buf.charAt(this->pos)) + HX_(" at position ",0a,c2,01,e0));
HXDLIN( 457)		HX_STACK_DO_THROW((_hx_tmp15 + this->pos));
HXDLIN( 457)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Unserializer_obj,unserialize,return )

 ::Dynamic Unserializer_obj::DEFAULT_RESOLVER;

::String Unserializer_obj::BASE64;

::Array< int > Unserializer_obj::CODES;

::Array< int > Unserializer_obj::initCodes(){
            	HX_STACKFRAME(&_hx_pos_2249f02c049a2193_72_initCodes)
HXLINE(  73)		::Array< int > codes = ::Array_obj< int >::__new();
HXLINE(  79)		{
HXLINE(  79)			int _g = 0;
HXDLIN(  79)			int _g1 = ::haxe::Unserializer_obj::BASE64.length;
HXDLIN(  79)			while((_g < _g1)){
HXLINE(  79)				_g = (_g + 1);
HXDLIN(  79)				int i = (_g - 1);
HXLINE(  80)				codes[::haxe::Unserializer_obj::BASE64.cca(i)] = i;
            			}
            		}
HXLINE(  81)		return codes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Unserializer_obj,initCodes,return )

 ::Dynamic Unserializer_obj::run(::String v){
            	HX_GC_STACKFRAME(&_hx_pos_2249f02c049a2193_468_run)
HXDLIN( 468)		return  ::haxe::Unserializer_obj::__alloc( HX_CTX ,v)->unserialize();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Unserializer_obj,run,return )


hx::ObjectPtr< Unserializer_obj > Unserializer_obj::__new(::String buf) {
	hx::ObjectPtr< Unserializer_obj > __this = new Unserializer_obj();
	__this->__construct(buf);
	return __this;
}

hx::ObjectPtr< Unserializer_obj > Unserializer_obj::__alloc(hx::Ctx *_hx_ctx,::String buf) {
	Unserializer_obj *__this = (Unserializer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Unserializer_obj), true, "haxe.Unserializer"));
	*(void **)__this = Unserializer_obj::_hx_vtable;
	__this->__construct(buf);
	return __this;
}

Unserializer_obj::Unserializer_obj()
{
}

void Unserializer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Unserializer);
	HX_MARK_MEMBER_NAME(buf,"buf");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(cache,"cache");
	HX_MARK_MEMBER_NAME(scache,"scache");
	HX_MARK_MEMBER_NAME(resolver,"resolver");
	HX_MARK_END_CLASS();
}

void Unserializer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buf,"buf");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(cache,"cache");
	HX_VISIT_MEMBER_NAME(scache,"scache");
	HX_VISIT_MEMBER_NAME(resolver,"resolver");
}

hx::Val Unserializer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { return hx::Val( buf ); }
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { return hx::Val( cache ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"scache") ) { return hx::Val( scache ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"resolver") ) { return hx::Val( resolver ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readFloat") ) { return hx::Val( readFloat_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"readDigits") ) { return hx::Val( readDigits_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setResolver") ) { return hx::Val( setResolver_dyn() ); }
		if (HX_FIELD_EQ(inName,"unserialize") ) { return hx::Val( unserialize_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unserializeEnum") ) { return hx::Val( unserializeEnum_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"unserializeObject") ) { return hx::Val( unserializeObject_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Unserializer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { outValue = run_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"CODES") ) { outValue = ( CODES ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"BASE64") ) { outValue = ( BASE64 ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"initCodes") ) { outValue = initCodes_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"DEFAULT_RESOLVER") ) { outValue = ( DEFAULT_RESOLVER ); return true; }
	}
	return false;
}

hx::Val Unserializer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { buf=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scache") ) { scache=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"resolver") ) { resolver=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Unserializer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"CODES") ) { CODES=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"BASE64") ) { BASE64=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"DEFAULT_RESOLVER") ) { DEFAULT_RESOLVER=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void Unserializer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("buf",33,c3,4a,00));
	outFields->push(HX_("pos",94,5d,55,00));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("cache",42,9a,14,41));
	outFields->push(HX_("scache",ef,18,1f,3c));
	outFields->push(HX_("resolver",06,7c,b0,0c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Unserializer_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Unserializer_obj,buf),HX_("buf",33,c3,4a,00)},
	{hx::fsInt,(int)offsetof(Unserializer_obj,pos),HX_("pos",94,5d,55,00)},
	{hx::fsInt,(int)offsetof(Unserializer_obj,length),HX_("length",e6,94,07,9f)},
	{hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(Unserializer_obj,cache),HX_("cache",42,9a,14,41)},
	{hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Unserializer_obj,scache),HX_("scache",ef,18,1f,3c)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Unserializer_obj,resolver),HX_("resolver",06,7c,b0,0c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Unserializer_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(void *) &Unserializer_obj::DEFAULT_RESOLVER,HX_("DEFAULT_RESOLVER",a4,3a,b4,de)},
	{hx::fsString,(void *) &Unserializer_obj::BASE64,HX_("BASE64",8f,c5,aa,07)},
	{hx::fsObject /* ::Array< int > */ ,(void *) &Unserializer_obj::CODES,HX_("CODES",86,8e,44,c8)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Unserializer_obj_sMemberFields[] = {
	HX_("buf",33,c3,4a,00),
	HX_("pos",94,5d,55,00),
	HX_("length",e6,94,07,9f),
	HX_("cache",42,9a,14,41),
	HX_("scache",ef,18,1f,3c),
	HX_("resolver",06,7c,b0,0c),
	HX_("setResolver",c8,45,11,3d),
	HX_("readDigits",1c,ee,a3,ae),
	HX_("readFloat",66,12,7e,d3),
	HX_("unserializeObject",86,9e,52,9f),
	HX_("unserializeEnum",08,3b,10,7f),
	HX_("unserialize",67,e4,98,7a),
	::String(null()) };

static void Unserializer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Unserializer_obj::DEFAULT_RESOLVER,"DEFAULT_RESOLVER");
	HX_MARK_MEMBER_NAME(Unserializer_obj::BASE64,"BASE64");
	HX_MARK_MEMBER_NAME(Unserializer_obj::CODES,"CODES");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Unserializer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Unserializer_obj::DEFAULT_RESOLVER,"DEFAULT_RESOLVER");
	HX_VISIT_MEMBER_NAME(Unserializer_obj::BASE64,"BASE64");
	HX_VISIT_MEMBER_NAME(Unserializer_obj::CODES,"CODES");
};

#endif

hx::Class Unserializer_obj::__mClass;

static ::String Unserializer_obj_sStaticFields[] = {
	HX_("DEFAULT_RESOLVER",a4,3a,b4,de),
	HX_("BASE64",8f,c5,aa,07),
	HX_("CODES",86,8e,44,c8),
	HX_("initCodes",76,71,e8,65),
	HX_("run",4b,e7,56,00),
	::String(null())
};

void Unserializer_obj::__register()
{
	Unserializer_obj _hx_dummy;
	Unserializer_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.Unserializer",93,7b,79,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Unserializer_obj::__GetStatic;
	__mClass->mSetStaticField = &Unserializer_obj::__SetStatic;
	__mClass->mMarkFunc = Unserializer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Unserializer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Unserializer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Unserializer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Unserializer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Unserializer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Unserializer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Unserializer_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_2249f02c049a2193_65_boot)
HXDLIN(  65)		DEFAULT_RESOLVER =  ::haxe::_Unserializer::DefaultResolver_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_2249f02c049a2193_67_boot)
HXDLIN(  67)		BASE64 = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:",d4,3b,03,7f);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2249f02c049a2193_70_boot)
HXDLIN(  70)		CODES = null();
            	}
}

} // end namespace haxe
