// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_102_new,"openfl.geom.Matrix3D","new",0xe0591fd8,"openfl.geom.Matrix3D.new","openfl/geom/Matrix3D.hx",102,0x3acce238)
static const Float _hx_array_data_3d2e93e6_1[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_120_append,"openfl.geom.Matrix3D","append",0x481b8d62,"openfl.geom.Matrix3D.append","openfl/geom/Matrix3D.hx",120,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_197_appendRotation,"openfl.geom.Matrix3D","appendRotation",0xf492b8c0,"openfl.geom.Matrix3D.appendRotation","openfl/geom/Matrix3D.hx",197,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_274_appendScale,"openfl.geom.Matrix3D","appendScale",0x02daedc8,"openfl.geom.Matrix3D.appendScale","openfl/geom/Matrix3D.hx",274,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_303_appendTranslation,"openfl.geom.Matrix3D","appendTranslation",0x514252af,"openfl.geom.Matrix3D.appendTranslation","openfl/geom/Matrix3D.hx",303,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_317_clone,"openfl.geom.Matrix3D","clone",0x2ff530d5,"openfl.geom.Matrix3D.clone","openfl/geom/Matrix3D.hx",317,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_328_copyColumnFrom,"openfl.geom.Matrix3D","copyColumnFrom",0x63600afd,"openfl.geom.Matrix3D.copyColumnFrom","openfl/geom/Matrix3D.hx",328,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_366_copyColumnTo,"openfl.geom.Matrix3D","copyColumnTo",0x8c37304e,"openfl.geom.Matrix3D.copyColumnTo","openfl/geom/Matrix3D.hx",366,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_404_copyFrom,"openfl.geom.Matrix3D","copyFrom",0xe290a947,"openfl.geom.Matrix3D.copyFrom","openfl/geom/Matrix3D.hx",404,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_417_copyRawDataFrom,"openfl.geom.Matrix3D","copyRawDataFrom",0x9938207f,"openfl.geom.Matrix3D.copyRawDataFrom","openfl/geom/Matrix3D.hx",417,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_446_copyRawDataTo,"openfl.geom.Matrix3D","copyRawDataTo",0xac978150,"openfl.geom.Matrix3D.copyRawDataTo","openfl/geom/Matrix3D.hx",446,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_471_copyRowFrom,"openfl.geom.Matrix3D","copyRowFrom",0x3d20cce7,"openfl.geom.Matrix3D.copyRowFrom","openfl/geom/Matrix3D.hx",471,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_509_copyRowTo,"openfl.geom.Matrix3D","copyRowTo",0x42dcc3b8,"openfl.geom.Matrix3D.copyRowTo","openfl/geom/Matrix3D.hx",509,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_544_copyToMatrix3D,"openfl.geom.Matrix3D","copyToMatrix3D",0x2cc9916a,"openfl.geom.Matrix3D.copyToMatrix3D","openfl/geom/Matrix3D.hx",544,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_614_decompose,"openfl.geom.Matrix3D","decompose",0x4a21fd29,"openfl.geom.Matrix3D.decompose","openfl/geom/Matrix3D.hx",614,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_749_deltaTransformVector,"openfl.geom.Matrix3D","deltaTransformVector",0x0285cbbf,"openfl.geom.Matrix3D.deltaTransformVector","openfl/geom/Matrix3D.hx",749,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_773_identity,"openfl.geom.Matrix3D","identity",0xd35ee2c6,"openfl.geom.Matrix3D.identity","openfl/geom/Matrix3D.hx",773,0x3acce238)
static const Float _hx_array_data_3d2e93e6_21[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_855_interpolateTo,"openfl.geom.Matrix3D","interpolateTo",0x74c2e614,"openfl.geom.Matrix3D.interpolateTo","openfl/geom/Matrix3D.hx",855,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_888_invert,"openfl.geom.Matrix3D","invert",0x5820929e,"openfl.geom.Matrix3D.invert","openfl/geom/Matrix3D.hx",888,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_968_pointAt,"openfl.geom.Matrix3D","pointAt",0xd7900cdb,"openfl.geom.Matrix3D.pointAt","openfl/geom/Matrix3D.hx",968,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1145_prepend,"openfl.geom.Matrix3D","prepend",0xbe4f0286,"openfl.geom.Matrix3D.prepend","openfl/geom/Matrix3D.hx",1145,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1216_prependRotation,"openfl.geom.Matrix3D","prependRotation",0x54b5f1e4,"openfl.geom.Matrix3D.prependRotation","openfl/geom/Matrix3D.hx",1216,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1294_prependScale,"openfl.geom.Matrix3D","prependScale",0x59d85624,"openfl.geom.Matrix3D.prependScale","openfl/geom/Matrix3D.hx",1294,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1329_prependTranslation,"openfl.geom.Matrix3D","prependTranslation",0x2df4680b,"openfl.geom.Matrix3D.prependTranslation","openfl/geom/Matrix3D.hx",1329,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1373_recompose,"openfl.geom.Matrix3D","recompose",0xd355bb37,"openfl.geom.Matrix3D.recompose","openfl/geom/Matrix3D.hx",1373,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1481_transformVector,"openfl.geom.Matrix3D","transformVector",0x3f2dcec7,"openfl.geom.Matrix3D.transformVector","openfl/geom/Matrix3D.hx",1481,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1506_transformVectors,"openfl.geom.Matrix3D","transformVectors",0x08e71fcc,"openfl.geom.Matrix3D.transformVectors","openfl/geom/Matrix3D.hx",1506,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1540_transpose,"openfl.geom.Matrix3D","transpose",0x1ba989f1,"openfl.geom.Matrix3D.transpose","openfl/geom/Matrix3D.hx",1540,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1589_get_determinant,"openfl.geom.Matrix3D","get_determinant",0x5f71b8a4,"openfl.geom.Matrix3D.get_determinant","openfl/geom/Matrix3D.hx",1589,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1599_get_position,"openfl.geom.Matrix3D","get_position",0x1555563a,"openfl.geom.Matrix3D.get_position","openfl/geom/Matrix3D.hx",1599,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1603_set_position,"openfl.geom.Matrix3D","set_position",0x2a4e79ae,"openfl.geom.Matrix3D.set_position","openfl/geom/Matrix3D.hx",1603,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_549_create2D,"openfl.geom.Matrix3D","create2D",0x4623e756,"openfl.geom.Matrix3D.create2D","openfl/geom/Matrix3D.hx",549,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_560_createABCD,"openfl.geom.Matrix3D","createABCD",0x0e55d246,"openfl.geom.Matrix3D.createABCD","openfl/geom/Matrix3D.hx",560,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_565_createOrtho,"openfl.geom.Matrix3D","createOrtho",0xac3dd614,"openfl.geom.Matrix3D.createOrtho","openfl/geom/Matrix3D.hx",565,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_810_interpolate,"openfl.geom.Matrix3D","interpolate",0x6cc85c39,"openfl.geom.Matrix3D.interpolate","openfl/geom/Matrix3D.hx",810,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_1557___getAxisRotation,"openfl.geom.Matrix3D","__getAxisRotation",0xf649170d,"openfl.geom.Matrix3D.__getAxisRotation","openfl/geom/Matrix3D.hx",1557,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_54_boot,"openfl.geom.Matrix3D","boot",0x65bbbdba,"openfl.geom.Matrix3D.boot","openfl/geom/Matrix3D.hx",54,0x3acce238)
namespace openfl{
namespace geom{

void Matrix3D_obj::__construct( ::openfl::_Vector::FloatVector v){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_102_new)
HXDLIN( 102)		bool _hx_tmp;
HXDLIN( 102)		if (hx::IsNotNull( v )) {
HXDLIN( 102)			_hx_tmp = (v->get_length() == 16);
            		}
            		else {
HXDLIN( 102)			_hx_tmp = false;
            		}
HXDLIN( 102)		if (_hx_tmp) {
HXLINE( 104)			this->rawData = ( ( ::openfl::_Vector::FloatVector)(v->concat(null())) );
            		}
            		else {
HXLINE( 108)			int length = null();
HXDLIN( 108)			bool fixed = null();
HXDLIN( 108)			this->rawData =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,::Array_obj< Float >::fromData( _hx_array_data_3d2e93e6_1,16),true);
            		}
            	}

Dynamic Matrix3D_obj::__CreateEmpty() { return new Matrix3D_obj; }

void *Matrix3D_obj::_hx_vtable = 0;

Dynamic Matrix3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix3D_obj > _hx_result = new Matrix3D_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Matrix3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x34742c1e;
}

void Matrix3D_obj::append( ::openfl::geom::Matrix3D lhs){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_120_append)
HXLINE( 121)		Float m111 = this->rawData->get(0);
HXDLIN( 121)		Float m121 = this->rawData->get(4);
HXDLIN( 121)		Float m131 = this->rawData->get(8);
HXDLIN( 121)		Float m141 = this->rawData->get(12);
HXDLIN( 121)		Float m112 = this->rawData->get(1);
HXDLIN( 121)		Float m122 = this->rawData->get(5);
HXDLIN( 121)		Float m132 = this->rawData->get(9);
HXDLIN( 121)		Float m142 = this->rawData->get(13);
HXDLIN( 121)		Float m113 = this->rawData->get(2);
HXDLIN( 121)		Float m123 = this->rawData->get(6);
HXDLIN( 121)		Float m133 = this->rawData->get(10);
HXDLIN( 121)		Float m143 = this->rawData->get(14);
HXDLIN( 121)		Float m114 = this->rawData->get(3);
HXDLIN( 121)		Float m124 = this->rawData->get(7);
HXDLIN( 121)		Float m134 = this->rawData->get(11);
HXDLIN( 121)		Float m144 = this->rawData->get(15);
HXDLIN( 121)		Float m211 = lhs->rawData->get(0);
HXDLIN( 121)		Float m221 = lhs->rawData->get(4);
HXDLIN( 121)		Float m231 = lhs->rawData->get(8);
HXDLIN( 121)		Float m241 = lhs->rawData->get(12);
HXDLIN( 121)		Float m212 = lhs->rawData->get(1);
HXDLIN( 121)		Float m222 = lhs->rawData->get(5);
HXDLIN( 121)		Float m232 = lhs->rawData->get(9);
HXDLIN( 121)		Float m242 = lhs->rawData->get(13);
HXDLIN( 121)		Float m213 = lhs->rawData->get(2);
HXDLIN( 121)		Float m223 = lhs->rawData->get(6);
HXDLIN( 121)		Float m233 = lhs->rawData->get(10);
HXDLIN( 121)		Float m243 = lhs->rawData->get(14);
HXDLIN( 121)		Float m214 = lhs->rawData->get(3);
HXDLIN( 121)		Float m224 = lhs->rawData->get(7);
HXDLIN( 121)		Float m234 = lhs->rawData->get(11);
HXDLIN( 121)		Float m244 = lhs->rawData->get(15);
HXLINE( 124)		this->rawData->set(0,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
HXLINE( 125)		this->rawData->set(1,((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
HXLINE( 126)		this->rawData->set(2,((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
HXLINE( 127)		this->rawData->set(3,((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
HXLINE( 129)		this->rawData->set(4,((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
HXLINE( 130)		this->rawData->set(5,((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
HXLINE( 131)		this->rawData->set(6,((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
HXLINE( 132)		this->rawData->set(7,((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
HXLINE( 134)		this->rawData->set(8,((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
HXLINE( 135)		this->rawData->set(9,((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
HXLINE( 136)		this->rawData->set(10,((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
HXLINE( 137)		this->rawData->set(11,((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
HXLINE( 139)		this->rawData->set(12,((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
HXLINE( 140)		this->rawData->set(13,((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
HXLINE( 141)		this->rawData->set(14,((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
HXLINE( 142)		this->rawData->set(15,((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,append,(void))

void Matrix3D_obj::appendRotation(Float degrees, ::openfl::geom::Vector3D axis, ::openfl::geom::Vector3D pivotPoint){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_197_appendRotation)
HXLINE( 198)		Float tz = ( (Float)(0) );
HXDLIN( 198)		Float ty = tz;
HXDLIN( 198)		Float tx = ty;
HXLINE( 201)		if (hx::IsNotNull( pivotPoint )) {
HXLINE( 203)			tx = pivotPoint->x;
HXLINE( 204)			ty = pivotPoint->y;
HXLINE( 205)			tz = pivotPoint->z;
            		}
HXLINE( 207)		Float radian = ((degrees * ::Math_obj::PI) / ( (Float)(180) ));
HXLINE( 208)		Float cos = ::Math_obj::cos(radian);
HXLINE( 209)		Float sin = ::Math_obj::sin(radian);
HXLINE( 210)		Float x = axis->x;
HXLINE( 211)		Float y = axis->y;
HXLINE( 212)		Float z = axis->z;
HXLINE( 213)		Float x2 = (x * x);
HXLINE( 214)		Float y2 = (y * y);
HXLINE( 215)		Float z2 = (z * z);
HXLINE( 216)		Float ls = ((x2 + y2) + z2);
HXLINE( 217)		if ((ls != 0)) {
HXLINE( 219)			Float l = ::Math_obj::sqrt(ls);
HXLINE( 220)			x = (x / l);
HXLINE( 221)			y = (y / l);
HXLINE( 222)			z = (z / l);
HXLINE( 223)			x2 = (x2 / ls);
HXLINE( 224)			y2 = (y2 / ls);
HXLINE( 225)			z2 = (z2 / ls);
            		}
HXLINE( 227)		Float ccos = (( (Float)(1) ) - cos);
HXLINE( 228)		 ::openfl::geom::Matrix3D m =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 229)		 ::openfl::_Vector::FloatVector d = m->rawData;
HXLINE( 230)		d->set(0,(x2 + ((y2 + z2) * cos)));
HXLINE( 231)		d->set(1,(((x * y) * ccos) + (z * sin)));
HXLINE( 232)		d->set(2,(((x * z) * ccos) - (y * sin)));
HXLINE( 233)		d->set(4,(((x * y) * ccos) - (z * sin)));
HXLINE( 234)		d->set(5,(y2 + ((x2 + z2) * cos)));
HXLINE( 235)		d->set(6,(((y * z) * ccos) + (x * sin)));
HXLINE( 236)		d->set(8,(((x * z) * ccos) + (y * sin)));
HXLINE( 237)		d->set(9,(((y * z) * ccos) - (x * sin)));
HXLINE( 238)		d->set(10,(z2 + ((x2 + y2) * cos)));
HXLINE( 239)		d->set(12,((((tx * (y2 + z2)) - (x * ((ty * y) + (tz * z)))) * ccos) + (((ty * z) - (tz * y)) * sin)));
HXLINE( 240)		d->set(13,((((ty * (x2 + z2)) - (y * ((tx * x) + (tz * z)))) * ccos) + (((tz * x) - (tx * z)) * sin)));
HXLINE( 241)		d->set(14,((((tz * (x2 + y2)) - (z * ((tx * x) + (ty * y)))) * ccos) + (((tx * y) - (ty * x)) * sin)));
HXLINE( 242)		this->append(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendRotation,(void))

void Matrix3D_obj::appendScale(Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_274_appendScale)
HXDLIN( 274)		int length = null();
HXDLIN( 274)		bool fixed = null();
HXDLIN( 274)		this->append( ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0)),true)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendScale,(void))

void Matrix3D_obj::appendTranslation(Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_303_appendTranslation)
HXLINE( 304)		{
HXLINE( 304)			 ::openfl::_Vector::FloatVector _g = this->rawData;
HXDLIN( 304)			_g->set(12,(_g->get(12) + x));
            		}
HXLINE( 305)		{
HXLINE( 305)			 ::openfl::_Vector::FloatVector _g1 = this->rawData;
HXDLIN( 305)			_g1->set(13,(_g1->get(13) + y));
            		}
HXLINE( 306)		{
HXLINE( 306)			 ::openfl::_Vector::FloatVector _g2 = this->rawData;
HXDLIN( 306)			_g2->set(14,(_g2->get(14) + z));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendTranslation,(void))

 ::openfl::geom::Matrix3D Matrix3D_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_317_clone)
HXDLIN( 317)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,( ( ::openfl::_Vector::FloatVector)(this->rawData->copy()) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,clone,return )

void Matrix3D_obj::copyColumnFrom(int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_328_copyColumnFrom)
HXDLIN( 328)		switch((int)(column)){
            			case (int)0: {
HXLINE( 331)				this->rawData->set(0,vector3D->x);
HXLINE( 332)				this->rawData->set(1,vector3D->y);
HXLINE( 333)				this->rawData->set(2,vector3D->z);
HXLINE( 334)				this->rawData->set(3,vector3D->w);
            			}
            			break;
            			case (int)1: {
HXLINE( 337)				this->rawData->set(4,vector3D->x);
HXLINE( 338)				this->rawData->set(5,vector3D->y);
HXLINE( 339)				this->rawData->set(6,vector3D->z);
HXLINE( 340)				this->rawData->set(7,vector3D->w);
            			}
            			break;
            			case (int)2: {
HXLINE( 343)				this->rawData->set(8,vector3D->x);
HXLINE( 344)				this->rawData->set(9,vector3D->y);
HXLINE( 345)				this->rawData->set(10,vector3D->z);
HXLINE( 346)				this->rawData->set(11,vector3D->w);
            			}
            			break;
            			case (int)3: {
HXLINE( 349)				this->rawData->set(12,vector3D->x);
HXLINE( 350)				this->rawData->set(13,vector3D->y);
HXLINE( 351)				this->rawData->set(14,vector3D->z);
HXLINE( 352)				this->rawData->set(15,vector3D->w);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyColumnFrom,(void))

void Matrix3D_obj::copyColumnTo(int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_366_copyColumnTo)
HXDLIN( 366)		switch((int)(column)){
            			case (int)0: {
HXLINE( 369)				vector3D->x = this->rawData->get(0);
HXLINE( 370)				vector3D->y = this->rawData->get(1);
HXLINE( 371)				vector3D->z = this->rawData->get(2);
HXLINE( 372)				vector3D->w = this->rawData->get(3);
            			}
            			break;
            			case (int)1: {
HXLINE( 375)				vector3D->x = this->rawData->get(4);
HXLINE( 376)				vector3D->y = this->rawData->get(5);
HXLINE( 377)				vector3D->z = this->rawData->get(6);
HXLINE( 378)				vector3D->w = this->rawData->get(7);
            			}
            			break;
            			case (int)2: {
HXLINE( 381)				vector3D->x = this->rawData->get(8);
HXLINE( 382)				vector3D->y = this->rawData->get(9);
HXLINE( 383)				vector3D->z = this->rawData->get(10);
HXLINE( 384)				vector3D->w = this->rawData->get(11);
            			}
            			break;
            			case (int)3: {
HXLINE( 387)				vector3D->x = this->rawData->get(12);
HXLINE( 388)				vector3D->y = this->rawData->get(13);
HXLINE( 389)				vector3D->z = this->rawData->get(14);
HXLINE( 390)				vector3D->w = this->rawData->get(15);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyColumnTo,(void))

void Matrix3D_obj::copyFrom( ::openfl::geom::Matrix3D other){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_404_copyFrom)
HXDLIN( 404)		this->rawData = ( ( ::openfl::_Vector::FloatVector)(other->rawData->copy()) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,copyFrom,(void))

void Matrix3D_obj::copyRawDataFrom( ::openfl::_Vector::FloatVector vector,hx::Null< int >  __o_index,hx::Null< bool >  __o_transpose){
            		int index = __o_index.Default(0);
            		bool transpose = __o_transpose.Default(false);
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_417_copyRawDataFrom)
HXLINE( 418)		if (transpose) {
HXLINE( 420)			this->transpose();
            		}
HXLINE( 423)		int length = (vector->get_length() - index);
HXLINE( 425)		{
HXLINE( 425)			int _g = 0;
HXDLIN( 425)			int _g1 = length;
HXDLIN( 425)			while((_g < _g1)){
HXLINE( 425)				_g = (_g + 1);
HXDLIN( 425)				int i = (_g - 1);
HXLINE( 427)				{
HXLINE( 427)					::Dynamic this1 = this->rawData;
HXDLIN( 427)					( ( ::openfl::_Vector::FloatVector)(this1) )->set(i,vector->get((i + index)));
            				}
            			}
            		}
HXLINE( 430)		if (transpose) {
HXLINE( 432)			this->transpose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,copyRawDataFrom,(void))

void Matrix3D_obj::copyRawDataTo( ::openfl::_Vector::FloatVector vector,hx::Null< int >  __o_index,hx::Null< bool >  __o_transpose){
            		int index = __o_index.Default(0);
            		bool transpose = __o_transpose.Default(false);
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_446_copyRawDataTo)
HXLINE( 447)		if (transpose) {
HXLINE( 449)			this->transpose();
            		}
HXLINE( 452)		{
HXLINE( 452)			int _g = 0;
HXDLIN( 452)			int _g1 = this->rawData->get_length();
HXDLIN( 452)			while((_g < _g1)){
HXLINE( 452)				_g = (_g + 1);
HXDLIN( 452)				int i = (_g - 1);
HXLINE( 454)				vector->set((i + index),this->rawData->get(i));
            			}
            		}
HXLINE( 457)		if (transpose) {
HXLINE( 459)			this->transpose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,copyRawDataTo,(void))

void Matrix3D_obj::copyRowFrom(int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_471_copyRowFrom)
HXDLIN( 471)		switch((int)(row)){
            			case (int)0: {
HXLINE( 474)				this->rawData->set(0,vector3D->x);
HXLINE( 475)				this->rawData->set(4,vector3D->y);
HXLINE( 476)				this->rawData->set(8,vector3D->z);
HXLINE( 477)				this->rawData->set(12,vector3D->w);
            			}
            			break;
            			case (int)1: {
HXLINE( 480)				this->rawData->set(1,vector3D->x);
HXLINE( 481)				this->rawData->set(5,vector3D->y);
HXLINE( 482)				this->rawData->set(9,vector3D->z);
HXLINE( 483)				this->rawData->set(13,vector3D->w);
            			}
            			break;
            			case (int)2: {
HXLINE( 486)				this->rawData->set(2,vector3D->x);
HXLINE( 487)				this->rawData->set(6,vector3D->y);
HXLINE( 488)				this->rawData->set(10,vector3D->z);
HXLINE( 489)				this->rawData->set(14,vector3D->w);
            			}
            			break;
            			case (int)3: {
HXLINE( 492)				this->rawData->set(3,vector3D->x);
HXLINE( 493)				this->rawData->set(7,vector3D->y);
HXLINE( 494)				this->rawData->set(11,vector3D->z);
HXLINE( 495)				this->rawData->set(15,vector3D->w);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyRowFrom,(void))

void Matrix3D_obj::copyRowTo(int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_509_copyRowTo)
HXDLIN( 509)		switch((int)(row)){
            			case (int)0: {
HXLINE( 512)				vector3D->x = this->rawData->get(0);
HXLINE( 513)				vector3D->y = this->rawData->get(4);
HXLINE( 514)				vector3D->z = this->rawData->get(8);
HXLINE( 515)				vector3D->w = this->rawData->get(12);
            			}
            			break;
            			case (int)1: {
HXLINE( 518)				vector3D->x = this->rawData->get(1);
HXLINE( 519)				vector3D->y = this->rawData->get(5);
HXLINE( 520)				vector3D->z = this->rawData->get(9);
HXLINE( 521)				vector3D->w = this->rawData->get(13);
            			}
            			break;
            			case (int)2: {
HXLINE( 524)				vector3D->x = this->rawData->get(2);
HXLINE( 525)				vector3D->y = this->rawData->get(6);
HXLINE( 526)				vector3D->z = this->rawData->get(10);
HXLINE( 527)				vector3D->w = this->rawData->get(14);
            			}
            			break;
            			case (int)3: {
HXLINE( 530)				vector3D->x = this->rawData->get(3);
HXLINE( 531)				vector3D->y = this->rawData->get(7);
HXLINE( 532)				vector3D->z = this->rawData->get(11);
HXLINE( 533)				vector3D->w = this->rawData->get(15);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyRowTo,(void))

void Matrix3D_obj::copyToMatrix3D( ::openfl::geom::Matrix3D other){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_544_copyToMatrix3D)
HXDLIN( 544)		other->rawData = ( ( ::openfl::_Vector::FloatVector)(this->rawData->copy()) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,copyToMatrix3D,(void))

 ::openfl::_Vector::ObjectVector Matrix3D_obj::decompose( ::Dynamic __o_orientationStyle){
            		 ::Dynamic orientationStyle = __o_orientationStyle;
            		if (hx::IsNull(__o_orientationStyle)) orientationStyle = 1;
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_614_decompose)
HXLINE( 615)		int length = null();
HXDLIN( 615)		bool fixed = null();
HXDLIN( 615)		 ::openfl::_Vector::ObjectVector vec =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
HXLINE( 616)		 ::openfl::geom::Matrix3D m = this->clone();
HXLINE( 617)		 ::openfl::_Vector::FloatVector mr = ( ( ::openfl::_Vector::FloatVector)(m->rawData->copy()) );
HXLINE( 619)		Float pos = mr->get(12);
HXDLIN( 619)		Float pos1 = mr->get(13);
HXDLIN( 619)		 ::openfl::geom::Vector3D pos2 =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,pos,pos1,mr->get(14),null());
HXLINE( 620)		mr->set(12,( (Float)(0) ));
HXLINE( 621)		mr->set(13,( (Float)(0) ));
HXLINE( 622)		mr->set(14,( (Float)(0) ));
HXLINE( 624)		 ::openfl::geom::Vector3D scale =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 626)		Float _hx_tmp = mr->get(0);
HXDLIN( 626)		Float _hx_tmp1 = (_hx_tmp * mr->get(0));
HXDLIN( 626)		Float _hx_tmp2 = mr->get(1);
HXDLIN( 626)		Float _hx_tmp3 = (_hx_tmp1 + (_hx_tmp2 * mr->get(1)));
HXDLIN( 626)		Float _hx_tmp4 = mr->get(2);
HXDLIN( 626)		scale->x = ::Math_obj::sqrt((_hx_tmp3 + (_hx_tmp4 * mr->get(2))));
HXLINE( 627)		Float _hx_tmp5 = mr->get(4);
HXDLIN( 627)		Float _hx_tmp6 = (_hx_tmp5 * mr->get(4));
HXDLIN( 627)		Float _hx_tmp7 = mr->get(5);
HXDLIN( 627)		Float _hx_tmp8 = (_hx_tmp6 + (_hx_tmp7 * mr->get(5)));
HXDLIN( 627)		Float _hx_tmp9 = mr->get(6);
HXDLIN( 627)		scale->y = ::Math_obj::sqrt((_hx_tmp8 + (_hx_tmp9 * mr->get(6))));
HXLINE( 628)		Float _hx_tmp10 = mr->get(8);
HXDLIN( 628)		Float _hx_tmp11 = (_hx_tmp10 * mr->get(8));
HXDLIN( 628)		Float _hx_tmp12 = mr->get(9);
HXDLIN( 628)		Float _hx_tmp13 = (_hx_tmp11 + (_hx_tmp12 * mr->get(9)));
HXDLIN( 628)		Float _hx_tmp14 = mr->get(10);
HXDLIN( 628)		scale->z = ::Math_obj::sqrt((_hx_tmp13 + (_hx_tmp14 * mr->get(10))));
HXLINE( 630)		Float _hx_tmp15 = mr->get(0);
HXDLIN( 630)		Float _hx_tmp16 = mr->get(5);
HXDLIN( 630)		Float _hx_tmp17 = (_hx_tmp16 * mr->get(10));
HXDLIN( 630)		Float _hx_tmp18 = mr->get(6);
HXDLIN( 630)		Float _hx_tmp19 = (_hx_tmp15 * (_hx_tmp17 - (_hx_tmp18 * mr->get(9))));
HXDLIN( 630)		Float _hx_tmp20 = mr->get(1);
HXDLIN( 630)		Float _hx_tmp21 = mr->get(4);
HXDLIN( 630)		Float _hx_tmp22 = (_hx_tmp21 * mr->get(10));
HXDLIN( 630)		Float _hx_tmp23 = mr->get(6);
HXDLIN( 630)		Float _hx_tmp24 = (_hx_tmp19 - (_hx_tmp20 * (_hx_tmp22 - (_hx_tmp23 * mr->get(8)))));
HXDLIN( 630)		Float _hx_tmp25 = mr->get(2);
HXDLIN( 630)		Float _hx_tmp26 = mr->get(4);
HXDLIN( 630)		Float _hx_tmp27 = (_hx_tmp26 * mr->get(9));
HXDLIN( 630)		Float _hx_tmp28 = mr->get(5);
HXDLIN( 630)		if (((_hx_tmp24 + (_hx_tmp25 * (_hx_tmp27 - (_hx_tmp28 * mr->get(8))))) < 0)) {
HXLINE( 632)			scale->z = -(scale->z);
            		}
HXLINE( 635)		{
HXLINE( 635)			 ::openfl::_Vector::FloatVector _g = mr;
HXDLIN( 635)			_g->set(0,(_g->get(0) / scale->x));
            		}
HXLINE( 636)		{
HXLINE( 636)			 ::openfl::_Vector::FloatVector _g1 = mr;
HXDLIN( 636)			_g1->set(1,(_g1->get(1) / scale->x));
            		}
HXLINE( 637)		{
HXLINE( 637)			 ::openfl::_Vector::FloatVector _g2 = mr;
HXDLIN( 637)			_g2->set(2,(_g2->get(2) / scale->x));
            		}
HXLINE( 638)		{
HXLINE( 638)			 ::openfl::_Vector::FloatVector _g3 = mr;
HXDLIN( 638)			_g3->set(4,(_g3->get(4) / scale->y));
            		}
HXLINE( 639)		{
HXLINE( 639)			 ::openfl::_Vector::FloatVector _g4 = mr;
HXDLIN( 639)			_g4->set(5,(_g4->get(5) / scale->y));
            		}
HXLINE( 640)		{
HXLINE( 640)			 ::openfl::_Vector::FloatVector _g5 = mr;
HXDLIN( 640)			_g5->set(6,(_g5->get(6) / scale->y));
            		}
HXLINE( 641)		{
HXLINE( 641)			 ::openfl::_Vector::FloatVector _g6 = mr;
HXDLIN( 641)			_g6->set(8,(_g6->get(8) / scale->z));
            		}
HXLINE( 642)		{
HXLINE( 642)			 ::openfl::_Vector::FloatVector _g7 = mr;
HXDLIN( 642)			_g7->set(9,(_g7->get(9) / scale->z));
            		}
HXLINE( 643)		{
HXLINE( 643)			 ::openfl::_Vector::FloatVector _g8 = mr;
HXDLIN( 643)			_g8->set(10,(_g8->get(10) / scale->z));
            		}
HXLINE( 645)		 ::openfl::geom::Vector3D rot =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 647)		 ::Dynamic _hx_switch_0 = orientationStyle;
            		if (  (_hx_switch_0==0) ){
HXLINE( 650)			Float _hx_tmp29 = mr->get(0);
HXDLIN( 650)			Float _hx_tmp30 = (_hx_tmp29 + mr->get(5));
HXDLIN( 650)			rot->w = ::Math_obj::acos((((_hx_tmp30 + mr->get(10)) - ( (Float)(1) )) / ( (Float)(2) )));
HXLINE( 652)			Float len = mr->get(6);
HXDLIN( 652)			Float len1 = (len - mr->get(9));
HXDLIN( 652)			Float len2 = mr->get(6);
HXDLIN( 652)			Float len3 = (len1 * (len2 - mr->get(9)));
HXDLIN( 652)			Float len4 = mr->get(8);
HXDLIN( 652)			Float len5 = (len4 - mr->get(2));
HXDLIN( 652)			Float len6 = mr->get(8);
HXDLIN( 652)			Float len7 = (len3 + (len5 * (len6 - mr->get(2))));
HXDLIN( 652)			Float len8 = mr->get(1);
HXDLIN( 652)			Float len9 = (len8 - mr->get(4));
HXDLIN( 652)			Float len10 = mr->get(1);
HXDLIN( 652)			Float len11 = ::Math_obj::sqrt((len7 + (len9 * (len10 - mr->get(4)))));
HXLINE( 654)			if ((len11 != 0)) {
HXLINE( 656)				Float _hx_tmp31 = mr->get(6);
HXDLIN( 656)				rot->x = ((_hx_tmp31 - mr->get(9)) / len11);
HXLINE( 657)				Float _hx_tmp32 = mr->get(8);
HXDLIN( 657)				rot->y = ((_hx_tmp32 - mr->get(2)) / len11);
HXLINE( 658)				Float _hx_tmp33 = mr->get(1);
HXDLIN( 658)				rot->z = ((_hx_tmp33 - mr->get(4)) / len11);
            			}
            			else {
HXLINE( 662)				rot->x = (rot->y = (rot->z = ( (Float)(0) )));
            			}
HXLINE( 649)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE( 702)			rot->y = ::Math_obj::asin(-(mr->get(2)));
HXLINE( 704)			bool _hx_tmp34;
HXDLIN( 704)			if ((mr->get(2) != 1)) {
HXLINE( 704)				_hx_tmp34 = (mr->get(2) != -1);
            			}
            			else {
HXLINE( 704)				_hx_tmp34 = false;
            			}
HXDLIN( 704)			if (_hx_tmp34) {
HXLINE( 706)				Float _hx_tmp35 = mr->get(6);
HXDLIN( 706)				rot->x = ::Math_obj::atan2(_hx_tmp35,mr->get(10));
HXLINE( 707)				Float _hx_tmp36 = mr->get(1);
HXDLIN( 707)				rot->z = ::Math_obj::atan2(_hx_tmp36,mr->get(0));
            			}
            			else {
HXLINE( 711)				rot->z = ( (Float)(0) );
HXLINE( 712)				Float _hx_tmp37 = mr->get(4);
HXDLIN( 712)				rot->x = ::Math_obj::atan2(_hx_tmp37,mr->get(5));
            			}
HXLINE( 701)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE( 666)			Float tr = mr->get(0);
HXDLIN( 666)			Float tr1 = (tr + mr->get(5));
HXDLIN( 666)			Float tr2 = (tr1 + mr->get(10));
HXLINE( 668)			if ((tr2 > 0)) {
HXLINE( 670)				rot->w = (::Math_obj::sqrt((1 + tr2)) / ( (Float)(2) ));
HXLINE( 672)				Float _hx_tmp38 = mr->get(6);
HXDLIN( 672)				Float _hx_tmp39 = (_hx_tmp38 - mr->get(9));
HXDLIN( 672)				rot->x = (_hx_tmp39 / (( (Float)(4) ) * rot->w));
HXLINE( 673)				Float _hx_tmp40 = mr->get(8);
HXDLIN( 673)				Float _hx_tmp41 = (_hx_tmp40 - mr->get(2));
HXDLIN( 673)				rot->y = (_hx_tmp41 / (( (Float)(4) ) * rot->w));
HXLINE( 674)				Float _hx_tmp42 = mr->get(1);
HXDLIN( 674)				Float _hx_tmp43 = (_hx_tmp42 - mr->get(4));
HXDLIN( 674)				rot->z = (_hx_tmp43 / (( (Float)(4) ) * rot->w));
            			}
            			else {
HXLINE( 676)				bool _hx_tmp44;
HXDLIN( 676)				Float _hx_tmp45 = mr->get(0);
HXDLIN( 676)				if ((_hx_tmp45 > mr->get(5))) {
HXLINE( 676)					Float _hx_tmp46 = mr->get(0);
HXDLIN( 676)					_hx_tmp44 = (_hx_tmp46 > mr->get(10));
            				}
            				else {
HXLINE( 676)					_hx_tmp44 = false;
            				}
HXDLIN( 676)				if (_hx_tmp44) {
HXLINE( 678)					Float _hx_tmp47 = (1 + mr->get(0));
HXDLIN( 678)					Float _hx_tmp48 = (_hx_tmp47 - mr->get(5));
HXDLIN( 678)					rot->x = (::Math_obj::sqrt((_hx_tmp48 - mr->get(10))) / ( (Float)(2) ));
HXLINE( 680)					Float _hx_tmp49 = mr->get(6);
HXDLIN( 680)					Float _hx_tmp50 = (_hx_tmp49 - mr->get(9));
HXDLIN( 680)					rot->w = (_hx_tmp50 / (( (Float)(4) ) * rot->x));
HXLINE( 681)					Float _hx_tmp51 = mr->get(1);
HXDLIN( 681)					Float _hx_tmp52 = (_hx_tmp51 + mr->get(4));
HXDLIN( 681)					rot->y = (_hx_tmp52 / (( (Float)(4) ) * rot->x));
HXLINE( 682)					Float _hx_tmp53 = mr->get(8);
HXDLIN( 682)					Float _hx_tmp54 = (_hx_tmp53 + mr->get(2));
HXDLIN( 682)					rot->z = (_hx_tmp54 / (( (Float)(4) ) * rot->x));
            				}
            				else {
HXLINE( 684)					Float _hx_tmp55 = mr->get(5);
HXDLIN( 684)					if ((_hx_tmp55 > mr->get(10))) {
HXLINE( 686)						Float _hx_tmp56 = (1 + mr->get(5));
HXDLIN( 686)						Float _hx_tmp57 = (_hx_tmp56 - mr->get(0));
HXDLIN( 686)						rot->y = (::Math_obj::sqrt((_hx_tmp57 - mr->get(10))) / ( (Float)(2) ));
HXLINE( 688)						Float _hx_tmp58 = mr->get(1);
HXDLIN( 688)						Float _hx_tmp59 = (_hx_tmp58 + mr->get(4));
HXDLIN( 688)						rot->x = (_hx_tmp59 / (( (Float)(4) ) * rot->y));
HXLINE( 689)						Float _hx_tmp60 = mr->get(8);
HXDLIN( 689)						Float _hx_tmp61 = (_hx_tmp60 - mr->get(2));
HXDLIN( 689)						rot->w = (_hx_tmp61 / (( (Float)(4) ) * rot->y));
HXLINE( 690)						Float _hx_tmp62 = mr->get(6);
HXDLIN( 690)						Float _hx_tmp63 = (_hx_tmp62 + mr->get(9));
HXDLIN( 690)						rot->z = (_hx_tmp63 / (( (Float)(4) ) * rot->y));
            					}
            					else {
HXLINE( 694)						Float _hx_tmp64 = (1 + mr->get(10));
HXDLIN( 694)						Float _hx_tmp65 = (_hx_tmp64 - mr->get(0));
HXDLIN( 694)						rot->z = (::Math_obj::sqrt((_hx_tmp65 - mr->get(5))) / ( (Float)(2) ));
HXLINE( 696)						Float _hx_tmp66 = mr->get(8);
HXDLIN( 696)						Float _hx_tmp67 = (_hx_tmp66 + mr->get(2));
HXDLIN( 696)						rot->x = (_hx_tmp67 / (( (Float)(4) ) * rot->z));
HXLINE( 697)						Float _hx_tmp68 = mr->get(6);
HXDLIN( 697)						Float _hx_tmp69 = (_hx_tmp68 + mr->get(9));
HXDLIN( 697)						rot->y = (_hx_tmp69 / (( (Float)(4) ) * rot->z));
HXLINE( 698)						Float _hx_tmp70 = mr->get(1);
HXDLIN( 698)						Float _hx_tmp71 = (_hx_tmp70 - mr->get(4));
HXDLIN( 698)						rot->w = (_hx_tmp71 / (( (Float)(4) ) * rot->z));
            					}
            				}
            			}
HXLINE( 665)			goto _hx_goto_17;
            		}
            		_hx_goto_17:;
HXLINE( 716)		vec->push(pos2);
HXLINE( 717)		vec->push(rot);
HXLINE( 718)		vec->push(scale);
HXLINE( 720)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,decompose,return )

 ::openfl::geom::Vector3D Matrix3D_obj::deltaTransformVector( ::openfl::geom::Vector3D v){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_749_deltaTransformVector)
HXLINE( 750)		Float x = v->x;
HXDLIN( 750)		Float y = v->y;
HXDLIN( 750)		Float z = v->z;
HXLINE( 752)		Float _hx_tmp = (x * this->rawData->get(0));
HXDLIN( 752)		Float _hx_tmp1 = (_hx_tmp + (y * this->rawData->get(4)));
HXDLIN( 752)		Float _hx_tmp2 = (_hx_tmp1 + (z * this->rawData->get(8)));
HXDLIN( 752)		Float _hx_tmp3 = (x * this->rawData->get(1));
HXDLIN( 752)		Float _hx_tmp4 = (_hx_tmp3 + (y * this->rawData->get(5)));
HXDLIN( 752)		Float _hx_tmp5 = (_hx_tmp4 + (z * this->rawData->get(9)));
HXLINE( 753)		Float _hx_tmp6 = (x * this->rawData->get(2));
HXDLIN( 753)		Float _hx_tmp7 = (_hx_tmp6 + (y * this->rawData->get(6)));
HXDLIN( 753)		Float _hx_tmp8 = (_hx_tmp7 + (z * this->rawData->get(10)));
HXDLIN( 753)		Float _hx_tmp9 = (x * this->rawData->get(3));
HXDLIN( 753)		Float _hx_tmp10 = (_hx_tmp9 + (y * this->rawData->get(7)));
HXLINE( 752)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,_hx_tmp2,_hx_tmp5,_hx_tmp8,(_hx_tmp10 + (z * this->rawData->get(11))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,deltaTransformVector,return )

void Matrix3D_obj::identity(){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_773_identity)
HXDLIN( 773)		int length = null();
HXDLIN( 773)		bool fixed = null();
HXDLIN( 773)		this->rawData =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,::Array_obj< Float >::fromData( _hx_array_data_3d2e93e6_21,16),true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,identity,(void))

void Matrix3D_obj::interpolateTo( ::openfl::geom::Matrix3D toMat,Float percent){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_855_interpolateTo)
HXDLIN( 855)		int _g = 0;
HXDLIN( 855)		while((_g < 16)){
HXDLIN( 855)			_g = (_g + 1);
HXDLIN( 855)			int i = (_g - 1);
HXLINE( 857)			{
HXLINE( 857)				::Dynamic this1 = this->rawData;
HXDLIN( 857)				Float value = this->rawData->get(i);
HXDLIN( 857)				Float value1 = toMat->rawData->get(i);
HXDLIN( 857)				( ( ::openfl::_Vector::FloatVector)(this1) )->set(i,(value + ((value1 - this->rawData->get(i)) * percent)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,interpolateTo,(void))

bool Matrix3D_obj::invert(){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_888_invert)
HXLINE( 889)		Float d = this->get_determinant();
HXLINE( 890)		bool invertable = (::Math_obj::abs(d) > ((Float)0.00000000001));
HXLINE( 892)		if (invertable) {
HXLINE( 894)			d = (( (Float)(1) ) / d);
HXLINE( 896)			Float m11 = this->rawData->get(0);
HXLINE( 897)			Float m21 = this->rawData->get(4);
HXLINE( 898)			Float m31 = this->rawData->get(8);
HXLINE( 899)			Float m41 = this->rawData->get(12);
HXLINE( 900)			Float m12 = this->rawData->get(1);
HXLINE( 901)			Float m22 = this->rawData->get(5);
HXLINE( 902)			Float m32 = this->rawData->get(9);
HXLINE( 903)			Float m42 = this->rawData->get(13);
HXLINE( 904)			Float m13 = this->rawData->get(2);
HXLINE( 905)			Float m23 = this->rawData->get(6);
HXLINE( 906)			Float m33 = this->rawData->get(10);
HXLINE( 907)			Float m43 = this->rawData->get(14);
HXLINE( 908)			Float m14 = this->rawData->get(3);
HXLINE( 909)			Float m24 = this->rawData->get(7);
HXLINE( 910)			Float m34 = this->rawData->get(11);
HXLINE( 911)			Float m44 = this->rawData->get(15);
HXLINE( 913)			this->rawData->set(0,(d * (((m22 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m23 * m44) - (m43 * m24)))) + (m42 * ((m23 * m34) - (m33 * m24))))));
HXLINE( 914)			this->rawData->set(1,(-(d) * (((m12 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m34) - (m33 * m14))))));
HXLINE( 915)			this->rawData->set(2,(d * (((m12 * ((m23 * m44) - (m43 * m24))) - (m22 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 916)			this->rawData->set(3,(-(d) * (((m12 * ((m23 * m34) - (m33 * m24))) - (m22 * ((m13 * m34) - (m33 * m14)))) + (m32 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 917)			this->rawData->set(4,(-(d) * (((m21 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m23 * m44) - (m43 * m24)))) + (m41 * ((m23 * m34) - (m33 * m24))))));
HXLINE( 918)			this->rawData->set(5,(d * (((m11 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m34) - (m33 * m14))))));
HXLINE( 919)			this->rawData->set(6,(-(d) * (((m11 * ((m23 * m44) - (m43 * m24))) - (m21 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 920)			this->rawData->set(7,(d * (((m11 * ((m23 * m34) - (m33 * m24))) - (m21 * ((m13 * m34) - (m33 * m14)))) + (m31 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 921)			this->rawData->set(8,(d * (((m21 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m22 * m44) - (m42 * m24)))) + (m41 * ((m22 * m34) - (m32 * m24))))));
HXLINE( 922)			this->rawData->set(9,(-(d) * (((m11 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m34) - (m32 * m14))))));
HXLINE( 923)			this->rawData->set(10,(d * (((m11 * ((m22 * m44) - (m42 * m24))) - (m21 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m24) - (m22 * m14))))));
HXLINE( 924)			this->rawData->set(11,(-(d) * (((m11 * ((m22 * m34) - (m32 * m24))) - (m21 * ((m12 * m34) - (m32 * m14)))) + (m31 * ((m12 * m24) - (m22 * m14))))));
HXLINE( 925)			this->rawData->set(12,(-(d) * (((m21 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m22 * m43) - (m42 * m23)))) + (m41 * ((m22 * m33) - (m32 * m23))))));
HXLINE( 926)			this->rawData->set(13,(d * (((m11 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m33) - (m32 * m13))))));
HXLINE( 927)			this->rawData->set(14,(-(d) * (((m11 * ((m22 * m43) - (m42 * m23))) - (m21 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m23) - (m22 * m13))))));
HXLINE( 928)			this->rawData->set(15,(d * (((m11 * ((m22 * m33) - (m32 * m23))) - (m21 * ((m12 * m33) - (m32 * m13)))) + (m31 * ((m12 * m23) - (m22 * m13))))));
            		}
HXLINE( 931)		return invertable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,invert,return )

void Matrix3D_obj::pointAt( ::openfl::geom::Vector3D pos, ::openfl::geom::Vector3D at, ::openfl::geom::Vector3D up){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_968_pointAt)
HXLINE(1061)		if (hx::IsNull( at )) {
HXLINE(1063)			at =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,0,0,-1,null());
            		}
HXLINE(1066)		if (hx::IsNull( up )) {
HXLINE(1068)			up =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,0,-1,0,null());
            		}
HXLINE(1071)		 ::openfl::geom::Vector3D dir = at->subtract(pos);
HXLINE(1072)		 ::openfl::geom::Vector3D vup = up->clone();
HXLINE(1075)		dir->normalize();
HXLINE(1076)		vup->normalize();
HXLINE(1078)		 ::openfl::geom::Vector3D dir2 = dir->clone();
HXLINE(1079)		dir2->scaleBy(vup->dotProduct(dir));
HXLINE(1081)		vup = vup->subtract(dir2);
HXLINE(1083)		if ((vup->get_length() > 0)) {
HXLINE(1085)			vup->normalize();
            		}
            		else {
HXLINE(1089)			if ((dir->x != 0)) {
HXLINE(1091)				vup =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,-(dir->y),dir->x,0,null());
            			}
            			else {
HXLINE(1095)				vup =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,1,0,0,null());
            			}
            		}
HXLINE(1073)		 ::openfl::geom::Vector3D right = vup->crossProduct(dir);
HXLINE(1100)		right->normalize();
HXLINE(1102)		this->rawData->set(0,right->x);
HXLINE(1103)		this->rawData->set(4,right->y);
HXLINE(1104)		this->rawData->set(8,right->z);
HXLINE(1105)		this->rawData->set(12,((Float)0.0));
HXLINE(1106)		this->rawData->set(1,vup->x);
HXLINE(1107)		this->rawData->set(5,vup->y);
HXLINE(1108)		this->rawData->set(9,vup->z);
HXLINE(1109)		this->rawData->set(13,((Float)0.0));
HXLINE(1110)		this->rawData->set(2,dir->x);
HXLINE(1111)		this->rawData->set(6,dir->y);
HXLINE(1112)		this->rawData->set(10,dir->z);
HXLINE(1113)		this->rawData->set(14,((Float)0.0));
HXLINE(1114)		this->rawData->set(3,pos->x);
HXLINE(1115)		this->rawData->set(7,pos->y);
HXLINE(1116)		this->rawData->set(11,pos->z);
HXLINE(1117)		this->rawData->set(15,((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,pointAt,(void))

void Matrix3D_obj::prepend( ::openfl::geom::Matrix3D rhs){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_1145_prepend)
HXLINE(1146)		Float m111 = rhs->rawData->get(0);
HXDLIN(1146)		Float m121 = rhs->rawData->get(4);
HXDLIN(1146)		Float m131 = rhs->rawData->get(8);
HXDLIN(1146)		Float m141 = rhs->rawData->get(12);
HXDLIN(1146)		Float m112 = rhs->rawData->get(1);
HXDLIN(1146)		Float m122 = rhs->rawData->get(5);
HXDLIN(1146)		Float m132 = rhs->rawData->get(9);
HXDLIN(1146)		Float m142 = rhs->rawData->get(13);
HXDLIN(1146)		Float m113 = rhs->rawData->get(2);
HXDLIN(1146)		Float m123 = rhs->rawData->get(6);
HXDLIN(1146)		Float m133 = rhs->rawData->get(10);
HXDLIN(1146)		Float m143 = rhs->rawData->get(14);
HXDLIN(1146)		Float m114 = rhs->rawData->get(3);
HXDLIN(1146)		Float m124 = rhs->rawData->get(7);
HXDLIN(1146)		Float m134 = rhs->rawData->get(11);
HXDLIN(1146)		Float m144 = rhs->rawData->get(15);
HXDLIN(1146)		Float m211 = this->rawData->get(0);
HXDLIN(1146)		Float m221 = this->rawData->get(4);
HXDLIN(1146)		Float m231 = this->rawData->get(8);
HXDLIN(1146)		Float m241 = this->rawData->get(12);
HXDLIN(1146)		Float m212 = this->rawData->get(1);
HXDLIN(1146)		Float m222 = this->rawData->get(5);
HXDLIN(1146)		Float m232 = this->rawData->get(9);
HXDLIN(1146)		Float m242 = this->rawData->get(13);
HXDLIN(1146)		Float m213 = this->rawData->get(2);
HXDLIN(1146)		Float m223 = this->rawData->get(6);
HXDLIN(1146)		Float m233 = this->rawData->get(10);
HXDLIN(1146)		Float m243 = this->rawData->get(14);
HXDLIN(1146)		Float m214 = this->rawData->get(3);
HXDLIN(1146)		Float m224 = this->rawData->get(7);
HXDLIN(1146)		Float m234 = this->rawData->get(11);
HXDLIN(1146)		Float m244 = this->rawData->get(15);
HXLINE(1149)		this->rawData->set(0,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
HXLINE(1150)		this->rawData->set(1,((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
HXLINE(1151)		this->rawData->set(2,((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
HXLINE(1152)		this->rawData->set(3,((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
HXLINE(1154)		this->rawData->set(4,((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
HXLINE(1155)		this->rawData->set(5,((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
HXLINE(1156)		this->rawData->set(6,((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
HXLINE(1157)		this->rawData->set(7,((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
HXLINE(1159)		this->rawData->set(8,((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
HXLINE(1160)		this->rawData->set(9,((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
HXLINE(1161)		this->rawData->set(10,((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
HXLINE(1162)		this->rawData->set(11,((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
HXLINE(1164)		this->rawData->set(12,((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
HXLINE(1165)		this->rawData->set(13,((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
HXLINE(1166)		this->rawData->set(14,((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
HXLINE(1167)		this->rawData->set(15,((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,prepend,(void))

void Matrix3D_obj::prependRotation(Float degrees, ::openfl::geom::Vector3D axis, ::openfl::geom::Vector3D pivotPoint){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_1216_prependRotation)
HXLINE(1217)		Float tz = ( (Float)(0) );
HXDLIN(1217)		Float ty = tz;
HXDLIN(1217)		Float tx = ty;
HXLINE(1219)		if (hx::IsNotNull( pivotPoint )) {
HXLINE(1221)			tx = pivotPoint->x;
HXLINE(1222)			ty = pivotPoint->y;
HXLINE(1223)			tz = pivotPoint->z;
            		}
HXLINE(1225)		Float radian = ((degrees * ::Math_obj::PI) / ( (Float)(180) ));
HXLINE(1226)		Float cos = ::Math_obj::cos(radian);
HXLINE(1227)		Float sin = ::Math_obj::sin(radian);
HXLINE(1228)		Float x = axis->x;
HXLINE(1229)		Float y = axis->y;
HXLINE(1230)		Float z = axis->z;
HXLINE(1231)		Float x2 = (x * x);
HXLINE(1232)		Float y2 = (y * y);
HXLINE(1233)		Float z2 = (z * z);
HXLINE(1234)		Float ls = ((x2 + y2) + z2);
HXLINE(1235)		if ((ls != 0)) {
HXLINE(1237)			Float l = ::Math_obj::sqrt(ls);
HXLINE(1238)			x = (x / l);
HXLINE(1239)			y = (y / l);
HXLINE(1240)			z = (z / l);
HXLINE(1241)			x2 = (x2 / ls);
HXLINE(1242)			y2 = (y2 / ls);
HXLINE(1243)			z2 = (z2 / ls);
            		}
HXLINE(1245)		Float ccos = (( (Float)(1) ) - cos);
HXLINE(1246)		 ::openfl::geom::Matrix3D m =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE(1247)		 ::openfl::_Vector::FloatVector d = m->rawData;
HXLINE(1248)		d->set(0,(x2 + ((y2 + z2) * cos)));
HXLINE(1249)		d->set(1,(((x * y) * ccos) + (z * sin)));
HXLINE(1250)		d->set(2,(((x * z) * ccos) - (y * sin)));
HXLINE(1251)		d->set(4,(((x * y) * ccos) - (z * sin)));
HXLINE(1252)		d->set(5,(y2 + ((x2 + z2) * cos)));
HXLINE(1253)		d->set(6,(((y * z) * ccos) + (x * sin)));
HXLINE(1254)		d->set(8,(((x * z) * ccos) + (y * sin)));
HXLINE(1255)		d->set(9,(((y * z) * ccos) - (x * sin)));
HXLINE(1256)		d->set(10,(z2 + ((x2 + y2) * cos)));
HXLINE(1257)		d->set(12,((((tx * (y2 + z2)) - (x * ((ty * y) + (tz * z)))) * ccos) + (((ty * z) - (tz * y)) * sin)));
HXLINE(1258)		d->set(13,((((ty * (x2 + z2)) - (y * ((tx * x) + (tz * z)))) * ccos) + (((tz * x) - (tx * z)) * sin)));
HXLINE(1259)		d->set(14,((((tz * (x2 + y2)) - (z * ((tx * x) + (ty * y)))) * ccos) + (((tx * y) - (ty * x)) * sin)));
HXLINE(1261)		this->prepend(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependRotation,(void))

void Matrix3D_obj::prependScale(Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_1294_prependScale)
HXDLIN(1294)		int length = null();
HXDLIN(1294)		bool fixed = null();
HXDLIN(1294)		this->prepend( ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0)),true)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependScale,(void))

void Matrix3D_obj::prependTranslation(Float x,Float y,Float z){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_1329_prependTranslation)
HXLINE(1330)		 ::openfl::geom::Matrix3D m =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE(1331)		m->set_position( ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,x,y,z,null()));
HXLINE(1332)		this->prepend(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependTranslation,(void))

bool Matrix3D_obj::recompose( ::openfl::_Vector::ObjectVector components, ::Dynamic __o_orientationStyle){
            		 ::Dynamic orientationStyle = __o_orientationStyle;
            		if (hx::IsNull(__o_orientationStyle)) orientationStyle = 1;
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_1373_recompose)
HXLINE(1374)		bool _hx_tmp;
HXDLIN(1374)		bool _hx_tmp1;
HXDLIN(1374)		bool _hx_tmp2;
HXDLIN(1374)		if ((components->get_length() >= 3)) {
HXLINE(1374)			_hx_tmp2 = (components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->x == 0);
            		}
            		else {
HXLINE(1374)			_hx_tmp2 = true;
            		}
HXDLIN(1374)		if (!(_hx_tmp2)) {
HXLINE(1374)			_hx_tmp1 = (components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->y == 0);
            		}
            		else {
HXLINE(1374)			_hx_tmp1 = true;
            		}
HXDLIN(1374)		if (!(_hx_tmp1)) {
HXLINE(1374)			_hx_tmp = (components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->z == 0);
            		}
            		else {
HXLINE(1374)			_hx_tmp = true;
            		}
HXDLIN(1374)		if (_hx_tmp) {
HXLINE(1376)			return false;
            		}
HXLINE(1379)		this->identity();
HXLINE(1381)		::Array< Float > scale = ::Array_obj< Float >::__new(0);
HXLINE(1382)		scale[0] = (scale[1] = (scale[2] = components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->x));
HXLINE(1383)		scale[4] = (scale[5] = (scale[6] = components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->y));
HXLINE(1384)		scale[8] = (scale[9] = (scale[10] = components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->z));
HXLINE(1386)		if (hx::IsEq( orientationStyle,1 )) {
HXLINE(1389)			Float cx = ::Math_obj::cos(components->get(1).StaticCast<  ::openfl::geom::Vector3D >()->x);
HXLINE(1390)			Float cy = ::Math_obj::cos(components->get(1).StaticCast<  ::openfl::geom::Vector3D >()->y);
HXLINE(1391)			Float cz = ::Math_obj::cos(components->get(1).StaticCast<  ::openfl::geom::Vector3D >()->z);
HXLINE(1392)			Float sx = ::Math_obj::sin(components->get(1).StaticCast<  ::openfl::geom::Vector3D >()->x);
HXLINE(1393)			Float sy = ::Math_obj::sin(components->get(1).StaticCast<  ::openfl::geom::Vector3D >()->y);
HXLINE(1394)			Float sz = ::Math_obj::sin(components->get(1).StaticCast<  ::openfl::geom::Vector3D >()->z);
HXLINE(1396)			this->rawData->set(0,((cy * cz) * scale->__get(0)));
HXLINE(1397)			this->rawData->set(1,((cy * sz) * scale->__get(1)));
HXLINE(1398)			this->rawData->set(2,(-(sy) * scale->__get(2)));
HXLINE(1399)			this->rawData->set(3,( (Float)(0) ));
HXLINE(1400)			this->rawData->set(4,((((sx * sy) * cz) - (cx * sz)) * scale->__get(4)));
HXLINE(1401)			this->rawData->set(5,((((sx * sy) * sz) + (cx * cz)) * scale->__get(5)));
HXLINE(1402)			this->rawData->set(6,((sx * cy) * scale->__get(6)));
HXLINE(1403)			this->rawData->set(7,( (Float)(0) ));
HXLINE(1404)			this->rawData->set(8,((((cx * sy) * cz) + (sx * sz)) * scale->__get(8)));
HXLINE(1405)			this->rawData->set(9,((((cx * sy) * sz) - (sx * cz)) * scale->__get(9)));
HXLINE(1406)			this->rawData->set(10,((cx * cy) * scale->__get(10)));
HXLINE(1407)			this->rawData->set(11,( (Float)(0) ));
HXLINE(1408)			{
HXLINE(1408)				::Dynamic this1 = this->rawData;
HXDLIN(1408)				( ( ::openfl::_Vector::FloatVector)(this1) )->set(12,components->get(0).StaticCast<  ::openfl::geom::Vector3D >()->x);
            			}
HXLINE(1409)			{
HXLINE(1409)				::Dynamic this2 = this->rawData;
HXDLIN(1409)				( ( ::openfl::_Vector::FloatVector)(this2) )->set(13,components->get(0).StaticCast<  ::openfl::geom::Vector3D >()->y);
            			}
HXLINE(1410)			{
HXLINE(1410)				::Dynamic this3 = this->rawData;
HXDLIN(1410)				( ( ::openfl::_Vector::FloatVector)(this3) )->set(14,components->get(0).StaticCast<  ::openfl::geom::Vector3D >()->z);
            			}
HXLINE(1411)			this->rawData->set(15,( (Float)(1) ));
            		}
            		else {
HXLINE(1414)			Float x = components->get(1).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXLINE(1415)			Float y = components->get(1).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXLINE(1416)			Float z = components->get(1).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXLINE(1417)			Float w = components->get(1).StaticCast<  ::openfl::geom::Vector3D >()->w;
HXLINE(1419)			if (hx::IsEq( orientationStyle,0 )) {
HXLINE(1421)				x = (x * ::Math_obj::sin((w / ( (Float)(2) ))));
HXLINE(1422)				y = (y * ::Math_obj::sin((w / ( (Float)(2) ))));
HXLINE(1423)				z = (z * ::Math_obj::sin((w / ( (Float)(2) ))));
HXLINE(1424)				w = ::Math_obj::cos((w / ( (Float)(2) )));
            			}
HXLINE(1427)			this->rawData->set(0,(((( (Float)(1) ) - ((( (Float)(2) ) * y) * y)) - ((( (Float)(2) ) * z) * z)) * scale->__get(0)));
HXLINE(1428)			this->rawData->set(1,((((( (Float)(2) ) * x) * y) + ((( (Float)(2) ) * w) * z)) * scale->__get(1)));
HXLINE(1429)			this->rawData->set(2,((((( (Float)(2) ) * x) * z) - ((( (Float)(2) ) * w) * y)) * scale->__get(2)));
HXLINE(1430)			this->rawData->set(3,( (Float)(0) ));
HXLINE(1431)			this->rawData->set(4,((((( (Float)(2) ) * x) * y) - ((( (Float)(2) ) * w) * z)) * scale->__get(4)));
HXLINE(1432)			this->rawData->set(5,(((( (Float)(1) ) - ((( (Float)(2) ) * x) * x)) - ((( (Float)(2) ) * z) * z)) * scale->__get(5)));
HXLINE(1433)			this->rawData->set(6,((((( (Float)(2) ) * y) * z) + ((( (Float)(2) ) * w) * x)) * scale->__get(6)));
HXLINE(1434)			this->rawData->set(7,( (Float)(0) ));
HXLINE(1435)			this->rawData->set(8,((((( (Float)(2) ) * x) * z) + ((( (Float)(2) ) * w) * y)) * scale->__get(8)));
HXLINE(1436)			this->rawData->set(9,((((( (Float)(2) ) * y) * z) - ((( (Float)(2) ) * w) * x)) * scale->__get(9)));
HXLINE(1437)			this->rawData->set(10,(((( (Float)(1) ) - ((( (Float)(2) ) * x) * x)) - ((( (Float)(2) ) * y) * y)) * scale->__get(10)));
HXLINE(1438)			this->rawData->set(11,( (Float)(0) ));
HXLINE(1439)			{
HXLINE(1439)				::Dynamic this4 = this->rawData;
HXDLIN(1439)				( ( ::openfl::_Vector::FloatVector)(this4) )->set(12,components->get(0).StaticCast<  ::openfl::geom::Vector3D >()->x);
            			}
HXLINE(1440)			{
HXLINE(1440)				::Dynamic this5 = this->rawData;
HXDLIN(1440)				( ( ::openfl::_Vector::FloatVector)(this5) )->set(13,components->get(0).StaticCast<  ::openfl::geom::Vector3D >()->y);
            			}
HXLINE(1441)			{
HXLINE(1441)				::Dynamic this6 = this->rawData;
HXDLIN(1441)				( ( ::openfl::_Vector::FloatVector)(this6) )->set(14,components->get(0).StaticCast<  ::openfl::geom::Vector3D >()->z);
            			}
HXLINE(1442)			this->rawData->set(15,( (Float)(1) ));
            		}
HXLINE(1445)		if ((components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->x == 0)) {
HXLINE(1447)			this->rawData->set(0,((Float)1e-15));
            		}
HXLINE(1450)		if ((components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->y == 0)) {
HXLINE(1452)			this->rawData->set(5,((Float)1e-15));
            		}
HXLINE(1455)		if ((components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->z == 0)) {
HXLINE(1457)			this->rawData->set(10,((Float)1e-15));
            		}
HXLINE(1460)		bool _hx_tmp3;
HXDLIN(1460)		bool _hx_tmp4;
HXDLIN(1460)		if ((components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->x != 0)) {
HXLINE(1460)			_hx_tmp4 = (components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->y == 0);
            		}
            		else {
HXLINE(1460)			_hx_tmp4 = true;
            		}
HXDLIN(1460)		if (!(_hx_tmp4)) {
HXLINE(1460)			_hx_tmp3 = (components->get(2).StaticCast<  ::openfl::geom::Vector3D >()->y == 0);
            		}
            		else {
HXLINE(1460)			_hx_tmp3 = true;
            		}
HXDLIN(1460)		return !(_hx_tmp3);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,recompose,return )

 ::openfl::geom::Vector3D Matrix3D_obj::transformVector( ::openfl::geom::Vector3D v){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_1481_transformVector)
HXLINE(1482)		Float x = v->x;
HXLINE(1483)		Float y = v->y;
HXLINE(1484)		Float z = v->z;
HXLINE(1486)		Float _hx_tmp = (x * this->rawData->get(0));
HXDLIN(1486)		Float _hx_tmp1 = (_hx_tmp + (y * this->rawData->get(4)));
HXDLIN(1486)		Float _hx_tmp2 = (_hx_tmp1 + (z * this->rawData->get(8)));
HXDLIN(1486)		Float _hx_tmp3 = (_hx_tmp2 + this->rawData->get(12));
HXLINE(1487)		Float _hx_tmp4 = (x * this->rawData->get(1));
HXDLIN(1487)		Float _hx_tmp5 = (_hx_tmp4 + (y * this->rawData->get(5)));
HXDLIN(1487)		Float _hx_tmp6 = (_hx_tmp5 + (z * this->rawData->get(9)));
HXDLIN(1487)		Float _hx_tmp7 = (_hx_tmp6 + this->rawData->get(13));
HXDLIN(1487)		Float _hx_tmp8 = (x * this->rawData->get(2));
HXDLIN(1487)		Float _hx_tmp9 = (_hx_tmp8 + (y * this->rawData->get(6)));
HXDLIN(1487)		Float _hx_tmp10 = (_hx_tmp9 + (z * this->rawData->get(10)));
HXDLIN(1487)		Float _hx_tmp11 = (_hx_tmp10 + this->rawData->get(14));
HXLINE(1488)		Float _hx_tmp12 = (x * this->rawData->get(3));
HXDLIN(1488)		Float _hx_tmp13 = (_hx_tmp12 + (y * this->rawData->get(7)));
HXDLIN(1488)		Float _hx_tmp14 = (_hx_tmp13 + (z * this->rawData->get(11)));
HXLINE(1486)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_tmp7,_hx_tmp11,(_hx_tmp14 + this->rawData->get(15)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,transformVector,return )

void Matrix3D_obj::transformVectors( ::openfl::_Vector::FloatVector vin, ::openfl::_Vector::FloatVector vout){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_1506_transformVectors)
HXLINE(1507)		int i = 0;
HXLINE(1508)		Float x;
HXDLIN(1508)		Float y;
HXDLIN(1508)		Float z;
HXLINE(1510)		while(((i + 3) <= vin->get_length())){
HXLINE(1512)			x = vin->get(i);
HXLINE(1513)			y = vin->get((i + 1));
HXLINE(1514)			z = vin->get((i + 2));
HXLINE(1516)			{
HXLINE(1516)				Float value = (x * this->rawData->get(0));
HXDLIN(1516)				Float value1 = (value + (y * this->rawData->get(4)));
HXDLIN(1516)				Float value2 = (value1 + (z * this->rawData->get(8)));
HXDLIN(1516)				vout->set(i,(value2 + this->rawData->get(12)));
            			}
HXLINE(1517)			{
HXLINE(1517)				Float value3 = (x * this->rawData->get(1));
HXDLIN(1517)				Float value4 = (value3 + (y * this->rawData->get(5)));
HXDLIN(1517)				Float value5 = (value4 + (z * this->rawData->get(9)));
HXDLIN(1517)				vout->set((i + 1),(value5 + this->rawData->get(13)));
            			}
HXLINE(1518)			{
HXLINE(1518)				Float value6 = (x * this->rawData->get(2));
HXDLIN(1518)				Float value7 = (value6 + (y * this->rawData->get(6)));
HXDLIN(1518)				Float value8 = (value7 + (z * this->rawData->get(10)));
HXDLIN(1518)				vout->set((i + 2),(value8 + this->rawData->get(14)));
            			}
HXLINE(1520)			i = (i + 3);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,transformVectors,(void))

void Matrix3D_obj::transpose(){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_1540_transpose)
HXLINE(1541)		 ::openfl::_Vector::FloatVector oRawData = ( ( ::openfl::_Vector::FloatVector)(this->rawData->copy()) );
HXLINE(1542)		{
HXLINE(1542)			::Dynamic this1 = this->rawData;
HXDLIN(1542)			( ( ::openfl::_Vector::FloatVector)(this1) )->set(1,oRawData->get(4));
            		}
HXLINE(1543)		{
HXLINE(1543)			::Dynamic this2 = this->rawData;
HXDLIN(1543)			( ( ::openfl::_Vector::FloatVector)(this2) )->set(2,oRawData->get(8));
            		}
HXLINE(1544)		{
HXLINE(1544)			::Dynamic this3 = this->rawData;
HXDLIN(1544)			( ( ::openfl::_Vector::FloatVector)(this3) )->set(3,oRawData->get(12));
            		}
HXLINE(1545)		{
HXLINE(1545)			::Dynamic this4 = this->rawData;
HXDLIN(1545)			( ( ::openfl::_Vector::FloatVector)(this4) )->set(4,oRawData->get(1));
            		}
HXLINE(1546)		{
HXLINE(1546)			::Dynamic this5 = this->rawData;
HXDLIN(1546)			( ( ::openfl::_Vector::FloatVector)(this5) )->set(6,oRawData->get(9));
            		}
HXLINE(1547)		{
HXLINE(1547)			::Dynamic this6 = this->rawData;
HXDLIN(1547)			( ( ::openfl::_Vector::FloatVector)(this6) )->set(7,oRawData->get(13));
            		}
HXLINE(1548)		{
HXLINE(1548)			::Dynamic this7 = this->rawData;
HXDLIN(1548)			( ( ::openfl::_Vector::FloatVector)(this7) )->set(8,oRawData->get(2));
            		}
HXLINE(1549)		{
HXLINE(1549)			::Dynamic this8 = this->rawData;
HXDLIN(1549)			( ( ::openfl::_Vector::FloatVector)(this8) )->set(9,oRawData->get(6));
            		}
HXLINE(1550)		{
HXLINE(1550)			::Dynamic this9 = this->rawData;
HXDLIN(1550)			( ( ::openfl::_Vector::FloatVector)(this9) )->set(11,oRawData->get(14));
            		}
HXLINE(1551)		{
HXLINE(1551)			::Dynamic this10 = this->rawData;
HXDLIN(1551)			( ( ::openfl::_Vector::FloatVector)(this10) )->set(12,oRawData->get(3));
            		}
HXLINE(1552)		{
HXLINE(1552)			::Dynamic this11 = this->rawData;
HXDLIN(1552)			( ( ::openfl::_Vector::FloatVector)(this11) )->set(13,oRawData->get(7));
            		}
HXLINE(1553)		{
HXLINE(1553)			::Dynamic this12 = this->rawData;
HXDLIN(1553)			( ( ::openfl::_Vector::FloatVector)(this12) )->set(14,oRawData->get(11));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,transpose,(void))

Float Matrix3D_obj::get_determinant(){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_1589_get_determinant)
HXDLIN(1589)		Float _hx_tmp = this->rawData->get(0);
HXDLIN(1589)		Float _hx_tmp1 = (_hx_tmp * this->rawData->get(5));
HXDLIN(1589)		Float _hx_tmp2 = this->rawData->get(4);
HXDLIN(1589)		Float _hx_tmp3 = (_hx_tmp1 - (_hx_tmp2 * this->rawData->get(1)));
HXDLIN(1589)		Float _hx_tmp4 = this->rawData->get(10);
HXDLIN(1589)		Float _hx_tmp5 = (_hx_tmp4 * this->rawData->get(15));
HXDLIN(1589)		Float _hx_tmp6 = this->rawData->get(14);
HXDLIN(1589)		Float _hx_tmp7 = (_hx_tmp3 * (_hx_tmp5 - (_hx_tmp6 * this->rawData->get(11))));
HXLINE(1590)		Float _hx_tmp8 = this->rawData->get(0);
HXDLIN(1590)		Float _hx_tmp9 = (_hx_tmp8 * this->rawData->get(9));
HXDLIN(1590)		Float _hx_tmp10 = this->rawData->get(8);
HXDLIN(1590)		Float _hx_tmp11 = (_hx_tmp9 - (_hx_tmp10 * this->rawData->get(1)));
HXDLIN(1590)		Float _hx_tmp12 = this->rawData->get(6);
HXDLIN(1590)		Float _hx_tmp13 = (_hx_tmp12 * this->rawData->get(15));
HXDLIN(1590)		Float _hx_tmp14 = this->rawData->get(14);
HXLINE(1589)		Float _hx_tmp15 = (_hx_tmp7 - (_hx_tmp11 * (_hx_tmp13 - (_hx_tmp14 * this->rawData->get(7)))));
HXLINE(1591)		Float _hx_tmp16 = this->rawData->get(0);
HXDLIN(1591)		Float _hx_tmp17 = (_hx_tmp16 * this->rawData->get(13));
HXDLIN(1591)		Float _hx_tmp18 = this->rawData->get(12);
HXDLIN(1591)		Float _hx_tmp19 = (_hx_tmp17 - (_hx_tmp18 * this->rawData->get(1)));
HXDLIN(1591)		Float _hx_tmp20 = this->rawData->get(6);
HXDLIN(1591)		Float _hx_tmp21 = (_hx_tmp20 * this->rawData->get(11));
HXDLIN(1591)		Float _hx_tmp22 = this->rawData->get(10);
HXLINE(1589)		Float _hx_tmp23 = (_hx_tmp15 + (_hx_tmp19 * (_hx_tmp21 - (_hx_tmp22 * this->rawData->get(7)))));
HXLINE(1592)		Float _hx_tmp24 = this->rawData->get(4);
HXDLIN(1592)		Float _hx_tmp25 = (_hx_tmp24 * this->rawData->get(9));
HXDLIN(1592)		Float _hx_tmp26 = this->rawData->get(8);
HXDLIN(1592)		Float _hx_tmp27 = (_hx_tmp25 - (_hx_tmp26 * this->rawData->get(5)));
HXDLIN(1592)		Float _hx_tmp28 = this->rawData->get(2);
HXDLIN(1592)		Float _hx_tmp29 = (_hx_tmp28 * this->rawData->get(15));
HXDLIN(1592)		Float _hx_tmp30 = this->rawData->get(14);
HXLINE(1589)		Float _hx_tmp31 = (_hx_tmp23 + (_hx_tmp27 * (_hx_tmp29 - (_hx_tmp30 * this->rawData->get(3)))));
HXLINE(1593)		Float _hx_tmp32 = this->rawData->get(4);
HXDLIN(1593)		Float _hx_tmp33 = (_hx_tmp32 * this->rawData->get(13));
HXDLIN(1593)		Float _hx_tmp34 = this->rawData->get(12);
HXDLIN(1593)		Float _hx_tmp35 = (_hx_tmp33 - (_hx_tmp34 * this->rawData->get(5)));
HXDLIN(1593)		Float _hx_tmp36 = this->rawData->get(2);
HXDLIN(1593)		Float _hx_tmp37 = (_hx_tmp36 * this->rawData->get(11));
HXDLIN(1593)		Float _hx_tmp38 = this->rawData->get(10);
HXLINE(1589)		Float _hx_tmp39 = (_hx_tmp31 - (_hx_tmp35 * (_hx_tmp37 - (_hx_tmp38 * this->rawData->get(3)))));
HXLINE(1594)		Float _hx_tmp40 = this->rawData->get(8);
HXDLIN(1594)		Float _hx_tmp41 = (_hx_tmp40 * this->rawData->get(13));
HXDLIN(1594)		Float _hx_tmp42 = this->rawData->get(12);
HXDLIN(1594)		Float _hx_tmp43 = (_hx_tmp41 - (_hx_tmp42 * this->rawData->get(9)));
HXDLIN(1594)		Float _hx_tmp44 = this->rawData->get(2);
HXDLIN(1594)		Float _hx_tmp45 = (_hx_tmp44 * this->rawData->get(7));
HXDLIN(1594)		Float _hx_tmp46 = this->rawData->get(6);
HXLINE(1589)		return (_hx_tmp39 + (_hx_tmp43 * (_hx_tmp45 - (_hx_tmp46 * this->rawData->get(3)))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,get_determinant,return )

 ::openfl::geom::Vector3D Matrix3D_obj::get_position(){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_1599_get_position)
HXDLIN(1599)		Float _hx_tmp = this->rawData->get(12);
HXDLIN(1599)		Float _hx_tmp1 = this->rawData->get(13);
HXDLIN(1599)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,this->rawData->get(14),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,get_position,return )

 ::openfl::geom::Vector3D Matrix3D_obj::set_position( ::openfl::geom::Vector3D val){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_1603_set_position)
HXLINE(1604)		this->rawData->set(12,val->x);
HXLINE(1605)		this->rawData->set(13,val->y);
HXLINE(1606)		this->rawData->set(14,val->z);
HXLINE(1607)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,set_position,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::create2D(Float x,Float y,hx::Null< Float >  __o_scale,hx::Null< Float >  __o_rotation){
            		Float scale = __o_scale.Default(1);
            		Float rotation = __o_rotation.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_549_create2D)
HXLINE( 550)		Float theta = ((rotation * ::Math_obj::PI) / ((Float)180.0));
HXLINE( 551)		Float c = ::Math_obj::cos(theta);
HXLINE( 552)		Float s = ::Math_obj::sin(theta);
HXLINE( 554)		int length = null();
HXDLIN( 554)		bool fixed = null();
HXDLIN( 554)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,::Array_obj< Float >::__new(16)->init(0,(c * scale))->init(1,(-(s) * scale))->init(2,0)->init(3,0)->init(4,(s * scale))->init(5,(c * scale))->init(6,0)->init(7,0)->init(8,0)->init(9,0)->init(10,1)->init(11,0)->init(12,x)->init(13,y)->init(14,0)->init(15,1),true));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3D_obj,create2D,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::createABCD(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_560_createABCD)
HXDLIN( 560)		int length = null();
HXDLIN( 560)		bool fixed = null();
HXDLIN( 560)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,::Array_obj< Float >::__new(16)->init(0,a)->init(1,b)->init(2,0)->init(3,0)->init(4,c)->init(5,d)->init(6,0)->init(7,0)->init(8,0)->init(9,0)->init(10,1)->init(11,0)->init(12,tx)->init(13,ty)->init(14,0)->init(15,1),true));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix3D_obj,createABCD,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::createOrtho(Float x0,Float x1,Float y0,Float y1,Float zNear,Float zFar){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_565_createOrtho)
HXLINE( 566)		Float sx = (((Float)1.0) / (x1 - x0));
HXLINE( 567)		Float sy = (((Float)1.0) / (y1 - y0));
HXLINE( 568)		Float sz = (((Float)1.0) / (zFar - zNear));
HXLINE( 570)		int length = null();
HXDLIN( 570)		bool fixed = null();
HXDLIN( 570)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,::Array_obj< Float >::__new(16)->init(0,(((Float)2.0) * sx))->init(1,0)->init(2,0)->init(3,0)->init(4,0)->init(5,(((Float)2.0) * sy))->init(6,0)->init(7,0)->init(8,0)->init(9,0)->init(10,(((Float)-2.0) * sz))->init(11,0)->init(12,(-((x0 + x1)) * sx))->init(13,(-((y0 + y1)) * sy))->init(14,(-((zNear + zFar)) * sz))->init(15,1),true));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix3D_obj,createOrtho,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::interpolate( ::openfl::geom::Matrix3D thisMat, ::openfl::geom::Matrix3D toMat,Float percent){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_810_interpolate)
HXLINE( 811)		 ::openfl::geom::Matrix3D m =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 813)		{
HXLINE( 813)			int _g = 0;
HXDLIN( 813)			while((_g < 16)){
HXLINE( 813)				_g = (_g + 1);
HXDLIN( 813)				int i = (_g - 1);
HXLINE( 815)				{
HXLINE( 815)					::Dynamic this1 = m->rawData;
HXDLIN( 815)					Float value = thisMat->rawData->get(i);
HXDLIN( 815)					Float value1 = toMat->rawData->get(i);
HXDLIN( 815)					( ( ::openfl::_Vector::FloatVector)(this1) )->set(i,(value + ((value1 - thisMat->rawData->get(i)) * percent)));
            				}
            			}
            		}
HXLINE( 818)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,interpolate,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::_hx___getAxisRotation(Float x,Float y,Float z,Float degrees){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_1557___getAxisRotation)
HXLINE(1558)		 ::openfl::geom::Matrix3D m =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE(1560)		 ::openfl::geom::Vector3D a1 =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,x,y,z,null());
HXLINE(1561)		Float rad = (-(degrees) * (::Math_obj::PI / ( (Float)(180) )));
HXLINE(1562)		Float c = ::Math_obj::cos(rad);
HXLINE(1563)		Float s = ::Math_obj::sin(rad);
HXLINE(1564)		Float t = (((Float)1.0) - c);
HXLINE(1566)		m->rawData->set(0,(c + ((a1->x * a1->x) * t)));
HXLINE(1567)		m->rawData->set(5,(c + ((a1->y * a1->y) * t)));
HXLINE(1568)		m->rawData->set(10,(c + ((a1->z * a1->z) * t)));
HXLINE(1570)		Float tmp1 = ((a1->x * a1->y) * t);
HXLINE(1571)		Float tmp2 = (a1->z * s);
HXLINE(1572)		m->rawData->set(4,(tmp1 + tmp2));
HXLINE(1573)		m->rawData->set(1,(tmp1 - tmp2));
HXLINE(1574)		tmp1 = ((a1->x * a1->z) * t);
HXLINE(1575)		tmp2 = (a1->y * s);
HXLINE(1576)		m->rawData->set(8,(tmp1 - tmp2));
HXLINE(1577)		m->rawData->set(2,(tmp1 + tmp2));
HXLINE(1578)		tmp1 = ((a1->y * a1->z) * t);
HXLINE(1579)		tmp2 = (a1->x * s);
HXLINE(1580)		m->rawData->set(9,(tmp1 + tmp2));
HXLINE(1581)		m->rawData->set(6,(tmp1 - tmp2));
HXLINE(1583)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3D_obj,_hx___getAxisRotation,return )


hx::ObjectPtr< Matrix3D_obj > Matrix3D_obj::__new( ::openfl::_Vector::FloatVector v) {
	hx::ObjectPtr< Matrix3D_obj > __this = new Matrix3D_obj();
	__this->__construct(v);
	return __this;
}

hx::ObjectPtr< Matrix3D_obj > Matrix3D_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::_Vector::FloatVector v) {
	Matrix3D_obj *__this = (Matrix3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Matrix3D_obj), true, "openfl.geom.Matrix3D"));
	*(void **)__this = Matrix3D_obj::_hx_vtable;
	__this->__construct(v);
	return __this;
}

Matrix3D_obj::Matrix3D_obj()
{
}

void Matrix3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Matrix3D);
	HX_MARK_MEMBER_NAME(rawData,"rawData");
	HX_MARK_END_CLASS();
}

void Matrix3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rawData,"rawData");
}

hx::Val Matrix3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"append") ) { return hx::Val( append_dyn() ); }
		if (HX_FIELD_EQ(inName,"invert") ) { return hx::Val( invert_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rawData") ) { return hx::Val( rawData ); }
		if (HX_FIELD_EQ(inName,"pointAt") ) { return hx::Val( pointAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"prepend") ) { return hx::Val( prepend_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_position() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"identity") ) { return hx::Val( identity_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { return hx::Val( copyRowTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn() ); }
		if (HX_FIELD_EQ(inName,"recompose") ) { return hx::Val( recompose_dyn() ); }
		if (HX_FIELD_EQ(inName,"transpose") ) { return hx::Val( transpose_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"determinant") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_determinant() ); }
		if (HX_FIELD_EQ(inName,"appendScale") ) { return hx::Val( appendScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { return hx::Val( copyRowFrom_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { return hx::Val( copyColumnTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"prependScale") ) { return hx::Val( prependScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyRawDataTo") ) { return hx::Val( copyRawDataTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"interpolateTo") ) { return hx::Val( interpolateTo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"appendRotation") ) { return hx::Val( appendRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { return hx::Val( copyColumnFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyToMatrix3D") ) { return hx::Val( copyToMatrix3D_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"copyRawDataFrom") ) { return hx::Val( copyRawDataFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"prependRotation") ) { return hx::Val( prependRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformVector") ) { return hx::Val( transformVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_determinant") ) { return hx::Val( get_determinant_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"transformVectors") ) { return hx::Val( transformVectors_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"appendTranslation") ) { return hx::Val( appendTranslation_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"prependTranslation") ) { return hx::Val( prependTranslation_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"deltaTransformVector") ) { return hx::Val( deltaTransformVector_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Matrix3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"create2D") ) { outValue = create2D_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createABCD") ) { outValue = createABCD_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createOrtho") ) { outValue = createOrtho_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__getAxisRotation") ) { outValue = _hx___getAxisRotation_dyn(); return true; }
	}
	return false;
}

hx::Val Matrix3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"rawData") ) { rawData=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue.Cast<  ::openfl::geom::Vector3D >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Matrix3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("determinant",95,5d,15,32));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("rawData",32,6c,18,ff));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix3D_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(Matrix3D_obj,rawData),HX_("rawData",32,6c,18,ff)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Matrix3D_obj_sStaticStorageInfo = 0;
#endif

static ::String Matrix3D_obj_sMemberFields[] = {
	HX_("rawData",32,6c,18,ff),
	HX_("append",da,e1,d3,8f),
	HX_("appendRotation",38,45,e8,cb),
	HX_("appendScale",50,66,45,b5),
	HX_("appendTranslation",37,e1,3d,d6),
	HX_("clone",5d,13,63,48),
	HX_("copyColumnFrom",75,97,b5,3a),
	HX_("copyColumnTo",c6,2e,f6,f6),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("copyRawDataFrom",07,7d,bd,2c),
	HX_("copyRawDataTo",d8,2b,f7,a8),
	HX_("copyRowFrom",6f,45,8b,ef),
	HX_("copyRowTo",40,8a,62,73),
	HX_("copyToMatrix3D",e2,1d,1f,04),
	HX_("decompose",b1,c3,a7,7a),
	HX_("deltaTransformVector",37,02,9c,c2),
	HX_("identity",3e,45,2f,b9),
	HX_("interpolateTo",9c,90,22,71),
	HX_("invert",16,e7,d8,9f),
	HX_("pointAt",63,a1,21,51),
	HX_("prepend",0e,97,e0,37),
	HX_("prependRotation",6c,4e,3b,e8),
	HX_("prependScale",9c,54,97,c4),
	HX_("prependTranslation",83,90,15,05),
	HX_("recompose",bf,81,db,03),
	HX_("transformVector",4f,2b,b3,d2),
	HX_("transformVectors",44,ba,12,8a),
	HX_("transpose",79,50,2f,4c),
	HX_("get_determinant",2c,15,f7,f2),
	HX_("get_position",b2,54,14,80),
	HX_("set_position",26,78,0d,95),
	::String(null()) };

hx::Class Matrix3D_obj::__mClass;

static ::String Matrix3D_obj_sStaticFields[] = {
	HX_("create2D",ce,49,f4,2b),
	HX_("createABCD",be,c2,dd,52),
	HX_("createOrtho",9c,4e,a8,5e),
	HX_("interpolate",c1,d4,32,1f),
	HX_("__getAxisRotation",95,a5,44,7b),
	::String(null())
};

void Matrix3D_obj::__register()
{
	Matrix3D_obj _hx_dummy;
	Matrix3D_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.geom.Matrix3D",e6,93,2e,3d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix3D_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix3D_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix3D_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_54_boot)
HXDLIN(  54)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("statics",05,3c,65,36), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("create2D",ce,49,f4,2b), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20)))))
            				->setFixed(1,HX_("createABCD",be,c2,dd,52), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20)))))
            				->setFixed(2,HX_("createOrtho",9c,4e,a8,5e), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))))));
            	}
}

} // end namespace openfl
} // end namespace geom
