// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_61_new,"openfl.text.Font","new",0xe13d5ce4,"openfl.text.Font.new","openfl/text/Font.hx",61,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_245___fromLimeFont,"openfl.text.Font","__fromLimeFont",0x57c4282a,"openfl.text.Font.__fromLimeFont","openfl/text/Font.hx",245,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_250___initialize,"openfl.text.Font","__initialize",0x3f396f6c,"openfl.text.Font.__initialize","openfl/text/Font.hx",250,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_275_get_fontName,"openfl.text.Font","get_fontName",0x9a8206bf,"openfl.text.Font.get_fontName","openfl/text/Font.hx",275,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_284_set_fontName,"openfl.text.Font","set_fontName",0xaf7b2a33,"openfl.text.Font.set_fontName","openfl/text/Font.hx",284,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_80_enumerateFonts,"openfl.text.Font","enumerateFonts",0x792ac3fc,"openfl.text.Font.enumerateFonts","openfl/text/Font.hx",80,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_92_fromBytes,"openfl.text.Font","fromBytes",0x95ccba25,"openfl.text.Font.fromBytes","openfl/text/Font.hx",92,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_113_fromFile,"openfl.text.Font","fromFile",0x919e3202,"openfl.text.Font.fromFile","openfl/text/Font.hx",113,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_151_loadFromBytes,"openfl.text.Font","loadFromBytes",0x88069d1f,"openfl.text.Font.loadFromBytes","openfl/text/Font.hx",151,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_150_loadFromBytes,"openfl.text.Font","loadFromBytes",0x88069d1f,"openfl.text.Font.loadFromBytes","openfl/text/Font.hx",150,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_175_loadFromFile,"openfl.text.Font","loadFromFile",0x74db4c48,"openfl.text.Font.loadFromFile","openfl/text/Font.hx",175,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_174_loadFromFile,"openfl.text.Font","loadFromFile",0x74db4c48,"openfl.text.Font.loadFromFile","openfl/text/Font.hx",174,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_201_loadFromName,"openfl.text.Font","loadFromName",0x7a1ef017,"openfl.text.Font.loadFromName","openfl/text/Font.hx",201,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_200_loadFromName,"openfl.text.Font","loadFromName",0x7a1ef017,"openfl.text.Font.loadFromName","openfl/text/Font.hx",200,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_217_registerFont,"openfl.text.Font","registerFont",0xd99a60ce,"openfl.text.Font.registerFont","openfl/text/Font.hx",217,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_42_boot,"openfl.text.Font","boot",0x2c8ceb2e,"openfl.text.Font.boot","openfl/text/Font.hx",42,0x076bbaac)
HX_LOCAL_STACK_FRAME(_hx_pos_bf5c0d6977753a1b_43_boot,"openfl.text.Font","boot",0x2c8ceb2e,"openfl.text.Font.boot","openfl/text/Font.hx",43,0x076bbaac)
namespace openfl{
namespace text{

void Font_obj::__construct(::String name){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_61_new)
HXDLIN(  61)		super::__construct(name);
            	}

Dynamic Font_obj::__CreateEmpty() { return new Font_obj; }

void *Font_obj::_hx_vtable = 0;

Dynamic Font_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Font_obj > _hx_result = new Font_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Font_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6aed2e71) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x6aed2e71;
	} else {
		return inClassId==(int)0x7d07fbf0;
	}
}

void Font_obj::_hx___fromLimeFont( ::lime::text::Font font){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_245___fromLimeFont)
HXDLIN( 245)		this->_hx___copyFrom(font);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___fromLimeFont,(void))

bool Font_obj::_hx___initialize(){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_250___initialize)
HXLINE( 252)		if (!(this->_hx___initialized)) {
HXLINE( 254)			if (hx::IsNotNull( this->src )) {
HXLINE( 257)				if ((this->unitsPerEM == 0)) {
HXLINE( 257)					this->_hx___initializeSource();
            				}
HXLINE( 258)				this->_hx___initialized = true;
            			}
            			else {
HXLINE( 260)				bool _hx_tmp;
HXDLIN( 260)				bool _hx_tmp1;
HXDLIN( 260)				if (hx::IsNull( this->src )) {
HXLINE( 260)					_hx_tmp1 = hx::IsNotNull( this->_hx___fontID );
            				}
            				else {
HXLINE( 260)					_hx_tmp1 = false;
            				}
HXDLIN( 260)				if (_hx_tmp1) {
HXLINE( 260)					_hx_tmp = ::openfl::utils::Assets_obj::isLocal(this->_hx___fontID,null(),null());
            				}
            				else {
HXLINE( 260)					_hx_tmp = false;
            				}
HXDLIN( 260)				if (_hx_tmp) {
HXLINE( 262)					this->_hx___fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(::openfl::utils::Assets_obj::getBytes(this->_hx___fontID)));
HXLINE( 263)					this->_hx___initialized = true;
            				}
            			}
            		}
HXLINE( 268)		return this->_hx___initialized;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,_hx___initialize,return )

::String Font_obj::get_fontName(){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_275_get_fontName)
HXDLIN( 275)		return this->name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_fontName,return )

::String Font_obj::set_fontName(::String value){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_284_set_fontName)
HXDLIN( 284)		return (this->name = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,set_fontName,return )

 ::haxe::ds::StringMap Font_obj::_hx___fontByName;

::Array< ::Dynamic> Font_obj::_hx___registeredFonts;

::Array< ::Dynamic> Font_obj::enumerateFonts(hx::Null< bool >  __o_enumerateDeviceFonts){
            		bool enumerateDeviceFonts = __o_enumerateDeviceFonts.Default(false);
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_80_enumerateFonts)
HXDLIN(  80)		return ::openfl::text::Font_obj::_hx___registeredFonts;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,enumerateFonts,return )

 ::openfl::text::Font Font_obj::fromBytes( ::openfl::utils::ByteArrayData bytes){
            	HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_92_fromBytes)
HXLINE(  93)		 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE(  95)		font->_hx___fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes));
HXLINE(  99)		if (hx::IsNotNull( font->src )) {
HXLINE(  99)			return font;
            		}
            		else {
HXLINE(  99)			return null();
            		}
HXDLIN(  99)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromBytes,return )

 ::openfl::text::Font Font_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_113_fromFile)
HXLINE( 114)		 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 116)		font->_hx___fromFile(path);
HXLINE( 120)		if (hx::IsNotNull( font->src )) {
HXLINE( 120)			return font;
            		}
            		else {
HXLINE( 120)			return null();
            		}
HXDLIN( 120)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromFile,return )

 ::lime::app::Future Font_obj::loadFromBytes( ::openfl::utils::ByteArrayData bytes){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::text::Font limeFont){
            			HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_151_loadFromBytes)
HXLINE( 152)			 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 153)			font->_hx___fromLimeFont(limeFont);
HXLINE( 155)			return ::lime::app::Future_obj::withValue(font);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_150_loadFromBytes)
HXDLIN( 150)		return ::lime::text::Font_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromBytes,return )

 ::lime::app::Future Font_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::text::Font limeFont){
            			HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_175_loadFromFile)
HXLINE( 176)			 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 177)			font->_hx___fromLimeFont(limeFont);
HXLINE( 179)			return ::lime::app::Future_obj::withValue(font);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_174_loadFromFile)
HXDLIN( 174)		return ::lime::text::Font_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromFile,return )

 ::lime::app::Future Font_obj::loadFromName(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::text::Font limeFont){
            			HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_201_loadFromName)
HXLINE( 202)			 ::openfl::text::Font font =  ::openfl::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 203)			font->_hx___fromLimeFont(limeFont);
HXLINE( 205)			return ::lime::app::Future_obj::withValue(font);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_200_loadFromName)
HXDLIN( 200)		return ::lime::text::Font_obj::loadFromName(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromName,return )

void Font_obj::registerFont( ::Dynamic font){
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_217_registerFont)
HXLINE( 218)		 ::openfl::text::Font instance = null();
HXLINE( 220)		if (hx::IsNull( ::Type_obj::getClass(font) )) {
HXLINE( 222)			instance = hx::TCast<  ::openfl::text::Font >::cast(::Type_obj::createInstance(font,::cpp::VirtualArray_obj::__new(0)));
            		}
            		else {
HXLINE( 226)			instance = hx::TCast<  ::openfl::text::Font >::cast(font);
            		}
HXLINE( 229)		if (hx::IsNotNull( instance )) {
HXLINE( 237)			::openfl::text::Font_obj::_hx___registeredFonts->push(instance);
HXLINE( 238)			::openfl::text::Font_obj::_hx___fontByName->set(instance->name,instance);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,registerFont,(void))


hx::ObjectPtr< Font_obj > Font_obj::__new(::String name) {
	hx::ObjectPtr< Font_obj > __this = new Font_obj();
	__this->__construct(name);
	return __this;
}

hx::ObjectPtr< Font_obj > Font_obj::__alloc(hx::Ctx *_hx_ctx,::String name) {
	Font_obj *__this = (Font_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Font_obj), true, "openfl.text.Font"));
	*(void **)__this = Font_obj::_hx_vtable;
	__this->__construct(name);
	return __this;
}

Font_obj::Font_obj()
{
}

void Font_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Font);
	HX_MARK_MEMBER_NAME(fontStyle,"fontStyle");
	HX_MARK_MEMBER_NAME(fontType,"fontType");
	HX_MARK_MEMBER_NAME(_hx___initialized,"__initialized");
	 ::lime::text::Font_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Font_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fontStyle,"fontStyle");
	HX_VISIT_MEMBER_NAME(fontType,"fontType");
	HX_VISIT_MEMBER_NAME(_hx___initialized,"__initialized");
	 ::lime::text::Font_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Font_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fontName() ); }
		if (HX_FIELD_EQ(inName,"fontType") ) { return hx::Val( fontType ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fontStyle") ) { return hx::Val( fontStyle ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initialize") ) { return hx::Val( _hx___initialize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fontName") ) { return hx::Val( get_fontName_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fontName") ) { return hx::Val( set_fontName_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__initialized") ) { return hx::Val( _hx___initialized ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__fromLimeFont") ) { return hx::Val( _hx___fromLimeFont_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Font_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__fontByName") ) { outValue = ( _hx___fontByName ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFromName") ) { outValue = loadFromName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"registerFont") ) { outValue = registerFont_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"enumerateFonts") ) { outValue = enumerateFonts_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__registeredFonts") ) { outValue = ( _hx___registeredFonts ); return true; }
	}
	return false;
}

hx::Val Font_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fontName") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fontName(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"fontType") ) { fontType=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fontStyle") ) { fontStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__initialized") ) { _hx___initialized=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Font_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__fontByName") ) { _hx___fontByName=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__registeredFonts") ) { _hx___registeredFonts=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Font_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("fontName",ba,8f,7d,cb));
	outFields->push(HX_("fontStyle",e2,48,f9,2f));
	outFields->push(HX_("fontType",29,10,87,cf));
	outFields->push(HX_("__initialized",f4,35,88,7f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Font_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Font_obj,fontStyle),HX_("fontStyle",e2,48,f9,2f)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Font_obj,fontType),HX_("fontType",29,10,87,cf)},
	{hx::fsBool,(int)offsetof(Font_obj,_hx___initialized),HX_("__initialized",f4,35,88,7f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Font_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Font_obj::_hx___fontByName,HX_("__fontByName",11,3e,35,fb)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Font_obj::_hx___registeredFonts,HX_("__registeredFonts",c2,83,84,64)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Font_obj_sMemberFields[] = {
	HX_("fontStyle",e2,48,f9,2f),
	HX_("fontType",29,10,87,cf),
	HX_("__initialized",f4,35,88,7f),
	HX_("__fromLimeFont",2e,ae,65,db),
	HX_("__initialize",70,ac,4e,25),
	HX_("get_fontName",c3,43,97,80),
	HX_("set_fontName",37,67,90,95),
	::String(null()) };

static void Font_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Font_obj::_hx___fontByName,"__fontByName");
	HX_MARK_MEMBER_NAME(Font_obj::_hx___registeredFonts,"__registeredFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Font_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Font_obj::_hx___fontByName,"__fontByName");
	HX_VISIT_MEMBER_NAME(Font_obj::_hx___registeredFonts,"__registeredFonts");
};

#endif

hx::Class Font_obj::__mClass;

static ::String Font_obj_sStaticFields[] = {
	HX_("__fontByName",11,3e,35,fb),
	HX_("__registeredFonts",c2,83,84,64),
	HX_("enumerateFonts",00,4a,cc,fc),
	HX_("fromBytes",a1,f2,20,72),
	HX_("fromFile",06,9d,87,a1),
	HX_("loadFromBytes",9b,c3,86,f4),
	HX_("loadFromFile",4c,89,f0,5a),
	HX_("loadFromName",1b,2d,34,60),
	HX_("registerFont",d2,9d,af,bf),
	::String(null())
};

void Font_obj::__register()
{
	Font_obj _hx_dummy;
	Font_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.text.Font",f2,5a,54,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Font_obj::__GetStatic;
	__mClass->mSetStaticField = &Font_obj::__SetStatic;
	__mClass->mMarkFunc = Font_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Font_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Font_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Font_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Font_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Font_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Font_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Font_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_42_boot)
HXDLIN(  42)		_hx___fontByName =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_bf5c0d6977753a1b_43_boot)
HXDLIN(  43)		_hx___registeredFonts = ::Array_obj< ::Dynamic>::__new();
            	}
}

} // end namespace openfl
} // end namespace text
