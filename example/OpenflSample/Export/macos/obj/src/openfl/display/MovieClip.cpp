// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_FilterType
#include <openfl/_internal/formats/swf/FilterType.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLite
#include <openfl/_internal/formats/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SpriteSymbol
#include <openfl/_internal/symbols/SpriteSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_timeline_Frame
#include <openfl/_internal/symbols/timeline/Frame.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_timeline_FrameObject
#include <openfl/_internal/symbols/timeline/FrameObject.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_timeline_FrameObjectType
#include <openfl/_internal/symbols/timeline/FrameObjectType.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_FrameLabel
#include <openfl/display/FrameLabel.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display__MovieClip_FrameSymbolInstance
#include <openfl/display/_MovieClip/FrameSymbolInstance.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_BlurFilter
#include <openfl/filters/BlurFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_215_new,"openfl.display.MovieClip","new",0xe16984e8,"openfl.display.MovieClip.new","openfl/display/MovieClip.hx",215,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_237_addFrameScript,"openfl.display.MovieClip","addFrameScript",0xff5029ef,"openfl.display.MovieClip.addFrameScript","openfl/display/MovieClip.hx",237,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_271_gotoAndPlay,"openfl.display.MovieClip","gotoAndPlay",0x3bade190,"openfl.display.MovieClip.gotoAndPlay","openfl/display/MovieClip.hx",271,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_294_gotoAndStop,"openfl.display.MovieClip","gotoAndStop",0x3dafa39e,"openfl.display.MovieClip.gotoAndStop","openfl/display/MovieClip.hx",294,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_305_nextFrame,"openfl.display.MovieClip","nextFrame",0x3b845cc2,"openfl.display.MovieClip.nextFrame","openfl/display/MovieClip.hx",305,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_317_play,"openfl.display.MovieClip","play",0x5c42706c,"openfl.display.MovieClip.play","openfl/display/MovieClip.hx",317,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_335_prevFrame,"openfl.display.MovieClip","prevFrame",0x7f95e2c2,"openfl.display.MovieClip.prevFrame","openfl/display/MovieClip.hx",335,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_348_stop,"openfl.display.MovieClip","stop",0x5e44327a,"openfl.display.MovieClip.stop","openfl/display/MovieClip.hx",348,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_352___enterFrame,"openfl.display.MovieClip","__enterFrame",0x9306f98d,"openfl.display.MovieClip.__enterFrame","openfl/display/MovieClip.hx",352,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_361___updateFrameScript,"openfl.display.MovieClip","__updateFrameScript",0x594733f7,"openfl.display.MovieClip.__updateFrameScript","openfl/display/MovieClip.hx",361,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_399___updateSymbol,"openfl.display.MovieClip","__updateSymbol",0x5332e1d9,"openfl.display.MovieClip.__updateSymbol","openfl/display/MovieClip.hx",399,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_546___evaluateFrameScripts,"openfl.display.MovieClip","__evaluateFrameScripts",0xeeb7ecec,"openfl.display.MovieClip.__evaluateFrameScripts","openfl/display/MovieClip.hx",546,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_576___fromSymbol,"openfl.display.MovieClip","__fromSymbol",0xc2d8a9fa,"openfl.display.MovieClip.__fromSymbol","openfl/display/MovieClip.hx",576,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_809___getNextFrame,"openfl.display.MovieClip","__getNextFrame",0x21b0ba5c,"openfl.display.MovieClip.__getNextFrame","openfl/display/MovieClip.hx",809,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_830___goto,"openfl.display.MovieClip","__goto",0x81b9cd3b,"openfl.display.MovieClip.__goto","openfl/display/MovieClip.hx",830,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_842___resolveFrameReference,"openfl.display.MovieClip","__resolveFrameReference",0x22812f52,"openfl.display.MovieClip.__resolveFrameReference","openfl/display/MovieClip.hx",842,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_868___sortDepths,"openfl.display.MovieClip","__sortDepths",0x5b255da6,"openfl.display.MovieClip.__sortDepths","openfl/display/MovieClip.hx",868,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_872___stopAllMovieClips,"openfl.display.MovieClip","__stopAllMovieClips",0x702dce5a,"openfl.display.MovieClip.__stopAllMovieClips","openfl/display/MovieClip.hx",872,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_878___tabTest,"openfl.display.MovieClip","__tabTest",0x5479b8af,"openfl.display.MovieClip.__tabTest","openfl/display/MovieClip.hx",878,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_884___updateDisplayObject,"openfl.display.MovieClip","__updateDisplayObject",0x83a2ca40,"openfl.display.MovieClip.__updateDisplayObject","openfl/display/MovieClip.hx",884,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_956___updateFrameLabel,"openfl.display.MovieClip","__updateFrameLabel",0x555c4988,"openfl.display.MovieClip.__updateFrameLabel","openfl/display/MovieClip.hx",956,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_983___updateInstanceFields,"openfl.display.MovieClip","__updateInstanceFields",0x2ea09b6f,"openfl.display.MovieClip.__updateInstanceFields","openfl/display/MovieClip.hx",983,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_998___onMouseDown,"openfl.display.MovieClip","__onMouseDown",0x20658370,"openfl.display.MovieClip.__onMouseDown","openfl/display/MovieClip.hx",998,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1009___onMouseUp,"openfl.display.MovieClip","__onMouseUp",0x127371e9,"openfl.display.MovieClip.__onMouseUp","openfl/display/MovieClip.hx",1009,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1028___onRollOut,"openfl.display.MovieClip","__onRollOut",0xaf12771a,"openfl.display.MovieClip.__onRollOut","openfl/display/MovieClip.hx",1028,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1043___onRollOver,"openfl.display.MovieClip","__onRollOver",0x81167548,"openfl.display.MovieClip.__onRollOver","openfl/display/MovieClip.hx",1043,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1051_set_buttonMode,"openfl.display.MovieClip","set_buttonMode",0x8c3dbbaa,"openfl.display.MovieClip.set_buttonMode","openfl/display/MovieClip.hx",1051,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1096_get_currentFrame,"openfl.display.MovieClip","get_currentFrame",0xf2ac6035,"openfl.display.MovieClip.get_currentFrame","openfl/display/MovieClip.hx",1096,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1101_get_currentFrameLabel,"openfl.display.MovieClip","get_currentFrameLabel",0x543e3d7f,"openfl.display.MovieClip.get_currentFrameLabel","openfl/display/MovieClip.hx",1101,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1106_get_currentLabel,"openfl.display.MovieClip","get_currentLabel",0x5bd7f5fc,"openfl.display.MovieClip.get_currentLabel","openfl/display/MovieClip.hx",1106,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1111_get_currentLabels,"openfl.display.MovieClip","get_currentLabels",0x011f46f7,"openfl.display.MovieClip.get_currentLabels","openfl/display/MovieClip.hx",1111,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1116_get_enabled,"openfl.display.MovieClip","get_enabled",0x5054e120,"openfl.display.MovieClip.get_enabled","openfl/display/MovieClip.hx",1116,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1121_set_enabled,"openfl.display.MovieClip","set_enabled",0x5ac1e82c,"openfl.display.MovieClip.set_enabled","openfl/display/MovieClip.hx",1121,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1126_get_framesLoaded,"openfl.display.MovieClip","get_framesLoaded",0xb37eaf4c,"openfl.display.MovieClip.get_framesLoaded","openfl/display/MovieClip.hx",1126,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1131_get_isPlaying,"openfl.display.MovieClip","get_isPlaying",0x16620f03,"openfl.display.MovieClip.get_isPlaying","openfl/display/MovieClip.hx",1131,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_1136_get_totalFrames,"openfl.display.MovieClip","get_totalFrames",0x46b3baa9,"openfl.display.MovieClip.get_totalFrames","openfl/display/MovieClip.hx",1136,0x2b84738a)
HX_LOCAL_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_82_boot,"openfl.display.MovieClip","boot",0x5303c6aa,"openfl.display.MovieClip.boot","openfl/display/MovieClip.hx",82,0x2b84738a)
namespace openfl{
namespace display{

void MovieClip_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_215_new)
HXLINE( 216)		super::__construct();
HXLINE( 218)		this->_hx___currentFrame = 1;
HXLINE( 219)		this->_hx___currentLabels = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 220)		this->_hx___instanceFields = ::Array_obj< ::String >::__new(0);
HXLINE( 221)		this->_hx___totalFrames = 0;
HXLINE( 222)		this->_hx___enabled = true;
HXLINE( 224)		if (hx::IsNotNull( ::openfl::display::MovieClip_obj::_hx___initSymbol )) {
HXLINE( 226)			this->_hx___swf = ::openfl::display::MovieClip_obj::_hx___initSWF;
HXLINE( 227)			this->_hx___symbol = ::openfl::display::MovieClip_obj::_hx___initSymbol;
HXLINE( 229)			::openfl::display::MovieClip_obj::_hx___initSWF = null();
HXLINE( 230)			::openfl::display::MovieClip_obj::_hx___initSymbol = null();
HXLINE( 232)			this->_hx___fromSymbol(this->_hx___swf,this->_hx___symbol);
            		}
            	}

Dynamic MovieClip_obj::__CreateEmpty() { return new MovieClip_obj; }

void *MovieClip_obj::_hx_vtable = 0;

Dynamic MovieClip_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MovieClip_obj > _hx_result = new MovieClip_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MovieClip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x21e31f0e) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x21e31f0e;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void MovieClip_obj::addFrameScript(int index, ::Dynamic method){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_237_addFrameScript)
HXLINE( 238)		if ((index < 0)) {
HXLINE( 238)			return;
            		}
HXLINE( 239)		int frame = (index + 1);
HXLINE( 241)		if (hx::IsNotNull( method )) {
HXLINE( 243)			if (hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 245)				this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            			}
HXLINE( 248)			this->_hx___frameScripts->set(frame,method);
            		}
            		else {
HXLINE( 250)			if (hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE( 252)				this->_hx___frameScripts->remove(frame);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,addFrameScript,(void))

void MovieClip_obj::gotoAndPlay( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_271_gotoAndPlay)
HXLINE( 272)		this->play();
HXLINE( 273)		this->_hx___goto(this->_hx___resolveFrameReference(frame));
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,gotoAndPlay,(void))

void MovieClip_obj::gotoAndStop( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_294_gotoAndStop)
HXLINE( 295)		this->stop();
HXLINE( 296)		this->_hx___goto(this->_hx___resolveFrameReference(frame));
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,gotoAndStop,(void))

void MovieClip_obj::nextFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_305_nextFrame)
HXLINE( 306)		this->stop();
HXLINE( 307)		this->_hx___goto((this->_hx___currentFrame + 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,nextFrame,(void))

void MovieClip_obj::play(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_317_play)
HXLINE( 318)		bool _hx_tmp;
HXDLIN( 318)		bool _hx_tmp1;
HXDLIN( 318)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 318)			_hx_tmp1 = this->_hx___playing;
            		}
            		else {
HXLINE( 318)			_hx_tmp1 = true;
            		}
HXDLIN( 318)		if (!(_hx_tmp1)) {
HXLINE( 318)			_hx_tmp = (this->_hx___totalFrames < 2);
            		}
            		else {
HXLINE( 318)			_hx_tmp = true;
            		}
HXDLIN( 318)		if (_hx_tmp) {
HXLINE( 318)			return;
            		}
HXLINE( 320)		this->_hx___playing = true;
HXLINE( 323)		{
HXLINE( 324)			this->_hx___frameTime = ::Std_obj::_hx_int((( (Float)(1000) ) / this->_hx___swf->frameRate));
HXLINE( 325)			this->_hx___timeElapsed = 0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,play,(void))

void MovieClip_obj::prevFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_335_prevFrame)
HXLINE( 336)		this->stop();
HXLINE( 337)		this->_hx___goto((this->_hx___currentFrame - 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,prevFrame,(void))

void MovieClip_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_348_stop)
HXDLIN( 348)		this->_hx___playing = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,stop,(void))

void MovieClip_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_352___enterFrame)
HXLINE( 353)		this->_hx___updateFrameScript(deltaTime);
HXLINE( 354)		this->_hx___updateSymbol(this->_hx___currentFrame);
HXLINE( 356)		this->super::_hx___enterFrame(deltaTime);
            	}


void MovieClip_obj::_hx___updateFrameScript(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_361___updateFrameScript)
HXDLIN( 361)		bool _hx_tmp;
HXDLIN( 361)		if (hx::IsNotNull( this->_hx___symbol )) {
HXDLIN( 361)			_hx_tmp = this->_hx___playing;
            		}
            		else {
HXDLIN( 361)			_hx_tmp = false;
            		}
HXDLIN( 361)		if (_hx_tmp) {
HXLINE( 363)			int nextFrame = this->_hx___getNextFrame(deltaTime);
HXLINE( 365)			if ((this->_hx___lastFrameScriptEval == nextFrame)) {
HXLINE( 367)				this->super::_hx___enterFrame(deltaTime);
HXLINE( 368)				return;
            			}
HXLINE( 371)			if (hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE( 373)				if ((nextFrame < this->_hx___currentFrame)) {
HXLINE( 375)					if (!(this->_hx___evaluateFrameScripts(this->_hx___totalFrames))) {
HXLINE( 377)						this->super::_hx___enterFrame(deltaTime);
HXLINE( 378)						return;
            					}
HXLINE( 381)					this->_hx___currentFrame = 1;
            				}
HXLINE( 384)				if (!(this->_hx___evaluateFrameScripts(nextFrame))) {
HXLINE( 386)					this->super::_hx___enterFrame(deltaTime);
HXLINE( 387)					return;
            				}
            			}
            			else {
HXLINE( 392)				this->_hx___currentFrame = nextFrame;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___updateFrameScript,(void))

void MovieClip_obj::_hx___updateSymbol(int targetFrame){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_399___updateSymbol)
HXDLIN( 399)		bool _hx_tmp;
HXDLIN( 399)		if (hx::IsNotNull( this->_hx___symbol )) {
HXDLIN( 399)			_hx_tmp = (this->_hx___currentFrame != this->_hx___lastFrameUpdate);
            		}
            		else {
HXDLIN( 399)			_hx_tmp = false;
            		}
HXDLIN( 399)		if (_hx_tmp) {
HXLINE( 401)			this->_hx___updateFrameLabel();
HXLINE( 403)			 ::haxe::ds::IntMap currentInstancesByFrameObjectID =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 405)			int frame;
HXLINE( 406)			 ::openfl::_internal::symbols::timeline::Frame frameData;
HXLINE( 407)			 ::openfl::display::_MovieClip::FrameSymbolInstance instance;
HXLINE( 411)			{
HXLINE( 411)				int _g = 0;
HXDLIN( 411)				int _g1 = targetFrame;
HXDLIN( 411)				while((_g < _g1)){
HXLINE( 411)					_g = (_g + 1);
HXDLIN( 411)					int i = (_g - 1);
HXLINE( 413)					frame = (i + 1);
HXLINE( 414)					frameData = this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::symbols::timeline::Frame >();
HXLINE( 416)					if (hx::IsNull( frameData->objects )) {
HXLINE( 416)						continue;
            					}
HXLINE( 418)					{
HXLINE( 418)						int _g2 = 0;
HXDLIN( 418)						::Array< ::Dynamic> _g11 = frameData->objects;
HXDLIN( 418)						while((_g2 < _g11->length)){
HXLINE( 418)							 ::openfl::_internal::symbols::timeline::FrameObject frameObject = _g11->__get(_g2).StaticCast<  ::openfl::_internal::symbols::timeline::FrameObject >();
HXDLIN( 418)							_g2 = (_g2 + 1);
HXLINE( 420)							switch((int)(frameObject->type->_hx_getIndex())){
            								case (int)0: {
HXLINE( 423)									instance = ( ( ::openfl::display::_MovieClip::FrameSymbolInstance)(this->_hx___activeInstancesByFrameObjectID->get(frameObject->id)) );
HXLINE( 425)									if (hx::IsNotNull( instance )) {
HXLINE( 427)										currentInstancesByFrameObjectID->set(frameObject->id,instance);
HXLINE( 428)										this->_hx___updateDisplayObject(instance->displayObject,frameObject,true);
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 432)									instance = ( ( ::openfl::display::_MovieClip::FrameSymbolInstance)(currentInstancesByFrameObjectID->get(frameObject->id)) );
HXLINE( 434)									bool _hx_tmp1;
HXDLIN( 434)									if (hx::IsNotNull( instance )) {
HXLINE( 434)										_hx_tmp1 = hx::IsNotNull( instance->displayObject );
            									}
            									else {
HXLINE( 434)										_hx_tmp1 = false;
            									}
HXDLIN( 434)									if (_hx_tmp1) {
HXLINE( 436)										this->_hx___updateDisplayObject(instance->displayObject,frameObject,null());
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 440)									currentInstancesByFrameObjectID->remove(frameObject->id);
            								}
            								break;
            							}
            						}
            					}
            				}
            			}
HXLINE( 447)			::Array< ::Dynamic> currentInstances = ::Array_obj< ::Dynamic>::__new();
HXLINE( 448)			::Array< ::Dynamic> currentMasks = ::Array_obj< ::Dynamic>::__new();
HXLINE( 450)			{
HXLINE( 450)				 ::Dynamic instance1 = currentInstancesByFrameObjectID->iterator();
HXDLIN( 450)				while(( (bool)(instance1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 450)					 ::openfl::display::_MovieClip::FrameSymbolInstance instance2 = ( ( ::openfl::display::_MovieClip::FrameSymbolInstance)(instance1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 452)					if ((currentInstances->indexOf(instance2,null()) == -1)) {
HXLINE( 454)						currentInstances->push(instance2);
HXLINE( 456)						if ((instance2->clipDepth > 0)) {
HXLINE( 458)							currentMasks->push(instance2);
            						}
            					}
            				}
            			}
HXLINE( 463)			currentInstances->sort(this->_hx___sortDepths_dyn());
HXLINE( 465)			 ::openfl::display::DisplayObject existingChild;
HXLINE( 466)			int targetDepth;
HXLINE( 467)			 ::openfl::display::DisplayObject targetChild;
HXLINE( 468)			 ::openfl::display::DisplayObject child;
HXLINE( 469)			bool maskApplied;
HXLINE( 471)			{
HXLINE( 471)				int _g21 = 0;
HXDLIN( 471)				int _g3 = currentInstances->length;
HXDLIN( 471)				while((_g21 < _g3)){
HXLINE( 471)					_g21 = (_g21 + 1);
HXDLIN( 471)					int i1 = (_g21 - 1);
HXLINE( 473)					existingChild = this->_hx___children->__get(i1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 474)					instance = currentInstances->__get(i1).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXLINE( 476)					targetDepth = instance->depth;
HXLINE( 477)					targetChild = instance->displayObject;
HXLINE( 479)					if (hx::IsNotEq( existingChild,targetChild )) {
HXLINE( 481)						child = targetChild;
HXLINE( 482)						this->addChildAt(targetChild,i1);
            					}
            					else {
HXLINE( 486)						child = this->_hx___children->__get(i1).StaticCast<  ::openfl::display::DisplayObject >();
            					}
HXLINE( 489)					maskApplied = false;
HXLINE( 491)					{
HXLINE( 491)						int _g22 = 0;
HXDLIN( 491)						while((_g22 < currentMasks->length)){
HXLINE( 491)							 ::openfl::display::_MovieClip::FrameSymbolInstance mask = currentMasks->__get(_g22).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXDLIN( 491)							_g22 = (_g22 + 1);
HXLINE( 493)							bool _hx_tmp2;
HXDLIN( 493)							if ((targetDepth > mask->depth)) {
HXLINE( 493)								_hx_tmp2 = (targetDepth <= mask->clipDepth);
            							}
            							else {
HXLINE( 493)								_hx_tmp2 = false;
            							}
HXDLIN( 493)							if (_hx_tmp2) {
HXLINE( 495)								child->set_mask(mask->displayObject);
HXLINE( 496)								maskApplied = true;
HXLINE( 497)								goto _hx_goto_14;
            							}
            						}
            						_hx_goto_14:;
            					}
HXLINE( 501)					bool _hx_tmp3;
HXDLIN( 501)					bool _hx_tmp4;
HXDLIN( 501)					if ((currentMasks->length > 0)) {
HXLINE( 501)						_hx_tmp4 = !(maskApplied);
            					}
            					else {
HXLINE( 501)						_hx_tmp4 = false;
            					}
HXDLIN( 501)					if (_hx_tmp4) {
HXLINE( 501)						_hx_tmp3 = hx::IsNotNull( child->get_mask() );
            					}
            					else {
HXLINE( 501)						_hx_tmp3 = false;
            					}
HXDLIN( 501)					if (_hx_tmp3) {
HXLINE( 503)						child->set_mask(null());
            					}
            				}
            			}
HXLINE( 507)			 ::openfl::display::DisplayObject child1;
HXLINE( 508)			int i2 = currentInstances->length;
HXLINE( 509)			int length = this->_hx___children->length;
HXLINE( 511)			while((i2 < length)){
HXLINE( 513)				child1 = this->_hx___children->__get(i2).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 517)				{
HXLINE( 517)					int _g4 = 0;
HXDLIN( 517)					::Array< ::Dynamic> _g5 = this->_hx___activeInstances;
HXDLIN( 517)					while((_g4 < _g5->length)){
HXLINE( 517)						 ::openfl::display::_MovieClip::FrameSymbolInstance instance3 = _g5->__get(_g4).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXDLIN( 517)						_g4 = (_g4 + 1);
HXLINE( 519)						if (hx::IsEq( instance3->displayObject,child1 )) {
HXLINE( 522)							if (::Std_obj::is(child1,hx::ClassOf< ::openfl::display::MovieClip >())) {
HXLINE( 524)								 ::openfl::display::MovieClip movie = ( ( ::openfl::display::MovieClip)(child1) );
HXLINE( 525)								movie->gotoAndPlay(1,null());
            							}
HXLINE( 528)							this->removeChild(child1);
HXLINE( 529)							i2 = (i2 - 1);
HXLINE( 530)							length = (length - 1);
            						}
            					}
            				}
HXLINE( 534)				i2 = (i2 + 1);
            			}
HXLINE( 537)			this->_hx___lastFrameUpdate = this->_hx___currentFrame;
HXLINE( 540)			this->_hx___updateInstanceFields();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___updateSymbol,(void))

bool MovieClip_obj::_hx___evaluateFrameScripts(int advanceToFrame){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_546___evaluateFrameScripts)
HXLINE( 547)		{
HXLINE( 547)			int _g = this->_hx___currentFrame;
HXDLIN( 547)			int _g1 = (advanceToFrame + 1);
HXDLIN( 547)			while((_g < _g1)){
HXLINE( 547)				_g = (_g + 1);
HXDLIN( 547)				int frame = (_g - 1);
HXLINE( 549)				if ((frame == this->_hx___lastFrameScriptEval)) {
HXLINE( 549)					continue;
            				}
HXLINE( 551)				this->_hx___lastFrameScriptEval = frame;
HXLINE( 552)				this->_hx___currentFrame = frame;
HXLINE( 554)				if (this->_hx___frameScripts->exists(frame)) {
HXLINE( 556)					this->_hx___updateSymbol(frame);
HXLINE( 557)					 ::Dynamic script = this->_hx___frameScripts->get(frame);
HXLINE( 558)					script();
HXLINE( 560)					if ((this->_hx___currentFrame != frame)) {
HXLINE( 562)						return false;
            					}
            				}
HXLINE( 566)				if (!(this->_hx___playing)) {
HXLINE( 568)					return false;
            				}
            			}
            		}
HXLINE( 572)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___evaluateFrameScripts,return )

void MovieClip_obj::_hx___fromSymbol( ::openfl::_internal::formats::swf::SWFLite swf, ::openfl::_internal::symbols::SpriteSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_576___fromSymbol)
HXLINE( 577)		if (hx::IsNotNull( this->_hx___activeInstances )) {
HXLINE( 577)			return;
            		}
HXLINE( 579)		this->_hx___swf = swf;
HXLINE( 580)		this->_hx___symbol = symbol;
HXLINE( 582)		this->_hx___activeInstances = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 583)		this->_hx___activeInstancesByFrameObjectID =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 584)		this->_hx___currentFrame = 1;
HXLINE( 585)		this->_hx___lastFrameScriptEval = -1;
HXLINE( 586)		this->_hx___lastFrameUpdate = -1;
HXLINE( 587)		this->_hx___totalFrames = this->_hx___symbol->frames->length;
HXLINE( 589)		int frame;
HXLINE( 590)		 ::openfl::_internal::symbols::timeline::Frame frameData;
HXLINE( 596)		{
HXLINE( 596)			int _g = 0;
HXDLIN( 596)			int _g1 = this->_hx___symbol->frames->length;
HXDLIN( 596)			while((_g < _g1)){
HXLINE( 596)				_g = (_g + 1);
HXDLIN( 596)				int i = (_g - 1);
HXLINE( 598)				frame = (i + 1);
HXLINE( 599)				frameData = this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::symbols::timeline::Frame >();
HXLINE( 601)				if (hx::IsNotNull( frameData->label )) {
HXLINE( 603)					::Array< ::Dynamic> _hx_tmp = this->_hx___currentLabels;
HXDLIN( 603)					_hx_tmp->push( ::openfl::display::FrameLabel_obj::__alloc( HX_CTX ,frameData->label,(i + 1)));
            				}
HXLINE( 606)				if (hx::IsNotNull( frameData->script )) {
HXLINE( 608)					if (hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 610)						this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            					}
HXLINE( 613)					this->_hx___frameScripts->set(frame,frameData->script);
            				}
            				else {
HXLINE( 615)					if (hx::IsNotNull( frameData->scriptSource )) {
HXLINE( 617)						if (hx::IsNull( this->_hx___frameScripts )) {
HXLINE( 619)							this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            						}
HXLINE( 622)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic e = _hx_e;
HXLINE( 670)								if (hx::IsNotNull( this->_hx___symbol->className )) {
HXLINE( 672)									::lime::utils::Log_obj::warn((((((HX_("Unable to evaluate frame script source for symbol \"",a3,42,39,7c) + this->_hx___symbol->className) + HX_("\" frame ",91,af,e7,77)) + frame) + HX_("\n",0a,00,00,00)) + frameData->scriptSource),hx::SourceInfo(HX_("openfl/display/MovieClip.hx",8a,73,84,2b),672,HX_("openfl.display.MovieClip",f6,30,c3,c4),HX_("__fromSymbol",82,2f,b5,6a)));
            								}
            								else {
HXLINE( 677)									::lime::utils::Log_obj::warn((HX_("Unable to evaluate frame script source:\n",1e,90,6f,3e) + frameData->scriptSource),hx::SourceInfo(HX_("openfl/display/MovieClip.hx",8a,73,84,2b),677,HX_("openfl.display.MovieClip",f6,30,c3,c4),HX_("__fromSymbol",82,2f,b5,6a)));
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 683)		int frame1;
HXLINE( 684)		 ::openfl::_internal::symbols::timeline::Frame frameData1;
HXLINE( 685)		 ::openfl::display::_MovieClip::FrameSymbolInstance instance;
HXLINE( 686)		bool duplicate;
HXLINE( 687)		 ::openfl::_internal::symbols::SWFSymbol symbol1;
HXLINE( 688)		 ::openfl::display::DisplayObject displayObject;
HXLINE( 692)		{
HXLINE( 692)			int _g2 = 0;
HXDLIN( 692)			int _g3 = this->_hx___totalFrames;
HXDLIN( 692)			while((_g2 < _g3)){
HXLINE( 692)				_g2 = (_g2 + 1);
HXDLIN( 692)				int i1 = (_g2 - 1);
HXLINE( 694)				frame1 = (i1 + 1);
HXLINE( 695)				frameData1 = this->_hx___symbol->frames->__get(i1).StaticCast<  ::openfl::_internal::symbols::timeline::Frame >();
HXLINE( 697)				if (hx::IsNull( frameData1->objects )) {
HXLINE( 697)					continue;
            				}
HXLINE( 699)				{
HXLINE( 699)					int _g21 = 0;
HXDLIN( 699)					::Array< ::Dynamic> _g31 = frameData1->objects;
HXDLIN( 699)					while((_g21 < _g31->length)){
HXLINE( 699)						 ::openfl::_internal::symbols::timeline::FrameObject frameObject = _g31->__get(_g21).StaticCast<  ::openfl::_internal::symbols::timeline::FrameObject >();
HXDLIN( 699)						_g21 = (_g21 + 1);
HXLINE( 701)						if (hx::IsEq( frameObject->type,::openfl::_internal::symbols::timeline::FrameObjectType_obj::CREATE_dyn() )) {
HXLINE( 703)							if (this->_hx___activeInstancesByFrameObjectID->exists(frameObject->id)) {
HXLINE( 705)								continue;
            							}
            							else {
HXLINE( 709)								instance = null();
HXLINE( 710)								duplicate = false;
HXLINE( 712)								{
HXLINE( 712)									int _g22 = 0;
HXDLIN( 712)									::Array< ::Dynamic> _g32 = this->_hx___activeInstances;
HXDLIN( 712)									while((_g22 < _g32->length)){
HXLINE( 712)										 ::openfl::display::_MovieClip::FrameSymbolInstance activeInstance = _g32->__get(_g22).StaticCast<  ::openfl::display::_MovieClip::FrameSymbolInstance >();
HXDLIN( 712)										_g22 = (_g22 + 1);
HXLINE( 714)										bool _hx_tmp1;
HXDLIN( 714)										bool _hx_tmp2;
HXDLIN( 714)										if (hx::IsNotNull( activeInstance->displayObject )) {
HXLINE( 714)											_hx_tmp2 = (activeInstance->characterID == frameObject->symbol);
            										}
            										else {
HXLINE( 714)											_hx_tmp2 = false;
            										}
HXDLIN( 714)										if (_hx_tmp2) {
HXLINE( 714)											_hx_tmp1 = (activeInstance->depth == frameObject->depth);
            										}
            										else {
HXLINE( 714)											_hx_tmp1 = false;
            										}
HXDLIN( 714)										if (_hx_tmp1) {
HXLINE( 719)											instance = activeInstance;
HXLINE( 720)											duplicate = true;
HXLINE( 721)											goto _hx_goto_23;
            										}
            									}
            									_hx_goto_23:;
            								}
            							}
HXLINE( 726)							if (hx::IsNull( instance )) {
HXLINE( 728)								symbol1 = ( ( ::openfl::_internal::symbols::SWFSymbol)(this->_hx___swf->symbols->get(frameObject->symbol)) );
HXLINE( 730)								if (hx::IsNotNull( symbol1 )) {
HXLINE( 732)									displayObject = symbol1->_hx___createObject(this->_hx___swf);
HXLINE( 734)									if (hx::IsNotNull( displayObject )) {
HXLINE( 736)										displayObject->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE( 737)										displayObject->stage = this->stage;
HXLINE( 739)										if (hx::IsNotNull( this->stage )) {
HXLINE( 739)											displayObject->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("addedToStage",63,22,55,0c),false,false));
            										}
HXLINE( 741)										instance =  ::openfl::display::_MovieClip::FrameSymbolInstance_obj::__alloc( HX_CTX ,frame1,frameObject->id,frameObject->symbol,frameObject->depth,displayObject,frameObject->clipDepth);
            									}
            								}
            							}
HXLINE( 747)							if (hx::IsNotNull( instance )) {
HXLINE( 749)								this->_hx___activeInstancesByFrameObjectID->set(frameObject->id,instance);
HXLINE( 751)								if (!(duplicate)) {
HXLINE( 753)									this->_hx___activeInstances->push(instance);
HXLINE( 754)									this->_hx___updateDisplayObject(instance->displayObject,frameObject,null());
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 795)		if ((this->_hx___totalFrames > 1)) {
HXLINE( 797)			this->play();
            		}
HXLINE( 800)		this->_hx___enterFrame(0);
HXLINE( 803)		this->_hx___instanceFields = ::Type_obj::getInstanceFields(::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this)));
HXLINE( 804)		this->_hx___updateInstanceFields();
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___fromSymbol,(void))

int MovieClip_obj::_hx___getNextFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_809___getNextFrame)
HXLINE( 810)		int nextFrame = 0;
HXLINE( 813)		{
HXLINE( 814)			 ::openfl::display::MovieClip _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 814)			_hx_tmp->_hx___timeElapsed = (_hx_tmp->_hx___timeElapsed + deltaTime);
HXLINE( 815)			nextFrame = (this->_hx___currentFrame + ::Math_obj::floor((( (Float)(this->_hx___timeElapsed) ) / ( (Float)(this->_hx___frameTime) ))));
HXLINE( 816)			if ((nextFrame < 1)) {
HXLINE( 816)				nextFrame = 1;
            			}
HXLINE( 817)			if ((nextFrame > this->_hx___totalFrames)) {
HXLINE( 817)				nextFrame = (::Math_obj::floor(( (Float)(hx::Mod((nextFrame - 1),this->_hx___totalFrames)) )) + 1);
            			}
HXLINE( 818)			this->_hx___timeElapsed = hx::Mod(this->_hx___timeElapsed,this->_hx___frameTime);
            		}
HXLINE( 826)		return nextFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___getNextFrame,return )

void MovieClip_obj::_hx___goto(int frame){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_830___goto)
HXLINE( 831)		if (hx::IsNull( this->_hx___symbol )) {
HXLINE( 831)			return;
            		}
HXLINE( 833)		if ((frame < 1)) {
HXLINE( 833)			frame = 1;
            		}
            		else {
HXLINE( 834)			if ((frame > this->_hx___totalFrames)) {
HXLINE( 834)				frame = this->_hx___totalFrames;
            			}
            		}
HXLINE( 836)		this->_hx___currentFrame = frame;
HXLINE( 837)		this->_hx___enterFrame(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___goto,(void))

int MovieClip_obj::_hx___resolveFrameReference( ::Dynamic frame){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_842___resolveFrameReference)
HXDLIN( 842)		if (::Std_obj::is(frame,hx::ClassOf< int >())) {
HXLINE( 844)			return ( (int)(frame) );
            		}
            		else {
HXLINE( 846)			if (::Std_obj::is(frame,hx::ClassOf< ::String >())) {
HXLINE( 848)				::String label = ( (::String)(frame) );
HXLINE( 850)				{
HXLINE( 850)					int _g = 0;
HXDLIN( 850)					::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN( 850)					while((_g < _g1->length)){
HXLINE( 850)						 ::openfl::display::FrameLabel frameLabel = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 850)						_g = (_g + 1);
HXLINE( 852)						if ((frameLabel->get_name() == label)) {
HXLINE( 854)							return frameLabel->get_frame();
            						}
            					}
            				}
HXLINE( 858)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,((HX_("Error #2109: Frame label ",f8,f0,5a,8a) + label) + HX_(" not found in scene.",b2,87,08,ff))));
            			}
            			else {
HXLINE( 862)				HX_STACK_DO_THROW((HX_("Invalid type for frame ",e7,83,86,d5) + ::Type_obj::getClassName(frame)));
            			}
            		}
HXLINE( 842)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___resolveFrameReference,return )

int MovieClip_obj::_hx___sortDepths( ::openfl::display::_MovieClip::FrameSymbolInstance a, ::openfl::display::_MovieClip::FrameSymbolInstance b){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_868___sortDepths)
HXDLIN( 868)		return (a->depth - b->depth);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___sortDepths,return )

void MovieClip_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_872___stopAllMovieClips)
HXLINE( 873)		this->super::_hx___stopAllMovieClips();
HXLINE( 874)		this->stop();
            	}


void MovieClip_obj::_hx___tabTest(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_878___tabTest)
HXLINE( 879)		if (!(this->_hx___enabled)) {
HXLINE( 879)			return;
            		}
HXLINE( 880)		this->super::_hx___tabTest(stack);
            	}


void MovieClip_obj::_hx___updateDisplayObject( ::openfl::display::DisplayObject displayObject, ::openfl::_internal::symbols::timeline::FrameObject frameObject,hx::Null< bool >  __o_reset){
            		bool reset = __o_reset.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_884___updateDisplayObject)
HXLINE( 885)		if (hx::IsNull( displayObject )) {
HXLINE( 885)			return;
            		}
HXLINE( 887)		if (hx::IsNotNull( frameObject->name )) {
HXLINE( 889)			displayObject->set_name(frameObject->name);
            		}
HXLINE( 892)		if (hx::IsNotNull( frameObject->matrix )) {
HXLINE( 894)			displayObject->get_transform()->set_matrix(frameObject->matrix);
            		}
HXLINE( 897)		if (hx::IsNotNull( frameObject->colorTransform )) {
HXLINE( 899)			displayObject->get_transform()->set_colorTransform(frameObject->colorTransform);
            		}
            		else {
HXLINE( 901)			bool _hx_tmp;
HXDLIN( 901)			if (reset) {
HXLINE( 901)				_hx_tmp = !(displayObject->get_transform()->get_colorTransform()->_hx___isDefault(true));
            			}
            			else {
HXLINE( 901)				_hx_tmp = false;
            			}
HXDLIN( 901)			if (_hx_tmp) {
HXLINE( 903)				 ::openfl::geom::Transform _hx_tmp1 = displayObject->get_transform();
HXDLIN( 903)				_hx_tmp1->set_colorTransform( ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
            			}
            		}
HXLINE( 906)		if (hx::IsNotNull( frameObject->filters )) {
HXLINE( 908)			::Array< ::Dynamic> filters = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 910)			{
HXLINE( 910)				int _g = 0;
HXDLIN( 910)				::Array< ::Dynamic> _g1 = frameObject->filters;
HXDLIN( 910)				while((_g < _g1->length)){
HXLINE( 910)					 ::openfl::_internal::formats::swf::FilterType filter = _g1->__get(_g).StaticCast<  ::openfl::_internal::formats::swf::FilterType >();
HXDLIN( 910)					_g = (_g + 1);
HXLINE( 912)					switch((int)(filter->_hx_getIndex())){
            						case (int)0: {
HXLINE( 914)							int quality = filter->_hx_getInt(2);
HXDLIN( 914)							Float blurY = filter->_hx_getFloat(1);
HXDLIN( 914)							Float blurX = filter->_hx_getFloat(0);
HXLINE( 915)							filters->push( ::openfl::filters::BlurFilter_obj::__alloc( HX_CTX ,blurX,blurY,quality));
            						}
            						break;
            						case (int)1: {
HXLINE( 917)							::Array< Float > matrix = filter->_hx_getObject(0).StaticCast< ::Array< Float > >();
HXLINE( 918)							filters->push( ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,matrix));
            						}
            						break;
            						case (int)2: {
HXLINE( 920)							bool hideObject = filter->_hx_getBool(10);
HXDLIN( 920)							bool knockout = filter->_hx_getBool(9);
HXDLIN( 920)							bool inner = filter->_hx_getBool(8);
HXDLIN( 920)							int quality1 = filter->_hx_getInt(7);
HXDLIN( 920)							Float strength = filter->_hx_getFloat(6);
HXDLIN( 920)							Float blurY1 = filter->_hx_getFloat(5);
HXDLIN( 920)							Float blurX1 = filter->_hx_getFloat(4);
HXDLIN( 920)							Float alpha = filter->_hx_getFloat(3);
HXDLIN( 920)							int color = filter->_hx_getInt(2);
HXDLIN( 920)							Float angle = filter->_hx_getFloat(1);
HXDLIN( 920)							Float distance = filter->_hx_getFloat(0);
HXLINE( 921)							filters->push( ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
            						}
            						break;
            						case (int)3: {
HXLINE( 923)							bool knockout1 = filter->_hx_getBool(7);
HXDLIN( 923)							bool inner1 = filter->_hx_getBool(6);
HXDLIN( 923)							int quality2 = filter->_hx_getInt(5);
HXDLIN( 923)							Float strength1 = filter->_hx_getFloat(4);
HXDLIN( 923)							Float blurY2 = filter->_hx_getFloat(3);
HXDLIN( 923)							Float blurX2 = filter->_hx_getFloat(2);
HXDLIN( 923)							Float alpha1 = filter->_hx_getFloat(1);
HXDLIN( 923)							int color1 = filter->_hx_getInt(0);
HXLINE( 924)							filters->push( ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
            						}
            						break;
            					}
            				}
            			}
HXLINE( 928)			displayObject->set_filters(filters);
            		}
            		else {
HXLINE( 932)			displayObject->set_filters(null());
            		}
HXLINE( 935)		if (hx::IsNotNull( frameObject->visible )) {
HXLINE( 937)			displayObject->set_visible(( (bool)(frameObject->visible) ));
            		}
HXLINE( 940)		if (hx::IsNotNull( frameObject->blendMode )) {
HXLINE( 942)			displayObject->set_blendMode(frameObject->blendMode);
            		}
HXLINE( 945)		if (hx::IsNotNull( frameObject->cacheAsBitmap )) {
HXLINE( 947)			displayObject->set_cacheAsBitmap(( (bool)(frameObject->cacheAsBitmap) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(MovieClip_obj,_hx___updateDisplayObject,(void))

void MovieClip_obj::_hx___updateFrameLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_956___updateFrameLabel)
HXLINE( 957)		this->_hx___currentFrameLabel = this->_hx___symbol->frames->__get((this->_hx___currentFrame - 1)).StaticCast<  ::openfl::_internal::symbols::timeline::Frame >()->label;
HXLINE( 959)		if (hx::IsNotNull( this->_hx___currentFrameLabel )) {
HXLINE( 961)			this->_hx___currentLabel = this->_hx___currentFrameLabel;
            		}
            		else {
HXLINE( 965)			this->_hx___currentLabel = null();
HXLINE( 967)			{
HXLINE( 967)				int _g = 0;
HXDLIN( 967)				::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN( 967)				while((_g < _g1->length)){
HXLINE( 967)					 ::openfl::display::FrameLabel label = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 967)					_g = (_g + 1);
HXLINE( 969)					int _hx_tmp = label->get_frame();
HXDLIN( 969)					if ((_hx_tmp < this->_hx___currentFrame)) {
HXLINE( 971)						this->_hx___currentLabel = label->get_name();
            					}
            					else {
HXLINE( 975)						goto _hx_goto_34;
            					}
            				}
            				_hx_goto_34:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,_hx___updateFrameLabel,(void))

void MovieClip_obj::_hx___updateInstanceFields(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_983___updateInstanceFields)
HXDLIN( 983)		int _g = 0;
HXDLIN( 983)		::Array< ::String > _g1 = this->_hx___instanceFields;
HXDLIN( 983)		while((_g < _g1->length)){
HXDLIN( 983)			::String field = _g1->__get(_g);
HXDLIN( 983)			_g = (_g + 1);
HXLINE( 985)			{
HXLINE( 985)				int _g2 = 0;
HXDLIN( 985)				::Array< ::Dynamic> _g11 = this->_hx___children;
HXDLIN( 985)				while((_g2 < _g11->length)){
HXLINE( 985)					 ::openfl::display::DisplayObject child = _g11->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 985)					_g2 = (_g2 + 1);
HXLINE( 987)					if ((child->get_name() == field)) {
HXLINE( 989)						::Reflect_obj::setField(hx::ObjectPtr<OBJ_>(this),field,child);
HXLINE( 990)						goto _hx_goto_37;
            					}
            				}
            				_hx_goto_37:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,_hx___updateInstanceFields,(void))

void MovieClip_obj::_hx___onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_998___onMouseDown)
HXLINE( 999)		bool _hx_tmp;
HXDLIN( 999)		if (this->_hx___enabled) {
HXLINE( 999)			_hx_tmp = this->_hx___hasDown;
            		}
            		else {
HXLINE( 999)			_hx_tmp = false;
            		}
HXDLIN( 999)		if (_hx_tmp) {
HXLINE(1001)			this->gotoAndStop(HX_("_down",41,14,7f,f5),null());
            		}
HXLINE(1004)		this->_hx___mouseIsDown = true;
HXLINE(1005)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->_hx___onMouseUp_dyn(),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onMouseDown,(void))

void MovieClip_obj::_hx___onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1009___onMouseUp)
HXLINE(1010)		this->_hx___mouseIsDown = false;
HXLINE(1012)		if (hx::IsNotNull( this->stage )) {
HXLINE(1014)			this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->_hx___onMouseUp_dyn(),null());
            		}
HXLINE(1017)		bool _hx_tmp;
HXDLIN(1017)		bool _hx_tmp1;
HXDLIN(1017)		if (hx::IsEq( ( ( ::openfl::display::MovieClip)(event->target) ),hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1017)			_hx_tmp1 = this->_hx___enabled;
            		}
            		else {
HXLINE(1017)			_hx_tmp1 = false;
            		}
HXDLIN(1017)		if (_hx_tmp1) {
HXLINE(1017)			_hx_tmp = this->_hx___hasOver;
            		}
            		else {
HXLINE(1017)			_hx_tmp = false;
            		}
HXDLIN(1017)		if (_hx_tmp) {
HXLINE(1019)			this->gotoAndStop(HX_("_over",33,ad,c9,fc),null());
            		}
            		else {
HXLINE(1021)			bool _hx_tmp2;
HXDLIN(1021)			if (this->_hx___enabled) {
HXLINE(1021)				_hx_tmp2 = this->_hx___hasUp;
            			}
            			else {
HXLINE(1021)				_hx_tmp2 = false;
            			}
HXDLIN(1021)			if (_hx_tmp2) {
HXLINE(1023)				this->gotoAndStop(HX_("_up",7a,7c,48,00),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onMouseUp,(void))

void MovieClip_obj::_hx___onRollOut( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1028___onRollOut)
HXLINE(1029)		if (!(this->_hx___enabled)) {
HXLINE(1029)			return;
            		}
HXLINE(1031)		bool _hx_tmp;
HXDLIN(1031)		if (this->_hx___mouseIsDown) {
HXLINE(1031)			_hx_tmp = this->_hx___hasOver;
            		}
            		else {
HXLINE(1031)			_hx_tmp = false;
            		}
HXDLIN(1031)		if (_hx_tmp) {
HXLINE(1033)			this->gotoAndStop(HX_("_over",33,ad,c9,fc),null());
            		}
            		else {
HXLINE(1035)			if (this->_hx___hasUp) {
HXLINE(1037)				this->gotoAndStop(HX_("_up",7a,7c,48,00),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onRollOut,(void))

void MovieClip_obj::_hx___onRollOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1043___onRollOver)
HXDLIN(1043)		bool _hx_tmp;
HXDLIN(1043)		if (this->_hx___enabled) {
HXDLIN(1043)			_hx_tmp = this->_hx___hasOver;
            		}
            		else {
HXDLIN(1043)			_hx_tmp = false;
            		}
HXDLIN(1043)		if (_hx_tmp) {
HXLINE(1045)			this->gotoAndStop(HX_("_over",33,ad,c9,fc),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___onRollOver,(void))

bool MovieClip_obj::set_buttonMode(bool value){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1051_set_buttonMode)
HXLINE(1052)		if ((this->_hx___buttonMode != value)) {
HXLINE(1054)			if (value) {
HXLINE(1056)				this->_hx___hasDown = false;
HXLINE(1057)				this->_hx___hasOver = false;
HXLINE(1058)				this->_hx___hasUp = false;
HXLINE(1060)				{
HXLINE(1060)					int _g = 0;
HXDLIN(1060)					::Array< ::Dynamic> _g1 = this->_hx___currentLabels;
HXDLIN(1060)					while((_g < _g1->length)){
HXLINE(1060)						 ::openfl::display::FrameLabel frameLabel = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN(1060)						_g = (_g + 1);
HXLINE(1062)						::String _hx_switch_0 = frameLabel->get_name();
            						if (  (_hx_switch_0==HX_("_down",41,14,7f,f5)) ){
HXLINE(1069)							this->_hx___hasDown = true;
HXDLIN(1069)							goto _hx_goto_44;
            						}
            						if (  (_hx_switch_0==HX_("_over",33,ad,c9,fc)) ){
HXLINE(1067)							this->_hx___hasOver = true;
HXDLIN(1067)							goto _hx_goto_44;
            						}
            						if (  (_hx_switch_0==HX_("_up",7a,7c,48,00)) ){
HXLINE(1065)							this->_hx___hasUp = true;
HXDLIN(1065)							goto _hx_goto_44;
            						}
            						/* default */{
            						}
            						_hx_goto_44:;
            					}
            				}
HXLINE(1074)				bool _hx_tmp;
HXDLIN(1074)				bool _hx_tmp1;
HXDLIN(1074)				if (!(this->_hx___hasDown)) {
HXLINE(1074)					_hx_tmp1 = this->_hx___hasOver;
            				}
            				else {
HXLINE(1074)					_hx_tmp1 = true;
            				}
HXDLIN(1074)				if (!(_hx_tmp1)) {
HXLINE(1074)					_hx_tmp = this->_hx___hasUp;
            				}
            				else {
HXLINE(1074)					_hx_tmp = true;
            				}
HXDLIN(1074)				if (_hx_tmp) {
HXLINE(1076)					this->addEventListener(HX_("rollOver",71,ab,a8,12),this->_hx___onRollOver_dyn(),null(),null(),null());
HXLINE(1077)					this->addEventListener(HX_("rollOut",11,f9,11,5d),this->_hx___onRollOut_dyn(),null(),null(),null());
HXLINE(1078)					this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->_hx___onMouseDown_dyn(),null(),null(),null());
            				}
            			}
            			else {
HXLINE(1083)				this->removeEventListener(HX_("rollOver",71,ab,a8,12),this->_hx___onRollOver_dyn(),null());
HXLINE(1084)				this->removeEventListener(HX_("rollOut",11,f9,11,5d),this->_hx___onRollOut_dyn(),null());
HXLINE(1085)				this->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->_hx___onMouseDown_dyn(),null());
            			}
HXLINE(1088)			this->_hx___buttonMode = value;
            		}
HXLINE(1091)		return value;
            	}


int MovieClip_obj::get_currentFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1096_get_currentFrame)
HXDLIN(1096)		return this->_hx___currentFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentFrame,return )

::String MovieClip_obj::get_currentFrameLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1101_get_currentFrameLabel)
HXDLIN(1101)		return this->_hx___currentFrameLabel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentFrameLabel,return )

::String MovieClip_obj::get_currentLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1106_get_currentLabel)
HXDLIN(1106)		return this->_hx___currentLabel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentLabel,return )

::Array< ::Dynamic> MovieClip_obj::get_currentLabels(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1111_get_currentLabels)
HXDLIN(1111)		return this->_hx___currentLabels;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentLabels,return )

bool MovieClip_obj::get_enabled(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1116_get_enabled)
HXDLIN(1116)		return this->_hx___enabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_enabled,return )

bool MovieClip_obj::set_enabled(bool value){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1121_set_enabled)
HXDLIN(1121)		return (this->_hx___enabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,set_enabled,return )

int MovieClip_obj::get_framesLoaded(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1126_get_framesLoaded)
HXDLIN(1126)		return this->_hx___totalFrames;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_framesLoaded,return )

bool MovieClip_obj::get_isPlaying(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1131_get_isPlaying)
HXDLIN(1131)		return this->_hx___playing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_isPlaying,return )

int MovieClip_obj::get_totalFrames(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_1136_get_totalFrames)
HXDLIN(1136)		return this->_hx___totalFrames;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_totalFrames,return )

 ::openfl::_internal::formats::swf::SWFLite MovieClip_obj::_hx___initSWF;

 ::openfl::_internal::symbols::SpriteSymbol MovieClip_obj::_hx___initSymbol;

bool MovieClip_obj::_hx___useParentFPS;


hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__new() {
	hx::ObjectPtr< MovieClip_obj > __this = new MovieClip_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__alloc(hx::Ctx *_hx_ctx) {
	MovieClip_obj *__this = (MovieClip_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MovieClip_obj), true, "openfl.display.MovieClip"));
	*(void **)__this = MovieClip_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MovieClip_obj::MovieClip_obj()
{
}

void MovieClip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MovieClip);
	HX_MARK_MEMBER_NAME(_hx___activeInstances,"__activeInstances");
	HX_MARK_MEMBER_NAME(_hx___activeInstancesByFrameObjectID,"__activeInstancesByFrameObjectID");
	HX_MARK_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_MARK_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_MARK_MEMBER_NAME(_hx___enabled,"__enabled");
	HX_MARK_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_MARK_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_MARK_MEMBER_NAME(_hx___hasDown,"__hasDown");
	HX_MARK_MEMBER_NAME(_hx___hasOver,"__hasOver");
	HX_MARK_MEMBER_NAME(_hx___hasUp,"__hasUp");
	HX_MARK_MEMBER_NAME(_hx___instanceFields,"__instanceFields");
	HX_MARK_MEMBER_NAME(_hx___lastFrameScriptEval,"__lastFrameScriptEval");
	HX_MARK_MEMBER_NAME(_hx___lastFrameUpdate,"__lastFrameUpdate");
	HX_MARK_MEMBER_NAME(_hx___mouseIsDown,"__mouseIsDown");
	HX_MARK_MEMBER_NAME(_hx___playing,"__playing");
	HX_MARK_MEMBER_NAME(_hx___swf,"__swf");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_MARK_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MovieClip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___activeInstances,"__activeInstances");
	HX_VISIT_MEMBER_NAME(_hx___activeInstancesByFrameObjectID,"__activeInstancesByFrameObjectID");
	HX_VISIT_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_VISIT_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_VISIT_MEMBER_NAME(_hx___enabled,"__enabled");
	HX_VISIT_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_VISIT_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_VISIT_MEMBER_NAME(_hx___hasDown,"__hasDown");
	HX_VISIT_MEMBER_NAME(_hx___hasOver,"__hasOver");
	HX_VISIT_MEMBER_NAME(_hx___hasUp,"__hasUp");
	HX_VISIT_MEMBER_NAME(_hx___instanceFields,"__instanceFields");
	HX_VISIT_MEMBER_NAME(_hx___lastFrameScriptEval,"__lastFrameScriptEval");
	HX_VISIT_MEMBER_NAME(_hx___lastFrameUpdate,"__lastFrameUpdate");
	HX_VISIT_MEMBER_NAME(_hx___mouseIsDown,"__mouseIsDown");
	HX_VISIT_MEMBER_NAME(_hx___playing,"__playing");
	HX_VISIT_MEMBER_NAME(_hx___swf,"__swf");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_VISIT_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MovieClip_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"__swf") ) { return hx::Val( _hx___swf ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__goto") ) { return hx::Val( _hx___goto_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_enabled() ); }
		if (HX_FIELD_EQ(inName,"__hasUp") ) { return hx::Val( _hx___hasUp ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPlaying") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isPlaying() ); }
		if (HX_FIELD_EQ(inName,"__enabled") ) { return hx::Val( _hx___enabled ); }
		if (HX_FIELD_EQ(inName,"__hasDown") ) { return hx::Val( _hx___hasDown ); }
		if (HX_FIELD_EQ(inName,"__hasOver") ) { return hx::Val( _hx___hasOver ); }
		if (HX_FIELD_EQ(inName,"__playing") ) { return hx::Val( _hx___playing ); }
		if (HX_FIELD_EQ(inName,"nextFrame") ) { return hx::Val( nextFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"prevFrame") ) { return hx::Val( prevFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"__tabTest") ) { return hx::Val( _hx___tabTest_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_totalFrames() ); }
		if (HX_FIELD_EQ(inName,"__frameTime") ) { return hx::Val( _hx___frameTime ); }
		if (HX_FIELD_EQ(inName,"gotoAndPlay") ) { return hx::Val( gotoAndPlay_dyn() ); }
		if (HX_FIELD_EQ(inName,"gotoAndStop") ) { return hx::Val( gotoAndStop_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouseUp") ) { return hx::Val( _hx___onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onRollOut") ) { return hx::Val( _hx___onRollOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_enabled") ) { return hx::Val( get_enabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_enabled") ) { return hx::Val( set_enabled_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentFrame") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currentFrame() ); }
		if (HX_FIELD_EQ(inName,"currentLabel") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currentLabel() ); }
		if (HX_FIELD_EQ(inName,"framesLoaded") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_framesLoaded() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__sortDepths") ) { return hx::Val( _hx___sortDepths_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onRollOver") ) { return hx::Val( _hx___onRollOver_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentLabels") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currentLabels() ); }
		if (HX_FIELD_EQ(inName,"__mouseIsDown") ) { return hx::Val( _hx___mouseIsDown ); }
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { return hx::Val( _hx___timeElapsed ); }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { return hx::Val( _hx___totalFrames ); }
		if (HX_FIELD_EQ(inName,"__onMouseDown") ) { return hx::Val( _hx___onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isPlaying") ) { return hx::Val( get_isPlaying_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { return hx::Val( _hx___currentFrame ); }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { return hx::Val( _hx___currentLabel ); }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { return hx::Val( _hx___frameScripts ); }
		if (HX_FIELD_EQ(inName,"addFrameScript") ) { return hx::Val( addFrameScript_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateSymbol") ) { return hx::Val( _hx___updateSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getNextFrame") ) { return hx::Val( _hx___getNextFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_buttonMode") ) { return hx::Val( set_buttonMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { return hx::Val( _hx___currentLabels ); }
		if (HX_FIELD_EQ(inName,"get_totalFrames") ) { return hx::Val( get_totalFrames_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__instanceFields") ) { return hx::Val( _hx___instanceFields ); }
		if (HX_FIELD_EQ(inName,"get_currentFrame") ) { return hx::Val( get_currentFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_currentLabel") ) { return hx::Val( get_currentLabel_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_framesLoaded") ) { return hx::Val( get_framesLoaded_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentFrameLabel") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currentFrameLabel() ); }
		if (HX_FIELD_EQ(inName,"__activeInstances") ) { return hx::Val( _hx___activeInstances ); }
		if (HX_FIELD_EQ(inName,"__lastFrameUpdate") ) { return hx::Val( _hx___lastFrameUpdate ); }
		if (HX_FIELD_EQ(inName,"get_currentLabels") ) { return hx::Val( get_currentLabels_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__updateFrameLabel") ) { return hx::Val( _hx___updateFrameLabel_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { return hx::Val( _hx___currentFrameLabel ); }
		if (HX_FIELD_EQ(inName,"__updateFrameScript") ) { return hx::Val( _hx___updateFrameScript_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__lastFrameScriptEval") ) { return hx::Val( _hx___lastFrameScriptEval ); }
		if (HX_FIELD_EQ(inName,"__updateDisplayObject") ) { return hx::Val( _hx___updateDisplayObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_currentFrameLabel") ) { return hx::Val( get_currentFrameLabel_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__evaluateFrameScripts") ) { return hx::Val( _hx___evaluateFrameScripts_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateInstanceFields") ) { return hx::Val( _hx___updateInstanceFields_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__resolveFrameReference") ) { return hx::Val( _hx___resolveFrameReference_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"__activeInstancesByFrameObjectID") ) { return hx::Val( _hx___activeInstancesByFrameObjectID ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MovieClip_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { outValue = ( _hx___initSWF ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { outValue = ( _hx___initSymbol ); return true; }
	}
	return false;
}

hx::Val MovieClip_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"__swf") ) { _hx___swf=inValue.Cast<  ::openfl::_internal::formats::swf::SWFLite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_enabled(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__hasUp") ) { _hx___hasUp=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::SpriteSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__enabled") ) { _hx___enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasDown") ) { _hx___hasDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasOver") ) { _hx___hasOver=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__playing") ) { _hx___playing=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__frameTime") ) { _hx___frameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__mouseIsDown") ) { _hx___mouseIsDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { _hx___timeElapsed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { _hx___totalFrames=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { _hx___currentFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { _hx___currentLabel=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { _hx___frameScripts=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { _hx___currentLabels=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__instanceFields") ) { _hx___instanceFields=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__activeInstances") ) { _hx___activeInstances=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lastFrameUpdate") ) { _hx___lastFrameUpdate=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { _hx___currentFrameLabel=inValue.Cast< ::String >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__lastFrameScriptEval") ) { _hx___lastFrameScriptEval=inValue.Cast< int >(); return inValue; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"__activeInstancesByFrameObjectID") ) { _hx___activeInstancesByFrameObjectID=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MovieClip_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { _hx___initSWF=ioValue.Cast<  ::openfl::_internal::formats::swf::SWFLite >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { _hx___initSymbol=ioValue.Cast<  ::openfl::_internal::symbols::SpriteSymbol >(); return true; }
	}
	return false;
}

void MovieClip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("currentFrame",34,5d,8f,4d));
	outFields->push(HX_("currentFrameLabel",20,c4,0a,2a));
	outFields->push(HX_("currentLabel",fb,f2,ba,b6));
	outFields->push(HX_("currentLabels",18,a9,d9,2c));
	outFields->push(HX_("enabled",81,04,31,7e));
	outFields->push(HX_("framesLoaded",4b,ac,61,0e));
	outFields->push(HX_("isPlaying",a4,8c,16,8e));
	outFields->push(HX_("totalFrames",8a,a2,bb,72));
	outFields->push(HX_("__activeInstances",78,e9,49,03));
	outFields->push(HX_("__activeInstancesByFrameObjectID",b8,3a,9c,5b));
	outFields->push(HX_("__currentFrame",54,e0,4f,6e));
	outFields->push(HX_("__currentFrameLabel",00,ed,fa,dc));
	outFields->push(HX_("__currentLabel",1b,76,7b,d7));
	outFields->push(HX_("__currentLabels",f8,e1,8b,b4));
	outFields->push(HX_("__enabled",61,55,7f,ff));
	outFields->push(HX_("__frameScripts",7b,3e,2f,ee));
	outFields->push(HX_("__frameTime",ba,d3,a9,68));
	outFields->push(HX_("__hasDown",bc,69,00,93));
	outFields->push(HX_("__hasOver",ae,02,4b,9a));
	outFields->push(HX_("__hasUp",35,ed,7f,8c));
	outFields->push(HX_("__instanceFields",0e,0b,63,af));
	outFields->push(HX_("__lastFrameScriptEval",fe,cc,8c,81));
	outFields->push(HX_("__lastFrameUpdate",40,24,e4,8a));
	outFields->push(HX_("__mouseIsDown",51,32,d5,9d));
	outFields->push(HX_("__playing",4e,60,66,0b));
	outFields->push(HX_("__swf",22,0c,34,f2));
	outFields->push(HX_("__symbol",78,1a,0d,97));
	outFields->push(HX_("__timeElapsed",8f,80,8e,75));
	outFields->push(HX_("__totalFrames",6a,e3,33,bb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo MovieClip_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MovieClip_obj,_hx___activeInstances),HX_("__activeInstances",78,e9,49,03)},
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(MovieClip_obj,_hx___activeInstancesByFrameObjectID),HX_("__activeInstancesByFrameObjectID",b8,3a,9c,5b)},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___currentFrame),HX_("__currentFrame",54,e0,4f,6e)},
	{hx::fsString,(int)offsetof(MovieClip_obj,_hx___currentFrameLabel),HX_("__currentFrameLabel",00,ed,fa,dc)},
	{hx::fsString,(int)offsetof(MovieClip_obj,_hx___currentLabel),HX_("__currentLabel",1b,76,7b,d7)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MovieClip_obj,_hx___currentLabels),HX_("__currentLabels",f8,e1,8b,b4)},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___enabled),HX_("__enabled",61,55,7f,ff)},
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(MovieClip_obj,_hx___frameScripts),HX_("__frameScripts",7b,3e,2f,ee)},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___frameTime),HX_("__frameTime",ba,d3,a9,68)},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___hasDown),HX_("__hasDown",bc,69,00,93)},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___hasOver),HX_("__hasOver",ae,02,4b,9a)},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___hasUp),HX_("__hasUp",35,ed,7f,8c)},
	{hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MovieClip_obj,_hx___instanceFields),HX_("__instanceFields",0e,0b,63,af)},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___lastFrameScriptEval),HX_("__lastFrameScriptEval",fe,cc,8c,81)},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___lastFrameUpdate),HX_("__lastFrameUpdate",40,24,e4,8a)},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___mouseIsDown),HX_("__mouseIsDown",51,32,d5,9d)},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___playing),HX_("__playing",4e,60,66,0b)},
	{hx::fsObject /*  ::openfl::_internal::formats::swf::SWFLite */ ,(int)offsetof(MovieClip_obj,_hx___swf),HX_("__swf",22,0c,34,f2)},
	{hx::fsObject /*  ::openfl::_internal::symbols::SpriteSymbol */ ,(int)offsetof(MovieClip_obj,_hx___symbol),HX_("__symbol",78,1a,0d,97)},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___timeElapsed),HX_("__timeElapsed",8f,80,8e,75)},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___totalFrames),HX_("__totalFrames",6a,e3,33,bb)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MovieClip_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::openfl::_internal::formats::swf::SWFLite */ ,(void *) &MovieClip_obj::_hx___initSWF,HX_("__initSWF",f2,a6,dc,4c)},
	{hx::fsObject /*  ::openfl::_internal::symbols::SpriteSymbol */ ,(void *) &MovieClip_obj::_hx___initSymbol,HX_("__initSymbol",a8,85,b6,2b)},
	{hx::fsBool,(void *) &MovieClip_obj::_hx___useParentFPS,HX_("__useParentFPS",b8,6a,a7,0f)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MovieClip_obj_sMemberFields[] = {
	HX_("__activeInstances",78,e9,49,03),
	HX_("__activeInstancesByFrameObjectID",b8,3a,9c,5b),
	HX_("__currentFrame",54,e0,4f,6e),
	HX_("__currentFrameLabel",00,ed,fa,dc),
	HX_("__currentLabel",1b,76,7b,d7),
	HX_("__currentLabels",f8,e1,8b,b4),
	HX_("__enabled",61,55,7f,ff),
	HX_("__frameScripts",7b,3e,2f,ee),
	HX_("__frameTime",ba,d3,a9,68),
	HX_("__hasDown",bc,69,00,93),
	HX_("__hasOver",ae,02,4b,9a),
	HX_("__hasUp",35,ed,7f,8c),
	HX_("__instanceFields",0e,0b,63,af),
	HX_("__lastFrameScriptEval",fe,cc,8c,81),
	HX_("__lastFrameUpdate",40,24,e4,8a),
	HX_("__mouseIsDown",51,32,d5,9d),
	HX_("__playing",4e,60,66,0b),
	HX_("__swf",22,0c,34,f2),
	HX_("__symbol",78,1a,0d,97),
	HX_("__timeElapsed",8f,80,8e,75),
	HX_("__totalFrames",6a,e3,33,bb),
	HX_("addFrameScript",77,21,7f,bb),
	HX_("gotoAndPlay",08,65,84,ef),
	HX_("gotoAndStop",16,27,86,f1),
	HX_("nextFrame",3a,92,c8,ad),
	HX_("play",f4,2d,5a,4a),
	HX_("prevFrame",3a,18,da,f1),
	HX_("stop",02,f0,5b,4c),
	HX_("__enterFrame",15,7f,e3,3a),
	HX_("__updateFrameScript",6f,ef,01,3d),
	HX_("__updateSymbol",61,d9,61,0f),
	HX_("__evaluateFrameScripts",74,ac,75,85),
	HX_("__fromSymbol",82,2f,b5,6a),
	HX_("__getNextFrame",e4,b1,df,dd),
	HX_("__goto",c3,fc,61,f3),
	HX_("__resolveFrameReference",ca,06,cb,71),
	HX_("__sortDepths",2e,e3,01,03),
	HX_("__stopAllMovieClips",d2,89,e8,53),
	HX_("__tabTest",27,ee,bd,c6),
	HX_("__updateDisplayObject",b8,53,1d,d8),
	HX_("__updateFrameLabel",10,a5,51,08),
	HX_("__updateInstanceFields",f7,5a,5e,c5),
	HX_("__onMouseDown",e8,d4,7d,59),
	HX_("__onMouseUp",61,f5,49,c6),
	HX_("__onRollOut",92,fa,e8,62),
	HX_("__onRollOver",d0,fa,f2,28),
	HX_("set_buttonMode",32,b3,6c,48),
	HX_("get_currentFrame",bd,49,2e,52),
	HX_("get_currentFrameLabel",f7,c6,b8,a8),
	HX_("get_currentLabel",84,df,59,bb),
	HX_("get_currentLabels",6f,b4,49,33),
	HX_("get_enabled",98,64,2b,04),
	HX_("set_enabled",a4,6b,98,0e),
	HX_("get_framesLoaded",d4,98,00,13),
	HX_("get_isPlaying",7b,60,7a,4f),
	HX_("get_totalFrames",21,5a,9d,33),
	::String(null()) };

static void MovieClip_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___initSWF,"__initSWF");
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___initSymbol,"__initSymbol");
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___useParentFPS,"__useParentFPS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MovieClip_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___initSWF,"__initSWF");
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___initSymbol,"__initSymbol");
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___useParentFPS,"__useParentFPS");
};

#endif

hx::Class MovieClip_obj::__mClass;

static ::String MovieClip_obj_sStaticFields[] = {
	HX_("__initSWF",f2,a6,dc,4c),
	HX_("__initSymbol",a8,85,b6,2b),
	HX_("__useParentFPS",b8,6a,a7,0f),
	::String(null())
};

void MovieClip_obj::__register()
{
	MovieClip_obj _hx_dummy;
	MovieClip_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.display.MovieClip",f6,30,c3,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MovieClip_obj::__GetStatic;
	__mClass->mSetStaticField = &MovieClip_obj::__SetStatic;
	__mClass->mMarkFunc = MovieClip_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MovieClip_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MovieClip_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MovieClip_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MovieClip_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MovieClip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MovieClip_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MovieClip_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_82_boot)
HXDLIN(  82)		_hx___useParentFPS = false;
            	}
}

} // end namespace openfl
} // end namespace display
