// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8c0b4e9630d09afb_167_new,"openfl.display.ShaderParameter_Float","new",0x2b32a149,"openfl.display.ShaderParameter_Float.new","openfl/display/ShaderParameter.hx",167,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_8c0b4e9630d09afb_171___disableGL,"openfl.display.ShaderParameter_Float","__disableGL",0x91c89cd6,"openfl.display.ShaderParameter_Float.__disableGL","openfl/display/ShaderParameter.hx",171,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_8c0b4e9630d09afb_184___updateGL,"openfl.display.ShaderParameter_Float","__updateGL",0x33b799c5,"openfl.display.ShaderParameter_Float.__updateGL","openfl/display/ShaderParameter.hx",184,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_8c0b4e9630d09afb_418___updateGLFromBuffer,"openfl.display.ShaderParameter_Float","__updateGLFromBuffer",0xc243282f,"openfl.display.ShaderParameter_Float.__updateGLFromBuffer","openfl/display/ShaderParameter.hx",418,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_8c0b4e9630d09afb_585_set_name,"openfl.display.ShaderParameter_Float","set_name",0x8badc9bf,"openfl.display.ShaderParameter_Float.set_name","openfl/display/ShaderParameter.hx",585,0xc89f13e6)
HX_LOCAL_STACK_FRAME(_hx_pos_8c0b4e9630d09afb_96_boot,"openfl.display.ShaderParameter_Float","boot",0x99337f29,"openfl.display.ShaderParameter_Float.boot","openfl/display/ShaderParameter.hx",96,0xc89f13e6)
namespace openfl{
namespace display{

void ShaderParameter_Float_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_8c0b4e9630d09afb_167_new)
HXDLIN( 167)		this->index = 0;
            	}

Dynamic ShaderParameter_Float_obj::__CreateEmpty() { return new ShaderParameter_Float_obj; }

void *ShaderParameter_Float_obj::_hx_vtable = 0;

Dynamic ShaderParameter_Float_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ShaderParameter_Float_obj > _hx_result = new ShaderParameter_Float_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ShaderParameter_Float_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3fe4faef;
}

void ShaderParameter_Float_obj::_hx___disableGL( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_8c0b4e9630d09afb_171___disableGL)
HXLINE( 172)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE( 174)		if (!(this->_hx___isUniform)) {
HXLINE( 176)			int _g = 0;
HXDLIN( 176)			int _g1 = this->_hx___arrayLength;
HXDLIN( 176)			while((_g < _g1)){
HXLINE( 176)				_g = (_g + 1);
HXDLIN( 176)				int i = (_g - 1);
HXLINE( 178)				gl->disableVertexAttribArray(( (int)((this->index + i)) ));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderParameter_Float_obj,_hx___disableGL,(void))

void ShaderParameter_Float_obj::_hx___updateGL( ::openfl::display3D::Context3D context,::Array< Float > overrideValue){
            	HX_STACKFRAME(&_hx_pos_8c0b4e9630d09afb_184___updateGL)
HXLINE( 186)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE( 188)		::Array< Float > value;
HXDLIN( 188)		if (hx::IsNotNull( overrideValue )) {
HXLINE( 188)			value = overrideValue;
            		}
            		else {
HXLINE( 188)			value = this->value;
            		}
HXLINE( 190)		::Array< bool > boolValue;
HXDLIN( 190)		if (this->_hx___isBool) {
HXLINE( 190)			boolValue = value;
            		}
            		else {
HXLINE( 190)			boolValue = null();
            		}
HXLINE( 191)		::Array< Float > floatValue;
HXDLIN( 191)		if (this->_hx___isFloat) {
HXLINE( 191)			floatValue = value;
            		}
            		else {
HXLINE( 191)			floatValue = null();
            		}
HXLINE( 192)		::Array< int > intValue;
HXDLIN( 192)		if (this->_hx___isInt) {
HXLINE( 192)			intValue = value;
            		}
            		else {
HXLINE( 192)			intValue = null();
            		}
HXLINE( 194)		if (this->_hx___isUniform) {
HXLINE( 196)			bool _hx_tmp;
HXDLIN( 196)			if (hx::IsNotNull( value )) {
HXLINE( 196)				_hx_tmp = (value->length >= this->__length);
            			}
            			else {
HXLINE( 196)				_hx_tmp = false;
            			}
HXDLIN( 196)			if (_hx_tmp) {
HXLINE( 198)				 ::Dynamic _hx_switch_0 = this->type;
            				if (  (_hx_switch_0==0) ){
HXLINE( 201)					int _hx_tmp1;
HXDLIN( 201)					if (boolValue->__get(0)) {
HXLINE( 201)						_hx_tmp1 = 1;
            					}
            					else {
HXLINE( 201)						_hx_tmp1 = 0;
            					}
HXDLIN( 201)					gl->uniform1i(this->index,_hx_tmp1);
HXDLIN( 201)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==1) ){
HXLINE( 203)					int _hx_tmp2;
HXDLIN( 203)					if (boolValue->__get(0)) {
HXLINE( 203)						_hx_tmp2 = 1;
            					}
            					else {
HXLINE( 203)						_hx_tmp2 = 0;
            					}
HXDLIN( 203)					int _hx_tmp3;
HXDLIN( 203)					if (boolValue->__get(1)) {
HXLINE( 203)						_hx_tmp3 = 1;
            					}
            					else {
HXLINE( 203)						_hx_tmp3 = 0;
            					}
HXDLIN( 203)					gl->uniform2i(this->index,_hx_tmp2,_hx_tmp3);
HXDLIN( 203)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==2) ){
HXLINE( 205)					int _hx_tmp4;
HXDLIN( 205)					if (boolValue->__get(0)) {
HXLINE( 205)						_hx_tmp4 = 1;
            					}
            					else {
HXLINE( 205)						_hx_tmp4 = 0;
            					}
HXDLIN( 205)					int _hx_tmp5;
HXDLIN( 205)					if (boolValue->__get(1)) {
HXLINE( 205)						_hx_tmp5 = 1;
            					}
            					else {
HXLINE( 205)						_hx_tmp5 = 0;
            					}
HXDLIN( 205)					int _hx_tmp6;
HXDLIN( 205)					if (boolValue->__get(2)) {
HXLINE( 205)						_hx_tmp6 = 1;
            					}
            					else {
HXLINE( 205)						_hx_tmp6 = 0;
            					}
HXDLIN( 205)					gl->uniform3i(this->index,_hx_tmp4,_hx_tmp5,_hx_tmp6);
HXDLIN( 205)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==3) ){
HXLINE( 207)					int _hx_tmp7;
HXDLIN( 207)					if (boolValue->__get(0)) {
HXLINE( 207)						_hx_tmp7 = 1;
            					}
            					else {
HXLINE( 207)						_hx_tmp7 = 0;
            					}
HXDLIN( 207)					int _hx_tmp8;
HXDLIN( 207)					if (boolValue->__get(1)) {
HXLINE( 207)						_hx_tmp8 = 1;
            					}
            					else {
HXLINE( 207)						_hx_tmp8 = 0;
            					}
HXDLIN( 207)					int _hx_tmp9;
HXDLIN( 207)					if (boolValue->__get(2)) {
HXLINE( 207)						_hx_tmp9 = 1;
            					}
            					else {
HXLINE( 207)						_hx_tmp9 = 0;
            					}
HXDLIN( 207)					int _hx_tmp10;
HXDLIN( 207)					if (boolValue->__get(3)) {
HXLINE( 207)						_hx_tmp10 = 1;
            					}
            					else {
HXLINE( 207)						_hx_tmp10 = 0;
            					}
HXDLIN( 207)					gl->uniform4i(this->index,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10);
HXDLIN( 207)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==4) ){
HXLINE( 209)					gl->uniform1f(this->index,floatValue->__get(0));
HXDLIN( 209)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==5) ){
HXLINE( 211)					gl->uniform2f(this->index,floatValue->__get(0),floatValue->__get(1));
HXDLIN( 211)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==6) ){
HXLINE( 213)					gl->uniform3f(this->index,floatValue->__get(0),floatValue->__get(1),floatValue->__get(2));
HXDLIN( 213)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==7) ){
HXLINE( 215)					gl->uniform4f(this->index,floatValue->__get(0),floatValue->__get(1),floatValue->__get(2),floatValue->__get(3));
HXDLIN( 215)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==8) ){
HXLINE( 247)					gl->uniform1i(this->index,intValue->__get(0));
HXDLIN( 247)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==9) ){
HXLINE( 249)					gl->uniform2i(this->index,intValue->__get(0),intValue->__get(1));
HXDLIN( 249)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==10) ){
HXLINE( 251)					gl->uniform3i(this->index,intValue->__get(0),intValue->__get(1),intValue->__get(2));
HXDLIN( 251)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==11) ){
HXLINE( 253)					gl->uniform4i(this->index,intValue->__get(0),intValue->__get(1),intValue->__get(2),intValue->__get(3));
HXDLIN( 253)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==12) ){
HXLINE( 218)					{
HXLINE( 220)						{
HXLINE( 220)							 ::lime::utils::ArrayBufferView this1 = this->_hx___uniformMatrix;
HXDLIN( 220)							Float val = floatValue->__get(0);
HXDLIN( 220)							 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            						}
HXDLIN( 220)						{
HXLINE( 220)							 ::lime::utils::ArrayBufferView this2 = this->_hx___uniformMatrix;
HXDLIN( 220)							Float val1 = floatValue->__get(1);
HXDLIN( 220)							 ::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + 4),val1);
            						}
HXDLIN( 220)						{
HXLINE( 220)							 ::lime::utils::ArrayBufferView this3 = this->_hx___uniformMatrix;
HXDLIN( 220)							Float val2 = floatValue->__get(2);
HXDLIN( 220)							 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + 8),val2);
            						}
HXDLIN( 220)						{
HXLINE( 220)							 ::lime::utils::ArrayBufferView this4 = this->_hx___uniformMatrix;
HXDLIN( 220)							Float val3 = floatValue->__get(3);
HXDLIN( 220)							 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + 12),val3);
            						}
            					}
HXLINE( 222)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix2fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 217)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==16) ){
HXLINE( 229)					{
HXLINE( 231)						{
HXLINE( 231)							 ::lime::utils::ArrayBufferView this5 = this->_hx___uniformMatrix;
HXDLIN( 231)							Float val4 = floatValue->__get(0);
HXDLIN( 231)							 ::__hxcpp_memory_set_float(this5->buffer->b,this5->byteOffset,val4);
            						}
HXDLIN( 231)						{
HXLINE( 231)							 ::lime::utils::ArrayBufferView this6 = this->_hx___uniformMatrix;
HXDLIN( 231)							Float val5 = floatValue->__get(1);
HXDLIN( 231)							 ::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + 4),val5);
            						}
HXDLIN( 231)						{
HXLINE( 231)							 ::lime::utils::ArrayBufferView this7 = this->_hx___uniformMatrix;
HXDLIN( 231)							Float val6 = floatValue->__get(2);
HXDLIN( 231)							 ::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + 8),val6);
            						}
HXDLIN( 231)						{
HXLINE( 231)							 ::lime::utils::ArrayBufferView this8 = this->_hx___uniformMatrix;
HXDLIN( 231)							Float val7 = floatValue->__get(3);
HXDLIN( 231)							 ::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + 12),val7);
            						}
HXDLIN( 231)						{
HXLINE( 231)							 ::lime::utils::ArrayBufferView this9 = this->_hx___uniformMatrix;
HXDLIN( 231)							Float val8 = floatValue->__get(4);
HXDLIN( 231)							 ::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + 16),val8);
            						}
HXDLIN( 231)						{
HXLINE( 231)							 ::lime::utils::ArrayBufferView this10 = this->_hx___uniformMatrix;
HXDLIN( 231)							Float val9 = floatValue->__get(5);
HXDLIN( 231)							 ::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + 20),val9);
            						}
HXDLIN( 231)						{
HXLINE( 231)							 ::lime::utils::ArrayBufferView this11 = this->_hx___uniformMatrix;
HXDLIN( 231)							Float val10 = floatValue->__get(6);
HXDLIN( 231)							 ::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + 24),val10);
            						}
HXDLIN( 231)						{
HXLINE( 231)							 ::lime::utils::ArrayBufferView this12 = this->_hx___uniformMatrix;
HXDLIN( 231)							Float val11 = floatValue->__get(7);
HXDLIN( 231)							 ::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + 28),val11);
            						}
HXDLIN( 231)						{
HXLINE( 231)							 ::lime::utils::ArrayBufferView this13 = this->_hx___uniformMatrix;
HXDLIN( 231)							Float val12 = floatValue->__get(8);
HXDLIN( 231)							 ::__hxcpp_memory_set_float(this13->buffer->b,(this13->byteOffset + 32),val12);
            						}
            					}
HXLINE( 233)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix3fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 228)					goto _hx_goto_3;
            				}
            				if (  (_hx_switch_0==20) ){
HXLINE( 240)					{
HXLINE( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this14 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val13 = floatValue->__get(0);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this14->buffer->b,this14->byteOffset,val13);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this15 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val14 = floatValue->__get(1);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this15->buffer->b,(this15->byteOffset + 4),val14);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this16 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val15 = floatValue->__get(2);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this16->buffer->b,(this16->byteOffset + 8),val15);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this17 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val16 = floatValue->__get(3);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this17->buffer->b,(this17->byteOffset + 12),val16);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this18 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val17 = floatValue->__get(4);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this18->buffer->b,(this18->byteOffset + 16),val17);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this19 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val18 = floatValue->__get(5);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this19->buffer->b,(this19->byteOffset + 20),val18);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this20 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val19 = floatValue->__get(6);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this20->buffer->b,(this20->byteOffset + 24),val19);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this21 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val20 = floatValue->__get(7);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this21->buffer->b,(this21->byteOffset + 28),val20);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this22 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val21 = floatValue->__get(8);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this22->buffer->b,(this22->byteOffset + 32),val21);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this23 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val22 = floatValue->__get(9);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this23->buffer->b,(this23->byteOffset + 36),val22);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this24 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val23 = floatValue->__get(10);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this24->buffer->b,(this24->byteOffset + 40),val23);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this25 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val24 = floatValue->__get(11);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this25->buffer->b,(this25->byteOffset + 44),val24);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this26 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val25 = floatValue->__get(12);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this26->buffer->b,(this26->byteOffset + 48),val25);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this27 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val26 = floatValue->__get(13);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this27->buffer->b,(this27->byteOffset + 52),val26);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this28 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val27 = floatValue->__get(14);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this28->buffer->b,(this28->byteOffset + 56),val27);
            						}
HXDLIN( 242)						{
HXLINE( 242)							 ::lime::utils::ArrayBufferView this29 = this->_hx___uniformMatrix;
HXDLIN( 242)							Float val28 = floatValue->__get(15);
HXDLIN( 242)							 ::__hxcpp_memory_set_float(this29->buffer->b,(this29->byteOffset + 60),val28);
            						}
            					}
HXLINE( 244)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix4fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 239)					goto _hx_goto_3;
            				}
            				/* default */{
            				}
            				_hx_goto_3:;
            			}
            			else {
HXLINE( 260)				 ::Dynamic _hx_switch_1 = this->type;
            				if (  (_hx_switch_1==1) ||  (_hx_switch_1==9) ){
HXLINE( 265)					gl->uniform2i(this->index,0,0);
HXDLIN( 265)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_1==3) ||  (_hx_switch_1==11) ){
HXLINE( 269)					gl->uniform4i(this->index,0,0,0,0);
HXDLIN( 269)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_1==4) ){
HXLINE( 271)					gl->uniform1f(this->index,( (Float)(0) ));
HXDLIN( 271)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_1==5) ){
HXLINE( 273)					gl->uniform2f(this->index,( (Float)(0) ),( (Float)(0) ));
HXDLIN( 273)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_1==6) ){
HXLINE( 275)					gl->uniform3f(this->index,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 275)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_1==7) ){
HXLINE( 277)					gl->uniform4f(this->index,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 277)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_1==0) ||  (_hx_switch_1==8) ){
HXLINE( 263)					gl->uniform1i(this->index,0);
HXDLIN( 263)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_1==2) ||  (_hx_switch_1==10) ){
HXLINE( 267)					gl->uniform3i(this->index,0,0,0);
HXDLIN( 267)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_1==12) ){
HXLINE( 280)					{
HXLINE( 282)						{
HXLINE( 282)							 ::lime::utils::ArrayBufferView this30 = this->_hx___uniformMatrix;
HXDLIN( 282)							 ::__hxcpp_memory_set_float(this30->buffer->b,this30->byteOffset,0);
            						}
HXDLIN( 282)						{
HXLINE( 282)							 ::lime::utils::ArrayBufferView this31 = this->_hx___uniformMatrix;
HXDLIN( 282)							 ::__hxcpp_memory_set_float(this31->buffer->b,(this31->byteOffset + 4),0);
            						}
HXDLIN( 282)						{
HXLINE( 282)							 ::lime::utils::ArrayBufferView this32 = this->_hx___uniformMatrix;
HXDLIN( 282)							 ::__hxcpp_memory_set_float(this32->buffer->b,(this32->byteOffset + 8),0);
            						}
HXDLIN( 282)						{
HXLINE( 282)							 ::lime::utils::ArrayBufferView this33 = this->_hx___uniformMatrix;
HXDLIN( 282)							 ::__hxcpp_memory_set_float(this33->buffer->b,(this33->byteOffset + 12),0);
            						}
            					}
HXLINE( 284)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix2fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 279)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_1==16) ){
HXLINE( 291)					{
HXLINE( 293)						{
HXLINE( 293)							 ::lime::utils::ArrayBufferView this34 = this->_hx___uniformMatrix;
HXDLIN( 293)							 ::__hxcpp_memory_set_float(this34->buffer->b,this34->byteOffset,0);
            						}
HXDLIN( 293)						{
HXLINE( 293)							 ::lime::utils::ArrayBufferView this35 = this->_hx___uniformMatrix;
HXDLIN( 293)							 ::__hxcpp_memory_set_float(this35->buffer->b,(this35->byteOffset + 4),0);
            						}
HXDLIN( 293)						{
HXLINE( 293)							 ::lime::utils::ArrayBufferView this36 = this->_hx___uniformMatrix;
HXDLIN( 293)							 ::__hxcpp_memory_set_float(this36->buffer->b,(this36->byteOffset + 8),0);
            						}
HXDLIN( 293)						{
HXLINE( 293)							 ::lime::utils::ArrayBufferView this37 = this->_hx___uniformMatrix;
HXDLIN( 293)							 ::__hxcpp_memory_set_float(this37->buffer->b,(this37->byteOffset + 12),0);
            						}
HXDLIN( 293)						{
HXLINE( 293)							 ::lime::utils::ArrayBufferView this38 = this->_hx___uniformMatrix;
HXDLIN( 293)							 ::__hxcpp_memory_set_float(this38->buffer->b,(this38->byteOffset + 16),0);
            						}
HXDLIN( 293)						{
HXLINE( 293)							 ::lime::utils::ArrayBufferView this39 = this->_hx___uniformMatrix;
HXDLIN( 293)							 ::__hxcpp_memory_set_float(this39->buffer->b,(this39->byteOffset + 20),0);
            						}
HXDLIN( 293)						{
HXLINE( 293)							 ::lime::utils::ArrayBufferView this40 = this->_hx___uniformMatrix;
HXDLIN( 293)							 ::__hxcpp_memory_set_float(this40->buffer->b,(this40->byteOffset + 24),0);
            						}
HXDLIN( 293)						{
HXLINE( 293)							 ::lime::utils::ArrayBufferView this41 = this->_hx___uniformMatrix;
HXDLIN( 293)							 ::__hxcpp_memory_set_float(this41->buffer->b,(this41->byteOffset + 28),0);
            						}
HXDLIN( 293)						{
HXLINE( 293)							 ::lime::utils::ArrayBufferView this42 = this->_hx___uniformMatrix;
HXDLIN( 293)							 ::__hxcpp_memory_set_float(this42->buffer->b,(this42->byteOffset + 32),0);
            						}
            					}
HXLINE( 295)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix3fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 290)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_1==20) ){
HXLINE( 302)					{
HXLINE( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this43 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this43->buffer->b,this43->byteOffset,0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this44 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this44->buffer->b,(this44->byteOffset + 4),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this45 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this45->buffer->b,(this45->byteOffset + 8),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this46 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this46->buffer->b,(this46->byteOffset + 12),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this47 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this47->buffer->b,(this47->byteOffset + 16),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this48 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this48->buffer->b,(this48->byteOffset + 20),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this49 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this49->buffer->b,(this49->byteOffset + 24),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this50 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this50->buffer->b,(this50->byteOffset + 28),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this51 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this51->buffer->b,(this51->byteOffset + 32),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this52 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this52->buffer->b,(this52->byteOffset + 36),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this53 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this53->buffer->b,(this53->byteOffset + 40),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this54 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this54->buffer->b,(this54->byteOffset + 44),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this55 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this55->buffer->b,(this55->byteOffset + 48),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this56 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this56->buffer->b,(this56->byteOffset + 52),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this57 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this57->buffer->b,(this57->byteOffset + 56),0);
            						}
HXDLIN( 304)						{
HXLINE( 304)							 ::lime::utils::ArrayBufferView this58 = this->_hx___uniformMatrix;
HXDLIN( 304)							 ::__hxcpp_memory_set_float(this58->buffer->b,(this58->byteOffset + 60),0);
            						}
            					}
HXLINE( 306)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix4fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 301)					goto _hx_goto_4;
            				}
            				/* default */{
            				}
            				_hx_goto_4:;
            			}
            		}
            		else {
HXLINE( 314)			bool _hx_tmp11;
HXDLIN( 314)			if (!(this->_hx___useArray)) {
HXLINE( 314)				if (hx::IsNotNull( value )) {
HXLINE( 314)					_hx_tmp11 = (value->length == this->__length);
            				}
            				else {
HXLINE( 314)					_hx_tmp11 = true;
            				}
            			}
            			else {
HXLINE( 314)				_hx_tmp11 = false;
            			}
HXDLIN( 314)			if (_hx_tmp11) {
HXLINE( 316)				{
HXLINE( 316)					int _g = 0;
HXDLIN( 316)					int _g1 = this->_hx___arrayLength;
HXDLIN( 316)					while((_g < _g1)){
HXLINE( 316)						_g = (_g + 1);
HXDLIN( 316)						int i = (_g - 1);
HXLINE( 318)						gl->disableVertexAttribArray(( (int)((this->index + i)) ));
            					}
            				}
HXLINE( 321)				if (hx::IsNotNull( value )) {
HXLINE( 323)					 ::Dynamic _hx_switch_2 = this->type;
            					if (  (_hx_switch_2==0) ){
HXLINE( 326)						Float _hx_tmp12;
HXDLIN( 326)						if (boolValue->__get(0)) {
HXLINE( 326)							_hx_tmp12 = ( (Float)(1) );
            						}
            						else {
HXLINE( 326)							_hx_tmp12 = ( (Float)(0) );
            						}
HXDLIN( 326)						gl->vertexAttrib1f(this->index,_hx_tmp12);
HXDLIN( 326)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==1) ){
HXLINE( 328)						Float _hx_tmp13;
HXDLIN( 328)						if (boolValue->__get(0)) {
HXLINE( 328)							_hx_tmp13 = ( (Float)(1) );
            						}
            						else {
HXLINE( 328)							_hx_tmp13 = ( (Float)(0) );
            						}
HXDLIN( 328)						Float _hx_tmp14;
HXDLIN( 328)						if (boolValue->__get(1)) {
HXLINE( 328)							_hx_tmp14 = ( (Float)(1) );
            						}
            						else {
HXLINE( 328)							_hx_tmp14 = ( (Float)(0) );
            						}
HXDLIN( 328)						gl->vertexAttrib2f(this->index,_hx_tmp13,_hx_tmp14);
HXDLIN( 328)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==2) ){
HXLINE( 330)						Float _hx_tmp15;
HXDLIN( 330)						if (boolValue->__get(0)) {
HXLINE( 330)							_hx_tmp15 = ( (Float)(1) );
            						}
            						else {
HXLINE( 330)							_hx_tmp15 = ( (Float)(0) );
            						}
HXDLIN( 330)						Float _hx_tmp16;
HXDLIN( 330)						if (boolValue->__get(1)) {
HXLINE( 330)							_hx_tmp16 = ( (Float)(1) );
            						}
            						else {
HXLINE( 330)							_hx_tmp16 = ( (Float)(0) );
            						}
HXDLIN( 330)						Float _hx_tmp17;
HXDLIN( 330)						if (boolValue->__get(2)) {
HXLINE( 330)							_hx_tmp17 = ( (Float)(1) );
            						}
            						else {
HXLINE( 330)							_hx_tmp17 = ( (Float)(0) );
            						}
HXDLIN( 330)						gl->vertexAttrib3f(this->index,_hx_tmp15,_hx_tmp16,_hx_tmp17);
HXDLIN( 330)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==3) ){
HXLINE( 332)						Float _hx_tmp18;
HXDLIN( 332)						if (boolValue->__get(0)) {
HXLINE( 332)							_hx_tmp18 = ( (Float)(1) );
            						}
            						else {
HXLINE( 332)							_hx_tmp18 = ( (Float)(0) );
            						}
HXDLIN( 332)						Float _hx_tmp19;
HXDLIN( 332)						if (boolValue->__get(1)) {
HXLINE( 332)							_hx_tmp19 = ( (Float)(1) );
            						}
            						else {
HXLINE( 332)							_hx_tmp19 = ( (Float)(0) );
            						}
HXDLIN( 332)						Float _hx_tmp20;
HXDLIN( 332)						if (boolValue->__get(2)) {
HXLINE( 332)							_hx_tmp20 = ( (Float)(1) );
            						}
            						else {
HXLINE( 332)							_hx_tmp20 = ( (Float)(0) );
            						}
HXDLIN( 332)						Float _hx_tmp21;
HXDLIN( 332)						if (boolValue->__get(3)) {
HXLINE( 332)							_hx_tmp21 = ( (Float)(1) );
            						}
            						else {
HXLINE( 332)							_hx_tmp21 = ( (Float)(0) );
            						}
HXDLIN( 332)						gl->vertexAttrib4f(this->index,_hx_tmp18,_hx_tmp19,_hx_tmp20,_hx_tmp21);
HXDLIN( 332)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==4) ){
HXLINE( 334)						gl->vertexAttrib1f(this->index,floatValue->__get(0));
HXDLIN( 334)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==5) ){
HXLINE( 336)						gl->vertexAttrib2f(this->index,floatValue->__get(0),floatValue->__get(1));
HXDLIN( 336)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==6) ){
HXLINE( 338)						gl->vertexAttrib3f(this->index,floatValue->__get(0),floatValue->__get(1),floatValue->__get(2));
HXDLIN( 338)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==7) ){
HXLINE( 340)						gl->vertexAttrib4f(this->index,floatValue->__get(0),floatValue->__get(1),floatValue->__get(2),floatValue->__get(3));
HXDLIN( 340)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==8) ){
HXLINE( 361)						gl->vertexAttrib1f(this->index,( (Float)(intValue->__get(0)) ));
HXDLIN( 361)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==9) ){
HXLINE( 363)						gl->vertexAttrib2f(this->index,( (Float)(intValue->__get(0)) ),( (Float)(intValue->__get(1)) ));
HXDLIN( 363)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==10) ){
HXLINE( 365)						gl->vertexAttrib3f(this->index,( (Float)(intValue->__get(0)) ),( (Float)(intValue->__get(1)) ),( (Float)(intValue->__get(2)) ));
HXDLIN( 365)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==11) ){
HXLINE( 367)						gl->vertexAttrib4f(this->index,( (Float)(intValue->__get(0)) ),( (Float)(intValue->__get(1)) ),( (Float)(intValue->__get(2)) ),( (Float)(intValue->__get(3)) ));
HXDLIN( 367)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==12) ){
HXLINE( 345)						gl->vertexAttrib2f(( (int)((this->index + 0)) ),floatValue->__get(0),floatValue->__get(1));
HXDLIN( 345)						gl->vertexAttrib2f(( (int)((this->index + 1)) ),floatValue->__get(2),floatValue->__get(3));
HXLINE( 343)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==16) ){
HXLINE( 351)						gl->vertexAttrib3f(( (int)((this->index + 0)) ),floatValue->__get(0),floatValue->__get(1),floatValue->__get(2));
HXDLIN( 351)						gl->vertexAttrib3f(( (int)((this->index + 1)) ),floatValue->__get(3),floatValue->__get(4),floatValue->__get(5));
HXDLIN( 351)						gl->vertexAttrib3f(( (int)((this->index + 2)) ),floatValue->__get(6),floatValue->__get(7),floatValue->__get(8));
HXLINE( 349)						goto _hx_goto_6;
            					}
            					if (  (_hx_switch_2==20) ){
HXLINE( 357)						gl->vertexAttrib4f(( (int)((this->index + 0)) ),floatValue->__get(0),floatValue->__get(1),floatValue->__get(2),floatValue->__get(3));
HXDLIN( 357)						gl->vertexAttrib4f(( (int)((this->index + 1)) ),floatValue->__get(4),floatValue->__get(5),floatValue->__get(6),floatValue->__get(7));
HXDLIN( 357)						gl->vertexAttrib4f(( (int)((this->index + 2)) ),floatValue->__get(8),floatValue->__get(9),floatValue->__get(10),floatValue->__get(11));
HXDLIN( 357)						gl->vertexAttrib4f(( (int)((this->index + 3)) ),floatValue->__get(12),floatValue->__get(13),floatValue->__get(14),floatValue->__get(15));
HXLINE( 355)						goto _hx_goto_6;
            					}
            					/* default */{
            					}
            					_hx_goto_6:;
            				}
            				else {
HXLINE( 373)					 ::Dynamic _hx_switch_3 = this->type;
            					if (  (_hx_switch_3==1) ||  (_hx_switch_3==5) ||  (_hx_switch_3==9) ){
HXLINE( 378)						gl->vertexAttrib2f(this->index,( (Float)(0) ),( (Float)(0) ));
HXDLIN( 378)						goto _hx_goto_7;
            					}
            					if (  (_hx_switch_3==3) ||  (_hx_switch_3==7) ||  (_hx_switch_3==11) ){
HXLINE( 382)						gl->vertexAttrib4f(this->index,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 382)						goto _hx_goto_7;
            					}
            					if (  (_hx_switch_3==0) ||  (_hx_switch_3==4) ||  (_hx_switch_3==8) ){
HXLINE( 376)						gl->vertexAttrib1f(this->index,( (Float)(0) ));
HXDLIN( 376)						goto _hx_goto_7;
            					}
            					if (  (_hx_switch_3==2) ||  (_hx_switch_3==6) ||  (_hx_switch_3==10) ){
HXLINE( 380)						gl->vertexAttrib3f(this->index,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 380)						goto _hx_goto_7;
            					}
            					if (  (_hx_switch_3==12) ){
HXLINE( 387)						gl->vertexAttrib2f(( (int)((this->index + 0)) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 387)						gl->vertexAttrib2f(( (int)((this->index + 1)) ),( (Float)(0) ),( (Float)(0) ));
HXLINE( 385)						goto _hx_goto_7;
            					}
            					if (  (_hx_switch_3==16) ){
HXLINE( 393)						gl->vertexAttrib3f(( (int)((this->index + 0)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 393)						gl->vertexAttrib3f(( (int)((this->index + 1)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 393)						gl->vertexAttrib3f(( (int)((this->index + 2)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXLINE( 391)						goto _hx_goto_7;
            					}
            					if (  (_hx_switch_3==20) ){
HXLINE( 399)						gl->vertexAttrib4f(( (int)((this->index + 0)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 399)						gl->vertexAttrib4f(( (int)((this->index + 1)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 399)						gl->vertexAttrib4f(( (int)((this->index + 2)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 399)						gl->vertexAttrib4f(( (int)((this->index + 3)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXLINE( 397)						goto _hx_goto_7;
            					}
            					/* default */{
            					}
            					_hx_goto_7:;
            				}
            			}
            			else {
HXLINE( 408)				int _g2 = 0;
HXDLIN( 408)				int _g11 = this->_hx___arrayLength;
HXDLIN( 408)				while((_g2 < _g11)){
HXLINE( 408)					_g2 = (_g2 + 1);
HXDLIN( 408)					int i1 = (_g2 - 1);
HXLINE( 410)					gl->enableVertexAttribArray(( (int)((this->index + i1)) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ShaderParameter_Float_obj,_hx___updateGL,(void))

void ShaderParameter_Float_obj::_hx___updateGLFromBuffer( ::openfl::display3D::Context3D context, ::lime::utils::ArrayBufferView buffer,int position,int length,int bufferOffset){
            	HX_STACKFRAME(&_hx_pos_8c0b4e9630d09afb_418___updateGLFromBuffer)
HXLINE( 420)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE( 422)		if (this->_hx___isUniform) {
HXLINE( 424)			if ((length >= this->__length)) {
HXLINE( 426)				 ::Dynamic _hx_switch_0 = this->type;
            				if (  (_hx_switch_0==1) ||  (_hx_switch_0==9) ){
HXLINE( 431)					int location = this->index;
HXDLIN( 431)					int v0 = ::Std_obj::_hx_int( ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4))));
HXDLIN( 431)					gl->uniform2i(location,v0,::Std_obj::_hx_int( ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4)))));
HXDLIN( 431)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==3) ||  (_hx_switch_0==11) ){
HXLINE( 435)					int location1 = this->index;
HXDLIN( 435)					int v01 = ::Std_obj::_hx_int( ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4))));
HXDLIN( 435)					int v1 = ::Std_obj::_hx_int( ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4))));
HXDLIN( 435)					int v2 = ::Std_obj::_hx_int( ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4))));
HXDLIN( 435)					gl->uniform4i(location1,v01,v1,v2,::Std_obj::_hx_int( ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 3) * 4)))));
HXDLIN( 435)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==4) ){
HXLINE( 438)					int location2 = this->index;
HXDLIN( 438)					gl->uniform1f(location2, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4))));
HXDLIN( 438)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==5) ){
HXLINE( 440)					int location3 = this->index;
HXDLIN( 440)					Float v02 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 440)					gl->uniform2f(location3,v02, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4))));
HXDLIN( 440)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==6) ){
HXLINE( 442)					int location4 = this->index;
HXDLIN( 442)					Float v03 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 442)					Float v11 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4)));
HXDLIN( 442)					gl->uniform3f(location4,v03,v11, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4))));
HXDLIN( 442)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==7) ){
HXLINE( 444)					int location5 = this->index;
HXDLIN( 444)					Float v04 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 444)					Float v12 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4)));
HXDLIN( 444)					Float v21 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4)));
HXDLIN( 444)					gl->uniform4f(location5,v04,v12,v21, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 3) * 4))));
HXDLIN( 444)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==0) ||  (_hx_switch_0==8) ){
HXLINE( 429)					int location6 = this->index;
HXDLIN( 429)					gl->uniform1i(location6,::Std_obj::_hx_int( ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)))));
HXDLIN( 429)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==2) ||  (_hx_switch_0==10) ){
HXLINE( 433)					int location7 = this->index;
HXDLIN( 433)					int v05 = ::Std_obj::_hx_int( ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4))));
HXDLIN( 433)					int v13 = ::Std_obj::_hx_int( ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4))));
HXDLIN( 433)					gl->uniform3i(location7,v05,v13,::Std_obj::_hx_int( ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4)))));
HXDLIN( 433)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==12) ){
HXLINE( 447)					{
HXLINE( 449)						{
HXLINE( 449)							 ::lime::utils::ArrayBufferView this1 = this->_hx___uniformMatrix;
HXDLIN( 449)							Float val =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 449)							 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            						}
HXDLIN( 449)						{
HXLINE( 449)							 ::lime::utils::ArrayBufferView this2 = this->_hx___uniformMatrix;
HXDLIN( 449)							Float val1 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4)));
HXDLIN( 449)							 ::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + 4),val1);
            						}
HXDLIN( 449)						{
HXLINE( 449)							 ::lime::utils::ArrayBufferView this3 = this->_hx___uniformMatrix;
HXDLIN( 449)							Float val2 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4)));
HXDLIN( 449)							 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + 8),val2);
            						}
HXDLIN( 449)						{
HXLINE( 449)							 ::lime::utils::ArrayBufferView this4 = this->_hx___uniformMatrix;
HXDLIN( 449)							Float val3 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 3) * 4)));
HXDLIN( 449)							 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + 12),val3);
            						}
            					}
HXLINE( 451)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix2fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 446)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==16) ){
HXLINE( 458)					{
HXLINE( 460)						{
HXLINE( 460)							 ::lime::utils::ArrayBufferView this5 = this->_hx___uniformMatrix;
HXDLIN( 460)							Float val4 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 460)							 ::__hxcpp_memory_set_float(this5->buffer->b,this5->byteOffset,val4);
            						}
HXDLIN( 460)						{
HXLINE( 460)							 ::lime::utils::ArrayBufferView this6 = this->_hx___uniformMatrix;
HXDLIN( 460)							Float val5 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4)));
HXDLIN( 460)							 ::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + 4),val5);
            						}
HXDLIN( 460)						{
HXLINE( 460)							 ::lime::utils::ArrayBufferView this7 = this->_hx___uniformMatrix;
HXDLIN( 460)							Float val6 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4)));
HXDLIN( 460)							 ::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + 8),val6);
            						}
HXDLIN( 460)						{
HXLINE( 460)							 ::lime::utils::ArrayBufferView this8 = this->_hx___uniformMatrix;
HXDLIN( 460)							Float val7 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 3) * 4)));
HXDLIN( 460)							 ::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + 12),val7);
            						}
HXDLIN( 460)						{
HXLINE( 460)							 ::lime::utils::ArrayBufferView this9 = this->_hx___uniformMatrix;
HXDLIN( 460)							Float val8 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 4) * 4)));
HXDLIN( 460)							 ::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + 16),val8);
            						}
HXDLIN( 460)						{
HXLINE( 460)							 ::lime::utils::ArrayBufferView this10 = this->_hx___uniformMatrix;
HXDLIN( 460)							Float val9 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 5) * 4)));
HXDLIN( 460)							 ::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + 20),val9);
            						}
HXDLIN( 460)						{
HXLINE( 460)							 ::lime::utils::ArrayBufferView this11 = this->_hx___uniformMatrix;
HXDLIN( 460)							Float val10 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 6) * 4)));
HXDLIN( 460)							 ::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + 24),val10);
            						}
HXDLIN( 460)						{
HXLINE( 460)							 ::lime::utils::ArrayBufferView this12 = this->_hx___uniformMatrix;
HXDLIN( 460)							Float val11 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 7) * 4)));
HXDLIN( 460)							 ::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + 28),val11);
            						}
HXDLIN( 460)						{
HXLINE( 460)							 ::lime::utils::ArrayBufferView this13 = this->_hx___uniformMatrix;
HXDLIN( 460)							Float val12 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 8) * 4)));
HXDLIN( 460)							 ::__hxcpp_memory_set_float(this13->buffer->b,(this13->byteOffset + 32),val12);
            						}
            					}
HXLINE( 462)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix3fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 457)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==20) ){
HXLINE( 469)					{
HXLINE( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this14 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val13 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this14->buffer->b,this14->byteOffset,val13);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this15 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val14 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this15->buffer->b,(this15->byteOffset + 4),val14);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this16 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val15 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this16->buffer->b,(this16->byteOffset + 8),val15);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this17 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val16 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 3) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this17->buffer->b,(this17->byteOffset + 12),val16);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this18 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val17 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 4) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this18->buffer->b,(this18->byteOffset + 16),val17);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this19 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val18 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 5) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this19->buffer->b,(this19->byteOffset + 20),val18);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this20 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val19 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 6) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this20->buffer->b,(this20->byteOffset + 24),val19);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this21 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val20 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 7) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this21->buffer->b,(this21->byteOffset + 28),val20);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this22 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val21 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 8) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this22->buffer->b,(this22->byteOffset + 32),val21);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this23 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val22 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 9) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this23->buffer->b,(this23->byteOffset + 36),val22);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this24 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val23 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 10) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this24->buffer->b,(this24->byteOffset + 40),val23);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this25 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val24 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 11) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this25->buffer->b,(this25->byteOffset + 44),val24);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this26 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val25 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 12) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this26->buffer->b,(this26->byteOffset + 48),val25);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this27 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val26 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 13) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this27->buffer->b,(this27->byteOffset + 52),val26);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this28 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val27 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 14) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this28->buffer->b,(this28->byteOffset + 56),val27);
            						}
HXDLIN( 471)						{
HXLINE( 471)							 ::lime::utils::ArrayBufferView this29 = this->_hx___uniformMatrix;
HXDLIN( 471)							Float val28 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 15) * 4)));
HXDLIN( 471)							 ::__hxcpp_memory_set_float(this29->buffer->b,(this29->byteOffset + 60),val28);
            						}
            					}
HXLINE( 473)					::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::uniformMatrix4fv(gl,this->index,false,this->_hx___uniformMatrix);
HXLINE( 468)					goto _hx_goto_10;
            				}
            				/* default */{
            				}
            				_hx_goto_10:;
            			}
            		}
            		else {
HXLINE( 481)			bool _hx_tmp;
HXDLIN( 481)			if (!(this->_hx___internal)) {
HXLINE( 481)				if ((length != 0)) {
HXLINE( 481)					_hx_tmp = (length == this->__length);
            				}
            				else {
HXLINE( 481)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 481)				_hx_tmp = false;
            			}
HXDLIN( 481)			if (_hx_tmp) {
HXLINE( 483)				{
HXLINE( 483)					int _g = 0;
HXDLIN( 483)					int _g1 = this->_hx___arrayLength;
HXDLIN( 483)					while((_g < _g1)){
HXLINE( 483)						_g = (_g + 1);
HXDLIN( 483)						int i = (_g - 1);
HXLINE( 485)						gl->disableVertexAttribArray(( (int)((this->index + i)) ));
            					}
            				}
HXLINE( 488)				if ((length > 0)) {
HXLINE( 490)					 ::Dynamic _hx_switch_1 = this->type;
            					if (  (_hx_switch_1==1) ||  (_hx_switch_1==5) ||  (_hx_switch_1==9) ){
HXLINE( 495)						int indx = this->index;
HXDLIN( 495)						Float x =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 495)						gl->vertexAttrib2f(indx,x, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4))));
HXDLIN( 495)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_1==3) ||  (_hx_switch_1==7) ||  (_hx_switch_1==11) ){
HXLINE( 499)						int indx1 = this->index;
HXDLIN( 499)						Float x1 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 499)						Float y =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4)));
HXDLIN( 499)						Float z =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4)));
HXDLIN( 499)						gl->vertexAttrib4f(indx1,x1,y,z, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 3) * 4))));
HXDLIN( 499)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_1==0) ||  (_hx_switch_1==4) ||  (_hx_switch_1==8) ){
HXLINE( 493)						int indx2 = this->index;
HXDLIN( 493)						gl->vertexAttrib1f(indx2, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4))));
HXDLIN( 493)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_1==2) ||  (_hx_switch_1==6) ||  (_hx_switch_1==10) ){
HXLINE( 497)						int indx3 = this->index;
HXDLIN( 497)						Float x2 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 497)						Float y1 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4)));
HXDLIN( 497)						gl->vertexAttrib3f(indx3,x2,y1, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4))));
HXDLIN( 497)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_1==12) ){
HXLINE( 504)						{
HXLINE( 504)							int indx4 = ( (int)((this->index + 0)) );
HXDLIN( 504)							Float x3 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 504)							gl->vertexAttrib2f(indx4,x3, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4))));
            						}
HXDLIN( 504)						{
HXLINE( 504)							int indx5 = ( (int)((this->index + 1)) );
HXDLIN( 504)							Float x4 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4)));
HXDLIN( 504)							gl->vertexAttrib2f(indx5,x4, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 2) + 1) * 4))));
            						}
HXLINE( 502)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_1==16) ){
HXLINE( 510)						{
HXLINE( 510)							int indx6 = ( (int)((this->index + 0)) );
HXDLIN( 510)							Float x5 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 510)							Float y2 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4)));
HXDLIN( 510)							gl->vertexAttrib3f(indx6,x5,y2, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4))));
            						}
HXDLIN( 510)						{
HXLINE( 510)							int indx7 = ( (int)((this->index + 1)) );
HXDLIN( 510)							Float x6 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 3) * 4)));
HXDLIN( 510)							Float y3 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 3) + 1) * 4)));
HXDLIN( 510)							gl->vertexAttrib3f(indx7,x6,y3, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 3) + 2) * 4))));
            						}
HXDLIN( 510)						{
HXLINE( 510)							int indx8 = ( (int)((this->index + 2)) );
HXDLIN( 510)							Float x7 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 6) * 4)));
HXDLIN( 510)							Float y4 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 6) + 1) * 4)));
HXDLIN( 510)							gl->vertexAttrib3f(indx8,x7,y4, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 6) + 2) * 4))));
            						}
HXLINE( 508)						goto _hx_goto_12;
            					}
            					if (  (_hx_switch_1==20) ){
HXLINE( 516)						{
HXLINE( 516)							int indx9 = ( (int)((this->index + 0)) );
HXDLIN( 516)							Float x8 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (position * 4)));
HXDLIN( 516)							Float y5 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 1) * 4)));
HXDLIN( 516)							Float z1 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 2) * 4)));
HXDLIN( 516)							gl->vertexAttrib4f(indx9,x8,y5,z1, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 3) * 4))));
            						}
HXDLIN( 516)						{
HXLINE( 516)							int indx10 = ( (int)((this->index + 1)) );
HXDLIN( 516)							Float x9 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 4) * 4)));
HXDLIN( 516)							Float y6 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 4) + 1) * 4)));
HXDLIN( 516)							Float z2 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 4) + 2) * 4)));
HXDLIN( 516)							gl->vertexAttrib4f(indx10,x9,y6,z2, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 4) + 3) * 4))));
            						}
HXDLIN( 516)						{
HXLINE( 516)							int indx11 = ( (int)((this->index + 2)) );
HXDLIN( 516)							Float x10 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 8) * 4)));
HXDLIN( 516)							Float y7 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 8) + 1) * 4)));
HXDLIN( 516)							Float z3 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 8) + 2) * 4)));
HXDLIN( 516)							gl->vertexAttrib4f(indx11,x10,y7,z3, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 8) + 3) * 4))));
            						}
HXDLIN( 516)						{
HXLINE( 516)							int indx12 = ( (int)((this->index + 3)) );
HXDLIN( 516)							Float x11 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + ((position + 12) * 4)));
HXDLIN( 516)							Float y8 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 12) + 1) * 4)));
HXDLIN( 516)							Float z4 =  ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 12) + 2) * 4)));
HXDLIN( 516)							gl->vertexAttrib4f(indx12,x11,y8,z4, ::__hxcpp_memory_get_float(buffer->buffer->b,(buffer->byteOffset + (((position + 12) + 3) * 4))));
            						}
HXLINE( 514)						goto _hx_goto_12;
            					}
            					/* default */{
            					}
            					_hx_goto_12:;
            				}
            				else {
HXLINE( 526)					 ::Dynamic _hx_switch_2 = this->type;
            					if (  (_hx_switch_2==1) ||  (_hx_switch_2==5) ||  (_hx_switch_2==9) ){
HXLINE( 531)						gl->vertexAttrib2f(this->index,( (Float)(0) ),( (Float)(0) ));
HXDLIN( 531)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_2==3) ||  (_hx_switch_2==7) ||  (_hx_switch_2==11) ){
HXLINE( 535)						gl->vertexAttrib4f(this->index,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 535)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_2==0) ||  (_hx_switch_2==4) ||  (_hx_switch_2==8) ){
HXLINE( 529)						gl->vertexAttrib1f(this->index,( (Float)(0) ));
HXDLIN( 529)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_2==2) ||  (_hx_switch_2==6) ||  (_hx_switch_2==10) ){
HXLINE( 533)						gl->vertexAttrib3f(this->index,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 533)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_2==12) ){
HXLINE( 540)						gl->vertexAttrib2f(( (int)((this->index + 0)) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 540)						gl->vertexAttrib2f(( (int)((this->index + 1)) ),( (Float)(0) ),( (Float)(0) ));
HXLINE( 538)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_2==16) ){
HXLINE( 546)						gl->vertexAttrib3f(( (int)((this->index + 0)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 546)						gl->vertexAttrib3f(( (int)((this->index + 1)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 546)						gl->vertexAttrib3f(( (int)((this->index + 2)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXLINE( 544)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_2==20) ){
HXLINE( 552)						gl->vertexAttrib4f(( (int)((this->index + 0)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 552)						gl->vertexAttrib4f(( (int)((this->index + 1)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 552)						gl->vertexAttrib4f(( (int)((this->index + 2)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXDLIN( 552)						gl->vertexAttrib4f(( (int)((this->index + 3)) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ));
HXLINE( 550)						goto _hx_goto_13;
            					}
            					/* default */{
            					}
            					_hx_goto_13:;
            				}
            			}
            			else {
HXLINE( 561)				int type = gl->FLOAT;
HXLINE( 562)				if (this->_hx___isBool) {
HXLINE( 562)					type = gl->INT;
            				}
            				else {
HXLINE( 563)					if (this->_hx___isInt) {
HXLINE( 563)						type = gl->INT;
            					}
            				}
HXLINE( 565)				{
HXLINE( 565)					int _g2 = 0;
HXDLIN( 565)					int _g11 = this->_hx___arrayLength;
HXDLIN( 565)					while((_g2 < _g11)){
HXLINE( 565)						_g2 = (_g2 + 1);
HXDLIN( 565)						int i1 = (_g2 - 1);
HXLINE( 567)						gl->enableVertexAttribArray(( (int)((this->index + i1)) ));
            					}
            				}
HXLINE( 570)				if ((length > 0)) {
HXLINE( 572)					int _g21 = 0;
HXDLIN( 572)					int _g3 = this->_hx___arrayLength;
HXDLIN( 572)					while((_g21 < _g3)){
HXLINE( 572)						_g21 = (_g21 + 1);
HXDLIN( 572)						int i2 = (_g21 - 1);
HXLINE( 574)						{
HXLINE( 574)							int indx13 = ( (int)((this->index + i2)) );
HXDLIN( 574)							int size = this->__length;
HXDLIN( 574)							int stride = (this->__length * 4);
HXDLIN( 574)							gl->vertexAttribPointer(indx13,size,type,false,stride,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((((position + (bufferOffset * this->__length)) + (i2 * this->_hx___arrayLength)) * 4)));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(ShaderParameter_Float_obj,_hx___updateGLFromBuffer,(void))

::String ShaderParameter_Float_obj::set_name(::String value){
            	HX_STACKFRAME(&_hx_pos_8c0b4e9630d09afb_585_set_name)
HXLINE( 586)		this->_hx___internal = ::StringTools_obj::startsWith(value,HX_("openfl_",cf,ba,42,40));
HXLINE( 587)		return (this->name = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderParameter_Float_obj,set_name,return )


hx::ObjectPtr< ShaderParameter_Float_obj > ShaderParameter_Float_obj::__new() {
	hx::ObjectPtr< ShaderParameter_Float_obj > __this = new ShaderParameter_Float_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ShaderParameter_Float_obj > ShaderParameter_Float_obj::__alloc(hx::Ctx *_hx_ctx) {
	ShaderParameter_Float_obj *__this = (ShaderParameter_Float_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ShaderParameter_Float_obj), true, "openfl.display.ShaderParameter_Float"));
	*(void **)__this = ShaderParameter_Float_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ShaderParameter_Float_obj::ShaderParameter_Float_obj()
{
}

void ShaderParameter_Float_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ShaderParameter_Float);
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(_hx___arrayLength,"__arrayLength");
	HX_MARK_MEMBER_NAME(_hx___internal,"__internal");
	HX_MARK_MEMBER_NAME(_hx___isBool,"__isBool");
	HX_MARK_MEMBER_NAME(_hx___isFloat,"__isFloat");
	HX_MARK_MEMBER_NAME(_hx___isInt,"__isInt");
	HX_MARK_MEMBER_NAME(_hx___isUniform,"__isUniform");
	HX_MARK_MEMBER_NAME(__length,"__length");
	HX_MARK_MEMBER_NAME(_hx___uniformMatrix,"__uniformMatrix");
	HX_MARK_MEMBER_NAME(_hx___useArray,"__useArray");
	HX_MARK_END_CLASS();
}

void ShaderParameter_Float_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(_hx___arrayLength,"__arrayLength");
	HX_VISIT_MEMBER_NAME(_hx___internal,"__internal");
	HX_VISIT_MEMBER_NAME(_hx___isBool,"__isBool");
	HX_VISIT_MEMBER_NAME(_hx___isFloat,"__isFloat");
	HX_VISIT_MEMBER_NAME(_hx___isInt,"__isInt");
	HX_VISIT_MEMBER_NAME(_hx___isUniform,"__isUniform");
	HX_VISIT_MEMBER_NAME(__length,"__length");
	HX_VISIT_MEMBER_NAME(_hx___uniformMatrix,"__uniformMatrix");
	HX_VISIT_MEMBER_NAME(_hx___useArray,"__useArray");
}

hx::Val ShaderParameter_Float_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__isInt") ) { return hx::Val( _hx___isInt ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__isBool") ) { return hx::Val( _hx___isBool ); }
		if (HX_FIELD_EQ(inName,"__length") ) { return hx::Val( __length ); }
		if (HX_FIELD_EQ(inName,"set_name") ) { return hx::Val( set_name_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isFloat") ) { return hx::Val( _hx___isFloat ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__internal") ) { return hx::Val( _hx___internal ); }
		if (HX_FIELD_EQ(inName,"__useArray") ) { return hx::Val( _hx___useArray ); }
		if (HX_FIELD_EQ(inName,"__updateGL") ) { return hx::Val( _hx___updateGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__isUniform") ) { return hx::Val( _hx___isUniform ); }
		if (HX_FIELD_EQ(inName,"__disableGL") ) { return hx::Val( _hx___disableGL_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__arrayLength") ) { return hx::Val( _hx___arrayLength ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__uniformMatrix") ) { return hx::Val( _hx___uniformMatrix ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__updateGLFromBuffer") ) { return hx::Val( _hx___updateGLFromBuffer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ShaderParameter_Float_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_name(inValue.Cast< ::String >()) );name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__isInt") ) { _hx___isInt=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__isBool") ) { _hx___isBool=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__length") ) { __length=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isFloat") ) { _hx___isFloat=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__internal") ) { _hx___internal=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useArray") ) { _hx___useArray=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__isUniform") ) { _hx___isUniform=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__arrayLength") ) { _hx___arrayLength=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__uniformMatrix") ) { _hx___uniformMatrix=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ShaderParameter_Float_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("index",12,9b,14,be));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("__arrayLength",3f,70,c7,d4));
	outFields->push(HX_("__internal",5d,da,ae,cb));
	outFields->push(HX_("__isBool",54,b4,b1,06));
	outFields->push(HX_("__isFloat",32,ba,6a,20));
	outFields->push(HX_("__isInt",05,90,ac,2b));
	outFields->push(HX_("__isUniform",4a,07,8f,e7));
	outFields->push(HX_("__length",06,00,37,47));
	outFields->push(HX_("__uniformMatrix",75,03,f6,b5));
	outFields->push(HX_("__useArray",f2,42,33,90));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ShaderParameter_Float_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ShaderParameter_Float_obj,index),HX_("index",12,9b,14,be)},
	{hx::fsString,(int)offsetof(ShaderParameter_Float_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ShaderParameter_Float_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ShaderParameter_Float_obj,value),HX_("value",71,7f,b8,31)},
	{hx::fsInt,(int)offsetof(ShaderParameter_Float_obj,_hx___arrayLength),HX_("__arrayLength",3f,70,c7,d4)},
	{hx::fsBool,(int)offsetof(ShaderParameter_Float_obj,_hx___internal),HX_("__internal",5d,da,ae,cb)},
	{hx::fsBool,(int)offsetof(ShaderParameter_Float_obj,_hx___isBool),HX_("__isBool",54,b4,b1,06)},
	{hx::fsBool,(int)offsetof(ShaderParameter_Float_obj,_hx___isFloat),HX_("__isFloat",32,ba,6a,20)},
	{hx::fsBool,(int)offsetof(ShaderParameter_Float_obj,_hx___isInt),HX_("__isInt",05,90,ac,2b)},
	{hx::fsBool,(int)offsetof(ShaderParameter_Float_obj,_hx___isUniform),HX_("__isUniform",4a,07,8f,e7)},
	{hx::fsInt,(int)offsetof(ShaderParameter_Float_obj,__length),HX_("__length",06,00,37,47)},
	{hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(ShaderParameter_Float_obj,_hx___uniformMatrix),HX_("__uniformMatrix",75,03,f6,b5)},
	{hx::fsBool,(int)offsetof(ShaderParameter_Float_obj,_hx___useArray),HX_("__useArray",f2,42,33,90)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ShaderParameter_Float_obj_sStaticStorageInfo = 0;
#endif

static ::String ShaderParameter_Float_obj_sMemberFields[] = {
	HX_("index",12,9b,14,be),
	HX_("name",4b,72,ff,48),
	HX_("type",ba,f2,08,4d),
	HX_("value",71,7f,b8,31),
	HX_("__arrayLength",3f,70,c7,d4),
	HX_("__internal",5d,da,ae,cb),
	HX_("__isBool",54,b4,b1,06),
	HX_("__isFloat",32,ba,6a,20),
	HX_("__isInt",05,90,ac,2b),
	HX_("__isUniform",4a,07,8f,e7),
	HX_("__length",06,00,37,47),
	HX_("__uniformMatrix",75,03,f6,b5),
	HX_("__useArray",f2,42,33,90),
	HX_("__disableGL",ed,3a,e1,35),
	HX_("__updateGL",8e,8b,32,1b),
	HX_("__updateGLFromBuffer",38,8f,d7,17),
	HX_("set_name",48,87,17,77),
	::String(null()) };

hx::Class ShaderParameter_Float_obj::__mClass;

void ShaderParameter_Float_obj::__register()
{
	ShaderParameter_Float_obj _hx_dummy;
	ShaderParameter_Float_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.display.ShaderParameter_Float",d7,48,8c,b1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ShaderParameter_Float_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ShaderParameter_Float_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ShaderParameter_Float_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ShaderParameter_Float_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ShaderParameter_Float_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_8c0b4e9630d09afb_96_boot)
HXDLIN(  96)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("index",12,9b,14,be), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(1,HX_("name",4b,72,ff,48), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))))));
            	}
}

} // end namespace openfl
} // end namespace display
