// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_765a23aeaf3cad17_43_new,"openfl.display.CairoRenderer","new",0x224c60b3,"openfl.display.CairoRenderer.new","openfl/display/CairoRenderer.hx",43,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_62_applyMatrix,"openfl.display.CairoRenderer","applyMatrix",0x011091a2,"openfl.display.CairoRenderer.applyMatrix","openfl/display/CairoRenderer.hx",62,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_92___clear,"openfl.display.CairoRenderer","__clear",0xae7c8040,"openfl.display.CairoRenderer.__clear","openfl/display/CairoRenderer.hx",92,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_111___popMask,"openfl.display.CairoRenderer","__popMask",0x3e99c890,"openfl.display.CairoRenderer.__popMask","openfl/display/CairoRenderer.hx",111,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_115___popMaskObject,"openfl.display.CairoRenderer","__popMaskObject",0x2a06876f,"openfl.display.CairoRenderer.__popMaskObject","openfl/display/CairoRenderer.hx",115,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_129___popMaskRect,"openfl.display.CairoRenderer","__popMaskRect",0x4351c9d4,"openfl.display.CairoRenderer.__popMaskRect","openfl/display/CairoRenderer.hx",129,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_133___pushMask,"openfl.display.CairoRenderer","__pushMask",0x33145713,"openfl.display.CairoRenderer.__pushMask","openfl/display/CairoRenderer.hx",133,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_144___pushMaskObject,"openfl.display.CairoRenderer","__pushMaskObject",0xe55b5a32,"openfl.display.CairoRenderer.__pushMaskObject","openfl/display/CairoRenderer.hx",144,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_157___pushMaskRect,"openfl.display.CairoRenderer","__pushMaskRect",0x50a955d7,"openfl.display.CairoRenderer.__pushMaskRect","openfl/display/CairoRenderer.hx",157,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_168___render,"openfl.display.CairoRenderer","__render",0xfbf53943,"openfl.display.CairoRenderer.__render","openfl/display/CairoRenderer.hx",168,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_175___setBlendMode,"openfl.display.CairoRenderer","__setBlendMode",0x010a21ff,"openfl.display.CairoRenderer.__setBlendMode","openfl/display/CairoRenderer.hx",175,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_187___setBlendModeCairo,"openfl.display.CairoRenderer","__setBlendModeCairo",0x8ae5e209,"openfl.display.CairoRenderer.__setBlendModeCairo","openfl/display/CairoRenderer.hx",187,0x013a831f)
HX_LOCAL_STACK_FRAME(_hx_pos_765a23aeaf3cad17_30_boot,"openfl.display.CairoRenderer","boot",0xd8a13c7f,"openfl.display.CairoRenderer.boot","openfl/display/CairoRenderer.hx",30,0x013a831f)
namespace openfl{
namespace display{

void CairoRenderer_obj::__construct( ::lime::graphics::cairo::Cairo cairo){
            	HX_GC_STACKFRAME(&_hx_pos_765a23aeaf3cad17_43_new)
HXLINE(  44)		super::__construct();
HXLINE(  47)		this->cairo = cairo;
HXLINE(  49)		this->_hx___matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  50)		this->_hx___matrix3 =  ::lime::math::Matrix3_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  52)		this->_hx___type = HX_("cairo",88,30,19,41);
            	}

Dynamic CairoRenderer_obj::__CreateEmpty() { return new CairoRenderer_obj; }

void *CairoRenderer_obj::_hx_vtable = 0;

Dynamic CairoRenderer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoRenderer_obj > _hx_result = new CairoRenderer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CairoRenderer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7cdf41d6) {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x7cdf41d6;
		}
	} else {
		return inClassId==(int)0x7eb06559;
	}
}

void CairoRenderer_obj::applyMatrix( ::openfl::geom::Matrix transform, ::lime::graphics::cairo::Cairo cairo){
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_62_applyMatrix)
HXLINE(  63)		if (hx::IsNull( cairo )) {
HXLINE(  63)			cairo = this->cairo;
            		}
HXLINE(  65)		this->_hx___matrix->copyFrom(transform);
HXLINE(  67)		bool _hx_tmp;
HXDLIN(  67)		if (hx::IsEq( this->cairo,cairo )) {
HXLINE(  67)			_hx_tmp = hx::IsNotNull( this->_hx___worldTransform );
            		}
            		else {
HXLINE(  67)			_hx_tmp = false;
            		}
HXDLIN(  67)		if (_hx_tmp) {
HXLINE(  69)			this->_hx___matrix->concat(this->_hx___worldTransform);
            		}
HXLINE(  72)		this->_hx___matrix3->a = this->_hx___matrix->a;
HXLINE(  73)		this->_hx___matrix3->b = this->_hx___matrix->b;
HXLINE(  74)		this->_hx___matrix3->c = this->_hx___matrix->c;
HXLINE(  75)		this->_hx___matrix3->d = this->_hx___matrix->d;
HXLINE(  77)		if (this->_hx___roundPixels) {
HXLINE(  79)			this->_hx___matrix3->tx = ( (Float)(::Math_obj::round(this->_hx___matrix->tx)) );
HXLINE(  80)			this->_hx___matrix3->ty = ( (Float)(::Math_obj::round(this->_hx___matrix->ty)) );
            		}
            		else {
HXLINE(  84)			this->_hx___matrix3->tx = this->_hx___matrix->tx;
HXLINE(  85)			this->_hx___matrix3->ty = this->_hx___matrix->ty;
            		}
HXLINE(  88)		cairo->set_matrix(this->_hx___matrix3);
            	}


HX_DEFINE_DYNAMIC_FUNC2(CairoRenderer_obj,applyMatrix,(void))

void CairoRenderer_obj::_hx___clear(){
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_92___clear)
HXLINE(  93)		if (hx::IsNull( this->cairo )) {
HXLINE(  93)			return;
            		}
HXLINE(  95)		this->cairo->identityMatrix();
HXLINE(  97)		bool _hx_tmp;
HXDLIN(  97)		if (hx::IsNotNull( this->_hx___stage )) {
HXLINE(  97)			_hx_tmp = this->_hx___stage->_hx___clearBeforeRender;
            		}
            		else {
HXLINE(  97)			_hx_tmp = false;
            		}
HXDLIN(  97)		if (_hx_tmp) {
HXLINE(  99)			 ::Dynamic cacheBlendMode = this->_hx___blendMode;
HXLINE( 100)			this->_hx___setBlendMode(10);
HXLINE( 102)			this->cairo->setSourceRGB(this->_hx___stage->_hx___colorSplit->__get(0),this->_hx___stage->_hx___colorSplit->__get(1),this->_hx___stage->_hx___colorSplit->__get(2));
HXLINE( 103)			this->cairo->paint();
HXLINE( 105)			this->_hx___setBlendMode(cacheBlendMode);
            		}
            	}


void CairoRenderer_obj::_hx___popMask(){
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_111___popMask)
HXDLIN( 111)		this->cairo->restore();
            	}


void CairoRenderer_obj::_hx___popMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
            		bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_115___popMaskObject)
HXLINE( 116)		bool _hx_tmp;
HXDLIN( 116)		if (!(object->_hx___isCacheBitmapRender)) {
HXLINE( 116)			_hx_tmp = hx::IsNotNull( object->_hx___mask );
            		}
            		else {
HXLINE( 116)			_hx_tmp = false;
            		}
HXDLIN( 116)		if (_hx_tmp) {
HXLINE( 118)			this->_hx___popMask();
            		}
HXLINE( 121)		bool _hx_tmp1;
HXDLIN( 121)		if (handleScrollRect) {
HXLINE( 121)			_hx_tmp1 = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 121)			_hx_tmp1 = false;
            		}
HXDLIN( 121)		if (_hx_tmp1) {
HXLINE( 123)			this->_hx___popMaskRect();
            		}
            	}


void CairoRenderer_obj::_hx___popMaskRect(){
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_129___popMaskRect)
HXDLIN( 129)		this->cairo->restore();
            	}


void CairoRenderer_obj::_hx___pushMask( ::openfl::display::DisplayObject mask){
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_133___pushMask)
HXLINE( 134)		this->cairo->save();
HXLINE( 136)		this->applyMatrix(mask->_hx___renderTransform,this->cairo);
HXLINE( 138)		this->cairo->newPath();
HXLINE( 139)		mask->_hx___renderCairoMask(hx::ObjectPtr<OBJ_>(this));
HXLINE( 140)		this->cairo->clip();
            	}


void CairoRenderer_obj::_hx___pushMaskObject( ::openfl::display::DisplayObject object,hx::Null< bool >  __o_handleScrollRect){
            		bool handleScrollRect = __o_handleScrollRect.Default(true);
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_144___pushMaskObject)
HXLINE( 145)		bool _hx_tmp;
HXDLIN( 145)		if (handleScrollRect) {
HXLINE( 145)			_hx_tmp = hx::IsNotNull( object->_hx___scrollRect );
            		}
            		else {
HXLINE( 145)			_hx_tmp = false;
            		}
HXDLIN( 145)		if (_hx_tmp) {
HXLINE( 147)			this->_hx___pushMaskRect(object->_hx___scrollRect,object->_hx___renderTransform);
            		}
HXLINE( 150)		bool _hx_tmp1;
HXDLIN( 150)		if (!(object->_hx___isCacheBitmapRender)) {
HXLINE( 150)			_hx_tmp1 = hx::IsNotNull( object->_hx___mask );
            		}
            		else {
HXLINE( 150)			_hx_tmp1 = false;
            		}
HXDLIN( 150)		if (_hx_tmp1) {
HXLINE( 152)			this->_hx___pushMask(object->_hx___mask);
            		}
            	}


void CairoRenderer_obj::_hx___pushMaskRect( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix transform){
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_157___pushMaskRect)
HXLINE( 158)		this->cairo->save();
HXLINE( 160)		this->applyMatrix(transform,this->cairo);
HXLINE( 162)		this->cairo->newPath();
HXLINE( 163)		this->cairo->rectangle(rect->x,rect->y,rect->width,rect->height);
HXLINE( 164)		this->cairo->clip();
            	}


void CairoRenderer_obj::_hx___render(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_168___render)
HXLINE( 169)		if (hx::IsNull( this->cairo )) {
HXLINE( 169)			return;
            		}
HXLINE( 171)		::openfl::display::IBitmapDrawable_obj::_hx___renderCairo(object,hx::ObjectPtr<OBJ_>(this));
            	}


void CairoRenderer_obj::_hx___setBlendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_175___setBlendMode)
HXLINE( 176)		if (hx::IsNotNull( this->_hx___overrideBlendMode )) {
HXLINE( 176)			value = this->_hx___overrideBlendMode;
            		}
HXLINE( 177)		if (hx::IsEq( this->_hx___blendMode,value )) {
HXLINE( 177)			return;
            		}
HXLINE( 179)		this->_hx___blendMode = value;
HXLINE( 180)		this->_hx___setBlendModeCairo(this->cairo,value);
            	}


void CairoRenderer_obj::_hx___setBlendModeCairo( ::lime::graphics::cairo::Cairo cairo, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_187___setBlendModeCairo)
HXDLIN( 187)		 ::Dynamic _hx_switch_0 = value;
            		if (  (_hx_switch_0==0) ){
HXLINE( 190)			cairo->setOperator(12);
HXDLIN( 190)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE( 197)			cairo->setOperator(17);
HXDLIN( 197)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==3) ){
HXLINE( 200)			cairo->setOperator(23);
HXDLIN( 200)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==5) ){
HXLINE( 207)			cairo->setOperator(21);
HXDLIN( 207)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==7) ){
HXLINE( 214)			cairo->setOperator(2);
HXDLIN( 214)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==8) ){
HXLINE( 217)			cairo->setOperator(18);
HXDLIN( 217)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==9) ){
HXLINE( 220)			cairo->setOperator(14);
HXDLIN( 220)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==11) ){
HXLINE( 223)			cairo->setOperator(16);
HXDLIN( 223)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==12) ){
HXLINE( 226)			cairo->setOperator(15);
HXDLIN( 226)			goto _hx_goto_11;
            		}
            		/* default */{
HXLINE( 237)			cairo->setOperator(2);
            		}
            		_hx_goto_11:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(CairoRenderer_obj,_hx___setBlendModeCairo,(void))


hx::ObjectPtr< CairoRenderer_obj > CairoRenderer_obj::__new( ::lime::graphics::cairo::Cairo cairo) {
	hx::ObjectPtr< CairoRenderer_obj > __this = new CairoRenderer_obj();
	__this->__construct(cairo);
	return __this;
}

hx::ObjectPtr< CairoRenderer_obj > CairoRenderer_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::graphics::cairo::Cairo cairo) {
	CairoRenderer_obj *__this = (CairoRenderer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CairoRenderer_obj), true, "openfl.display.CairoRenderer"));
	*(void **)__this = CairoRenderer_obj::_hx_vtable;
	__this->__construct(cairo);
	return __this;
}

CairoRenderer_obj::CairoRenderer_obj()
{
}

void CairoRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CairoRenderer);
	HX_MARK_MEMBER_NAME(cairo,"cairo");
	HX_MARK_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_MARK_MEMBER_NAME(_hx___matrix3,"__matrix3");
	 ::openfl::display::DisplayObjectRenderer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CairoRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cairo,"cairo");
	HX_VISIT_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_VISIT_MEMBER_NAME(_hx___matrix3,"__matrix3");
	 ::openfl::display::DisplayObjectRenderer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CairoRenderer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cairo") ) { return hx::Val( cairo ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__clear") ) { return hx::Val( _hx___clear_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__matrix") ) { return hx::Val( _hx___matrix ); }
		if (HX_FIELD_EQ(inName,"__render") ) { return hx::Val( _hx___render_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__matrix3") ) { return hx::Val( _hx___matrix3 ); }
		if (HX_FIELD_EQ(inName,"__popMask") ) { return hx::Val( _hx___popMask_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__pushMask") ) { return hx::Val( _hx___pushMask_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyMatrix") ) { return hx::Val( applyMatrix_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__popMaskRect") ) { return hx::Val( _hx___popMaskRect_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__pushMaskRect") ) { return hx::Val( _hx___pushMaskRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setBlendMode") ) { return hx::Val( _hx___setBlendMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__popMaskObject") ) { return hx::Val( _hx___popMaskObject_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__pushMaskObject") ) { return hx::Val( _hx___pushMaskObject_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__setBlendModeCairo") ) { return hx::Val( _hx___setBlendModeCairo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CairoRenderer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cairo") ) { cairo=inValue.Cast<  ::lime::graphics::cairo::Cairo >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__matrix") ) { _hx___matrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__matrix3") ) { _hx___matrix3=inValue.Cast<  ::lime::math::Matrix3 >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CairoRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cairo",88,30,19,41));
	outFields->push(HX_("__matrix",61,a1,f7,63));
	outFields->push(HX_("__matrix3",b2,93,b5,14));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo CairoRenderer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::lime::graphics::cairo::Cairo */ ,(int)offsetof(CairoRenderer_obj,cairo),HX_("cairo",88,30,19,41)},
	{hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(CairoRenderer_obj,_hx___matrix),HX_("__matrix",61,a1,f7,63)},
	{hx::fsObject /*  ::lime::math::Matrix3 */ ,(int)offsetof(CairoRenderer_obj,_hx___matrix3),HX_("__matrix3",b2,93,b5,14)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CairoRenderer_obj_sStaticStorageInfo = 0;
#endif

static ::String CairoRenderer_obj_sMemberFields[] = {
	HX_("cairo",88,30,19,41),
	HX_("__matrix",61,a1,f7,63),
	HX_("__matrix3",b2,93,b5,14),
	HX_("applyMatrix",4f,f6,c2,f7),
	HX_("__clear",6d,ca,b9,b2),
	HX_("__popMask",fd,b7,5f,c4),
	HX_("__popMaskObject",9c,46,0d,10),
	HX_("__popMaskRect",c1,73,e8,16),
	HX_("__pushMask",06,e7,7f,ba),
	HX_("__pushMaskObject",65,e2,3b,45),
	HX_("__pushMaskRect",4a,5b,e7,a0),
	HX_("__render",76,d6,58,ad),
	HX_("__setBlendMode",72,27,48,51),
	HX_("__setBlendModeCairo",b6,3b,c0,5d),
	::String(null()) };

hx::Class CairoRenderer_obj::__mClass;

void CairoRenderer_obj::__register()
{
	CairoRenderer_obj _hx_dummy;
	CairoRenderer_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.display.CairoRenderer",41,8b,63,76);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CairoRenderer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CairoRenderer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoRenderer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CairoRenderer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_765a23aeaf3cad17_30_boot)
HXDLIN(  30)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("applyMatrix",4f,f6,c2,f7), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(1,HX_("_",5f,00,00,00), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(2,HX_("__matrix3",b2,93,b5,14), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(3,HX_("cairo",88,30,19,41), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(4,HX_("__setBlendModeCairo",b6,3b,c0,5d), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c))))))));
            	}
}

} // end namespace openfl
} // end namespace display
