// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageFileFormat
#include <lime/graphics/ImageFileFormat.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoSurface_CairoSurface_Impl_
#include <lime/graphics/cairo/_CairoSurface/CairoSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLite
#include <openfl/_internal/formats/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DMaskShader
#include <openfl/_internal/renderer/context3D/Context3DMaskShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DState
#include <openfl/_internal/renderer/context3D/Context3DState.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_BitmapSymbol
#include <openfl/_internal/symbols/BitmapSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_AbstractNoise
#include <openfl/_internal/utils/AbstractNoise.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_PerlinNoise
#include <openfl/_internal/utils/PerlinNoise.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectShader
#include <openfl/display/DisplayObjectShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_JPEGEncoderOptions
#include <openfl/display/JPEGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_PNGEncoderOptions
#include <openfl/display/PNGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_openfl_utils__Endian_Endian_Impl_
#include <openfl/utils/_Endian/Endian_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e7567b6ca69cedca_242_new,"openfl.display.BitmapData","new",0x7e3e4115,"openfl.display.BitmapData.new","openfl/display/BitmapData.hx",242,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_346_applyFilter,"openfl.display.BitmapData","applyFilter",0xfbb98d7b,"openfl.display.BitmapData.applyFilter","openfl/display/BitmapData.hx",346,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_398_clone,"openfl.display.BitmapData","clone",0xea52db52,"openfl.display.BitmapData.clone","openfl/display/BitmapData.hx",398,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_444_colorTransform,"openfl.display.BitmapData","colorTransform",0xbfe3e8f4,"openfl.display.BitmapData.colorTransform","openfl/display/BitmapData.hx",444,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_464_compare,"openfl.display.BitmapData","compare",0x56d287da,"openfl.display.BitmapData.compare","openfl/display/BitmapData.hx",464,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_623_copyChannel,"openfl.display.BitmapData","copyChannel",0x5d702b43,"openfl.display.BitmapData.copyChannel","openfl/display/BitmapData.hx",623,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_690_copyPixels,"openfl.display.BitmapData","copyPixels",0x385c94ad,"openfl.display.BitmapData.copyPixels","openfl/display/BitmapData.hx",690,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_727_dispose,"openfl.display.BitmapData","dispose",0x8eb5efd4,"openfl.display.BitmapData.dispose","openfl/display/BitmapData.hx",727,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_780_disposeImage,"openfl.display.BitmapData","disposeImage",0x60a6bee7,"openfl.display.BitmapData.disposeImage","openfl/display/BitmapData.hx",780,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_859_draw,"openfl.display.BitmapData","draw",0xf1a859af,"openfl.display.BitmapData.draw","openfl/display/BitmapData.hx",859,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1083_drawWithQuality,"openfl.display.BitmapData","drawWithQuality",0xabf0f1ea,"openfl.display.BitmapData.drawWithQuality","openfl/display/BitmapData.hx",1083,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1109_encode,"openfl.display.BitmapData","encode",0x09c32081,"openfl.display.BitmapData.encode","openfl/display/BitmapData.hx",1109,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1156_fillRect,"openfl.display.BitmapData","fillRect",0x95912472,"openfl.display.BitmapData.fillRect","openfl/display/BitmapData.hx",1156,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1171_floodFill,"openfl.display.BitmapData","floodFill",0xed95e9d6,"openfl.display.BitmapData.floodFill","openfl/display/BitmapData.hx",1171,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1354_generateFilterRect,"openfl.display.BitmapData","generateFilterRect",0x1ef8cf7c,"openfl.display.BitmapData.generateFilterRect","openfl/display/BitmapData.hx",1354,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1366_getIndexBuffer,"openfl.display.BitmapData","getIndexBuffer",0x8fe8ca27,"openfl.display.BitmapData.getIndexBuffer","openfl/display/BitmapData.hx",1366,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1580_getVertexBuffer,"openfl.display.BitmapData","getVertexBuffer",0xd07f316f,"openfl.display.BitmapData.getVertexBuffer","openfl/display/BitmapData.hx",1580,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2024_getColorBoundsRect,"openfl.display.BitmapData","getColorBoundsRect",0x21495071,"openfl.display.BitmapData.getColorBoundsRect","openfl/display/BitmapData.hx",2024,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2065_getPixel,"openfl.display.BitmapData","getPixel",0x4b52b53b,"openfl.display.BitmapData.getPixel","openfl/display/BitmapData.hx",2065,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2097_getPixel32,"openfl.display.BitmapData","getPixel32",0xcd56e69a,"openfl.display.BitmapData.getPixel32","openfl/display/BitmapData.hx",2097,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2116_getPixels,"openfl.display.BitmapData","getPixels",0x9d0bded8,"openfl.display.BitmapData.getPixels","openfl/display/BitmapData.hx",2116,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2139_getSurface,"openfl.display.BitmapData","getSurface",0xa2992c22,"openfl.display.BitmapData.getSurface","openfl/display/BitmapData.hx",2139,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2163_getTexture,"openfl.display.BitmapData","getTexture",0xe4308ed0,"openfl.display.BitmapData.getTexture","openfl/display/BitmapData.hx",2163,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2241_getVector,"openfl.display.BitmapData","getVector",0xa7bfa06e,"openfl.display.BitmapData.getVector","openfl/display/BitmapData.hx",2241,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2264_histogram,"openfl.display.BitmapData","histogram",0xf93f4519,"openfl.display.BitmapData.histogram","openfl/display/BitmapData.hx",2264,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2309_hitTest,"openfl.display.BitmapData","hitTest",0xb5e8cf7a,"openfl.display.BitmapData.hitTest","openfl/display/BitmapData.hx",2309,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2516_lock,"openfl.display.BitmapData","lock",0xf6efc996,"openfl.display.BitmapData.lock","openfl/display/BitmapData.hx",2516,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2557_merge,"openfl.display.BitmapData","merge",0xa7b66aad,"openfl.display.BitmapData.merge","openfl/display/BitmapData.hx",2557,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2601_noise,"openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",2601,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2593_noise,"openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",2593,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2691_paletteMap,"openfl.display.BitmapData","paletteMap",0xfc19eecc,"openfl.display.BitmapData.paletteMap","openfl/display/BitmapData.hx",2691,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2789_perlinNoise,"openfl.display.BitmapData","perlinNoise",0xc682321b,"openfl.display.BitmapData.perlinNoise","openfl/display/BitmapData.hx",2789,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2805_scroll,"openfl.display.BitmapData","scroll",0x57440678,"openfl.display.BitmapData.scroll","openfl/display/BitmapData.hx",2805,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2828_setPixel,"openfl.display.BitmapData","setPixel",0xf9b00eaf,"openfl.display.BitmapData.setPixel","openfl/display/BitmapData.hx",2828,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2867_setPixel32,"openfl.display.BitmapData","setPixel32",0xd0d4850e,"openfl.display.BitmapData.setPixel32","openfl/display/BitmapData.hx",2867,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2894_setPixels,"openfl.display.BitmapData","setPixels",0x805ccae4,"openfl.display.BitmapData.setPixels","openfl/display/BitmapData.hx",2894,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2915_setVector,"openfl.display.BitmapData","setVector",0x8b108c7a,"openfl.display.BitmapData.setVector","openfl/display/BitmapData.hx",2915,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2978_threshold,"openfl.display.BitmapData","threshold",0xc8af2a20,"openfl.display.BitmapData.threshold","openfl/display/BitmapData.hx",2978,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3010_unlock,"openfl.display.BitmapData","unlock",0x756bd12f,"openfl.display.BitmapData.unlock","openfl/display/BitmapData.hx",3010,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3013___applyAlpha,"openfl.display.BitmapData","__applyAlpha",0x0369eedb,"openfl.display.BitmapData.__applyAlpha","openfl/display/BitmapData.hx",3013,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3030___drawCairo,"openfl.display.BitmapData","__drawCairo",0x71da5c79,"openfl.display.BitmapData.__drawCairo","openfl/display/BitmapData.hx",3030,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3053___drawCanvas,"openfl.display.BitmapData","__drawCanvas",0x30879bc7,"openfl.display.BitmapData.__drawCanvas","openfl/display/BitmapData.hx",3053,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3071___drawGL,"openfl.display.BitmapData","__drawGL",0xb0ddbd74,"openfl.display.BitmapData.__drawGL","openfl/display/BitmapData.hx",3071,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3094___fillRect,"openfl.display.BitmapData","__fillRect",0x05dff852,"openfl.display.BitmapData.__fillRect","openfl/display/BitmapData.hx",3094,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3149___fromBase64,"openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",3149,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3157___fromBytes,"openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",3157,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3170___fromFile,"openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",3170,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3181___fromImage,"openfl.display.BitmapData","__fromImage",0xdaa80026,"openfl.display.BitmapData.__fromImage","openfl/display/BitmapData.hx",3181,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3204___fromSymbol,"openfl.display.BitmapData","__fromSymbol",0x68a3802d,"openfl.display.BitmapData.__fromSymbol","openfl/display/BitmapData.hx",3204,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3259___getBounds,"openfl.display.BitmapData","__getBounds",0x4b2a0640,"openfl.display.BitmapData.__getBounds","openfl/display/BitmapData.hx",3259,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3297___loadFromBase64,"openfl.display.BitmapData","__loadFromBase64",0x743819aa,"openfl.display.BitmapData.__loadFromBase64","openfl/display/BitmapData.hx",3297,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3294___loadFromBase64,"openfl.display.BitmapData","__loadFromBase64",0x743819aa,"openfl.display.BitmapData.__loadFromBase64","openfl/display/BitmapData.hx",3294,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3310___loadFromBytes,"openfl.display.BitmapData","__loadFromBytes",0xb92428b0,"openfl.display.BitmapData.__loadFromBytes","openfl/display/BitmapData.hx",3310,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3307___loadFromBytes,"openfl.display.BitmapData","__loadFromBytes",0xb92428b0,"openfl.display.BitmapData.__loadFromBytes","openfl/display/BitmapData.hx",3307,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3329___loadFromFile,"openfl.display.BitmapData","__loadFromFile",0x8e551dd7,"openfl.display.BitmapData.__loadFromFile","openfl/display/BitmapData.hx",3329,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3326___loadFromFile,"openfl.display.BitmapData","__loadFromFile",0x8e551dd7,"openfl.display.BitmapData.__loadFromFile","openfl/display/BitmapData.hx",3326,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3339___renderCairo,"openfl.display.BitmapData","__renderCairo",0x87dae327,"openfl.display.BitmapData.__renderCairo","openfl/display/BitmapData.hx",3339,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3368___renderCairoMask,"openfl.display.BitmapData","__renderCairoMask",0x1a586fb3,"openfl.display.BitmapData.__renderCairoMask","openfl/display/BitmapData.hx",3368,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3371___renderCanvas,"openfl.display.BitmapData","__renderCanvas",0x5afced59,"openfl.display.BitmapData.__renderCanvas","openfl/display/BitmapData.hx",3371,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3389___renderCanvasMask,"openfl.display.BitmapData","__renderCanvasMask",0xf2507ae5,"openfl.display.BitmapData.__renderCanvasMask","openfl/display/BitmapData.hx",3389,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3391___renderDOM,"openfl.display.BitmapData","__renderDOM",0x360da361,"openfl.display.BitmapData.__renderDOM","openfl/display/BitmapData.hx",3391,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3394___renderGL,"openfl.display.BitmapData","__renderGL",0x4c025e06,"openfl.display.BitmapData.__renderGL","openfl/display/BitmapData.hx",3394,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3424___renderGLMask,"openfl.display.BitmapData","__renderGLMask",0xc7204612,"openfl.display.BitmapData.__renderGLMask","openfl/display/BitmapData.hx",3424,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3448___resize,"openfl.display.BitmapData","__resize",0xd982a43f,"openfl.display.BitmapData.__resize","openfl/display/BitmapData.hx",3448,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3459___setUVRect,"openfl.display.BitmapData","__setUVRect",0x4b14ffdc,"openfl.display.BitmapData.__setUVRect","openfl/display/BitmapData.hx",3459,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3492___sync,"openfl.display.BitmapData","__sync",0x0b374be6,"openfl.display.BitmapData.__sync","openfl/display/BitmapData.hx",3492,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3500___update,"openfl.display.BitmapData","__update",0x580cd054,"openfl.display.BitmapData.__update","openfl/display/BitmapData.hx",3500,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_3504___updateTransforms,"openfl.display.BitmapData","__updateTransforms",0xf11196fb,"openfl.display.BitmapData.__updateTransforms","openfl/display/BitmapData.hx",3504,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1195_fromBase64,"openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",1195,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1223_fromBytes,"openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",1223,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1271_fromFile,"openfl.display.BitmapData","fromFile",0xca5f7c31,"openfl.display.BitmapData.fromFile","openfl/display/BitmapData.hx",1271,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1293_fromImage,"openfl.display.BitmapData","fromImage",0x05fd7006,"openfl.display.BitmapData.fromImage","openfl/display/BitmapData.hx",1293,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_1314_fromTexture,"openfl.display.BitmapData","fromTexture",0x71aada46,"openfl.display.BitmapData.fromTexture","openfl/display/BitmapData.hx",1314,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2448_loadFromBase64,"openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",2448,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2446_loadFromBase64,"openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",2446,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2472_loadFromBytes,"openfl.display.BitmapData","loadFromBytes",0x271f0890,"openfl.display.BitmapData.loadFromBytes","openfl/display/BitmapData.hx",2472,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2471_loadFromBytes,"openfl.display.BitmapData","loadFromBytes",0x271f0890,"openfl.display.BitmapData.loadFromBytes","openfl/display/BitmapData.hx",2471,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2501_loadFromFile,"openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",2501,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_2499_loadFromFile,"openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",2499,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_128_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",128,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_130_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",130,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_131_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",131,0xdd12d5b9)
HX_LOCAL_STACK_FRAME(_hx_pos_e7567b6ca69cedca_135_boot,"openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",135,0xdd12d5b9)
namespace openfl{
namespace display{

void BitmapData_obj::__construct(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor){
            		bool transparent = __o_transparent.Default(true);
            		int fillColor = __o_fillColor.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_242_new)
HXLINE( 243)		this->transparent = transparent;
HXLINE( 250)		if ((width < 0)) {
HXLINE( 250)			width = 0;
            		}
            		else {
HXLINE( 250)			width = width;
            		}
HXLINE( 251)		if ((height < 0)) {
HXLINE( 251)			height = 0;
            		}
            		else {
HXLINE( 251)			height = height;
            		}
HXLINE( 253)		this->width = width;
HXLINE( 254)		this->height = height;
HXLINE( 255)		this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,width,height);
HXLINE( 257)		this->_hx___textureWidth = width;
HXLINE( 258)		this->_hx___textureHeight = height;
HXLINE( 260)		bool _hx_tmp;
HXDLIN( 260)		if ((width > 0)) {
HXLINE( 260)			_hx_tmp = (height > 0);
            		}
            		else {
HXLINE( 260)			_hx_tmp = false;
            		}
HXDLIN( 260)		if (_hx_tmp) {
HXLINE( 262)			if (transparent) {
HXLINE( 264)				if (((fillColor & -16777216) == 0)) {
HXLINE( 266)					fillColor = 0;
            				}
            			}
            			else {
HXLINE( 271)				fillColor = (-16777216 | (fillColor & 16777215));
            			}
HXLINE( 274)			fillColor = ((fillColor << 8) | (hx::UShr(fillColor,24) & 255));
HXLINE( 278)			 ::Dynamic elements = ((width * height) * 4);
HXDLIN( 278)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 278)			if (hx::IsNotNull( elements )) {
HXLINE( 278)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            			}
            			else {
HXLINE( 278)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN( 278)			 ::lime::graphics::ImageBuffer buffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,width,height,null(),null());
HXLINE( 279)			buffer->format = 2;
HXLINE( 280)			buffer->premultiplied = true;
HXLINE( 282)			this->image =  ::lime::graphics::Image_obj::__alloc( HX_CTX ,buffer,0,0,width,height,null(),null());
HXLINE( 284)			if ((fillColor != 0)) {
HXLINE( 286)				 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 286)				_hx_tmp1->fillRect(this->image->get_rect(),fillColor,null());
            			}
HXLINE( 306)			this->image->set_transparent(transparent);
HXLINE( 309)			this->_hx___isValid = true;
HXLINE( 310)			this->readable = true;
            		}
HXLINE( 313)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 314)		this->_hx___worldAlpha = ( (Float)(1) );
HXLINE( 315)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 316)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 317)		this->_hx___renderable = true;
            	}

Dynamic BitmapData_obj::__CreateEmpty() { return new BitmapData_obj; }

void *BitmapData_obj::_hx_vtable = 0;

Dynamic BitmapData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool BitmapData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28c743a7;
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::geom::Rectangle, ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___getBounds,
	( void (hx::Object::*)( ::openfl::display::CairoRenderer))&::openfl::display::BitmapData_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::display::CairoRenderer))&::openfl::display::BitmapData_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::display::CanvasRenderer))&::openfl::display::BitmapData_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::display::CanvasRenderer))&::openfl::display::BitmapData_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::display::DOMRenderer))&::openfl::display::BitmapData_obj::_hx___renderDOM,
	( void (hx::Object::*)( ::openfl::display::OpenGLRenderer))&::openfl::display::BitmapData_obj::_hx___renderGL,
	( void (hx::Object::*)( ::openfl::display::OpenGLRenderer))&::openfl::display::BitmapData_obj::_hx___renderGLMask,
	( void (hx::Object::*)(bool,bool))&::openfl::display::BitmapData_obj::_hx___update,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___updateTransforms,
};

void *BitmapData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BitmapData_obj::applyFilter( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::filters::BitmapFilter filter){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_346_applyFilter)
HXLINE( 347)		bool _hx_tmp;
HXDLIN( 347)		bool _hx_tmp1;
HXDLIN( 347)		if (!(!(this->readable))) {
HXLINE( 347)			_hx_tmp1 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 347)			_hx_tmp1 = true;
            		}
HXDLIN( 347)		if (!(_hx_tmp1)) {
HXLINE( 347)			_hx_tmp = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE( 347)			_hx_tmp = true;
            		}
HXDLIN( 347)		if (_hx_tmp) {
HXLINE( 347)			return;
            		}
HXLINE( 351)		bool needSecondBitmapData = filter->_hx___needSecondBitmapData;
HXLINE( 352)		bool needCopyOfOriginal = filter->_hx___preserveObject;
HXLINE( 354)		 ::openfl::display::BitmapData bitmapData2 = null();
HXLINE( 355)		 ::openfl::display::BitmapData bitmapData3 = null();
HXLINE( 357)		if (needSecondBitmapData) {
HXLINE( 359)			bitmapData2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,0);
            		}
            		else {
HXLINE( 363)			bitmapData2 = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 366)		if (needCopyOfOriginal) {
HXLINE( 368)			bitmapData3 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,true,0);
            		}
HXLINE( 371)		if (filter->_hx___preserveObject) {
HXLINE( 373)			bitmapData3->copyPixels(hx::ObjectPtr<OBJ_>(this),this->rect,destPoint,null(),null(),null());
            		}
HXLINE( 376)		 ::openfl::display::BitmapData lastBitmap = filter->_hx___applyFilter(bitmapData2,hx::ObjectPtr<OBJ_>(this),sourceRect,destPoint);
HXLINE( 378)		if (filter->_hx___preserveObject) {
HXLINE( 380)			lastBitmap->draw(bitmapData3,null(),null(),null(),null(),null());
            		}
HXLINE( 383)		bool _hx_tmp2;
HXDLIN( 383)		if (needSecondBitmapData) {
HXLINE( 383)			_hx_tmp2 = hx::IsEq( lastBitmap,bitmapData2 );
            		}
            		else {
HXLINE( 383)			_hx_tmp2 = false;
            		}
HXDLIN( 383)		if (_hx_tmp2) {
HXLINE( 385)			bitmapData2->image->version = this->image->version;
HXLINE( 386)			this->image = bitmapData2->image;
            		}
HXLINE( 389)		this->image->dirty = true;
HXLINE( 390)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,applyFilter,(void))

 ::openfl::display::BitmapData BitmapData_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_398_clone)
HXLINE( 400)		 ::openfl::display::BitmapData bitmapData;
HXLINE( 402)		if (!(this->_hx___isValid)) {
HXLINE( 404)			bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,this->transparent,0);
            		}
            		else {
HXLINE( 406)			bool _hx_tmp;
HXDLIN( 406)			if (!(this->readable)) {
HXLINE( 406)				_hx_tmp = hx::IsNull( this->image );
            			}
            			else {
HXLINE( 406)				_hx_tmp = false;
            			}
HXDLIN( 406)			if (_hx_tmp) {
HXLINE( 408)				bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,this->transparent,0);
HXLINE( 410)				bitmapData->width = this->width;
HXLINE( 411)				bitmapData->height = this->height;
HXLINE( 412)				bitmapData->_hx___textureWidth = this->_hx___textureWidth;
HXLINE( 413)				bitmapData->_hx___textureHeight = this->_hx___textureHeight;
HXLINE( 414)				bitmapData->rect->copyFrom(this->rect);
HXLINE( 416)				bitmapData->_hx___framebuffer = this->_hx___framebuffer;
HXLINE( 417)				bitmapData->_hx___framebufferContext = this->_hx___framebufferContext;
HXLINE( 418)				bitmapData->_hx___texture = this->_hx___texture;
HXLINE( 419)				bitmapData->_hx___textureContext = this->_hx___textureContext;
HXLINE( 420)				bitmapData->_hx___isValid = true;
            			}
            			else {
HXLINE( 424)				 ::lime::graphics::Image bitmapData1 = this->image->clone();
HXDLIN( 424)				bitmapData = ::openfl::display::BitmapData_obj::fromImage(bitmapData1,this->transparent);
            			}
            		}
HXLINE( 427)		bitmapData->_hx___worldTransform->copyFrom(this->_hx___worldTransform);
HXLINE( 428)		bitmapData->_hx___renderTransform->copyFrom(this->_hx___renderTransform);
HXLINE( 430)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,clone,return )

void BitmapData_obj::colorTransform( ::openfl::geom::Rectangle rect, ::openfl::geom::ColorTransform colorTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_444_colorTransform)
HXLINE( 445)		if (!(this->readable)) {
HXLINE( 445)			return;
            		}
HXLINE( 448)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 448)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN( 448)		_hx_tmp->colorTransform(_hx_tmp1,colorTransform->_hx___toLimeColorMatrix());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,colorTransform,(void))

 ::Dynamic BitmapData_obj::compare( ::openfl::display::BitmapData otherBitmapData){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_464_compare)
HXLINE( 466)		if (hx::IsEq( otherBitmapData,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 468)			return 0;
            		}
            		else {
HXLINE( 470)			if (hx::IsNull( otherBitmapData )) {
HXLINE( 472)				return -1;
            			}
            			else {
HXLINE( 474)				bool _hx_tmp;
HXDLIN( 474)				if ((this->readable != false)) {
HXLINE( 474)					_hx_tmp = (otherBitmapData->readable == false);
            				}
            				else {
HXLINE( 474)					_hx_tmp = true;
            				}
HXDLIN( 474)				if (_hx_tmp) {
HXLINE( 476)					return -2;
            				}
            				else {
HXLINE( 478)					if ((this->width != otherBitmapData->width)) {
HXLINE( 480)						return -3;
            					}
            					else {
HXLINE( 482)						if ((this->height != otherBitmapData->height)) {
HXLINE( 484)							return -4;
            						}
            					}
            				}
            			}
            		}
HXLINE( 487)		bool _hx_tmp1;
HXDLIN( 487)		bool _hx_tmp2;
HXDLIN( 487)		if (hx::IsNotNull( this->image )) {
HXLINE( 487)			_hx_tmp2 = hx::IsNotNull( otherBitmapData->image );
            		}
            		else {
HXLINE( 487)			_hx_tmp2 = false;
            		}
HXDLIN( 487)		if (_hx_tmp2) {
HXLINE( 487)			int _hx_tmp3 = this->image->get_format();
HXDLIN( 487)			_hx_tmp1 = (_hx_tmp3 == otherBitmapData->image->get_format());
            		}
            		else {
HXLINE( 487)			_hx_tmp1 = false;
            		}
HXDLIN( 487)		if (_hx_tmp1) {
HXLINE( 489)			 ::lime::utils::ArrayBufferView bytes = this->image->get_data();
HXLINE( 490)			 ::lime::utils::ArrayBufferView otherBytes = otherBitmapData->image->get_data();
HXLINE( 491)			bool equal = true;
HXLINE( 493)			{
HXLINE( 493)				int _g = 0;
HXDLIN( 493)				int _g1 = bytes->length;
HXDLIN( 493)				while((_g < _g1)){
HXLINE( 493)					_g = (_g + 1);
HXDLIN( 493)					int i = (_g - 1);
HXLINE( 495)					int a = ( (int)(( ::__hxcpp_memory_get_byte(bytes->buffer->b,(bytes->byteOffset + i)) & 255)) );
HXDLIN( 495)					if (hx::IsNotEq( a,( ::__hxcpp_memory_get_byte(otherBytes->buffer->b,(otherBytes->byteOffset + i)) & 255) )) {
HXLINE( 497)						equal = false;
HXLINE( 498)						goto _hx_goto_4;
            					}
            				}
            				_hx_goto_4:;
            			}
HXLINE( 502)			if (equal) {
HXLINE( 504)				return 0;
            			}
            		}
HXLINE( 508)		 ::openfl::display::BitmapData bitmapData = null();
HXLINE( 509)		bool foundDifference;
HXDLIN( 509)		int pixel;
HXDLIN( 509)		int otherPixel;
HXDLIN( 509)		int comparePixel;
HXDLIN( 509)		int r;
HXDLIN( 509)		int g;
HXDLIN( 509)		int b;
HXDLIN( 509)		int a1;
HXLINE( 511)		{
HXLINE( 511)			int _g2 = 0;
HXDLIN( 511)			int _g11 = this->height;
HXDLIN( 511)			while((_g2 < _g11)){
HXLINE( 511)				_g2 = (_g2 + 1);
HXDLIN( 511)				int y = (_g2 - 1);
HXLINE( 513)				{
HXLINE( 513)					int _g3 = 0;
HXDLIN( 513)					int _g12 = this->width;
HXDLIN( 513)					while((_g3 < _g12)){
HXLINE( 513)						_g3 = (_g3 + 1);
HXDLIN( 513)						int x = (_g3 - 1);
HXLINE( 515)						foundDifference = false;
HXLINE( 517)						pixel = this->getPixel32(x,y);
HXLINE( 518)						otherPixel = otherBitmapData->getPixel32(x,y);
HXLINE( 519)						comparePixel = 0;
HXLINE( 521)						if ((pixel != otherPixel)) {
HXLINE( 523)							r = ((hx::UShr(pixel,16) & 255) - (hx::UShr(otherPixel,16) & 255));
HXLINE( 524)							g = ((hx::UShr(pixel,8) & 255) - (hx::UShr(otherPixel,8) & 255));
HXLINE( 525)							b = ((pixel & 255) - (otherPixel & 255));
HXLINE( 527)							if ((r < 0)) {
HXLINE( 527)								r = (r * -1);
            							}
HXLINE( 528)							if ((g < 0)) {
HXLINE( 528)								g = (g * -1);
            							}
HXLINE( 529)							if ((b < 0)) {
HXLINE( 529)								b = (b * -1);
            							}
HXLINE( 531)							bool _hx_tmp4;
HXDLIN( 531)							bool _hx_tmp5;
HXDLIN( 531)							if ((r == 0)) {
HXLINE( 531)								_hx_tmp5 = (g == 0);
            							}
            							else {
HXLINE( 531)								_hx_tmp5 = false;
            							}
HXDLIN( 531)							if (_hx_tmp5) {
HXLINE( 531)								_hx_tmp4 = (b == 0);
            							}
            							else {
HXLINE( 531)								_hx_tmp4 = false;
            							}
HXDLIN( 531)							if (_hx_tmp4) {
HXLINE( 533)								a1 = ((hx::UShr(pixel,24) & 255) - (hx::UShr(otherPixel,24) & 255));
HXLINE( 535)								if ((a1 != 0)) {
HXLINE( 537)									comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | 16711680) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | ((comparePixel & 255) & 255));
HXLINE( 538)									comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | 65280) | ((comparePixel & 255) & 255));
HXLINE( 539)									comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | 255);
HXLINE( 540)									comparePixel = (((((a1 & 255) << 24) | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | ((comparePixel & 255) & 255));
HXLINE( 542)									foundDifference = true;
            								}
            							}
            							else {
HXLINE( 547)								comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | ((r & 255) << 16)) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | ((comparePixel & 255) & 255));
HXLINE( 548)								comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | ((g & 255) << 8)) | ((comparePixel & 255) & 255));
HXLINE( 549)								comparePixel = ((((((hx::UShr(comparePixel,24) & 255) & 255) << 24) | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | (b & 255));
HXLINE( 550)								comparePixel = (((-16777216 | (((hx::UShr(comparePixel,16) & 255) & 255) << 16)) | (((hx::UShr(comparePixel,8) & 255) & 255) << 8)) | ((comparePixel & 255) & 255));
HXLINE( 552)								foundDifference = true;
            							}
            						}
HXLINE( 556)						if (foundDifference) {
HXLINE( 558)							if (hx::IsNull( bitmapData )) {
HXLINE( 560)								bool bitmapData1;
HXDLIN( 560)								if (!(this->transparent)) {
HXLINE( 560)									bitmapData1 = otherBitmapData->transparent;
            								}
            								else {
HXLINE( 560)									bitmapData1 = true;
            								}
HXDLIN( 560)								bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->width,this->height,bitmapData1,0);
            							}
HXLINE( 563)							bitmapData->setPixel32(x,y,comparePixel);
            						}
            					}
            				}
            			}
            		}
HXLINE( 568)		if (hx::IsNull( bitmapData )) {
HXLINE( 570)			return 0;
            		}
HXLINE( 573)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,compare,return )

void BitmapData_obj::copyChannel( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,int sourceChannel,int destChannel){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_623_copyChannel)
HXLINE( 624)		if (!(this->readable)) {
HXLINE( 624)			return;
            		}
HXLINE( 627)		 ::lime::graphics::ImageChannel sourceChannel1;
HXDLIN( 627)		switch((int)(sourceChannel)){
            			case (int)1: {
HXLINE( 627)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 627)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 627)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 627)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 633)				return;
            			}
            		}
HXLINE( 636)		 ::lime::graphics::ImageChannel destChannel1;
HXDLIN( 636)		switch((int)(destChannel)){
            			case (int)1: {
HXLINE( 636)				destChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 636)				destChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 636)				destChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 636)				destChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 642)				return;
            			}
            		}
HXLINE( 645)		 ::lime::graphics::Image _hx_tmp = this->image;
HXDLIN( 645)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 645)		 ::lime::math::Rectangle _hx_tmp1 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 645)		_hx_tmp->copyChannel(sourceBitmapData1,_hx_tmp1,destPoint->_hx___toLimeVector2(),sourceChannel1,destChannel1);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,copyChannel,(void))

void BitmapData_obj::copyPixels( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::display::BitmapData alphaBitmapData, ::openfl::geom::Point alphaPoint,hx::Null< bool >  __o_mergeAlpha){
            		bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_690_copyPixels)
HXLINE( 691)		bool _hx_tmp;
HXDLIN( 691)		if (!(!(this->readable))) {
HXLINE( 691)			_hx_tmp = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 691)			_hx_tmp = true;
            		}
HXDLIN( 691)		if (_hx_tmp) {
HXLINE( 691)			return;
            		}
HXLINE( 694)		if (hx::IsNotNull( alphaPoint )) {
HXLINE( 696)			::openfl::display::BitmapData_obj::_hx___tempVector->x = alphaPoint->x;
HXLINE( 697)			::openfl::display::BitmapData_obj::_hx___tempVector->y = alphaPoint->y;
            		}
HXLINE( 700)		 ::lime::graphics::Image _hx_tmp1 = this->image;
HXDLIN( 700)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 700)		 ::lime::math::Rectangle _hx_tmp2 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 700)		 ::lime::math::Vector2 _hx_tmp3 = destPoint->_hx___toLimeVector2();
HXLINE( 701)		 ::lime::graphics::Image _hx_tmp4;
HXDLIN( 701)		if (hx::IsNotNull( alphaBitmapData )) {
HXLINE( 701)			_hx_tmp4 = alphaBitmapData->image;
            		}
            		else {
HXLINE( 701)			_hx_tmp4 = null();
            		}
HXDLIN( 701)		 ::lime::math::Vector2 _hx_tmp5;
HXDLIN( 701)		if (hx::IsNotNull( alphaPoint )) {
HXLINE( 701)			_hx_tmp5 = ::openfl::display::BitmapData_obj::_hx___tempVector;
            		}
            		else {
HXLINE( 701)			_hx_tmp5 = null();
            		}
HXLINE( 700)		_hx_tmp1->copyPixels(sourceBitmapData1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,mergeAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,copyPixels,(void))

void BitmapData_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_727_dispose)
HXLINE( 728)		this->image = null();
HXLINE( 730)		this->width = 0;
HXLINE( 731)		this->height = 0;
HXLINE( 732)		this->rect = null();
HXLINE( 734)		this->_hx___isValid = false;
HXLINE( 735)		this->readable = false;
HXLINE( 737)		this->_hx___surface = null();
HXLINE( 739)		this->_hx___vertexBuffer = null();
HXLINE( 740)		this->_hx___framebuffer = null();
HXLINE( 741)		this->_hx___framebufferContext = null();
HXLINE( 742)		this->_hx___texture = null();
HXLINE( 743)		this->_hx___textureContext = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dispose,(void))

void BitmapData_obj::disposeImage(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_780_disposeImage)
HXDLIN( 780)		this->readable = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,disposeImage,(void))

void BitmapData_obj::draw(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< bool >  __o_smoothing){
            		bool smoothing = __o_smoothing.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_859_draw)
HXLINE( 860)		if (hx::IsNull( source )) {
HXLINE( 860)			return;
            		}
HXLINE( 862)		::openfl::display::IBitmapDrawable_obj::_hx___update(source,false,true);
HXLINE( 864)		 ::openfl::geom::Matrix transform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 866)		transform->copyFrom(( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),hx::paccDynamic)) ));
HXLINE( 867)		transform->invert();
HXLINE( 869)		if (hx::IsNotNull( matrix )) {
HXLINE( 871)			transform->concat(matrix);
            		}
HXLINE( 874)		 ::openfl::geom::Matrix clipMatrix = null();
HXLINE( 876)		if (hx::IsNotNull( clipRect )) {
HXLINE( 878)			clipMatrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 879)			clipMatrix->copyFrom(transform);
HXLINE( 880)			clipMatrix->invert();
            		}
HXLINE( 883)		 ::openfl::geom::ColorTransform _colorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 884)		_colorTransform->_hx___copyFrom(( ( ::openfl::geom::ColorTransform)(source->__Field(HX_("__worldColorTransform",5b,ce,21,a3),hx::paccDynamic)) ));
HXLINE( 885)		_colorTransform->_hx___invert();
HXLINE( 887)		bool _hx_tmp;
HXDLIN( 887)		if (!(this->readable)) {
HXLINE( 887)			_hx_tmp = hx::IsNotNull( ::openfl::Lib_obj::get_current()->stage->context3D );
            		}
            		else {
HXLINE( 887)			_hx_tmp = false;
            		}
HXDLIN( 887)		if (_hx_tmp) {
HXLINE( 889)			if (hx::IsNull( this->_hx___textureContext )) {
HXLINE( 892)				this->_hx___textureContext = ::lime::app::Application_obj::current->_hx___window->context;
            			}
HXLINE( 895)			if (hx::IsNotNull( colorTransform )) {
HXLINE( 897)				_colorTransform->_hx___combine(colorTransform);
            			}
HXLINE( 900)			 ::openfl::display::OpenGLRenderer renderer =  ::openfl::display::OpenGLRenderer_obj::__alloc( HX_CTX ,::openfl::Lib_obj::get_current()->stage->context3D,hx::ObjectPtr<OBJ_>(this));
HXLINE( 901)			renderer->_hx___allowSmoothing = smoothing;
HXLINE( 902)			renderer->_hx___overrideBlendMode = blendMode;
HXLINE( 904)			renderer->_hx___worldTransform = transform;
HXLINE( 905)			renderer->_hx___worldAlpha = (( (Float)(1) ) / ( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) ));
HXLINE( 906)			renderer->_hx___worldColorTransform = _colorTransform;
HXLINE( 908)			renderer->_hx___resize(this->width,this->height);
HXLINE( 910)			if (hx::IsNotNull( clipRect )) {
HXLINE( 912)				renderer->_hx___pushMaskRect(clipRect,clipMatrix);
            			}
HXLINE( 915)			this->_hx___drawGL(source,renderer);
HXLINE( 917)			if (hx::IsNotNull( clipRect )) {
HXLINE( 919)				renderer->_hx___popMaskRect();
HXLINE( 920)				::openfl::geom::Matrix_obj::_hx___pool->release(clipMatrix);
            			}
            		}
            		else {
HXLINE( 926)			if (hx::IsNotNull( colorTransform )) {
HXLINE( 928)				 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 929)				 ::openfl::geom::Matrix boundsMatrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 931)				::openfl::display::IBitmapDrawable_obj::_hx___getBounds(source,bounds,boundsMatrix);
HXLINE( 933)				int width = ::Math_obj::ceil(bounds->width);
HXLINE( 934)				int height = ::Math_obj::ceil(bounds->height);
HXLINE( 936)				boundsMatrix->tx = -(bounds->x);
HXLINE( 937)				boundsMatrix->ty = -(bounds->y);
HXLINE( 939)				 ::openfl::display::BitmapData copy =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,0);
HXLINE( 940)				copy->draw(source,boundsMatrix,null(),null(),null(),null());
HXLINE( 942)				copy->colorTransform(copy->rect,colorTransform);
HXLINE( 943)				copy->_hx___renderTransform->identity();
HXLINE( 944)				copy->_hx___renderTransform->tx = bounds->x;
HXLINE( 945)				copy->_hx___renderTransform->ty = bounds->y;
HXLINE( 946)				copy->_hx___renderTransform->concat(( ( ::openfl::geom::Matrix)(source->__Field(HX_("__renderTransform",16,b8,95,b1),hx::paccDynamic)) ));
HXLINE( 947)				copy->_hx___worldAlpha = ( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) );
HXLINE( 948)				copy->_hx___worldColorTransform->_hx___copyFrom(( ( ::openfl::geom::ColorTransform)(source->__Field(HX_("__worldColorTransform",5b,ce,21,a3),hx::paccDynamic)) ));
HXLINE( 949)				source = copy;
HXLINE( 951)				::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
HXLINE( 952)				::openfl::geom::Matrix_obj::_hx___pool->release(boundsMatrix);
            			}
HXLINE( 959)			 ::openfl::display::CairoRenderer renderer1 =  ::openfl::display::CairoRenderer_obj::__alloc( HX_CTX , ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,this->getSurface()));
HXLINE( 962)			renderer1->_hx___allowSmoothing = smoothing;
HXLINE( 963)			renderer1->_hx___overrideBlendMode = blendMode;
HXLINE( 965)			renderer1->_hx___worldTransform = transform;
HXLINE( 966)			renderer1->_hx___worldAlpha = (( (Float)(1) ) / ( (Float)(source->__Field(HX_("__worldAlpha",cc,d2,d6,c5),hx::paccDynamic)) ));
HXLINE( 967)			renderer1->_hx___worldColorTransform = _colorTransform;
HXLINE( 969)			if (hx::IsNotNull( clipRect )) {
HXLINE( 971)				renderer1->_hx___pushMaskRect(clipRect,clipMatrix);
            			}
HXLINE( 977)			this->_hx___drawCairo(source,renderer1);
HXLINE( 980)			if (hx::IsNotNull( clipRect )) {
HXLINE( 982)				renderer1->_hx___popMaskRect();
HXLINE( 983)				::openfl::geom::Matrix_obj::_hx___pool->release(clipMatrix);
            			}
            		}
HXLINE( 988)		::openfl::geom::Matrix_obj::_hx___pool->release(transform);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,draw,(void))

void BitmapData_obj::drawWithQuality(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< bool >  __o_smoothing, ::Dynamic quality){
            		bool smoothing = __o_smoothing.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1083_drawWithQuality)
HXDLIN(1083)		bool _hx_tmp;
HXDLIN(1083)		if (hx::IsNotEq( quality,2 )) {
HXDLIN(1083)			_hx_tmp = smoothing;
            		}
            		else {
HXDLIN(1083)			_hx_tmp = false;
            		}
HXDLIN(1083)		this->draw(source,matrix,colorTransform,blendMode,clipRect,_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,drawWithQuality,(void))

 ::openfl::utils::ByteArrayData BitmapData_obj::encode( ::openfl::geom::Rectangle rect, ::Dynamic compressor, ::openfl::utils::ByteArrayData byteArray){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1109_encode)
HXLINE(1111)		bool _hx_tmp;
HXDLIN(1111)		if (!(!(this->readable))) {
HXLINE(1111)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(1111)			_hx_tmp = true;
            		}
HXDLIN(1111)		if (_hx_tmp) {
HXLINE(1111)			byteArray = null();
HXDLIN(1111)			return byteArray;
            		}
HXLINE(1112)		if (hx::IsNull( byteArray )) {
HXLINE(1112)			 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXDLIN(1112)			byteArray = this1;
            		}
HXLINE(1114)		 ::lime::graphics::Image image = this->image;
HXLINE(1116)		if (!(rect->equals(this->rect))) {
HXLINE(1118)			 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE(1119)			matrix->tx = ( (Float)(::Math_obj::round(-(rect->x))) );
HXLINE(1120)			matrix->ty = ( (Float)(::Math_obj::round(-(rect->y))) );
HXLINE(1122)			 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Math_obj::ceil(rect->width),::Math_obj::ceil(rect->height),true,0);
HXLINE(1123)			bitmapData->draw(hx::ObjectPtr<OBJ_>(this),matrix,null(),null(),null(),null());
HXLINE(1125)			image = bitmapData->image;
HXLINE(1127)			::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
            		}
HXLINE(1130)		if (::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::PNGEncoderOptions >())) {
HXLINE(1132)			byteArray->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(image->encode(::lime::graphics::ImageFileFormat_obj::PNG_dyn(),null())),0,0);
HXLINE(1133)			return byteArray;
            		}
            		else {
HXLINE(1135)			if (::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::JPEGEncoderOptions >())) {
HXLINE(1137)				byteArray->writeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(image->encode(::lime::graphics::ImageFileFormat_obj::JPEG_dyn(),hx::TCast<  ::openfl::display::JPEGEncoderOptions >::cast(compressor)->quality)),0,0);
HXLINE(1138)				return byteArray;
            			}
            		}
HXLINE(1142)		byteArray = null();
HXDLIN(1142)		return byteArray;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,encode,return )

void BitmapData_obj::fillRect( ::openfl::geom::Rectangle rect,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1156_fillRect)
HXDLIN(1156)		this->_hx___fillRect(rect,color,true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fillRect,(void))

void BitmapData_obj::floodFill(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1171_floodFill)
HXLINE(1173)		if (!(this->readable)) {
HXLINE(1173)			return;
            		}
HXLINE(1174)		this->image->floodFill(x,y,color,1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,floodFill,(void))

 ::openfl::geom::Rectangle BitmapData_obj::generateFilterRect( ::openfl::geom::Rectangle sourceRect, ::openfl::filters::BitmapFilter filter){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1354_generateFilterRect)
HXDLIN(1354)		return sourceRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,generateFilterRect,return )

 ::openfl::display3D::IndexBuffer3D BitmapData_obj::getIndexBuffer( ::openfl::display3D::Context3D context, ::openfl::geom::Rectangle scale9Grid){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1366_getIndexBuffer)
HXLINE(1367)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(1369)		bool _hx_tmp;
HXDLIN(1369)		bool _hx_tmp1;
HXDLIN(1369)		bool _hx_tmp2;
HXDLIN(1369)		if (hx::IsNotNull( this->_hx___indexBuffer )) {
HXLINE(1369)			_hx_tmp2 = hx::IsNotEq( this->_hx___indexBufferContext,context->_hx___context );
            		}
            		else {
HXLINE(1369)			_hx_tmp2 = true;
            		}
HXDLIN(1369)		if (!(_hx_tmp2)) {
HXLINE(1371)			if (hx::IsNotNull( scale9Grid )) {
HXLINE(1369)				_hx_tmp1 = hx::IsNull( this->_hx___indexBufferGrid );
            			}
            			else {
HXLINE(1369)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1369)			_hx_tmp1 = true;
            		}
HXDLIN(1369)		if (!(_hx_tmp1)) {
HXLINE(1372)			if (hx::IsNotNull( this->_hx___indexBufferGrid )) {
HXLINE(1369)				_hx_tmp = !(this->_hx___indexBufferGrid->equals(scale9Grid));
            			}
            			else {
HXLINE(1369)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1369)			_hx_tmp = true;
            		}
HXDLIN(1369)		if (_hx_tmp) {
HXLINE(1378)			this->_hx___indexBufferContext = context->_hx___context;
HXLINE(1379)			this->_hx___indexBuffer = null();
HXLINE(1381)			if (hx::IsNotNull( scale9Grid )) {
HXLINE(1383)				if (hx::IsNull( this->_hx___indexBufferGrid )) {
HXLINE(1383)					this->_hx___indexBufferGrid =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXLINE(1384)				this->_hx___indexBufferGrid->copyFrom(scale9Grid);
HXLINE(1386)				Float centerX = scale9Grid->width;
HXLINE(1387)				Float centerY = scale9Grid->height;
HXLINE(1388)				bool _hx_tmp3;
HXDLIN(1388)				if ((centerX != 0)) {
HXLINE(1388)					_hx_tmp3 = (centerY != 0);
            				}
            				else {
HXLINE(1388)					_hx_tmp3 = false;
            				}
HXDLIN(1388)				if (_hx_tmp3) {
HXLINE(1390)					 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,54,6);
HXDLIN(1390)					this->_hx___indexBufferData = this1;
HXLINE(1401)					{
HXLINE(1401)						 ::lime::utils::ArrayBufferView this2 = this->_hx___indexBufferData;
HXDLIN(1401)						 ::__hxcpp_memory_set_ui16(this2->buffer->b,this2->byteOffset,0);
            					}
HXLINE(1402)					{
HXLINE(1402)						 ::lime::utils::ArrayBufferView this3 = this->_hx___indexBufferData;
HXDLIN(1402)						 ::__hxcpp_memory_set_ui16(this3->buffer->b,(this3->byteOffset + 2),1);
            					}
HXLINE(1403)					{
HXLINE(1403)						 ::lime::utils::ArrayBufferView this4 = this->_hx___indexBufferData;
HXDLIN(1403)						 ::__hxcpp_memory_set_ui16(this4->buffer->b,(this4->byteOffset + 4),2);
            					}
HXLINE(1404)					{
HXLINE(1404)						 ::lime::utils::ArrayBufferView this5 = this->_hx___indexBufferData;
HXDLIN(1404)						 ::__hxcpp_memory_set_ui16(this5->buffer->b,(this5->byteOffset + 6),2);
            					}
HXLINE(1405)					{
HXLINE(1405)						 ::lime::utils::ArrayBufferView this6 = this->_hx___indexBufferData;
HXDLIN(1405)						 ::__hxcpp_memory_set_ui16(this6->buffer->b,(this6->byteOffset + 8),1);
            					}
HXLINE(1406)					{
HXLINE(1406)						 ::lime::utils::ArrayBufferView this7 = this->_hx___indexBufferData;
HXDLIN(1406)						 ::__hxcpp_memory_set_ui16(this7->buffer->b,(this7->byteOffset + 10),3);
            					}
HXLINE(1409)					{
HXLINE(1409)						 ::lime::utils::ArrayBufferView this8 = this->_hx___indexBufferData;
HXDLIN(1409)						 ::__hxcpp_memory_set_ui16(this8->buffer->b,(this8->byteOffset + 12),4);
            					}
HXLINE(1410)					{
HXLINE(1410)						 ::lime::utils::ArrayBufferView this9 = this->_hx___indexBufferData;
HXDLIN(1410)						 ::__hxcpp_memory_set_ui16(this9->buffer->b,(this9->byteOffset + 14),0);
            					}
HXLINE(1411)					{
HXLINE(1411)						 ::lime::utils::ArrayBufferView this10 = this->_hx___indexBufferData;
HXDLIN(1411)						 ::__hxcpp_memory_set_ui16(this10->buffer->b,(this10->byteOffset + 16),5);
            					}
HXLINE(1412)					{
HXLINE(1412)						 ::lime::utils::ArrayBufferView this11 = this->_hx___indexBufferData;
HXDLIN(1412)						 ::__hxcpp_memory_set_ui16(this11->buffer->b,(this11->byteOffset + 18),5);
            					}
HXLINE(1413)					{
HXLINE(1413)						 ::lime::utils::ArrayBufferView this12 = this->_hx___indexBufferData;
HXDLIN(1413)						 ::__hxcpp_memory_set_ui16(this12->buffer->b,(this12->byteOffset + 20),0);
            					}
HXLINE(1414)					{
HXLINE(1414)						 ::lime::utils::ArrayBufferView this13 = this->_hx___indexBufferData;
HXDLIN(1414)						 ::__hxcpp_memory_set_ui16(this13->buffer->b,(this13->byteOffset + 22),2);
            					}
HXLINE(1417)					{
HXLINE(1417)						 ::lime::utils::ArrayBufferView this14 = this->_hx___indexBufferData;
HXDLIN(1417)						 ::__hxcpp_memory_set_ui16(this14->buffer->b,(this14->byteOffset + 24),6);
            					}
HXLINE(1418)					{
HXLINE(1418)						 ::lime::utils::ArrayBufferView this15 = this->_hx___indexBufferData;
HXDLIN(1418)						 ::__hxcpp_memory_set_ui16(this15->buffer->b,(this15->byteOffset + 26),4);
            					}
HXLINE(1419)					{
HXLINE(1419)						 ::lime::utils::ArrayBufferView this16 = this->_hx___indexBufferData;
HXDLIN(1419)						 ::__hxcpp_memory_set_ui16(this16->buffer->b,(this16->byteOffset + 28),7);
            					}
HXLINE(1420)					{
HXLINE(1420)						 ::lime::utils::ArrayBufferView this17 = this->_hx___indexBufferData;
HXDLIN(1420)						 ::__hxcpp_memory_set_ui16(this17->buffer->b,(this17->byteOffset + 30),7);
            					}
HXLINE(1421)					{
HXLINE(1421)						 ::lime::utils::ArrayBufferView this18 = this->_hx___indexBufferData;
HXDLIN(1421)						 ::__hxcpp_memory_set_ui16(this18->buffer->b,(this18->byteOffset + 32),4);
            					}
HXLINE(1422)					{
HXLINE(1422)						 ::lime::utils::ArrayBufferView this19 = this->_hx___indexBufferData;
HXDLIN(1422)						 ::__hxcpp_memory_set_ui16(this19->buffer->b,(this19->byteOffset + 34),5);
            					}
HXLINE(1425)					{
HXLINE(1425)						 ::lime::utils::ArrayBufferView this20 = this->_hx___indexBufferData;
HXDLIN(1425)						 ::__hxcpp_memory_set_ui16(this20->buffer->b,(this20->byteOffset + 36),8);
            					}
HXLINE(1426)					{
HXLINE(1426)						 ::lime::utils::ArrayBufferView this21 = this->_hx___indexBufferData;
HXDLIN(1426)						 ::__hxcpp_memory_set_ui16(this21->buffer->b,(this21->byteOffset + 38),9);
            					}
HXLINE(1427)					{
HXLINE(1427)						 ::lime::utils::ArrayBufferView this22 = this->_hx___indexBufferData;
HXDLIN(1427)						 ::__hxcpp_memory_set_ui16(this22->buffer->b,(this22->byteOffset + 40),0);
            					}
HXLINE(1428)					{
HXLINE(1428)						 ::lime::utils::ArrayBufferView this23 = this->_hx___indexBufferData;
HXDLIN(1428)						 ::__hxcpp_memory_set_ui16(this23->buffer->b,(this23->byteOffset + 42),0);
            					}
HXLINE(1429)					{
HXLINE(1429)						 ::lime::utils::ArrayBufferView this24 = this->_hx___indexBufferData;
HXDLIN(1429)						 ::__hxcpp_memory_set_ui16(this24->buffer->b,(this24->byteOffset + 44),9);
            					}
HXLINE(1430)					{
HXLINE(1430)						 ::lime::utils::ArrayBufferView this25 = this->_hx___indexBufferData;
HXDLIN(1430)						 ::__hxcpp_memory_set_ui16(this25->buffer->b,(this25->byteOffset + 46),1);
            					}
HXLINE(1433)					{
HXLINE(1433)						 ::lime::utils::ArrayBufferView this26 = this->_hx___indexBufferData;
HXDLIN(1433)						 ::__hxcpp_memory_set_ui16(this26->buffer->b,(this26->byteOffset + 48),10);
            					}
HXLINE(1434)					{
HXLINE(1434)						 ::lime::utils::ArrayBufferView this27 = this->_hx___indexBufferData;
HXDLIN(1434)						 ::__hxcpp_memory_set_ui16(this27->buffer->b,(this27->byteOffset + 50),8);
            					}
HXLINE(1435)					{
HXLINE(1435)						 ::lime::utils::ArrayBufferView this28 = this->_hx___indexBufferData;
HXDLIN(1435)						 ::__hxcpp_memory_set_ui16(this28->buffer->b,(this28->byteOffset + 52),4);
            					}
HXLINE(1436)					{
HXLINE(1436)						 ::lime::utils::ArrayBufferView this29 = this->_hx___indexBufferData;
HXDLIN(1436)						 ::__hxcpp_memory_set_ui16(this29->buffer->b,(this29->byteOffset + 54),4);
            					}
HXLINE(1437)					{
HXLINE(1437)						 ::lime::utils::ArrayBufferView this30 = this->_hx___indexBufferData;
HXDLIN(1437)						 ::__hxcpp_memory_set_ui16(this30->buffer->b,(this30->byteOffset + 56),8);
            					}
HXLINE(1438)					{
HXLINE(1438)						 ::lime::utils::ArrayBufferView this31 = this->_hx___indexBufferData;
HXDLIN(1438)						 ::__hxcpp_memory_set_ui16(this31->buffer->b,(this31->byteOffset + 58),0);
            					}
HXLINE(1441)					{
HXLINE(1441)						 ::lime::utils::ArrayBufferView this32 = this->_hx___indexBufferData;
HXDLIN(1441)						 ::__hxcpp_memory_set_ui16(this32->buffer->b,(this32->byteOffset + 60),11);
            					}
HXLINE(1442)					{
HXLINE(1442)						 ::lime::utils::ArrayBufferView this33 = this->_hx___indexBufferData;
HXDLIN(1442)						 ::__hxcpp_memory_set_ui16(this33->buffer->b,(this33->byteOffset + 62),10);
            					}
HXLINE(1443)					{
HXLINE(1443)						 ::lime::utils::ArrayBufferView this34 = this->_hx___indexBufferData;
HXDLIN(1443)						 ::__hxcpp_memory_set_ui16(this34->buffer->b,(this34->byteOffset + 64),6);
            					}
HXLINE(1444)					{
HXLINE(1444)						 ::lime::utils::ArrayBufferView this35 = this->_hx___indexBufferData;
HXDLIN(1444)						 ::__hxcpp_memory_set_ui16(this35->buffer->b,(this35->byteOffset + 66),6);
            					}
HXLINE(1445)					{
HXLINE(1445)						 ::lime::utils::ArrayBufferView this36 = this->_hx___indexBufferData;
HXDLIN(1445)						 ::__hxcpp_memory_set_ui16(this36->buffer->b,(this36->byteOffset + 68),10);
            					}
HXLINE(1446)					{
HXLINE(1446)						 ::lime::utils::ArrayBufferView this37 = this->_hx___indexBufferData;
HXDLIN(1446)						 ::__hxcpp_memory_set_ui16(this37->buffer->b,(this37->byteOffset + 70),4);
            					}
HXLINE(1449)					{
HXLINE(1449)						 ::lime::utils::ArrayBufferView this38 = this->_hx___indexBufferData;
HXDLIN(1449)						 ::__hxcpp_memory_set_ui16(this38->buffer->b,(this38->byteOffset + 72),12);
            					}
HXLINE(1450)					{
HXLINE(1450)						 ::lime::utils::ArrayBufferView this39 = this->_hx___indexBufferData;
HXDLIN(1450)						 ::__hxcpp_memory_set_ui16(this39->buffer->b,(this39->byteOffset + 74),13);
            					}
HXLINE(1451)					{
HXLINE(1451)						 ::lime::utils::ArrayBufferView this40 = this->_hx___indexBufferData;
HXDLIN(1451)						 ::__hxcpp_memory_set_ui16(this40->buffer->b,(this40->byteOffset + 76),8);
            					}
HXLINE(1452)					{
HXLINE(1452)						 ::lime::utils::ArrayBufferView this41 = this->_hx___indexBufferData;
HXDLIN(1452)						 ::__hxcpp_memory_set_ui16(this41->buffer->b,(this41->byteOffset + 78),8);
            					}
HXLINE(1453)					{
HXLINE(1453)						 ::lime::utils::ArrayBufferView this42 = this->_hx___indexBufferData;
HXDLIN(1453)						 ::__hxcpp_memory_set_ui16(this42->buffer->b,(this42->byteOffset + 80),13);
            					}
HXLINE(1454)					{
HXLINE(1454)						 ::lime::utils::ArrayBufferView this43 = this->_hx___indexBufferData;
HXDLIN(1454)						 ::__hxcpp_memory_set_ui16(this43->buffer->b,(this43->byteOffset + 82),9);
            					}
HXLINE(1457)					{
HXLINE(1457)						 ::lime::utils::ArrayBufferView this44 = this->_hx___indexBufferData;
HXDLIN(1457)						 ::__hxcpp_memory_set_ui16(this44->buffer->b,(this44->byteOffset + 84),14);
            					}
HXLINE(1458)					{
HXLINE(1458)						 ::lime::utils::ArrayBufferView this45 = this->_hx___indexBufferData;
HXDLIN(1458)						 ::__hxcpp_memory_set_ui16(this45->buffer->b,(this45->byteOffset + 86),12);
            					}
HXLINE(1459)					{
HXLINE(1459)						 ::lime::utils::ArrayBufferView this46 = this->_hx___indexBufferData;
HXDLIN(1459)						 ::__hxcpp_memory_set_ui16(this46->buffer->b,(this46->byteOffset + 88),10);
            					}
HXLINE(1460)					{
HXLINE(1460)						 ::lime::utils::ArrayBufferView this47 = this->_hx___indexBufferData;
HXDLIN(1460)						 ::__hxcpp_memory_set_ui16(this47->buffer->b,(this47->byteOffset + 90),10);
            					}
HXLINE(1461)					{
HXLINE(1461)						 ::lime::utils::ArrayBufferView this48 = this->_hx___indexBufferData;
HXDLIN(1461)						 ::__hxcpp_memory_set_ui16(this48->buffer->b,(this48->byteOffset + 92),12);
            					}
HXLINE(1462)					{
HXLINE(1462)						 ::lime::utils::ArrayBufferView this49 = this->_hx___indexBufferData;
HXDLIN(1462)						 ::__hxcpp_memory_set_ui16(this49->buffer->b,(this49->byteOffset + 94),8);
            					}
HXLINE(1465)					{
HXLINE(1465)						 ::lime::utils::ArrayBufferView this50 = this->_hx___indexBufferData;
HXDLIN(1465)						 ::__hxcpp_memory_set_ui16(this50->buffer->b,(this50->byteOffset + 96),15);
            					}
HXLINE(1466)					{
HXLINE(1466)						 ::lime::utils::ArrayBufferView this51 = this->_hx___indexBufferData;
HXDLIN(1466)						 ::__hxcpp_memory_set_ui16(this51->buffer->b,(this51->byteOffset + 98),14);
            					}
HXLINE(1467)					{
HXLINE(1467)						 ::lime::utils::ArrayBufferView this52 = this->_hx___indexBufferData;
HXDLIN(1467)						 ::__hxcpp_memory_set_ui16(this52->buffer->b,(this52->byteOffset + 100),11);
            					}
HXLINE(1468)					{
HXLINE(1468)						 ::lime::utils::ArrayBufferView this53 = this->_hx___indexBufferData;
HXDLIN(1468)						 ::__hxcpp_memory_set_ui16(this53->buffer->b,(this53->byteOffset + 102),11);
            					}
HXLINE(1469)					{
HXLINE(1469)						 ::lime::utils::ArrayBufferView this54 = this->_hx___indexBufferData;
HXDLIN(1469)						 ::__hxcpp_memory_set_ui16(this54->buffer->b,(this54->byteOffset + 104),14);
            					}
HXLINE(1470)					{
HXLINE(1470)						 ::lime::utils::ArrayBufferView this55 = this->_hx___indexBufferData;
HXDLIN(1470)						 ::__hxcpp_memory_set_ui16(this55->buffer->b,(this55->byteOffset + 106),10);
            					}
HXLINE(1472)					this->_hx___indexBuffer = context->createIndexBuffer(54,null());
            				}
            				else {
HXLINE(1474)					bool _hx_tmp4;
HXDLIN(1474)					if ((centerX == 0)) {
HXLINE(1474)						_hx_tmp4 = (centerY != 0);
            					}
            					else {
HXLINE(1474)						_hx_tmp4 = false;
            					}
HXDLIN(1474)					if (_hx_tmp4) {
HXLINE(1476)						 ::lime::utils::ArrayBufferView this56 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,18,6);
HXDLIN(1476)						this->_hx___indexBufferData = this56;
HXLINE(1487)						{
HXLINE(1487)							 ::lime::utils::ArrayBufferView this57 = this->_hx___indexBufferData;
HXDLIN(1487)							 ::__hxcpp_memory_set_ui16(this57->buffer->b,this57->byteOffset,0);
            						}
HXLINE(1488)						{
HXLINE(1488)							 ::lime::utils::ArrayBufferView this58 = this->_hx___indexBufferData;
HXDLIN(1488)							 ::__hxcpp_memory_set_ui16(this58->buffer->b,(this58->byteOffset + 2),1);
            						}
HXLINE(1489)						{
HXLINE(1489)							 ::lime::utils::ArrayBufferView this59 = this->_hx___indexBufferData;
HXDLIN(1489)							 ::__hxcpp_memory_set_ui16(this59->buffer->b,(this59->byteOffset + 4),2);
            						}
HXLINE(1490)						{
HXLINE(1490)							 ::lime::utils::ArrayBufferView this60 = this->_hx___indexBufferData;
HXDLIN(1490)							 ::__hxcpp_memory_set_ui16(this60->buffer->b,(this60->byteOffset + 6),2);
            						}
HXLINE(1491)						{
HXLINE(1491)							 ::lime::utils::ArrayBufferView this61 = this->_hx___indexBufferData;
HXDLIN(1491)							 ::__hxcpp_memory_set_ui16(this61->buffer->b,(this61->byteOffset + 8),1);
            						}
HXLINE(1492)						{
HXLINE(1492)							 ::lime::utils::ArrayBufferView this62 = this->_hx___indexBufferData;
HXDLIN(1492)							 ::__hxcpp_memory_set_ui16(this62->buffer->b,(this62->byteOffset + 10),3);
            						}
HXLINE(1495)						{
HXLINE(1495)							 ::lime::utils::ArrayBufferView this63 = this->_hx___indexBufferData;
HXDLIN(1495)							 ::__hxcpp_memory_set_ui16(this63->buffer->b,(this63->byteOffset + 12),4);
            						}
HXLINE(1496)						{
HXLINE(1496)							 ::lime::utils::ArrayBufferView this64 = this->_hx___indexBufferData;
HXDLIN(1496)							 ::__hxcpp_memory_set_ui16(this64->buffer->b,(this64->byteOffset + 14),5);
            						}
HXLINE(1497)						{
HXLINE(1497)							 ::lime::utils::ArrayBufferView this65 = this->_hx___indexBufferData;
HXDLIN(1497)							 ::__hxcpp_memory_set_ui16(this65->buffer->b,(this65->byteOffset + 16),0);
            						}
HXLINE(1498)						{
HXLINE(1498)							 ::lime::utils::ArrayBufferView this66 = this->_hx___indexBufferData;
HXDLIN(1498)							 ::__hxcpp_memory_set_ui16(this66->buffer->b,(this66->byteOffset + 18),0);
            						}
HXLINE(1499)						{
HXLINE(1499)							 ::lime::utils::ArrayBufferView this67 = this->_hx___indexBufferData;
HXDLIN(1499)							 ::__hxcpp_memory_set_ui16(this67->buffer->b,(this67->byteOffset + 20),5);
            						}
HXLINE(1500)						{
HXLINE(1500)							 ::lime::utils::ArrayBufferView this68 = this->_hx___indexBufferData;
HXDLIN(1500)							 ::__hxcpp_memory_set_ui16(this68->buffer->b,(this68->byteOffset + 22),1);
            						}
HXLINE(1503)						{
HXLINE(1503)							 ::lime::utils::ArrayBufferView this69 = this->_hx___indexBufferData;
HXDLIN(1503)							 ::__hxcpp_memory_set_ui16(this69->buffer->b,(this69->byteOffset + 24),6);
            						}
HXLINE(1504)						{
HXLINE(1504)							 ::lime::utils::ArrayBufferView this70 = this->_hx___indexBufferData;
HXDLIN(1504)							 ::__hxcpp_memory_set_ui16(this70->buffer->b,(this70->byteOffset + 26),7);
            						}
HXLINE(1505)						{
HXLINE(1505)							 ::lime::utils::ArrayBufferView this71 = this->_hx___indexBufferData;
HXDLIN(1505)							 ::__hxcpp_memory_set_ui16(this71->buffer->b,(this71->byteOffset + 28),4);
            						}
HXLINE(1506)						{
HXLINE(1506)							 ::lime::utils::ArrayBufferView this72 = this->_hx___indexBufferData;
HXDLIN(1506)							 ::__hxcpp_memory_set_ui16(this72->buffer->b,(this72->byteOffset + 30),4);
            						}
HXLINE(1507)						{
HXLINE(1507)							 ::lime::utils::ArrayBufferView this73 = this->_hx___indexBufferData;
HXDLIN(1507)							 ::__hxcpp_memory_set_ui16(this73->buffer->b,(this73->byteOffset + 32),7);
            						}
HXLINE(1508)						{
HXLINE(1508)							 ::lime::utils::ArrayBufferView this74 = this->_hx___indexBufferData;
HXDLIN(1508)							 ::__hxcpp_memory_set_ui16(this74->buffer->b,(this74->byteOffset + 34),5);
            						}
HXLINE(1510)						this->_hx___indexBuffer = context->createIndexBuffer(18,null());
            					}
            					else {
HXLINE(1512)						bool _hx_tmp5;
HXDLIN(1512)						if ((centerX != 0)) {
HXLINE(1512)							_hx_tmp5 = (centerY == 0);
            						}
            						else {
HXLINE(1512)							_hx_tmp5 = false;
            						}
HXDLIN(1512)						if (_hx_tmp5) {
HXLINE(1514)							 ::lime::utils::ArrayBufferView this75 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,18,6);
HXDLIN(1514)							this->_hx___indexBufferData = this75;
HXLINE(1521)							{
HXLINE(1521)								 ::lime::utils::ArrayBufferView this76 = this->_hx___indexBufferData;
HXDLIN(1521)								 ::__hxcpp_memory_set_ui16(this76->buffer->b,this76->byteOffset,0);
            							}
HXLINE(1522)							{
HXLINE(1522)								 ::lime::utils::ArrayBufferView this77 = this->_hx___indexBufferData;
HXDLIN(1522)								 ::__hxcpp_memory_set_ui16(this77->buffer->b,(this77->byteOffset + 2),1);
            							}
HXLINE(1523)							{
HXLINE(1523)								 ::lime::utils::ArrayBufferView this78 = this->_hx___indexBufferData;
HXDLIN(1523)								 ::__hxcpp_memory_set_ui16(this78->buffer->b,(this78->byteOffset + 4),2);
            							}
HXLINE(1524)							{
HXLINE(1524)								 ::lime::utils::ArrayBufferView this79 = this->_hx___indexBufferData;
HXDLIN(1524)								 ::__hxcpp_memory_set_ui16(this79->buffer->b,(this79->byteOffset + 6),2);
            							}
HXLINE(1525)							{
HXLINE(1525)								 ::lime::utils::ArrayBufferView this80 = this->_hx___indexBufferData;
HXDLIN(1525)								 ::__hxcpp_memory_set_ui16(this80->buffer->b,(this80->byteOffset + 8),1);
            							}
HXLINE(1526)							{
HXLINE(1526)								 ::lime::utils::ArrayBufferView this81 = this->_hx___indexBufferData;
HXDLIN(1526)								 ::__hxcpp_memory_set_ui16(this81->buffer->b,(this81->byteOffset + 10),3);
            							}
HXLINE(1529)							{
HXLINE(1529)								 ::lime::utils::ArrayBufferView this82 = this->_hx___indexBufferData;
HXDLIN(1529)								 ::__hxcpp_memory_set_ui16(this82->buffer->b,(this82->byteOffset + 12),4);
            							}
HXLINE(1530)							{
HXLINE(1530)								 ::lime::utils::ArrayBufferView this83 = this->_hx___indexBufferData;
HXDLIN(1530)								 ::__hxcpp_memory_set_ui16(this83->buffer->b,(this83->byteOffset + 14),0);
            							}
HXLINE(1531)							{
HXLINE(1531)								 ::lime::utils::ArrayBufferView this84 = this->_hx___indexBufferData;
HXDLIN(1531)								 ::__hxcpp_memory_set_ui16(this84->buffer->b,(this84->byteOffset + 16),5);
            							}
HXLINE(1532)							{
HXLINE(1532)								 ::lime::utils::ArrayBufferView this85 = this->_hx___indexBufferData;
HXDLIN(1532)								 ::__hxcpp_memory_set_ui16(this85->buffer->b,(this85->byteOffset + 18),5);
            							}
HXLINE(1533)							{
HXLINE(1533)								 ::lime::utils::ArrayBufferView this86 = this->_hx___indexBufferData;
HXDLIN(1533)								 ::__hxcpp_memory_set_ui16(this86->buffer->b,(this86->byteOffset + 20),0);
            							}
HXLINE(1534)							{
HXLINE(1534)								 ::lime::utils::ArrayBufferView this87 = this->_hx___indexBufferData;
HXDLIN(1534)								 ::__hxcpp_memory_set_ui16(this87->buffer->b,(this87->byteOffset + 22),2);
            							}
HXLINE(1537)							{
HXLINE(1537)								 ::lime::utils::ArrayBufferView this88 = this->_hx___indexBufferData;
HXDLIN(1537)								 ::__hxcpp_memory_set_ui16(this88->buffer->b,(this88->byteOffset + 24),6);
            							}
HXLINE(1538)							{
HXLINE(1538)								 ::lime::utils::ArrayBufferView this89 = this->_hx___indexBufferData;
HXDLIN(1538)								 ::__hxcpp_memory_set_ui16(this89->buffer->b,(this89->byteOffset + 26),4);
            							}
HXLINE(1539)							{
HXLINE(1539)								 ::lime::utils::ArrayBufferView this90 = this->_hx___indexBufferData;
HXDLIN(1539)								 ::__hxcpp_memory_set_ui16(this90->buffer->b,(this90->byteOffset + 28),7);
            							}
HXLINE(1540)							{
HXLINE(1540)								 ::lime::utils::ArrayBufferView this91 = this->_hx___indexBufferData;
HXDLIN(1540)								 ::__hxcpp_memory_set_ui16(this91->buffer->b,(this91->byteOffset + 30),7);
            							}
HXLINE(1541)							{
HXLINE(1541)								 ::lime::utils::ArrayBufferView this92 = this->_hx___indexBufferData;
HXDLIN(1541)								 ::__hxcpp_memory_set_ui16(this92->buffer->b,(this92->byteOffset + 32),4);
            							}
HXLINE(1542)							{
HXLINE(1542)								 ::lime::utils::ArrayBufferView this93 = this->_hx___indexBufferData;
HXDLIN(1542)								 ::__hxcpp_memory_set_ui16(this93->buffer->b,(this93->byteOffset + 34),5);
            							}
HXLINE(1544)							this->_hx___indexBuffer = context->createIndexBuffer(18,null());
            						}
            					}
            				}
            			}
            			else {
HXLINE(1549)				this->_hx___indexBufferGrid = null();
            			}
HXLINE(1552)			if (hx::IsNull( this->_hx___indexBuffer )) {
HXLINE(1554)				 ::lime::utils::ArrayBufferView this94 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,6,6);
HXDLIN(1554)				this->_hx___indexBufferData = this94;
HXLINE(1555)				{
HXLINE(1555)					 ::lime::utils::ArrayBufferView this95 = this->_hx___indexBufferData;
HXDLIN(1555)					 ::__hxcpp_memory_set_ui16(this95->buffer->b,this95->byteOffset,0);
            				}
HXLINE(1556)				{
HXLINE(1556)					 ::lime::utils::ArrayBufferView this96 = this->_hx___indexBufferData;
HXDLIN(1556)					 ::__hxcpp_memory_set_ui16(this96->buffer->b,(this96->byteOffset + 2),1);
            				}
HXLINE(1557)				{
HXLINE(1557)					 ::lime::utils::ArrayBufferView this97 = this->_hx___indexBufferData;
HXDLIN(1557)					 ::__hxcpp_memory_set_ui16(this97->buffer->b,(this97->byteOffset + 4),2);
            				}
HXLINE(1558)				{
HXLINE(1558)					 ::lime::utils::ArrayBufferView this98 = this->_hx___indexBufferData;
HXDLIN(1558)					 ::__hxcpp_memory_set_ui16(this98->buffer->b,(this98->byteOffset + 6),2);
            				}
HXLINE(1559)				{
HXLINE(1559)					 ::lime::utils::ArrayBufferView this99 = this->_hx___indexBufferData;
HXDLIN(1559)					 ::__hxcpp_memory_set_ui16(this99->buffer->b,(this99->byteOffset + 8),1);
            				}
HXLINE(1560)				{
HXLINE(1560)					 ::lime::utils::ArrayBufferView this100 = this->_hx___indexBufferData;
HXDLIN(1560)					 ::__hxcpp_memory_set_ui16(this100->buffer->b,(this100->byteOffset + 10),3);
            				}
HXLINE(1561)				this->_hx___indexBuffer = context->createIndexBuffer(6,null());
            			}
HXLINE(1564)			this->_hx___indexBuffer->uploadFromTypedArray(this->_hx___indexBufferData,null());
            		}
HXLINE(1568)		return this->_hx___indexBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getIndexBuffer,return )

 ::openfl::display3D::VertexBuffer3D BitmapData_obj::getVertexBuffer( ::openfl::display3D::Context3D context, ::openfl::geom::Rectangle scale9Grid, ::openfl::display::DisplayObject targetObject){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1580_getVertexBuffer)
HXLINE(1581)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(1586)		bool _hx_tmp;
HXDLIN(1586)		bool _hx_tmp1;
HXDLIN(1586)		bool _hx_tmp2;
HXDLIN(1586)		bool _hx_tmp3;
HXDLIN(1586)		if (hx::IsNotNull( this->_hx___vertexBuffer )) {
HXLINE(1586)			_hx_tmp3 = hx::IsNotEq( this->_hx___vertexBufferContext,context->_hx___context );
            		}
            		else {
HXLINE(1586)			_hx_tmp3 = true;
            		}
HXDLIN(1586)		if (!(_hx_tmp3)) {
HXLINE(1588)			if (hx::IsNotNull( scale9Grid )) {
HXLINE(1586)				_hx_tmp2 = hx::IsNull( this->_hx___vertexBufferGrid );
            			}
            			else {
HXLINE(1586)				_hx_tmp2 = false;
            			}
            		}
            		else {
HXLINE(1586)			_hx_tmp2 = true;
            		}
HXDLIN(1586)		if (!(_hx_tmp2)) {
HXLINE(1589)			if (hx::IsNotNull( this->_hx___vertexBufferGrid )) {
HXLINE(1586)				_hx_tmp1 = !(this->_hx___vertexBufferGrid->equals(scale9Grid));
            			}
            			else {
HXLINE(1586)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1586)			_hx_tmp1 = true;
            		}
HXDLIN(1586)		if (!(_hx_tmp1)) {
HXLINE(1590)			if (hx::IsNotNull( targetObject )) {
HXLINE(1591)				bool _hx_tmp4;
HXDLIN(1591)				bool _hx_tmp5;
HXDLIN(1591)				Float _hx_tmp6 = this->_hx___vertexBufferWidth;
HXDLIN(1591)				if ((_hx_tmp6 == targetObject->get_width())) {
HXLINE(1592)					Float _hx_tmp7 = this->_hx___vertexBufferHeight;
HXLINE(1591)					_hx_tmp5 = (_hx_tmp7 != targetObject->get_height());
            				}
            				else {
HXLINE(1591)					_hx_tmp5 = true;
            				}
HXDLIN(1591)				if (!(_hx_tmp5)) {
HXLINE(1593)					Float _hx_tmp8 = this->_hx___vertexBufferScaleX;
HXLINE(1591)					_hx_tmp4 = (_hx_tmp8 != targetObject->get_scaleX());
            				}
            				else {
HXLINE(1591)					_hx_tmp4 = true;
            				}
HXDLIN(1591)				if (!(_hx_tmp4)) {
HXLINE(1594)					Float _hx_tmp9 = this->_hx___vertexBufferScaleY;
HXLINE(1586)					_hx_tmp = (_hx_tmp9 != targetObject->get_scaleY());
            				}
            				else {
HXLINE(1586)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1586)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1586)			_hx_tmp = true;
            		}
HXDLIN(1586)		if (_hx_tmp) {
HXLINE(1618)			this->_hx___uvRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->width,this->height);
HXLINE(1620)			int uvWidth = 1;
HXLINE(1621)			int uvHeight = 1;
HXLINE(1638)			this->_hx___vertexBufferContext = context->_hx___context;
HXLINE(1639)			this->_hx___vertexBuffer = null();
HXLINE(1641)			bool _hx_tmp10;
HXDLIN(1641)			if (hx::IsNotNull( scale9Grid )) {
HXLINE(1641)				_hx_tmp10 = hx::IsNotNull( targetObject );
            			}
            			else {
HXLINE(1641)				_hx_tmp10 = false;
            			}
HXDLIN(1641)			if (_hx_tmp10) {
HXLINE(1643)				if (hx::IsNull( this->_hx___vertexBufferGrid )) {
HXLINE(1643)					this->_hx___vertexBufferGrid =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            				}
HXLINE(1644)				this->_hx___vertexBufferGrid->copyFrom(scale9Grid);
HXLINE(1646)				this->_hx___vertexBufferWidth = targetObject->get_width();
HXLINE(1647)				this->_hx___vertexBufferHeight = targetObject->get_height();
HXLINE(1648)				this->_hx___vertexBufferScaleX = targetObject->get_scaleX();
HXLINE(1649)				this->_hx___vertexBufferScaleY = targetObject->get_scaleY();
HXLINE(1651)				Float centerX = scale9Grid->width;
HXLINE(1652)				Float centerY = scale9Grid->height;
HXLINE(1653)				bool _hx_tmp11;
HXDLIN(1653)				if ((centerX != 0)) {
HXLINE(1653)					_hx_tmp11 = (centerY != 0);
            				}
            				else {
HXLINE(1653)					_hx_tmp11 = false;
            				}
HXDLIN(1653)				if (_hx_tmp11) {
HXLINE(1655)					 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,224,8);
HXDLIN(1655)					this->_hx___vertexBufferData = this1;
HXLINE(1657)					Float left = scale9Grid->x;
HXLINE(1658)					Float top = scale9Grid->y;
HXLINE(1659)					Float right = ((( (Float)(this->width) ) - centerX) - left);
HXLINE(1660)					Float bottom = ((( (Float)(this->height) ) - centerY) - top);
HXLINE(1662)					Float uvLeft = (left / ( (Float)(this->width) ));
HXLINE(1663)					Float uvTop = (top / ( (Float)(this->height) ));
HXLINE(1664)					Float uvCenterX = (centerX / ( (Float)(this->width) ));
HXLINE(1665)					Float uvCenterY = (centerY / ( (Float)(this->height) ));
HXLINE(1666)					Float uvRight = (right / ( (Float)(this->width) ));
HXLINE(1667)					Float uvBottom = (bottom / ( (Float)(this->height) ));
HXLINE(1669)					Float renderedLeft = (left / targetObject->get_scaleX());
HXLINE(1670)					Float renderedTop = (top / targetObject->get_scaleY());
HXLINE(1671)					Float renderedRight = (right / targetObject->get_scaleX());
HXLINE(1672)					Float renderedBottom = (bottom / targetObject->get_scaleY());
HXLINE(1673)					Float renderedCenterX = targetObject->get_width();
HXDLIN(1673)					Float renderedCenterX1 = (((renderedCenterX / targetObject->get_scaleX()) - renderedLeft) - renderedRight);
HXLINE(1674)					Float renderedCenterY = targetObject->get_height();
HXDLIN(1674)					Float renderedCenterY1 = (((renderedCenterY / targetObject->get_scaleY()) - renderedTop) - renderedBottom);
HXLINE(1685)					{
HXLINE(1685)						 ::lime::utils::ArrayBufferView this2 = this->_hx___vertexBufferData;
HXDLIN(1685)						 ::__hxcpp_memory_set_float(this2->buffer->b,this2->byteOffset,renderedLeft);
            					}
HXLINE(1686)					{
HXLINE(1686)						 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(1686)						 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + 4),renderedTop);
            					}
HXLINE(1687)					{
HXLINE(1687)						 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(1687)						Float val = (( (Float)(uvWidth) ) * uvLeft);
HXDLIN(1687)						 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + 12),val);
            					}
HXLINE(1688)					{
HXLINE(1688)						 ::lime::utils::ArrayBufferView this5 = this->_hx___vertexBufferData;
HXDLIN(1688)						Float val1 = (( (Float)(uvHeight) ) * uvTop);
HXDLIN(1688)						 ::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + 16),val1);
            					}
HXLINE(1690)					{
HXLINE(1690)						 ::lime::utils::ArrayBufferView this6 = this->_hx___vertexBufferData;
HXDLIN(1690)						 ::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + 60),renderedTop);
            					}
HXLINE(1691)					{
HXLINE(1691)						 ::lime::utils::ArrayBufferView this7 = this->_hx___vertexBufferData;
HXDLIN(1691)						Float val2 = (( (Float)(uvHeight) ) * uvTop);
HXDLIN(1691)						 ::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + 72),val2);
            					}
HXLINE(1693)					{
HXLINE(1693)						 ::lime::utils::ArrayBufferView this8 = this->_hx___vertexBufferData;
HXDLIN(1693)						 ::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + 112),renderedLeft);
            					}
HXLINE(1694)					{
HXLINE(1694)						 ::lime::utils::ArrayBufferView this9 = this->_hx___vertexBufferData;
HXDLIN(1694)						Float val3 = (( (Float)(uvWidth) ) * uvLeft);
HXDLIN(1694)						 ::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + 124),val3);
            					}
HXLINE(1697)					{
HXLINE(1697)						 ::lime::utils::ArrayBufferView this10 = this->_hx___vertexBufferData;
HXDLIN(1697)						Float val4 = (renderedLeft + renderedCenterX1);
HXDLIN(1697)						 ::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + 224),val4);
            					}
HXLINE(1698)					{
HXLINE(1698)						 ::lime::utils::ArrayBufferView this11 = this->_hx___vertexBufferData;
HXDLIN(1698)						 ::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + 228),renderedTop);
            					}
HXLINE(1699)					{
HXLINE(1699)						 ::lime::utils::ArrayBufferView this12 = this->_hx___vertexBufferData;
HXDLIN(1699)						Float val5 = (( (Float)(uvWidth) ) * (uvLeft + uvCenterX));
HXDLIN(1699)						 ::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + 236),val5);
            					}
HXLINE(1700)					{
HXLINE(1700)						 ::lime::utils::ArrayBufferView this13 = this->_hx___vertexBufferData;
HXDLIN(1700)						Float val6 = (( (Float)(uvHeight) ) * uvTop);
HXDLIN(1700)						 ::__hxcpp_memory_set_float(this13->buffer->b,(this13->byteOffset + 240),val6);
            					}
HXLINE(1702)					{
HXLINE(1702)						 ::lime::utils::ArrayBufferView this14 = this->_hx___vertexBufferData;
HXDLIN(1702)						Float val7 = (renderedLeft + renderedCenterX1);
HXDLIN(1702)						 ::__hxcpp_memory_set_float(this14->buffer->b,(this14->byteOffset + 280),val7);
            					}
HXLINE(1703)					{
HXLINE(1703)						 ::lime::utils::ArrayBufferView this15 = this->_hx___vertexBufferData;
HXDLIN(1703)						Float val8 = (( (Float)(uvWidth) ) * (uvLeft + uvCenterX));
HXDLIN(1703)						 ::__hxcpp_memory_set_float(this15->buffer->b,(this15->byteOffset + 292),val8);
            					}
HXLINE(1706)					{
HXLINE(1706)						 ::lime::utils::ArrayBufferView this16 = this->_hx___vertexBufferData;
HXDLIN(1706)						Float val9 = ( (Float)(this->width) );
HXDLIN(1706)						 ::__hxcpp_memory_set_float(this16->buffer->b,(this16->byteOffset + 336),val9);
            					}
HXLINE(1707)					{
HXLINE(1707)						 ::lime::utils::ArrayBufferView this17 = this->_hx___vertexBufferData;
HXDLIN(1707)						 ::__hxcpp_memory_set_float(this17->buffer->b,(this17->byteOffset + 340),renderedTop);
            					}
HXLINE(1708)					{
HXLINE(1708)						 ::lime::utils::ArrayBufferView this18 = this->_hx___vertexBufferData;
HXDLIN(1708)						 ::__hxcpp_memory_set_float(this18->buffer->b,(this18->byteOffset + 348),uvWidth);
            					}
HXLINE(1709)					{
HXLINE(1709)						 ::lime::utils::ArrayBufferView this19 = this->_hx___vertexBufferData;
HXDLIN(1709)						Float val10 = (( (Float)(uvHeight) ) * uvTop);
HXDLIN(1709)						 ::__hxcpp_memory_set_float(this19->buffer->b,(this19->byteOffset + 352),val10);
            					}
HXLINE(1711)					{
HXLINE(1711)						 ::lime::utils::ArrayBufferView this20 = this->_hx___vertexBufferData;
HXDLIN(1711)						Float val11 = ( (Float)(this->width) );
HXDLIN(1711)						 ::__hxcpp_memory_set_float(this20->buffer->b,(this20->byteOffset + 392),val11);
            					}
HXLINE(1712)					{
HXLINE(1712)						 ::lime::utils::ArrayBufferView this21 = this->_hx___vertexBufferData;
HXDLIN(1712)						 ::__hxcpp_memory_set_float(this21->buffer->b,(this21->byteOffset + 404),uvWidth);
            					}
HXLINE(1715)					{
HXLINE(1715)						 ::lime::utils::ArrayBufferView this22 = this->_hx___vertexBufferData;
HXDLIN(1715)						 ::__hxcpp_memory_set_float(this22->buffer->b,(this22->byteOffset + 448),renderedLeft);
            					}
HXLINE(1716)					{
HXLINE(1716)						 ::lime::utils::ArrayBufferView this23 = this->_hx___vertexBufferData;
HXDLIN(1716)						Float val12 = (renderedTop + renderedCenterY1);
HXDLIN(1716)						 ::__hxcpp_memory_set_float(this23->buffer->b,(this23->byteOffset + 452),val12);
            					}
HXLINE(1717)					{
HXLINE(1717)						 ::lime::utils::ArrayBufferView this24 = this->_hx___vertexBufferData;
HXDLIN(1717)						Float val13 = (( (Float)(uvWidth) ) * uvLeft);
HXDLIN(1717)						 ::__hxcpp_memory_set_float(this24->buffer->b,(this24->byteOffset + 460),val13);
            					}
HXLINE(1718)					{
HXLINE(1718)						 ::lime::utils::ArrayBufferView this25 = this->_hx___vertexBufferData;
HXDLIN(1718)						Float val14 = (( (Float)(uvHeight) ) * (uvTop + uvCenterY));
HXDLIN(1718)						 ::__hxcpp_memory_set_float(this25->buffer->b,(this25->byteOffset + 464),val14);
            					}
HXLINE(1720)					{
HXLINE(1720)						 ::lime::utils::ArrayBufferView this26 = this->_hx___vertexBufferData;
HXDLIN(1720)						Float val15 = (renderedTop + renderedCenterY1);
HXDLIN(1720)						 ::__hxcpp_memory_set_float(this26->buffer->b,(this26->byteOffset + 508),val15);
            					}
HXLINE(1721)					{
HXLINE(1721)						 ::lime::utils::ArrayBufferView this27 = this->_hx___vertexBufferData;
HXDLIN(1721)						Float val16 = (( (Float)(uvHeight) ) * (uvTop + uvCenterY));
HXDLIN(1721)						 ::__hxcpp_memory_set_float(this27->buffer->b,(this27->byteOffset + 520),val16);
            					}
HXLINE(1724)					{
HXLINE(1724)						 ::lime::utils::ArrayBufferView this28 = this->_hx___vertexBufferData;
HXDLIN(1724)						Float val17 = (renderedLeft + renderedCenterX1);
HXDLIN(1724)						 ::__hxcpp_memory_set_float(this28->buffer->b,(this28->byteOffset + 560),val17);
            					}
HXLINE(1725)					{
HXLINE(1725)						 ::lime::utils::ArrayBufferView this29 = this->_hx___vertexBufferData;
HXDLIN(1725)						Float val18 = (renderedTop + renderedCenterY1);
HXDLIN(1725)						 ::__hxcpp_memory_set_float(this29->buffer->b,(this29->byteOffset + 564),val18);
            					}
HXLINE(1726)					{
HXLINE(1726)						 ::lime::utils::ArrayBufferView this30 = this->_hx___vertexBufferData;
HXDLIN(1726)						Float val19 = (( (Float)(uvWidth) ) * (uvLeft + uvCenterX));
HXDLIN(1726)						 ::__hxcpp_memory_set_float(this30->buffer->b,(this30->byteOffset + 572),val19);
            					}
HXLINE(1727)					{
HXLINE(1727)						 ::lime::utils::ArrayBufferView this31 = this->_hx___vertexBufferData;
HXDLIN(1727)						Float val20 = (( (Float)(uvHeight) ) * (uvTop + uvCenterY));
HXDLIN(1727)						 ::__hxcpp_memory_set_float(this31->buffer->b,(this31->byteOffset + 576),val20);
            					}
HXLINE(1730)					{
HXLINE(1730)						 ::lime::utils::ArrayBufferView this32 = this->_hx___vertexBufferData;
HXDLIN(1730)						Float val21 = ( (Float)(this->width) );
HXDLIN(1730)						 ::__hxcpp_memory_set_float(this32->buffer->b,(this32->byteOffset + 616),val21);
            					}
HXLINE(1731)					{
HXLINE(1731)						 ::lime::utils::ArrayBufferView this33 = this->_hx___vertexBufferData;
HXDLIN(1731)						Float val22 = (renderedTop + renderedCenterY1);
HXDLIN(1731)						 ::__hxcpp_memory_set_float(this33->buffer->b,(this33->byteOffset + 620),val22);
            					}
HXLINE(1732)					{
HXLINE(1732)						 ::lime::utils::ArrayBufferView this34 = this->_hx___vertexBufferData;
HXDLIN(1732)						 ::__hxcpp_memory_set_float(this34->buffer->b,(this34->byteOffset + 628),uvWidth);
            					}
HXLINE(1733)					{
HXLINE(1733)						 ::lime::utils::ArrayBufferView this35 = this->_hx___vertexBufferData;
HXDLIN(1733)						Float val23 = (( (Float)(uvHeight) ) * (uvTop + uvCenterY));
HXDLIN(1733)						 ::__hxcpp_memory_set_float(this35->buffer->b,(this35->byteOffset + 632),val23);
            					}
HXLINE(1736)					{
HXLINE(1736)						 ::lime::utils::ArrayBufferView this36 = this->_hx___vertexBufferData;
HXDLIN(1736)						 ::__hxcpp_memory_set_float(this36->buffer->b,(this36->byteOffset + 672),renderedLeft);
            					}
HXLINE(1737)					{
HXLINE(1737)						 ::lime::utils::ArrayBufferView this37 = this->_hx___vertexBufferData;
HXDLIN(1737)						Float val24 = ( (Float)(this->height) );
HXDLIN(1737)						 ::__hxcpp_memory_set_float(this37->buffer->b,(this37->byteOffset + 676),val24);
            					}
HXLINE(1738)					{
HXLINE(1738)						 ::lime::utils::ArrayBufferView this38 = this->_hx___vertexBufferData;
HXDLIN(1738)						Float val25 = (( (Float)(uvWidth) ) * uvLeft);
HXDLIN(1738)						 ::__hxcpp_memory_set_float(this38->buffer->b,(this38->byteOffset + 684),val25);
            					}
HXLINE(1739)					{
HXLINE(1739)						 ::lime::utils::ArrayBufferView this39 = this->_hx___vertexBufferData;
HXDLIN(1739)						 ::__hxcpp_memory_set_float(this39->buffer->b,(this39->byteOffset + 688),uvHeight);
            					}
HXLINE(1741)					{
HXLINE(1741)						 ::lime::utils::ArrayBufferView this40 = this->_hx___vertexBufferData;
HXDLIN(1741)						Float val26 = ( (Float)(this->height) );
HXDLIN(1741)						 ::__hxcpp_memory_set_float(this40->buffer->b,(this40->byteOffset + 732),val26);
            					}
HXLINE(1742)					{
HXLINE(1742)						 ::lime::utils::ArrayBufferView this41 = this->_hx___vertexBufferData;
HXDLIN(1742)						 ::__hxcpp_memory_set_float(this41->buffer->b,(this41->byteOffset + 744),uvHeight);
            					}
HXLINE(1745)					{
HXLINE(1745)						 ::lime::utils::ArrayBufferView this42 = this->_hx___vertexBufferData;
HXDLIN(1745)						Float val27 = (renderedLeft + renderedCenterX1);
HXDLIN(1745)						 ::__hxcpp_memory_set_float(this42->buffer->b,(this42->byteOffset + 784),val27);
            					}
HXLINE(1746)					{
HXLINE(1746)						 ::lime::utils::ArrayBufferView this43 = this->_hx___vertexBufferData;
HXDLIN(1746)						Float val28 = ( (Float)(this->height) );
HXDLIN(1746)						 ::__hxcpp_memory_set_float(this43->buffer->b,(this43->byteOffset + 788),val28);
            					}
HXLINE(1747)					{
HXLINE(1747)						 ::lime::utils::ArrayBufferView this44 = this->_hx___vertexBufferData;
HXDLIN(1747)						Float val29 = (( (Float)(uvWidth) ) * (uvLeft + uvCenterX));
HXDLIN(1747)						 ::__hxcpp_memory_set_float(this44->buffer->b,(this44->byteOffset + 796),val29);
            					}
HXLINE(1748)					{
HXLINE(1748)						 ::lime::utils::ArrayBufferView this45 = this->_hx___vertexBufferData;
HXDLIN(1748)						 ::__hxcpp_memory_set_float(this45->buffer->b,(this45->byteOffset + 800),uvHeight);
            					}
HXLINE(1751)					{
HXLINE(1751)						 ::lime::utils::ArrayBufferView this46 = this->_hx___vertexBufferData;
HXDLIN(1751)						Float val30 = ( (Float)(this->width) );
HXDLIN(1751)						 ::__hxcpp_memory_set_float(this46->buffer->b,(this46->byteOffset + 840),val30);
            					}
HXLINE(1752)					{
HXLINE(1752)						 ::lime::utils::ArrayBufferView this47 = this->_hx___vertexBufferData;
HXDLIN(1752)						Float val31 = ( (Float)(this->height) );
HXDLIN(1752)						 ::__hxcpp_memory_set_float(this47->buffer->b,(this47->byteOffset + 844),val31);
            					}
HXLINE(1753)					{
HXLINE(1753)						 ::lime::utils::ArrayBufferView this48 = this->_hx___vertexBufferData;
HXDLIN(1753)						 ::__hxcpp_memory_set_float(this48->buffer->b,(this48->byteOffset + 852),uvWidth);
            					}
HXLINE(1754)					{
HXLINE(1754)						 ::lime::utils::ArrayBufferView this49 = this->_hx___vertexBufferData;
HXDLIN(1754)						 ::__hxcpp_memory_set_float(this49->buffer->b,(this49->byteOffset + 856),uvHeight);
            					}
HXLINE(1756)					this->_hx___vertexBuffer = context->createVertexBuffer(16,14,null());
            				}
            				else {
HXLINE(1758)					bool _hx_tmp12;
HXDLIN(1758)					if ((centerX == 0)) {
HXLINE(1758)						_hx_tmp12 = (centerY != 0);
            					}
            					else {
HXLINE(1758)						_hx_tmp12 = false;
            					}
HXDLIN(1758)					if (_hx_tmp12) {
HXLINE(1760)						 ::lime::utils::ArrayBufferView this50 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,112,8);
HXDLIN(1760)						this->_hx___vertexBufferData = this50;
HXLINE(1762)						Float top1 = scale9Grid->y;
HXLINE(1763)						Float bottom1 = ((( (Float)(this->height) ) - centerY) - top1);
HXLINE(1765)						Float uvTop1 = (top1 / ( (Float)(this->height) ));
HXLINE(1766)						Float uvCenterY1 = (centerY / ( (Float)(this->height) ));
HXLINE(1767)						Float uvBottom1 = (bottom1 / ( (Float)(this->height) ));
HXLINE(1769)						Float renderedTop1 = (top1 / targetObject->get_scaleY());
HXLINE(1770)						Float renderedBottom1 = (bottom1 / targetObject->get_scaleY());
HXLINE(1771)						Float renderedCenterY2 = targetObject->get_height();
HXDLIN(1771)						Float renderedCenterY3 = (((renderedCenterY2 / targetObject->get_scaleY()) - renderedTop1) - renderedBottom1);
HXLINE(1773)						Float renderedWidth = targetObject->get_width();
HXDLIN(1773)						Float renderedWidth1 = (renderedWidth / targetObject->get_scaleX());
HXLINE(1784)						{
HXLINE(1784)							 ::lime::utils::ArrayBufferView this51 = this->_hx___vertexBufferData;
HXDLIN(1784)							 ::__hxcpp_memory_set_float(this51->buffer->b,this51->byteOffset,renderedWidth1);
            						}
HXLINE(1785)						{
HXLINE(1785)							 ::lime::utils::ArrayBufferView this52 = this->_hx___vertexBufferData;
HXDLIN(1785)							 ::__hxcpp_memory_set_float(this52->buffer->b,(this52->byteOffset + 4),renderedTop1);
            						}
HXLINE(1786)						{
HXLINE(1786)							 ::lime::utils::ArrayBufferView this53 = this->_hx___vertexBufferData;
HXDLIN(1786)							 ::__hxcpp_memory_set_float(this53->buffer->b,(this53->byteOffset + 12),uvWidth);
            						}
HXLINE(1787)						{
HXLINE(1787)							 ::lime::utils::ArrayBufferView this54 = this->_hx___vertexBufferData;
HXDLIN(1787)							Float val32 = (( (Float)(uvHeight) ) * uvTop1);
HXDLIN(1787)							 ::__hxcpp_memory_set_float(this54->buffer->b,(this54->byteOffset + 16),val32);
            						}
HXLINE(1789)						{
HXLINE(1789)							 ::lime::utils::ArrayBufferView this55 = this->_hx___vertexBufferData;
HXDLIN(1789)							 ::__hxcpp_memory_set_float(this55->buffer->b,(this55->byteOffset + 60),renderedTop1);
            						}
HXLINE(1790)						{
HXLINE(1790)							 ::lime::utils::ArrayBufferView this56 = this->_hx___vertexBufferData;
HXDLIN(1790)							Float val33 = (( (Float)(uvHeight) ) * uvTop1);
HXDLIN(1790)							 ::__hxcpp_memory_set_float(this56->buffer->b,(this56->byteOffset + 72),val33);
            						}
HXLINE(1792)						{
HXLINE(1792)							 ::lime::utils::ArrayBufferView this57 = this->_hx___vertexBufferData;
HXDLIN(1792)							 ::__hxcpp_memory_set_float(this57->buffer->b,(this57->byteOffset + 112),renderedWidth1);
            						}
HXLINE(1793)						{
HXLINE(1793)							 ::lime::utils::ArrayBufferView this58 = this->_hx___vertexBufferData;
HXDLIN(1793)							 ::__hxcpp_memory_set_float(this58->buffer->b,(this58->byteOffset + 124),uvWidth);
            						}
HXLINE(1796)						{
HXLINE(1796)							 ::lime::utils::ArrayBufferView this59 = this->_hx___vertexBufferData;
HXDLIN(1796)							 ::__hxcpp_memory_set_float(this59->buffer->b,(this59->byteOffset + 224),renderedWidth1);
            						}
HXLINE(1797)						{
HXLINE(1797)							 ::lime::utils::ArrayBufferView this60 = this->_hx___vertexBufferData;
HXDLIN(1797)							Float val34 = (renderedTop1 + renderedCenterY3);
HXDLIN(1797)							 ::__hxcpp_memory_set_float(this60->buffer->b,(this60->byteOffset + 228),val34);
            						}
HXLINE(1798)						{
HXLINE(1798)							 ::lime::utils::ArrayBufferView this61 = this->_hx___vertexBufferData;
HXDLIN(1798)							 ::__hxcpp_memory_set_float(this61->buffer->b,(this61->byteOffset + 236),uvWidth);
            						}
HXLINE(1799)						{
HXLINE(1799)							 ::lime::utils::ArrayBufferView this62 = this->_hx___vertexBufferData;
HXDLIN(1799)							Float val35 = (( (Float)(uvHeight) ) * (uvTop1 + uvCenterY1));
HXDLIN(1799)							 ::__hxcpp_memory_set_float(this62->buffer->b,(this62->byteOffset + 240),val35);
            						}
HXLINE(1801)						{
HXLINE(1801)							 ::lime::utils::ArrayBufferView this63 = this->_hx___vertexBufferData;
HXDLIN(1801)							Float val36 = (renderedTop1 + renderedCenterY3);
HXDLIN(1801)							 ::__hxcpp_memory_set_float(this63->buffer->b,(this63->byteOffset + 284),val36);
            						}
HXLINE(1802)						{
HXLINE(1802)							 ::lime::utils::ArrayBufferView this64 = this->_hx___vertexBufferData;
HXDLIN(1802)							Float val37 = (( (Float)(uvHeight) ) * (uvTop1 + uvCenterY1));
HXDLIN(1802)							 ::__hxcpp_memory_set_float(this64->buffer->b,(this64->byteOffset + 296),val37);
            						}
HXLINE(1805)						{
HXLINE(1805)							 ::lime::utils::ArrayBufferView this65 = this->_hx___vertexBufferData;
HXDLIN(1805)							 ::__hxcpp_memory_set_float(this65->buffer->b,(this65->byteOffset + 336),renderedWidth1);
            						}
HXLINE(1806)						{
HXLINE(1806)							 ::lime::utils::ArrayBufferView this66 = this->_hx___vertexBufferData;
HXDLIN(1806)							Float val38 = ( (Float)(this->height) );
HXDLIN(1806)							 ::__hxcpp_memory_set_float(this66->buffer->b,(this66->byteOffset + 340),val38);
            						}
HXLINE(1807)						{
HXLINE(1807)							 ::lime::utils::ArrayBufferView this67 = this->_hx___vertexBufferData;
HXDLIN(1807)							 ::__hxcpp_memory_set_float(this67->buffer->b,(this67->byteOffset + 348),uvWidth);
            						}
HXLINE(1808)						{
HXLINE(1808)							 ::lime::utils::ArrayBufferView this68 = this->_hx___vertexBufferData;
HXDLIN(1808)							 ::__hxcpp_memory_set_float(this68->buffer->b,(this68->byteOffset + 352),uvHeight);
            						}
HXLINE(1810)						{
HXLINE(1810)							 ::lime::utils::ArrayBufferView this69 = this->_hx___vertexBufferData;
HXDLIN(1810)							Float val39 = ( (Float)(this->height) );
HXDLIN(1810)							 ::__hxcpp_memory_set_float(this69->buffer->b,(this69->byteOffset + 396),val39);
            						}
HXLINE(1811)						{
HXLINE(1811)							 ::lime::utils::ArrayBufferView this70 = this->_hx___vertexBufferData;
HXDLIN(1811)							 ::__hxcpp_memory_set_float(this70->buffer->b,(this70->byteOffset + 408),uvHeight);
            						}
HXLINE(1813)						this->_hx___vertexBuffer = context->createVertexBuffer(8,14,null());
            					}
            					else {
HXLINE(1815)						bool _hx_tmp13;
HXDLIN(1815)						if ((centerY == 0)) {
HXLINE(1815)							_hx_tmp13 = (centerX != 0);
            						}
            						else {
HXLINE(1815)							_hx_tmp13 = false;
            						}
HXDLIN(1815)						if (_hx_tmp13) {
HXLINE(1817)							 ::lime::utils::ArrayBufferView this71 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,112,8);
HXDLIN(1817)							this->_hx___vertexBufferData = this71;
HXLINE(1819)							Float left1 = scale9Grid->x;
HXLINE(1820)							Float right1 = ((( (Float)(this->width) ) - centerX) - left1);
HXLINE(1822)							Float uvLeft1 = (left1 / ( (Float)(this->width) ));
HXLINE(1823)							Float uvCenterX1 = (centerX / ( (Float)(this->width) ));
HXLINE(1824)							Float uvRight1 = (right1 / ( (Float)(this->width) ));
HXLINE(1826)							Float renderedLeft1 = (left1 / targetObject->get_scaleX());
HXLINE(1827)							Float renderedRight1 = (right1 / targetObject->get_scaleX());
HXLINE(1828)							Float renderedCenterX2 = targetObject->get_width();
HXDLIN(1828)							Float renderedCenterX3 = (((renderedCenterX2 / targetObject->get_scaleX()) - renderedLeft1) - renderedRight1);
HXLINE(1830)							Float renderedHeight = targetObject->get_height();
HXDLIN(1830)							Float renderedHeight1 = (renderedHeight / targetObject->get_scaleY());
HXLINE(1837)							{
HXLINE(1837)								 ::lime::utils::ArrayBufferView this72 = this->_hx___vertexBufferData;
HXDLIN(1837)								 ::__hxcpp_memory_set_float(this72->buffer->b,this72->byteOffset,renderedLeft1);
            							}
HXLINE(1838)							{
HXLINE(1838)								 ::lime::utils::ArrayBufferView this73 = this->_hx___vertexBufferData;
HXDLIN(1838)								 ::__hxcpp_memory_set_float(this73->buffer->b,(this73->byteOffset + 4),renderedHeight1);
            							}
HXLINE(1839)							{
HXLINE(1839)								 ::lime::utils::ArrayBufferView this74 = this->_hx___vertexBufferData;
HXDLIN(1839)								Float val40 = (( (Float)(uvWidth) ) * uvLeft1);
HXDLIN(1839)								 ::__hxcpp_memory_set_float(this74->buffer->b,(this74->byteOffset + 12),val40);
            							}
HXLINE(1840)							{
HXLINE(1840)								 ::lime::utils::ArrayBufferView this75 = this->_hx___vertexBufferData;
HXDLIN(1840)								 ::__hxcpp_memory_set_float(this75->buffer->b,(this75->byteOffset + 16),uvHeight);
            							}
HXLINE(1842)							{
HXLINE(1842)								 ::lime::utils::ArrayBufferView this76 = this->_hx___vertexBufferData;
HXDLIN(1842)								 ::__hxcpp_memory_set_float(this76->buffer->b,(this76->byteOffset + 60),renderedHeight1);
            							}
HXLINE(1843)							{
HXLINE(1843)								 ::lime::utils::ArrayBufferView this77 = this->_hx___vertexBufferData;
HXDLIN(1843)								 ::__hxcpp_memory_set_float(this77->buffer->b,(this77->byteOffset + 72),uvHeight);
            							}
HXLINE(1845)							{
HXLINE(1845)								 ::lime::utils::ArrayBufferView this78 = this->_hx___vertexBufferData;
HXDLIN(1845)								 ::__hxcpp_memory_set_float(this78->buffer->b,(this78->byteOffset + 112),renderedLeft1);
            							}
HXLINE(1846)							{
HXLINE(1846)								 ::lime::utils::ArrayBufferView this79 = this->_hx___vertexBufferData;
HXDLIN(1846)								Float val41 = (( (Float)(uvWidth) ) * uvLeft1);
HXDLIN(1846)								 ::__hxcpp_memory_set_float(this79->buffer->b,(this79->byteOffset + 124),val41);
            							}
HXLINE(1849)							{
HXLINE(1849)								 ::lime::utils::ArrayBufferView this80 = this->_hx___vertexBufferData;
HXDLIN(1849)								Float val42 = (renderedLeft1 + renderedCenterX3);
HXDLIN(1849)								 ::__hxcpp_memory_set_float(this80->buffer->b,(this80->byteOffset + 224),val42);
            							}
HXLINE(1850)							{
HXLINE(1850)								 ::lime::utils::ArrayBufferView this81 = this->_hx___vertexBufferData;
HXDLIN(1850)								 ::__hxcpp_memory_set_float(this81->buffer->b,(this81->byteOffset + 228),renderedHeight1);
            							}
HXLINE(1851)							{
HXLINE(1851)								 ::lime::utils::ArrayBufferView this82 = this->_hx___vertexBufferData;
HXDLIN(1851)								Float val43 = (( (Float)(uvWidth) ) * (uvLeft1 + uvCenterX1));
HXDLIN(1851)								 ::__hxcpp_memory_set_float(this82->buffer->b,(this82->byteOffset + 236),val43);
            							}
HXLINE(1852)							{
HXLINE(1852)								 ::lime::utils::ArrayBufferView this83 = this->_hx___vertexBufferData;
HXDLIN(1852)								 ::__hxcpp_memory_set_float(this83->buffer->b,(this83->byteOffset + 240),uvHeight);
            							}
HXLINE(1854)							{
HXLINE(1854)								 ::lime::utils::ArrayBufferView this84 = this->_hx___vertexBufferData;
HXDLIN(1854)								Float val44 = (renderedLeft1 + renderedCenterX3);
HXDLIN(1854)								 ::__hxcpp_memory_set_float(this84->buffer->b,(this84->byteOffset + 280),val44);
            							}
HXLINE(1855)							{
HXLINE(1855)								 ::lime::utils::ArrayBufferView this85 = this->_hx___vertexBufferData;
HXDLIN(1855)								Float val45 = (( (Float)(uvWidth) ) * (uvLeft1 + uvCenterX1));
HXDLIN(1855)								 ::__hxcpp_memory_set_float(this85->buffer->b,(this85->byteOffset + 292),val45);
            							}
HXLINE(1858)							{
HXLINE(1858)								 ::lime::utils::ArrayBufferView this86 = this->_hx___vertexBufferData;
HXDLIN(1858)								Float val46 = ( (Float)(this->width) );
HXDLIN(1858)								 ::__hxcpp_memory_set_float(this86->buffer->b,(this86->byteOffset + 336),val46);
            							}
HXLINE(1859)							{
HXLINE(1859)								 ::lime::utils::ArrayBufferView this87 = this->_hx___vertexBufferData;
HXDLIN(1859)								 ::__hxcpp_memory_set_float(this87->buffer->b,(this87->byteOffset + 340),renderedHeight1);
            							}
HXLINE(1860)							{
HXLINE(1860)								 ::lime::utils::ArrayBufferView this88 = this->_hx___vertexBufferData;
HXDLIN(1860)								 ::__hxcpp_memory_set_float(this88->buffer->b,(this88->byteOffset + 348),uvWidth);
            							}
HXLINE(1861)							{
HXLINE(1861)								 ::lime::utils::ArrayBufferView this89 = this->_hx___vertexBufferData;
HXDLIN(1861)								 ::__hxcpp_memory_set_float(this89->buffer->b,(this89->byteOffset + 352),uvHeight);
            							}
HXLINE(1863)							{
HXLINE(1863)								 ::lime::utils::ArrayBufferView this90 = this->_hx___vertexBufferData;
HXDLIN(1863)								Float val47 = ( (Float)(this->width) );
HXDLIN(1863)								 ::__hxcpp_memory_set_float(this90->buffer->b,(this90->byteOffset + 392),val47);
            							}
HXLINE(1864)							{
HXLINE(1864)								 ::lime::utils::ArrayBufferView this91 = this->_hx___vertexBufferData;
HXDLIN(1864)								 ::__hxcpp_memory_set_float(this91->buffer->b,(this91->byteOffset + 404),uvWidth);
            							}
HXLINE(1866)							this->_hx___vertexBuffer = context->createVertexBuffer(8,14,null());
            						}
            					}
            				}
            			}
            			else {
HXLINE(1871)				this->_hx___vertexBufferGrid = null();
            			}
HXLINE(1874)			if (hx::IsNull( this->_hx___vertexBuffer )) {
HXLINE(1876)				 ::lime::utils::ArrayBufferView this92 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,56,8);
HXDLIN(1876)				this->_hx___vertexBufferData = this92;
HXLINE(1878)				{
HXLINE(1878)					 ::lime::utils::ArrayBufferView this93 = this->_hx___vertexBufferData;
HXDLIN(1878)					Float val48 = ( (Float)(this->width) );
HXDLIN(1878)					 ::__hxcpp_memory_set_float(this93->buffer->b,this93->byteOffset,val48);
            				}
HXLINE(1879)				{
HXLINE(1879)					 ::lime::utils::ArrayBufferView this94 = this->_hx___vertexBufferData;
HXDLIN(1879)					Float val49 = ( (Float)(this->height) );
HXDLIN(1879)					 ::__hxcpp_memory_set_float(this94->buffer->b,(this94->byteOffset + 4),val49);
            				}
HXLINE(1880)				{
HXLINE(1880)					 ::lime::utils::ArrayBufferView this95 = this->_hx___vertexBufferData;
HXDLIN(1880)					 ::__hxcpp_memory_set_float(this95->buffer->b,(this95->byteOffset + 12),uvWidth);
            				}
HXLINE(1881)				{
HXLINE(1881)					 ::lime::utils::ArrayBufferView this96 = this->_hx___vertexBufferData;
HXDLIN(1881)					 ::__hxcpp_memory_set_float(this96->buffer->b,(this96->byteOffset + 16),uvHeight);
            				}
HXLINE(1882)				{
HXLINE(1882)					 ::lime::utils::ArrayBufferView this97 = this->_hx___vertexBufferData;
HXDLIN(1882)					Float val50 = ( (Float)(this->height) );
HXDLIN(1882)					 ::__hxcpp_memory_set_float(this97->buffer->b,(this97->byteOffset + 60),val50);
            				}
HXLINE(1883)				{
HXLINE(1883)					 ::lime::utils::ArrayBufferView this98 = this->_hx___vertexBufferData;
HXDLIN(1883)					 ::__hxcpp_memory_set_float(this98->buffer->b,(this98->byteOffset + 72),uvHeight);
            				}
HXLINE(1884)				{
HXLINE(1884)					 ::lime::utils::ArrayBufferView this99 = this->_hx___vertexBufferData;
HXDLIN(1884)					Float val51 = ( (Float)(this->width) );
HXDLIN(1884)					 ::__hxcpp_memory_set_float(this99->buffer->b,(this99->byteOffset + 112),val51);
            				}
HXLINE(1885)				{
HXLINE(1885)					 ::lime::utils::ArrayBufferView this100 = this->_hx___vertexBufferData;
HXDLIN(1885)					 ::__hxcpp_memory_set_float(this100->buffer->b,(this100->byteOffset + 124),uvWidth);
            				}
HXLINE(1887)				this->_hx___vertexBuffer = context->createVertexBuffer(3,14,null());
            			}
HXLINE(1912)			this->_hx___vertexBuffer->uploadFromTypedArray(this->_hx___vertexBufferData,null());
            		}
HXLINE(1986)		return this->_hx___vertexBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getVertexBuffer,return )

 ::openfl::geom::Rectangle BitmapData_obj::getColorBoundsRect(int mask,int color,hx::Null< bool >  __o_findColor){
            		bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2024_getColorBoundsRect)
HXLINE(2026)		if (!(this->readable)) {
HXLINE(2026)			return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->width,this->height);
            		}
HXLINE(2028)		bool _hx_tmp;
HXDLIN(2028)		if (!(!(this->transparent))) {
HXLINE(2028)			_hx_tmp = (((mask >> 24) & 255) > 0);
            		}
            		else {
HXLINE(2028)			_hx_tmp = true;
            		}
HXDLIN(2028)		if (_hx_tmp) {
HXLINE(2030)			int color1 = color;
HXLINE(2031)			if (((hx::UShr(color1,24) & 255) == 0)) {
HXLINE(2031)				color1 = 0;
            			}
            		}
HXLINE(2034)		 ::lime::math::Rectangle rect = this->image->getColorBoundsRect(mask,color,findColor,1);
HXLINE(2035)		return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,rect->x,rect->y,rect->width,rect->height);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getColorBoundsRect,return )

int BitmapData_obj::getPixel(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2065_getPixel)
HXLINE(2066)		if (!(this->readable)) {
HXLINE(2066)			return 0;
            		}
HXLINE(2068)		return this->image->getPixel(x,y,1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel,return )

int BitmapData_obj::getPixel32(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2097_getPixel32)
HXLINE(2098)		if (!(this->readable)) {
HXLINE(2098)			return 0;
            		}
HXLINE(2100)		return this->image->getPixel32(x,y,1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel32,return )

 ::openfl::utils::ByteArrayData BitmapData_obj::getPixels( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2116_getPixels)
HXLINE(2118)		if (!(this->readable)) {
HXLINE(2118)			return null();
            		}
HXLINE(2119)		if (hx::IsNull( rect )) {
HXLINE(2119)			rect = this->rect;
            		}
HXLINE(2120)		 ::lime::graphics::Image byteArray = this->image;
HXDLIN(2120)		 ::openfl::utils::ByteArrayData byteArray1 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(byteArray->getPixels(rect->_hx___toLimeRectangle(),1));
HXLINE(2122)		byteArray1->_hx___endian = 0;
HXLINE(2123)		return byteArray1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getPixels,return )

 ::Dynamic BitmapData_obj::getSurface(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2139_getSurface)
HXLINE(2141)		if (!(this->readable)) {
HXLINE(2141)			return null();
            		}
HXLINE(2143)		if (hx::IsNull( this->_hx___surface )) {
HXLINE(2145)			this->_hx___surface = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::fromImage(this->image);
            		}
HXLINE(2148)		return this->_hx___surface;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,getSurface,return )

 ::openfl::display3D::textures::RectangleTexture BitmapData_obj::getTexture( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2163_getTexture)
HXLINE(2164)		if (!(this->_hx___isValid)) {
HXLINE(2164)			return null();
            		}
HXLINE(2166)		bool _hx_tmp;
HXDLIN(2166)		if (hx::IsNotNull( this->_hx___texture )) {
HXLINE(2166)			_hx_tmp = hx::IsNotEq( this->_hx___textureContext,context->_hx___context );
            		}
            		else {
HXLINE(2166)			_hx_tmp = true;
            		}
HXDLIN(2166)		if (_hx_tmp) {
HXLINE(2168)			this->_hx___textureContext = context->_hx___context;
HXLINE(2169)			this->_hx___texture = context->createRectangleTexture(this->width,this->height,1,false);
HXLINE(2176)			this->_hx___textureVersion = -1;
            		}
HXLINE(2184)		bool _hx_tmp1;
HXDLIN(2184)		if (hx::IsNotNull( this->image )) {
HXLINE(2184)			_hx_tmp1 = (this->image->version > this->_hx___textureVersion);
            		}
            		else {
HXLINE(2184)			_hx_tmp1 = false;
            		}
HXDLIN(2184)		if (_hx_tmp1) {
HXLINE(2186)			if (hx::IsNotNull( this->_hx___surface )) {
HXLINE(2188)				::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(this->_hx___surface);
            			}
HXLINE(2191)			 ::lime::graphics::Image textureImage = this->image;
HXLINE(2204)			bool _hx_tmp2;
HXDLIN(2204)			if (!(textureImage->get_premultiplied())) {
HXLINE(2204)				_hx_tmp2 = textureImage->get_transparent();
            			}
            			else {
HXLINE(2204)				_hx_tmp2 = false;
            			}
HXDLIN(2204)			if (_hx_tmp2) {
HXLINE(2206)				textureImage = textureImage->clone();
HXLINE(2207)				textureImage->set_premultiplied(true);
            			}
HXLINE(2214)			this->_hx___texture->_hx___uploadFromImage(textureImage);
HXLINE(2216)			this->_hx___textureVersion = this->image->version;
HXLINE(2218)			this->_hx___textureWidth = textureImage->buffer->width;
HXLINE(2219)			this->_hx___textureHeight = textureImage->buffer->height;
            		}
HXLINE(2222)		bool _hx_tmp3;
HXDLIN(2222)		if (!(this->readable)) {
HXLINE(2222)			_hx_tmp3 = hx::IsNotNull( this->image );
            		}
            		else {
HXLINE(2222)			_hx_tmp3 = false;
            		}
HXDLIN(2222)		if (_hx_tmp3) {
HXLINE(2224)			this->_hx___surface = null();
HXLINE(2225)			this->image = null();
            		}
HXLINE(2229)		return this->_hx___texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getTexture,return )

 ::openfl::_Vector::IntVector BitmapData_obj::getVector( ::openfl::geom::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2241_getVector)
HXLINE(2242)		 ::openfl::utils::ByteArrayData pixels = this->getPixels(rect);
HXLINE(2243)		int _hx_int = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels);
HXDLIN(2243)		Float length;
HXDLIN(2243)		if ((_hx_int < 0)) {
HXLINE(2243)			length = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(2243)			length = (_hx_int + ((Float)0.0));
            		}
HXDLIN(2243)		int int1 = 4;
HXDLIN(2243)		Float length1;
HXDLIN(2243)		if ((int1 < 0)) {
HXLINE(2243)			length1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE(2243)			length1 = (int1 + ((Float)0.0));
            		}
HXDLIN(2243)		int length2 = ::Std_obj::_hx_int((length / length1));
HXLINE(2244)		 ::openfl::_Vector::IntVector result =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length2,true,null());
HXLINE(2246)		{
HXLINE(2246)			int _g = 0;
HXDLIN(2246)			int _g1 = length2;
HXDLIN(2246)			while((_g < _g1)){
HXLINE(2246)				_g = (_g + 1);
HXDLIN(2246)				int i = (_g - 1);
HXLINE(2248)				result->set(i,pixels->readUnsignedInt());
            			}
            		}
HXLINE(2251)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getVector,return )

::Array< ::Dynamic> BitmapData_obj::histogram( ::openfl::geom::Rectangle hRect){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2264_histogram)
HXLINE(2265)		 ::openfl::geom::Rectangle rect;
HXDLIN(2265)		if (hx::IsNotNull( hRect )) {
HXLINE(2265)			rect = hRect;
            		}
            		else {
HXLINE(2265)			rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->width,this->height);
            		}
HXLINE(2266)		 ::openfl::utils::ByteArrayData pixels = this->getPixels(rect);
HXLINE(2267)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(2267)		{
HXLINE(2267)			::Array< int > _g1 = ::Array_obj< int >::__new(0);
HXDLIN(2267)			{
HXLINE(2267)				int _g2 = 0;
HXDLIN(2267)				while((_g2 < 256)){
HXLINE(2267)					_g2 = (_g2 + 1);
HXDLIN(2267)					int j = (_g2 - 1);
HXDLIN(2267)					_g1->push(0);
            				}
            			}
HXDLIN(2267)			_g->push(_g1);
HXDLIN(2267)			::Array< int > _g11 = ::Array_obj< int >::__new(0);
HXDLIN(2267)			{
HXLINE(2267)				int _g21 = 0;
HXDLIN(2267)				while((_g21 < 256)){
HXLINE(2267)					_g21 = (_g21 + 1);
HXDLIN(2267)					int j1 = (_g21 - 1);
HXDLIN(2267)					_g11->push(0);
            				}
            			}
HXDLIN(2267)			_g->push(_g11);
HXDLIN(2267)			::Array< int > _g12 = ::Array_obj< int >::__new(0);
HXDLIN(2267)			{
HXLINE(2267)				int _g22 = 0;
HXDLIN(2267)				while((_g22 < 256)){
HXLINE(2267)					_g22 = (_g22 + 1);
HXDLIN(2267)					int j2 = (_g22 - 1);
HXDLIN(2267)					_g12->push(0);
            				}
            			}
HXDLIN(2267)			_g->push(_g12);
HXDLIN(2267)			::Array< int > _g13 = ::Array_obj< int >::__new(0);
HXDLIN(2267)			{
HXLINE(2267)				int _g23 = 0;
HXDLIN(2267)				while((_g23 < 256)){
HXLINE(2267)					_g23 = (_g23 + 1);
HXDLIN(2267)					int j3 = (_g23 - 1);
HXDLIN(2267)					_g13->push(0);
            				}
            			}
HXDLIN(2267)			_g->push(_g13);
            		}
HXDLIN(2267)		::Array< ::Dynamic> result = _g;
HXLINE(2269)		{
HXLINE(2269)			int _g14 = 0;
HXDLIN(2269)			int _g24 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels);
HXDLIN(2269)			while((_g14 < _g24)){
HXLINE(2269)				_g14 = (_g14 + 1);
HXDLIN(2269)				int i = (_g14 - 1);
HXLINE(2271)				::Array< int > result1 = result->__get(hx::Mod(i,4)).StaticCast< ::Array< int > >();
HXDLIN(2271)				++result1[pixels->readUnsignedByte()];
            			}
            		}
HXLINE(2274)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,histogram,return )

bool BitmapData_obj::hitTest( ::openfl::geom::Point firstPoint,int firstAlphaThreshold, ::Dynamic secondObject, ::openfl::geom::Point secondBitmapDataPoint,hx::Null< int >  __o_secondAlphaThreshold){
            		int secondAlphaThreshold = __o_secondAlphaThreshold.Default(1);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2309_hitTest)
HXLINE(2310)		if (!(this->readable)) {
HXLINE(2310)			return false;
            		}
HXLINE(2313)		if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::Bitmap >())) {
HXLINE(2315)			secondObject = hx::TCast<  ::openfl::display::Bitmap >::cast(secondObject)->_hx___bitmapData;
            		}
HXLINE(2319)		if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Point >())) {
HXLINE(2321)			 ::openfl::geom::Point secondPoint = ( ( ::openfl::geom::Point)(secondObject) );
HXLINE(2323)			int x = ::Std_obj::_hx_int((secondPoint->x - firstPoint->x));
HXLINE(2324)			int y = ::Std_obj::_hx_int((secondPoint->y - firstPoint->y));
HXLINE(2326)			if (this->rect->contains(( (Float)(x) ),( (Float)(y) ))) {
HXLINE(2328)				int pixel = this->getPixel32(x,y);
HXLINE(2330)				if ((((pixel >> 24) & 255) > firstAlphaThreshold)) {
HXLINE(2332)					return true;
            				}
            			}
            		}
            		else {
HXLINE(2336)			if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::BitmapData >())) {
HXLINE(2338)				 ::openfl::display::BitmapData secondBitmapData = ( ( ::openfl::display::BitmapData)(secondObject) );
HXLINE(2339)				int x1;
HXDLIN(2339)				int y1;
HXLINE(2341)				if (hx::IsNull( secondBitmapDataPoint )) {
HXLINE(2343)					x1 = 0;
HXLINE(2344)					y1 = 0;
            				}
            				else {
HXLINE(2348)					x1 = ::Math_obj::round((secondBitmapDataPoint->x - firstPoint->x));
HXLINE(2349)					y1 = ::Math_obj::round((secondBitmapDataPoint->y - firstPoint->y));
            				}
HXLINE(2352)				 ::openfl::geom::Rectangle hitRect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2353)				hitRect->setTo(( (Float)(x1) ),( (Float)(y1) ),( (Float)(secondBitmapData->width) ),( (Float)(secondBitmapData->height) ));
HXLINE(2355)				if (this->rect->intersects(hitRect)) {
HXLINE(2357)					if ((x1 < 0)) {
HXLINE(2359)						hitRect->x = ( (Float)(0) );
HXLINE(2360)						hitRect->width = ::Math_obj::min(( (Float)((secondBitmapData->width + x1)) ),( (Float)(this->width) ));
            					}
            					else {
HXLINE(2364)						hitRect->width = ::Math_obj::min(( (Float)(secondBitmapData->width) ),( (Float)((this->width - x1)) ));
            					}
HXLINE(2367)					if ((y1 < 0)) {
HXLINE(2369)						hitRect->y = ( (Float)(0) );
HXLINE(2370)						hitRect->height = ::Math_obj::min(( (Float)((secondBitmapData->height + y1)) ),( (Float)(this->height) ));
            					}
            					else {
HXLINE(2374)						hitRect->height = ::Math_obj::min(( (Float)(secondBitmapData->height) ),( (Float)((this->height - y1)) ));
            					}
HXLINE(2377)					 ::openfl::utils::ByteArrayData pixels = this->getPixels(hitRect);
HXLINE(2379)					Float _hx_tmp;
HXDLIN(2379)					if ((x1 < 0)) {
HXLINE(2379)						_hx_tmp = ( (Float)(-(x1)) );
            					}
            					else {
HXLINE(2379)						_hx_tmp = ( (Float)(0) );
            					}
HXDLIN(2379)					hitRect->x = _hx_tmp;
HXLINE(2380)					Float _hx_tmp1;
HXDLIN(2380)					if ((y1 < 0)) {
HXLINE(2380)						_hx_tmp1 = ( (Float)(-(y1)) );
            					}
            					else {
HXLINE(2380)						_hx_tmp1 = ( (Float)(0) );
            					}
HXDLIN(2380)					hitRect->y = _hx_tmp1;
HXLINE(2382)					 ::openfl::utils::ByteArrayData testPixels = secondBitmapData->getPixels(hitRect);
HXLINE(2384)					int length = ::Std_obj::_hx_int((hitRect->width * hitRect->height));
HXLINE(2385)					int pixel1;
HXDLIN(2385)					int testPixel;
HXLINE(2387)					{
HXLINE(2387)						int _g = 0;
HXDLIN(2387)						int _g1 = length;
HXDLIN(2387)						while((_g < _g1)){
HXLINE(2387)							_g = (_g + 1);
HXDLIN(2387)							int i = (_g - 1);
HXLINE(2389)							pixel1 = pixels->readUnsignedInt();
HXLINE(2390)							testPixel = testPixels->readUnsignedInt();
HXLINE(2392)							bool _hx_tmp2;
HXDLIN(2392)							int a = (hx::UShr(pixel1,24) & 255);
HXDLIN(2392)							bool aNeg = (a < 0);
HXDLIN(2392)							bool bNeg = (firstAlphaThreshold < 0);
HXDLIN(2392)							bool _hx_tmp3;
HXDLIN(2392)							if ((aNeg != bNeg)) {
HXLINE(2392)								_hx_tmp3 = aNeg;
            							}
            							else {
HXLINE(2392)								_hx_tmp3 = (a > firstAlphaThreshold);
            							}
HXDLIN(2392)							if (_hx_tmp3) {
HXLINE(2392)								int a1 = (hx::UShr(testPixel,24) & 255);
HXDLIN(2392)								bool aNeg1 = (a1 < 0);
HXDLIN(2392)								bool bNeg1 = (secondAlphaThreshold < 0);
HXDLIN(2392)								if ((aNeg1 != bNeg1)) {
HXLINE(2392)									_hx_tmp2 = aNeg1;
            								}
            								else {
HXLINE(2392)									_hx_tmp2 = (a1 > secondAlphaThreshold);
            								}
            							}
            							else {
HXLINE(2392)								_hx_tmp2 = false;
            							}
HXDLIN(2392)							if (_hx_tmp2) {
HXLINE(2394)								::openfl::geom::Rectangle_obj::_hx___pool->release(hitRect);
HXLINE(2395)								return true;
            							}
            						}
            					}
            				}
HXLINE(2400)				::openfl::geom::Rectangle_obj::_hx___pool->release(hitRect);
            			}
            			else {
HXLINE(2402)				if (::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Rectangle >())) {
HXLINE(2404)					 ::openfl::geom::Rectangle secondRectangle = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2405)					secondRectangle->copyFrom(( ( ::openfl::geom::Rectangle)(secondObject) ));
HXLINE(2406)					secondRectangle->offset(-(firstPoint->x),-(firstPoint->y));
HXLINE(2407)					secondRectangle->_hx___contract(( (Float)(0) ),( (Float)(0) ),( (Float)(this->width) ),( (Float)(this->height) ));
HXLINE(2409)					bool _hx_tmp4;
HXDLIN(2409)					if ((secondRectangle->width > 0)) {
HXLINE(2409)						_hx_tmp4 = (secondRectangle->height > 0);
            					}
            					else {
HXLINE(2409)						_hx_tmp4 = false;
            					}
HXDLIN(2409)					if (_hx_tmp4) {
HXLINE(2411)						 ::openfl::utils::ByteArrayData pixels1 = this->getPixels(secondRectangle);
HXLINE(2412)						int _hx_int = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels1);
HXDLIN(2412)						Float length1;
HXDLIN(2412)						if ((_hx_int < 0)) {
HXLINE(2412)							length1 = (((Float)4294967296.0) + _hx_int);
            						}
            						else {
HXLINE(2412)							length1 = (_hx_int + ((Float)0.0));
            						}
HXDLIN(2412)						int int1 = 4;
HXDLIN(2412)						Float length2;
HXDLIN(2412)						if ((int1 < 0)) {
HXLINE(2412)							length2 = (((Float)4294967296.0) + int1);
            						}
            						else {
HXLINE(2412)							length2 = (int1 + ((Float)0.0));
            						}
HXDLIN(2412)						int length3 = ::Std_obj::_hx_int((length1 / length2));
HXLINE(2413)						int pixel2;
HXLINE(2415)						{
HXLINE(2415)							int _g2 = 0;
HXDLIN(2415)							int _g11 = length3;
HXDLIN(2415)							while((_g2 < _g11)){
HXLINE(2415)								_g2 = (_g2 + 1);
HXDLIN(2415)								int i1 = (_g2 - 1);
HXLINE(2417)								pixel2 = pixels1->readUnsignedInt();
HXLINE(2419)								int a2 = (hx::UShr(pixel2,24) & 255);
HXDLIN(2419)								bool aNeg2 = (a2 < 0);
HXDLIN(2419)								bool bNeg2 = (firstAlphaThreshold < 0);
HXDLIN(2419)								bool _hx_tmp5;
HXDLIN(2419)								if ((aNeg2 != bNeg2)) {
HXLINE(2419)									_hx_tmp5 = aNeg2;
            								}
            								else {
HXLINE(2419)									_hx_tmp5 = (a2 > firstAlphaThreshold);
            								}
HXDLIN(2419)								if (_hx_tmp5) {
HXLINE(2421)									::openfl::geom::Rectangle_obj::_hx___pool->release(secondRectangle);
HXLINE(2422)									return true;
            								}
            							}
            						}
            					}
HXLINE(2427)					::openfl::geom::Rectangle_obj::_hx___pool->release(secondRectangle);
            				}
            			}
            		}
HXLINE(2430)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,hitTest,return )

void BitmapData_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2516_lock)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,lock,(void))

void BitmapData_obj::merge( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2557_merge)
HXLINE(2559)		bool _hx_tmp;
HXDLIN(2559)		bool _hx_tmp1;
HXDLIN(2559)		bool _hx_tmp2;
HXDLIN(2559)		bool _hx_tmp3;
HXDLIN(2559)		if (!(!(this->readable))) {
HXLINE(2559)			_hx_tmp3 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE(2559)			_hx_tmp3 = true;
            		}
HXDLIN(2559)		if (!(_hx_tmp3)) {
HXLINE(2559)			_hx_tmp2 = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE(2559)			_hx_tmp2 = true;
            		}
HXDLIN(2559)		if (!(_hx_tmp2)) {
HXLINE(2559)			_hx_tmp1 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(2559)			_hx_tmp1 = true;
            		}
HXDLIN(2559)		if (!(_hx_tmp1)) {
HXLINE(2559)			_hx_tmp = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(2559)			_hx_tmp = true;
            		}
HXDLIN(2559)		if (_hx_tmp) {
HXLINE(2559)			return;
            		}
HXLINE(2560)		 ::lime::graphics::Image _hx_tmp4 = this->image;
HXDLIN(2560)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN(2560)		 ::lime::math::Rectangle _hx_tmp5 = sourceRect->_hx___toLimeRectangle();
HXDLIN(2560)		_hx_tmp4->merge(sourceBitmapData1,_hx_tmp5,destPoint->_hx___toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,merge,(void))

void BitmapData_obj::noise(int randomSeed,hx::Null< int >  __o_low,hx::Null< int >  __o_high,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< int >,randomSeed1) HXARGC(0)
            		int _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2601_noise)
HXLINE(2602)			randomSeed1[0] = ((randomSeed1->__get(0) * (int)1103515245) + 12345);
HXLINE(2603)			return hx::Mod(::Std_obj::_hx_int(::Math_obj::abs((( (Float)(randomSeed1->__get(0)) ) / ( (Float)(65536) )))),32768);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		int low = __o_low.Default(0);
            		int high = __o_high.Default(255);
            		int channelOptions = __o_channelOptions.Default(7);
            		bool grayScale = __o_grayScale.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2593_noise)
HXDLIN(2593)		::Array< int > randomSeed1 = ::Array_obj< int >::__new(1)->init(0,randomSeed);
HXLINE(2595)		if (!(this->readable)) {
HXLINE(2595)			return;
            		}
HXLINE(2600)		 ::Dynamic func =  ::Dynamic(new _hx_Closure_0(randomSeed1));
HXLINE(2598)		 ::Dynamic rand = func;
HXLINE(2606)		rand();
HXLINE(2609)		int range = (high - low);
HXLINE(2611)		bool redChannel = ((channelOptions & 1) == 1);
HXLINE(2612)		bool greenChannel = (((channelOptions & 2) >> 1) == 1);
HXLINE(2613)		bool blueChannel = (((channelOptions & 4) >> 2) == 1);
HXLINE(2614)		bool alphaChannel = (((channelOptions & 8) >> 3) == 1);
HXLINE(2616)		{
HXLINE(2616)			int _g = 0;
HXDLIN(2616)			int _g1 = this->height;
HXDLIN(2616)			while((_g < _g1)){
HXLINE(2616)				_g = (_g + 1);
HXDLIN(2616)				int y = (_g - 1);
HXLINE(2618)				{
HXLINE(2618)					int _g2 = 0;
HXDLIN(2618)					int _g11 = this->width;
HXDLIN(2618)					while((_g2 < _g11)){
HXLINE(2618)						_g2 = (_g2 + 1);
HXDLIN(2618)						int x = (_g2 - 1);
HXLINE(2621)						int red = 0;
HXLINE(2622)						int blue = 0;
HXLINE(2623)						int green = 0;
HXLINE(2624)						int alpha = 255;
HXLINE(2626)						if (grayScale) {
HXLINE(2628)							blue = (low + hx::Mod(rand(),range));
HXDLIN(2628)							green = blue;
HXDLIN(2628)							red = green;
HXLINE(2629)							alpha = 255;
            						}
            						else {
HXLINE(2633)							if (redChannel) {
HXLINE(2633)								red = (low + hx::Mod(rand(),range));
            							}
HXLINE(2634)							if (greenChannel) {
HXLINE(2634)								green = (low + hx::Mod(rand(),range));
            							}
HXLINE(2635)							if (blueChannel) {
HXLINE(2635)								blue = (low + hx::Mod(rand(),range));
            							}
HXLINE(2636)							if (alphaChannel) {
HXLINE(2636)								alpha = (low + hx::Mod(rand(),range));
            							}
            						}
HXLINE(2639)						int rgb = alpha;
HXLINE(2640)						rgb = ((rgb << 8) + red);
HXLINE(2641)						rgb = ((rgb << 8) + green);
HXLINE(2642)						rgb = ((rgb << 8) + blue);
HXLINE(2644)						this->setPixel32(x,y,rgb);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,noise,(void))

void BitmapData_obj::paletteMap( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::Array< int > redArray,::Array< int > greenArray,::Array< int > blueArray,::Array< int > alphaArray){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2691_paletteMap)
HXLINE(2692)		int sw = ::Std_obj::_hx_int(sourceRect->width);
HXLINE(2693)		int sh = ::Std_obj::_hx_int(sourceRect->height);
HXLINE(2695)		 ::openfl::utils::ByteArrayData pixels = sourceBitmapData->getPixels(sourceRect);
HXLINE(2697)		int pixelValue;
HXDLIN(2697)		int r;
HXDLIN(2697)		int g;
HXDLIN(2697)		int b;
HXDLIN(2697)		int a;
HXDLIN(2697)		int color;
HXLINE(2699)		{
HXLINE(2699)			int _g = 0;
HXDLIN(2699)			int _g1 = (sh * sw);
HXDLIN(2699)			while((_g < _g1)){
HXLINE(2699)				_g = (_g + 1);
HXDLIN(2699)				int i = (_g - 1);
HXLINE(2701)				pixelValue = pixels->readUnsignedInt();
HXLINE(2703)				if (hx::IsNull( alphaArray )) {
HXLINE(2703)					a = (pixelValue & -16777216);
            				}
            				else {
HXLINE(2703)					a = alphaArray->__get(((pixelValue >> 24) & 255));
            				}
HXLINE(2704)				if (hx::IsNull( redArray )) {
HXLINE(2704)					r = (pixelValue & 16711680);
            				}
            				else {
HXLINE(2704)					r = redArray->__get(((pixelValue >> 16) & 255));
            				}
HXLINE(2705)				if (hx::IsNull( greenArray )) {
HXLINE(2705)					g = (pixelValue & 65280);
            				}
            				else {
HXLINE(2705)					g = greenArray->__get(((pixelValue >> 8) & 255));
            				}
HXLINE(2706)				if (hx::IsNull( blueArray )) {
HXLINE(2706)					b = (pixelValue & 255);
            				}
            				else {
HXLINE(2706)					b = blueArray->__get((pixelValue & 255));
            				}
HXLINE(2708)				color = (((a + r) + g) + b);
HXLINE(2710)				pixels->position = (i * 4);
HXLINE(2711)				pixels->writeUnsignedInt(color);
            			}
            		}
HXLINE(2714)		pixels->position = 0;
HXLINE(2715)		 ::openfl::geom::Rectangle destRect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(2716)		destRect->setTo(destPoint->x,destPoint->y,( (Float)(sw) ),( (Float)(sh) ));
HXLINE(2717)		this->setPixels(destRect,pixels);
HXLINE(2718)		::openfl::geom::Rectangle_obj::_hx___pool->release(destRect);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,paletteMap,(void))

void BitmapData_obj::perlinNoise(Float baseX,Float baseY,int numOctaves,int randomSeed,bool stitch,bool fractalNoise,hx::Null< int >  __o_channelOptions,hx::Null< bool >  __o_grayScale,::Array< ::Dynamic> offsets){
            		int channelOptions = __o_channelOptions.Default(7);
            		bool grayScale = __o_grayScale.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2789_perlinNoise)
HXLINE(2790)		if (!(this->readable)) {
HXLINE(2790)			return;
            		}
HXLINE(2791)		 ::openfl::_internal::utils::PerlinNoise noise =  ::openfl::_internal::utils::PerlinNoise_obj::__alloc( HX_CTX ,randomSeed,numOctaves,channelOptions,grayScale,((Float)0.5),stitch,((Float)0.15));
HXLINE(2792)		noise->fill(hx::ObjectPtr<OBJ_>(this),baseX,baseY,( (Float)(0) ));
            	}


HX_DEFINE_DYNAMIC_FUNC9(BitmapData_obj,perlinNoise,(void))

void BitmapData_obj::scroll(int x,int y){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2805_scroll)
HXLINE(2806)		if (!(this->readable)) {
HXLINE(2806)			return;
            		}
HXLINE(2807)		this->image->scroll(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,scroll,(void))

void BitmapData_obj::setPixel(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2828_setPixel)
HXLINE(2829)		if (!(this->readable)) {
HXLINE(2829)			return;
            		}
HXLINE(2831)		this->image->setPixel(x,y,color,1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel,(void))

void BitmapData_obj::setPixel32(int x,int y,int color){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2867_setPixel32)
HXLINE(2868)		if (!(this->readable)) {
HXLINE(2868)			return;
            		}
HXLINE(2870)		this->image->setPixel32(x,y,color,1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel32,(void))

void BitmapData_obj::setPixels( ::openfl::geom::Rectangle rect, ::openfl::utils::ByteArrayData byteArray){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2894_setPixels)
HXLINE(2895)		bool _hx_tmp;
HXDLIN(2895)		if (!(!(this->readable))) {
HXLINE(2895)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(2895)			_hx_tmp = true;
            		}
HXDLIN(2895)		if (_hx_tmp) {
HXLINE(2895)			return;
            		}
HXLINE(2897)		Float length = ((rect->width * rect->height) * ( (Float)(4) ));
HXLINE(2898)		int _hx_int = (byteArray->length - byteArray->position);
HXDLIN(2898)		Float _hx_tmp1;
HXDLIN(2898)		if ((_hx_int < 0)) {
HXLINE(2898)			_hx_tmp1 = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(2898)			_hx_tmp1 = (_hx_int + ((Float)0.0));
            		}
HXDLIN(2898)		if ((_hx_tmp1 < length)) {
HXLINE(2898)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("End of file was encountered.",d3,7b,d9,4f),2030));
            		}
HXLINE(2901)		 ::lime::graphics::Image _hx_tmp2 = this->image;
HXDLIN(2901)		 ::lime::math::Rectangle _hx_tmp3 = rect->_hx___toLimeRectangle();
HXDLIN(2901)		 ::lime::utils::BytePointerData _hx_tmp4 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytePointer(byteArray);
HXDLIN(2901)		_hx_tmp2->setPixels(_hx_tmp3,_hx_tmp4,1,::openfl::utils::_Endian::Endian_Impl__obj::toLimeEndian(( (int)(byteArray->_hx___endian) )));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setPixels,(void))

void BitmapData_obj::setVector( ::openfl::geom::Rectangle rect, ::openfl::_Vector::IntVector inputVector){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2915_setVector)
HXLINE(2916)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXDLIN(2916)		 ::openfl::utils::ByteArrayData byteArray = this1;
HXLINE(2917)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(byteArray,(inputVector->get_length() * 4));
HXLINE(2919)		{
HXLINE(2919)			 ::Dynamic color = inputVector->iterator();
HXDLIN(2919)			while(( (bool)(color->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2919)				int color1 = ( (int)(color->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2921)				byteArray->writeUnsignedInt(color1);
            			}
            		}
HXLINE(2924)		byteArray->position = 0;
HXLINE(2925)		this->setPixels(rect,byteArray);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setVector,(void))

int BitmapData_obj::threshold( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::String operation,int threshold,hx::Null< int >  __o_color,hx::Null< int >  __o_mask,hx::Null< bool >  __o_copySource){
            		int color = __o_color.Default(0);
            		int mask = __o_mask.Default(-1);
            		bool copySource = __o_copySource.Default(false);
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2978_threshold)
HXLINE(2979)		bool _hx_tmp;
HXDLIN(2979)		bool _hx_tmp1;
HXDLIN(2979)		bool _hx_tmp2;
HXDLIN(2979)		bool _hx_tmp3;
HXDLIN(2979)		bool _hx_tmp4;
HXDLIN(2979)		bool _hx_tmp5;
HXDLIN(2979)		if (hx::IsNotNull( sourceBitmapData )) {
HXLINE(2979)			_hx_tmp5 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(2979)			_hx_tmp5 = true;
            		}
HXDLIN(2979)		if (!(_hx_tmp5)) {
HXLINE(2979)			_hx_tmp4 = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(2979)			_hx_tmp4 = true;
            		}
HXDLIN(2979)		if (!(_hx_tmp4)) {
HXLINE(2979)			_hx_tmp3 = (sourceRect->x > sourceBitmapData->width);
            		}
            		else {
HXLINE(2979)			_hx_tmp3 = true;
            		}
HXDLIN(2979)		if (!(_hx_tmp3)) {
HXLINE(2979)			_hx_tmp2 = (sourceRect->y > sourceBitmapData->height);
            		}
            		else {
HXLINE(2979)			_hx_tmp2 = true;
            		}
HXDLIN(2979)		if (!(_hx_tmp2)) {
HXLINE(2979)			_hx_tmp1 = (destPoint->x > this->width);
            		}
            		else {
HXLINE(2979)			_hx_tmp1 = true;
            		}
HXDLIN(2979)		if (!(_hx_tmp1)) {
HXLINE(2979)			_hx_tmp = (destPoint->y > this->height);
            		}
            		else {
HXLINE(2979)			_hx_tmp = true;
            		}
HXDLIN(2979)		if (_hx_tmp) {
HXLINE(2987)			return 0;
            		}
HXLINE(2991)		 ::lime::graphics::Image _hx_tmp6 = this->image;
HXDLIN(2991)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN(2991)		 ::lime::math::Rectangle _hx_tmp7 = sourceRect->_hx___toLimeRectangle();
HXDLIN(2991)		return _hx_tmp6->threshold(sourceBitmapData1,_hx_tmp7,destPoint->_hx___toLimeVector2(),operation,threshold,color,mask,copySource,1);
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapData_obj,threshold,return )

void BitmapData_obj::unlock( ::openfl::geom::Rectangle changeRect){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3010_unlock)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,unlock,(void))

void BitmapData_obj::_hx___applyAlpha( ::openfl::utils::ByteArrayData alpha){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3013___applyAlpha)
HXLINE(3019)		 ::lime::utils::ArrayBufferView data = this->image->buffer->data;
HXLINE(3021)		{
HXLINE(3021)			int _g = 0;
HXDLIN(3021)			int _g1 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(alpha);
HXDLIN(3021)			while((_g < _g1)){
HXLINE(3021)				_g = (_g + 1);
HXDLIN(3021)				int i = (_g - 1);
HXLINE(3023)				{
HXLINE(3023)					int val = alpha->readUnsignedByte();
HXDLIN(3023)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + ((i * 4) + 3)),val);
            				}
            			}
            		}
HXLINE(3026)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___applyAlpha,(void))

void BitmapData_obj::_hx___drawCairo(::Dynamic source, ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3030___drawCairo)
HXLINE(3032)		 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXLINE(3034)		if (hx::IsEq( source,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(3036)			source = this->clone();
            		}
HXLINE(3039)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(3039)			cairo->set_antialias(1);
            		}
HXLINE(3041)		renderer->_hx___render(source);
HXLINE(3043)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(3043)			cairo->set_antialias(5);
            		}
HXLINE(3045)		::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(cairo->get_target());
HXLINE(3047)		this->image->dirty = true;
HXLINE(3048)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___drawCairo,(void))

void BitmapData_obj::_hx___drawCanvas(::Dynamic source, ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3053___drawCanvas)
HXLINE(3054)		 ::lime::graphics::ImageBuffer buffer = this->image->buffer;
HXLINE(3056)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(3056)			renderer->applySmoothing(buffer->_hx___srcContext,false);
            		}
HXLINE(3058)		renderer->_hx___render(source);
HXLINE(3060)		if (!(renderer->_hx___allowSmoothing)) {
HXLINE(3060)			renderer->applySmoothing(buffer->_hx___srcContext,true);
            		}
HXLINE(3062)		buffer->_hx___srcContext->__Field(HX_("setTransform",6a,ed,e2,69),hx::paccDynamic)(1,0,0,1,0,0);
HXLINE(3063)		buffer->_hx___srcImageData = null();
HXLINE(3064)		buffer->data = null();
HXLINE(3066)		this->image->dirty = true;
HXLINE(3067)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___drawCanvas,(void))

void BitmapData_obj::_hx___drawGL(::Dynamic source, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3071___drawGL)
HXLINE(3072)		 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(3074)		 ::openfl::display3D::textures::TextureBase cacheRTT = context->_hx___state->renderToTexture;
HXLINE(3075)		bool cacheRTTDepthStencil = context->_hx___state->renderToTextureDepthStencil;
HXLINE(3076)		int cacheRTTAntiAlias = context->_hx___state->renderToTextureAntiAlias;
HXLINE(3077)		int cacheRTTSurfaceSelector = context->_hx___state->renderToTextureSurfaceSelector;
HXLINE(3079)		context->setRenderToTexture(this->getTexture(context),true,null(),null());
HXLINE(3081)		renderer->_hx___render(source);
HXLINE(3083)		if (hx::IsNotNull( cacheRTT )) {
HXLINE(3085)			context->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            		}
            		else {
HXLINE(3089)			context->setRenderToBackBuffer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___drawGL,(void))

void BitmapData_obj::_hx___fillRect( ::openfl::geom::Rectangle rect,int color,bool allowFramebuffer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3094___fillRect)
HXLINE(3096)		if (hx::IsNull( rect )) {
HXLINE(3096)			return;
            		}
HXLINE(3098)		bool _hx_tmp;
HXDLIN(3098)		if (this->transparent) {
HXLINE(3098)			_hx_tmp = ((color & -16777216) == 0);
            		}
            		else {
HXLINE(3098)			_hx_tmp = false;
            		}
HXDLIN(3098)		if (_hx_tmp) {
HXLINE(3100)			color = 0;
            		}
HXLINE(3103)		bool _hx_tmp1;
HXDLIN(3103)		bool _hx_tmp2;
HXDLIN(3103)		bool _hx_tmp3;
HXDLIN(3103)		if (allowFramebuffer) {
HXLINE(3103)			_hx_tmp3 = hx::IsNotNull( this->_hx___texture );
            		}
            		else {
HXLINE(3103)			_hx_tmp3 = false;
            		}
HXDLIN(3103)		if (_hx_tmp3) {
HXLINE(3103)			_hx_tmp2 = hx::IsNotNull( this->_hx___texture->_hx___glFramebuffer );
            		}
            		else {
HXLINE(3103)			_hx_tmp2 = false;
            		}
HXDLIN(3103)		if (_hx_tmp2) {
HXLINE(3103)			_hx_tmp1 = (::openfl::Lib_obj::get_current()->stage->_hx___renderer->_hx___type == HX_("opengl",6f,64,94,21));
            		}
            		else {
HXLINE(3103)			_hx_tmp1 = false;
            		}
HXDLIN(3103)		if (_hx_tmp1) {
HXLINE(3108)			 ::openfl::display::OpenGLRenderer renderer = ( ( ::openfl::display::OpenGLRenderer)(::openfl::Lib_obj::get_current()->stage->_hx___renderer) );
HXLINE(3109)			 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(3110)			int color1 = color;
HXLINE(3111)			bool useScissor = !(this->rect->equals(rect));
HXLINE(3113)			 ::openfl::display3D::textures::TextureBase cacheRTT = context->_hx___state->renderToTexture;
HXLINE(3114)			bool cacheRTTDepthStencil = context->_hx___state->renderToTextureDepthStencil;
HXLINE(3115)			int cacheRTTAntiAlias = context->_hx___state->renderToTextureAntiAlias;
HXLINE(3116)			int cacheRTTSurfaceSelector = context->_hx___state->renderToTextureSurfaceSelector;
HXLINE(3118)			context->setRenderToTexture(this->_hx___texture,null(),null(),null());
HXLINE(3120)			if (useScissor) {
HXLINE(3122)				context->setScissorRectangle(rect);
            			}
HXLINE(3125)			Float _hx_tmp4;
HXDLIN(3125)			if (this->transparent) {
HXLINE(3125)				_hx_tmp4 = (( (Float)((hx::UShr(color1,24) & 255)) ) / ( (Float)(255) ));
            			}
            			else {
HXLINE(3125)				_hx_tmp4 = ( (Float)(1) );
            			}
HXDLIN(3125)			context->clear((( (Float)((hx::UShr(color1,16) & 255)) ) / ( (Float)(255) )),(( (Float)((hx::UShr(color1,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color1 & 255)) ) / ( (Float)(255) )),_hx_tmp4,0,0,1);
HXLINE(3127)			if (useScissor) {
HXLINE(3129)				context->setScissorRectangle(null());
            			}
HXLINE(3132)			if (hx::IsNotNull( cacheRTT )) {
HXLINE(3134)				context->setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
            			}
            			else {
HXLINE(3138)				context->setRenderToBackBuffer();
            			}
            		}
            		else {
HXLINE(3141)			if (this->readable) {
HXLINE(3143)				 ::lime::graphics::Image _hx_tmp5 = this->image;
HXDLIN(3143)				_hx_tmp5->fillRect(rect->_hx___toLimeRectangle(),color,1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fillRect,(void))

void BitmapData_obj::_hx___fromBase64(::String base64,::String type){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3149___fromBase64)
HXLINE(3151)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBase64(base64,type);
HXLINE(3152)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromBase64,(void))

void BitmapData_obj::_hx___fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3157___fromBytes)
HXLINE(3159)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes));
HXLINE(3160)		this->_hx___fromImage(image);
HXLINE(3162)		if (hx::IsNotNull( rawAlpha )) {
HXLINE(3164)			this->_hx___applyAlpha(rawAlpha);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromBytes,(void))

void BitmapData_obj::_hx___fromFile(::String path){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3170___fromFile)
HXLINE(3172)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromFile(path);
HXLINE(3173)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromFile,(void))

void BitmapData_obj::_hx___fromImage( ::lime::graphics::Image image){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3181___fromImage)
HXDLIN(3181)		bool _hx_tmp;
HXDLIN(3181)		if (hx::IsNotNull( image )) {
HXDLIN(3181)			_hx_tmp = hx::IsNotNull( image->buffer );
            		}
            		else {
HXDLIN(3181)			_hx_tmp = false;
            		}
HXDLIN(3181)		if (_hx_tmp) {
HXLINE(3183)			this->image = image;
HXLINE(3185)			this->width = image->width;
HXLINE(3186)			this->height = image->height;
HXLINE(3187)			this->rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,image->width,image->height);
HXLINE(3189)			this->_hx___textureWidth = this->width;
HXLINE(3190)			this->_hx___textureHeight = this->height;
HXLINE(3193)			image->set_format(2);
HXLINE(3194)			image->set_premultiplied(true);
HXLINE(3197)			this->readable = true;
HXLINE(3198)			this->_hx___isValid = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromImage,(void))

void BitmapData_obj::_hx___fromSymbol( ::openfl::_internal::formats::swf::SWFLite swf, ::openfl::_internal::symbols::BitmapSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3204___fromSymbol)
HXLINE(3205)		this->_hx___symbol = symbol;
HXLINE(3236)		 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromFile(symbol->path);
HXLINE(3238)		if (hx::IsNotNull( symbol->alpha )) {
HXLINE(3240)			 ::lime::graphics::Image alpha = ::lime::graphics::Image_obj::fromFile(symbol->alpha);
HXLINE(3242)			bool _hx_tmp;
HXDLIN(3242)			if (hx::IsNotNull( image )) {
HXLINE(3242)				_hx_tmp = hx::IsNotNull( alpha );
            			}
            			else {
HXLINE(3242)				_hx_tmp = false;
            			}
HXDLIN(3242)			if (_hx_tmp) {
HXLINE(3244)				 ::lime::math::Rectangle _hx_tmp1 = alpha->get_rect();
HXDLIN(3244)				image->copyChannel(alpha,_hx_tmp1, ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null()),::lime::graphics::ImageChannel_obj::RED_dyn(),::lime::graphics::ImageChannel_obj::ALPHA_dyn());
HXLINE(3245)				image->buffer->premultiplied = true;
            			}
            		}
HXLINE(3253)		this->_hx___fromImage(image);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___fromSymbol,(void))

void BitmapData_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3259___getBounds)
HXLINE(3260)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(3261)		this->rect->_hx___transform(bounds,matrix);
HXLINE(3262)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(3263)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___getBounds,(void))

 ::lime::app::Future BitmapData_obj::_hx___loadFromBase64(::String base64,::String type){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3297___loadFromBase64)
HXLINE(3298)			_gthis->_hx___fromImage(image);
HXLINE(3299)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3294___loadFromBase64)
HXLINE(3293)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(3296)		return ::lime::graphics::Image_obj::loadFromBase64(base64,type)->then( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___loadFromBase64,return )

 ::lime::app::Future BitmapData_obj::_hx___loadFromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3310___loadFromBytes)
HXLINE(3311)			_gthis->_hx___fromImage(image);
HXLINE(3313)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(3315)				_gthis->_hx___applyAlpha(rawAlpha);
            			}
HXLINE(3318)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3307___loadFromBytes)
HXLINE(3306)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(3309)		return ::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0(rawAlpha,_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___loadFromBytes,return )

 ::lime::app::Future BitmapData_obj::_hx___loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3329___loadFromFile)
HXLINE(3330)			_gthis->_hx___fromImage(image);
HXLINE(3331)			return ::lime::app::Future_obj::withValue(_gthis);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3326___loadFromFile)
HXLINE(3325)		 ::openfl::display::BitmapData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(3328)		return ::lime::graphics::Image_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___loadFromFile,return )

void BitmapData_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3339___renderCairo)
HXLINE(3341)		if (!(this->readable)) {
HXLINE(3341)			return;
            		}
HXLINE(3343)		 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXLINE(3345)		renderer->applyMatrix(this->_hx___renderTransform,cairo);
HXLINE(3347)		 ::Dynamic surface = this->getSurface();
HXLINE(3349)		if (hx::IsNotNull( surface )) {
HXLINE(3351)			 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXLINE(3353)			bool _hx_tmp;
HXDLIN(3353)			if (!(!(renderer->_hx___allowSmoothing))) {
HXLINE(3353)				_hx_tmp = (cairo->get_antialias() == 1);
            			}
            			else {
HXLINE(3353)				_hx_tmp = true;
            			}
HXDLIN(3353)			if (_hx_tmp) {
HXLINE(3355)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,3);
            			}
            			else {
HXLINE(3359)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,1);
            			}
HXLINE(3362)			cairo->set_source(pattern);
HXLINE(3363)			cairo->paint();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairo,(void))

void BitmapData_obj::_hx___renderCairoMask( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3368___renderCairoMask)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairoMask,(void))

void BitmapData_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3371___renderCanvas)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvas,(void))

void BitmapData_obj::_hx___renderCanvasMask( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3389___renderCanvasMask)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvasMask,(void))

void BitmapData_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3391___renderDOM)
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderDOM,(void))

void BitmapData_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3394___renderGL)
HXLINE(3395)		 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(3396)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(3398)		renderer->_hx___setBlendMode(10);
HXLINE(3400)		 ::openfl::display::DisplayObjectShader shader = renderer->_hx___defaultDisplayShader;
HXLINE(3401)		renderer->setShader(shader);
HXLINE(3402)		renderer->applyBitmapData(hx::ObjectPtr<OBJ_>(this),renderer->_hx___upscaled,null());
HXLINE(3403)		renderer->applyMatrix(renderer->_hx___getMatrix(this->_hx___worldTransform,1));
HXLINE(3404)		renderer->applyAlpha(this->_hx___worldAlpha);
HXLINE(3405)		renderer->applyColorTransform(this->_hx___worldColorTransform);
HXLINE(3406)		renderer->updateShader();
HXLINE(3410)		 ::openfl::display3D::VertexBuffer3D vertexBuffer = this->getVertexBuffer(context,null(),null());
HXLINE(3411)		if (hx::IsNotNull( shader->_hx___position )) {
HXLINE(3411)			context->setVertexBufferAt(shader->_hx___position->index,vertexBuffer,0,3);
            		}
HXLINE(3412)		if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE(3412)			context->setVertexBufferAt(shader->_hx___textureCoord->index,vertexBuffer,3,2);
            		}
HXLINE(3413)		 ::openfl::display3D::IndexBuffer3D indexBuffer = this->getIndexBuffer(context,null());
HXLINE(3414)		context->drawTriangles(indexBuffer,null(),null());
HXLINE(3420)		renderer->_hx___clearShader();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderGL,(void))

void BitmapData_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3424___renderGLMask)
HXLINE(3425)		 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(3426)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(3428)		 ::openfl::_internal::renderer::context3D::Context3DMaskShader shader = renderer->_hx___maskShader;
HXLINE(3429)		renderer->setShader(shader);
HXLINE(3430)		renderer->applyBitmapData(hx::ObjectPtr<OBJ_>(this),renderer->_hx___upscaled,null());
HXLINE(3431)		renderer->applyMatrix(renderer->_hx___getMatrix(this->_hx___worldTransform,1));
HXLINE(3432)		renderer->updateShader();
HXLINE(3434)		 ::openfl::display3D::VertexBuffer3D vertexBuffer = this->getVertexBuffer(context,null(),null());
HXLINE(3435)		if (hx::IsNotNull( shader->_hx___position )) {
HXLINE(3435)			context->setVertexBufferAt(shader->_hx___position->index,vertexBuffer,0,3);
            		}
HXLINE(3436)		if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE(3436)			context->setVertexBufferAt(shader->_hx___textureCoord->index,vertexBuffer,3,2);
            		}
HXLINE(3437)		 ::openfl::display3D::IndexBuffer3D indexBuffer = this->getIndexBuffer(context,null());
HXLINE(3438)		context->drawTriangles(indexBuffer,null(),null());
HXLINE(3444)		renderer->_hx___clearShader();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderGLMask,(void))

void BitmapData_obj::_hx___resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3448___resize)
HXLINE(3449)		this->width = width;
HXLINE(3450)		this->height = height;
HXLINE(3451)		this->rect->width = ( (Float)(width) );
HXLINE(3452)		this->rect->height = ( (Float)(height) );
HXLINE(3454)		this->_hx___textureWidth = width;
HXLINE(3455)		this->_hx___textureHeight = height;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___resize,(void))

void BitmapData_obj::_hx___setUVRect( ::openfl::display3D::Context3D context,Float x,Float y,Float width,Float height){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3459___setUVRect)
HXLINE(3460)		 ::openfl::display3D::VertexBuffer3D buffer = this->getVertexBuffer(context,null(),null());
HXLINE(3462)		bool _hx_tmp;
HXDLIN(3462)		if (hx::IsNotNull( buffer )) {
HXLINE(3462)			bool _hx_tmp1;
HXDLIN(3462)			bool _hx_tmp2;
HXDLIN(3462)			if ((width == this->_hx___uvRect->width)) {
HXLINE(3462)				_hx_tmp2 = (height != this->_hx___uvRect->height);
            			}
            			else {
HXLINE(3462)				_hx_tmp2 = true;
            			}
HXDLIN(3462)			if (!(_hx_tmp2)) {
HXLINE(3462)				_hx_tmp1 = (x != this->_hx___uvRect->x);
            			}
            			else {
HXLINE(3462)				_hx_tmp1 = true;
            			}
HXDLIN(3462)			if (!(_hx_tmp1)) {
HXLINE(3462)				_hx_tmp = (y != this->_hx___uvRect->y);
            			}
            			else {
HXLINE(3462)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3462)			_hx_tmp = false;
            		}
HXDLIN(3462)		if (_hx_tmp) {
HXLINE(3464)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE(3466)			if (hx::IsNull( this->_hx___uvRect )) {
HXLINE(3466)				this->_hx___uvRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE(3467)			this->_hx___uvRect->setTo(x,y,width,height);
HXLINE(3469)			Float uvX;
HXDLIN(3469)			if ((this->_hx___textureWidth > 0)) {
HXLINE(3469)				uvX = (x / ( (Float)(this->_hx___textureWidth) ));
            			}
            			else {
HXLINE(3469)				uvX = ( (Float)(0) );
            			}
HXLINE(3470)			Float uvY;
HXDLIN(3470)			if ((this->_hx___textureHeight > 0)) {
HXLINE(3470)				uvY = (y / ( (Float)(this->_hx___textureHeight) ));
            			}
            			else {
HXLINE(3470)				uvY = ( (Float)(0) );
            			}
HXLINE(3471)			Float uvWidth;
HXDLIN(3471)			if ((this->_hx___textureWidth > 0)) {
HXLINE(3471)				uvWidth = (width / ( (Float)(this->_hx___textureWidth) ));
            			}
            			else {
HXLINE(3471)				uvWidth = ( (Float)(0) );
            			}
HXLINE(3472)			Float uvHeight;
HXDLIN(3472)			if ((this->_hx___textureHeight > 0)) {
HXLINE(3472)				uvHeight = (height / ( (Float)(this->_hx___textureHeight) ));
            			}
            			else {
HXLINE(3472)				uvHeight = ( (Float)(0) );
            			}
HXLINE(3474)			{
HXLINE(3474)				 ::lime::utils::ArrayBufferView this1 = this->_hx___vertexBufferData;
HXDLIN(3474)				 ::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,width);
            			}
HXLINE(3475)			{
HXLINE(3475)				 ::lime::utils::ArrayBufferView this2 = this->_hx___vertexBufferData;
HXDLIN(3475)				 ::__hxcpp_memory_set_float(this2->buffer->b,(this2->byteOffset + 4),height);
            			}
HXLINE(3476)			{
HXLINE(3476)				 ::lime::utils::ArrayBufferView this3 = this->_hx___vertexBufferData;
HXDLIN(3476)				Float val = (uvX + uvWidth);
HXDLIN(3476)				 ::__hxcpp_memory_set_float(this3->buffer->b,(this3->byteOffset + 12),val);
            			}
HXLINE(3477)			{
HXLINE(3477)				 ::lime::utils::ArrayBufferView this4 = this->_hx___vertexBufferData;
HXDLIN(3477)				Float val1 = (uvY + uvHeight);
HXDLIN(3477)				 ::__hxcpp_memory_set_float(this4->buffer->b,(this4->byteOffset + 16),val1);
            			}
HXLINE(3478)			{
HXLINE(3478)				 ::lime::utils::ArrayBufferView this5 = this->_hx___vertexBufferData;
HXDLIN(3478)				 ::__hxcpp_memory_set_float(this5->buffer->b,(this5->byteOffset + 60),height);
            			}
HXLINE(3479)			{
HXLINE(3479)				 ::lime::utils::ArrayBufferView this6 = this->_hx___vertexBufferData;
HXDLIN(3479)				 ::__hxcpp_memory_set_float(this6->buffer->b,(this6->byteOffset + 68),uvX);
            			}
HXLINE(3480)			{
HXLINE(3480)				 ::lime::utils::ArrayBufferView this7 = this->_hx___vertexBufferData;
HXDLIN(3480)				Float val2 = (uvY + uvHeight);
HXDLIN(3480)				 ::__hxcpp_memory_set_float(this7->buffer->b,(this7->byteOffset + 72),val2);
            			}
HXLINE(3481)			{
HXLINE(3481)				 ::lime::utils::ArrayBufferView this8 = this->_hx___vertexBufferData;
HXDLIN(3481)				 ::__hxcpp_memory_set_float(this8->buffer->b,(this8->byteOffset + 112),width);
            			}
HXLINE(3482)			{
HXLINE(3482)				 ::lime::utils::ArrayBufferView this9 = this->_hx___vertexBufferData;
HXDLIN(3482)				Float val3 = (uvX + uvWidth);
HXDLIN(3482)				 ::__hxcpp_memory_set_float(this9->buffer->b,(this9->byteOffset + 124),val3);
            			}
HXLINE(3483)			{
HXLINE(3483)				 ::lime::utils::ArrayBufferView this10 = this->_hx___vertexBufferData;
HXDLIN(3483)				 ::__hxcpp_memory_set_float(this10->buffer->b,(this10->byteOffset + 128),uvY);
            			}
HXLINE(3484)			{
HXLINE(3484)				 ::lime::utils::ArrayBufferView this11 = this->_hx___vertexBufferData;
HXDLIN(3484)				 ::__hxcpp_memory_set_float(this11->buffer->b,(this11->byteOffset + 180),uvX);
            			}
HXLINE(3485)			{
HXLINE(3485)				 ::lime::utils::ArrayBufferView this12 = this->_hx___vertexBufferData;
HXDLIN(3485)				 ::__hxcpp_memory_set_float(this12->buffer->b,(this12->byteOffset + 184),uvY);
            			}
HXLINE(3487)			this->_hx___vertexBuffer->uploadFromTypedArray(this->_hx___vertexBufferData,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,_hx___setUVRect,(void))

void BitmapData_obj::_hx___sync(){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3492___sync)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,_hx___sync,(void))

void BitmapData_obj::_hx___update(bool transformOnly,bool updateChildren){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3500___update)
HXDLIN(3500)		this->_hx___updateTransforms(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___update,(void))

void BitmapData_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_3504___updateTransforms)
HXLINE(3505)		if (hx::IsNull( overrideTransform )) {
HXLINE(3507)			this->_hx___worldTransform->identity();
            		}
            		else {
HXLINE(3511)			this->_hx___worldTransform->copyFrom(overrideTransform);
            		}
HXLINE(3514)		this->_hx___renderTransform->copyFrom(this->_hx___worldTransform);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateTransforms,(void))

int BitmapData_obj::VERTEX_BUFFER_STRIDE;

 ::Dynamic BitmapData_obj::_hx___supportsBGRA;

int BitmapData_obj::_hx___textureFormat;

int BitmapData_obj::_hx___textureInternalFormat;

 ::lime::math::Vector2 BitmapData_obj::_hx___tempVector;

 ::openfl::display::BitmapData BitmapData_obj::fromBase64(::String base64,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1195_fromBase64)
HXLINE(1199)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,true,0);
HXLINE(1200)		{
HXLINE(1200)			 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBase64(base64,type);
HXDLIN(1200)			bitmapData->_hx___fromImage(image);
            		}
HXLINE(1201)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromBase64,return )

 ::openfl::display::BitmapData BitmapData_obj::fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1223_fromBytes)
HXLINE(1227)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,true,0);
HXLINE(1228)		{
HXLINE(1228)			 ::lime::graphics::Image image = ::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes));
HXDLIN(1228)			bitmapData->_hx___fromImage(image);
HXDLIN(1228)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(1228)				bitmapData->_hx___applyAlpha(rawAlpha);
            			}
            		}
HXLINE(1229)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromBytes,return )

 ::openfl::display::BitmapData BitmapData_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1271_fromFile)
HXLINE(1275)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,true,0);
HXLINE(1276)		bitmapData->_hx___fromFile(path);
HXLINE(1277)		if (hx::IsNotNull( bitmapData->image )) {
HXLINE(1277)			return bitmapData;
            		}
            		else {
HXLINE(1277)			return null();
            		}
HXDLIN(1277)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromFile,return )

 ::openfl::display::BitmapData BitmapData_obj::fromImage( ::lime::graphics::Image image,hx::Null< bool >  __o_transparent){
            		bool transparent = __o_transparent.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1293_fromImage)
HXLINE(1294)		bool _hx_tmp;
HXDLIN(1294)		if (hx::IsNotNull( image )) {
HXLINE(1294)			_hx_tmp = hx::IsNull( image->buffer );
            		}
            		else {
HXLINE(1294)			_hx_tmp = true;
            		}
HXDLIN(1294)		if (_hx_tmp) {
HXLINE(1294)			return null();
            		}
HXLINE(1296)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,0,0,transparent,0);
HXLINE(1297)		bitmapData->_hx___fromImage(image);
HXLINE(1298)		bitmapData->image->set_transparent(transparent);
HXLINE(1299)		if (hx::IsNotNull( bitmapData->image )) {
HXLINE(1299)			return bitmapData;
            		}
            		else {
HXLINE(1299)			return null();
            		}
HXDLIN(1299)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromImage,return )

 ::openfl::display::BitmapData BitmapData_obj::fromTexture( ::openfl::display3D::textures::RectangleTexture texture){
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_1314_fromTexture)
HXLINE(1315)		if (hx::IsNull( texture )) {
HXLINE(1315)			return null();
            		}
HXLINE(1317)		 ::openfl::display::BitmapData bitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,texture->_hx___width,texture->_hx___height,true,0);
HXLINE(1318)		bitmapData->readable = false;
HXLINE(1319)		bitmapData->_hx___texture = texture;
HXLINE(1320)		bitmapData->_hx___textureContext = texture->_hx___textureContext;
HXLINE(1321)		bitmapData->image = null();
HXLINE(1322)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromTexture,return )

 ::lime::app::Future BitmapData_obj::loadFromBase64(::String base64,::String type){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2448_loadFromBase64)
HXLINE(2448)			return ::lime::app::Future_obj::withValue(::openfl::display::BitmapData_obj::fromImage(image,null()));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2446_loadFromBase64)
HXDLIN(2446)		return ::lime::graphics::Image_obj::loadFromBase64(base64,type)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBase64,return )

 ::lime::app::Future BitmapData_obj::loadFromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2472_loadFromBytes)
HXLINE(2473)			 ::openfl::display::BitmapData bitmapData = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXLINE(2475)			if (hx::IsNotNull( rawAlpha )) {
HXLINE(2477)				bitmapData->_hx___applyAlpha(rawAlpha);
            			}
HXLINE(2480)			return ::lime::app::Future_obj::withValue(bitmapData);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2471_loadFromBytes)
HXDLIN(2471)		return ::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0(rawAlpha)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBytes,return )

 ::lime::app::Future BitmapData_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2501_loadFromFile)
HXLINE(2501)			return ::lime::app::Future_obj::withValue(::openfl::display::BitmapData_obj::fromImage(image,null()));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_2499_loadFromFile)
HXDLIN(2499)		return ::lime::graphics::Image_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,loadFromFile,return )


hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__new(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	hx::ObjectPtr< BitmapData_obj > __this = new BitmapData_obj();
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	BitmapData_obj *__this = (BitmapData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapData_obj), true, "openfl.display.BitmapData"));
	*(void **)__this = BitmapData_obj::_hx_vtable;
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

BitmapData_obj::BitmapData_obj()
{
}

void BitmapData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapData);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(readable,"readable");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_MARK_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_MARK_MEMBER_NAME(_hx___indexBuffer,"__indexBuffer");
	HX_MARK_MEMBER_NAME(_hx___indexBufferContext,"__indexBufferContext");
	HX_MARK_MEMBER_NAME(_hx___indexBufferData,"__indexBufferData");
	HX_MARK_MEMBER_NAME(_hx___indexBufferGrid,"__indexBufferGrid");
	HX_MARK_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_MARK_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_MARK_MEMBER_NAME(_hx___mask,"__mask");
	HX_MARK_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_MARK_MEMBER_NAME(_hx___stencilBuffer,"__stencilBuffer");
	HX_MARK_MEMBER_NAME(_hx___surface,"__surface");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_MARK_MEMBER_NAME(_hx___textureHeight,"__textureHeight");
	HX_MARK_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_MARK_MEMBER_NAME(_hx___textureWidth,"__textureWidth");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___uvRect,"__uvRect");
	HX_MARK_MEMBER_NAME(_hx___vertexBuffer,"__vertexBuffer");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferContext,"__vertexBufferContext");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferData,"__vertexBufferData");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferGrid,"__vertexBufferGrid");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferHeight,"__vertexBufferHeight");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferScaleX,"__vertexBufferScaleX");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferScaleY,"__vertexBufferScaleY");
	HX_MARK_MEMBER_NAME(_hx___vertexBufferWidth,"__vertexBufferWidth");
	HX_MARK_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_END_CLASS();
}

void BitmapData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(readable,"readable");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_VISIT_MEMBER_NAME(_hx___framebufferContext,"__framebufferContext");
	HX_VISIT_MEMBER_NAME(_hx___indexBuffer,"__indexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___indexBufferContext,"__indexBufferContext");
	HX_VISIT_MEMBER_NAME(_hx___indexBufferData,"__indexBufferData");
	HX_VISIT_MEMBER_NAME(_hx___indexBufferGrid,"__indexBufferGrid");
	HX_VISIT_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_VISIT_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_VISIT_MEMBER_NAME(_hx___mask,"__mask");
	HX_VISIT_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_VISIT_MEMBER_NAME(_hx___stencilBuffer,"__stencilBuffer");
	HX_VISIT_MEMBER_NAME(_hx___surface,"__surface");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_VISIT_MEMBER_NAME(_hx___textureHeight,"__textureHeight");
	HX_VISIT_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_VISIT_MEMBER_NAME(_hx___textureWidth,"__textureWidth");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___uvRect,"__uvRect");
	HX_VISIT_MEMBER_NAME(_hx___vertexBuffer,"__vertexBuffer");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferContext,"__vertexBufferContext");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferData,"__vertexBufferData");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferGrid,"__vertexBufferGrid");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferHeight,"__vertexBufferHeight");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferScaleX,"__vertexBufferScaleX");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferScaleY,"__vertexBufferScaleY");
	HX_VISIT_MEMBER_NAME(_hx___vertexBufferWidth,"__vertexBufferWidth");
	HX_VISIT_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
}

hx::Val BitmapData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn() ); }
		if (HX_FIELD_EQ(inName,"noise") ) { return hx::Val( noise_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { return hx::Val( _hx___mask ); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"__sync") ) { return hx::Val( _hx___sync_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { return hx::Val( readable ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { return hx::Val( _hx___isMask ); }
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		if (HX_FIELD_EQ(inName,"__uvRect") ) { return hx::Val( _hx___uvRect ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawGL") ) { return hx::Val( _hx___drawGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { return hx::Val( _hx___isValid ); }
		if (HX_FIELD_EQ(inName,"__surface") ) { return hx::Val( _hx___surface ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVector") ) { return hx::Val( getVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"histogram") ) { return hx::Val( histogram_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVector") ) { return hx::Val( setVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSurface") ) { return hx::Val( getSurface_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"paletteMap") ) { return hx::Val( paletteMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fillRect") ) { return hx::Val( _hx___fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { return hx::Val( transparent ); }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode ); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform ); }
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return hx::Val( applyFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn() ); }
		if (HX_FIELD_EQ(inName,"perlinNoise") ) { return hx::Val( perlinNoise_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawCairo") ) { return hx::Val( _hx___drawCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromImage") ) { return hx::Val( _hx___fromImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setUVRect") ) { return hx::Val( _hx___setUVRect_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__renderable") ) { return hx::Val( _hx___renderable ); }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { return hx::Val( _hx___scrollRect ); }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { return hx::Val( _hx___worldAlpha ); }
		if (HX_FIELD_EQ(inName,"disposeImage") ) { return hx::Val( disposeImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"__applyAlpha") ) { return hx::Val( _hx___applyAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drawCanvas") ) { return hx::Val( _hx___drawCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { return hx::Val( _hx___framebuffer ); }
		if (HX_FIELD_EQ(inName,"__indexBuffer") ) { return hx::Val( _hx___indexBuffer ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureWidth") ) { return hx::Val( _hx___textureWidth ); }
		if (HX_FIELD_EQ(inName,"__vertexBuffer") ) { return hx::Val( _hx___vertexBuffer ); }
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"getIndexBuffer") ) { return hx::Val( getIndexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__loadFromFile") ) { return hx::Val( _hx___loadFromFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__stencilBuffer") ) { return hx::Val( _hx___stencilBuffer ); }
		if (HX_FIELD_EQ(inName,"__textureHeight") ) { return hx::Val( _hx___textureHeight ); }
		if (HX_FIELD_EQ(inName,"drawWithQuality") ) { return hx::Val( drawWithQuality_dyn() ); }
		if (HX_FIELD_EQ(inName,"getVertexBuffer") ) { return hx::Val( getVertexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__loadFromBytes") ) { return hx::Val( _hx___loadFromBytes_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { return hx::Val( _hx___textureContext ); }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { return hx::Val( _hx___textureVersion ); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform ); }
		if (HX_FIELD_EQ(inName,"__loadFromBase64") ) { return hx::Val( _hx___loadFromBase64_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__indexBufferData") ) { return hx::Val( _hx___indexBufferData ); }
		if (HX_FIELD_EQ(inName,"__indexBufferGrid") ) { return hx::Val( _hx___indexBufferGrid ); }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__vertexBufferData") ) { return hx::Val( _hx___vertexBufferData ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferGrid") ) { return hx::Val( _hx___vertexBufferGrid ); }
		if (HX_FIELD_EQ(inName,"generateFilterRect") ) { return hx::Val( generateFilterRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__vertexBufferWidth") ) { return hx::Val( _hx___vertexBufferWidth ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { return hx::Val( _hx___framebufferContext ); }
		if (HX_FIELD_EQ(inName,"__indexBufferContext") ) { return hx::Val( _hx___indexBufferContext ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferHeight") ) { return hx::Val( _hx___vertexBufferHeight ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleX") ) { return hx::Val( _hx___vertexBufferScaleX ); }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleY") ) { return hx::Val( _hx___vertexBufferScaleY ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__vertexBufferContext") ) { return hx::Val( _hx___vertexBufferContext ); }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromImage") ) { outValue = fromImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromTexture") ) { outValue = fromTexture_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__tempVector") ) { outValue = ( _hx___tempVector ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__supportsBGRA") ) { outValue = ( _hx___supportsBGRA ); return true; }
		if (HX_FIELD_EQ(inName,"loadFromBase64") ) { outValue = loadFromBase64_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { outValue = ( _hx___textureFormat ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__textureInternalFormat") ) { outValue = ( _hx___textureInternalFormat ); return true; }
	}
	return false;
}

hx::Val BitmapData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mask") ) { _hx___mask=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { readable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isMask") ) { _hx___isMask=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::BitmapSymbol >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uvRect") ) { _hx___uvRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { _hx___isValid=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__surface") ) { _hx___surface=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__renderable") ) { _hx___renderable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { _hx___scrollRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { _hx___worldAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { _hx___framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__indexBuffer") ) { _hx___indexBuffer=inValue.Cast<  ::openfl::display3D::IndexBuffer3D >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureWidth") ) { _hx___textureWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBuffer") ) { _hx___vertexBuffer=inValue.Cast<  ::openfl::display3D::VertexBuffer3D >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__stencilBuffer") ) { _hx___stencilBuffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureHeight") ) { _hx___textureHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureContext") ) { _hx___textureContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { _hx___textureVersion=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__indexBufferData") ) { _hx___indexBufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__indexBufferGrid") ) { _hx___indexBufferGrid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__vertexBufferData") ) { _hx___vertexBufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferGrid") ) { _hx___vertexBufferGrid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__vertexBufferWidth") ) { _hx___vertexBufferWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__framebufferContext") ) { _hx___framebufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__indexBufferContext") ) { _hx___indexBufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferHeight") ) { _hx___vertexBufferHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleX") ) { _hx___vertexBufferScaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexBufferScaleY") ) { _hx___vertexBufferScaleY=inValue.Cast< Float >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__vertexBufferContext") ) { _hx___vertexBufferContext=inValue.Cast<  ::lime::graphics::RenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__tempVector") ) { _hx___tempVector=ioValue.Cast<  ::lime::math::Vector2 >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__supportsBGRA") ) { _hx___supportsBGRA=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { _hx___textureFormat=ioValue.Cast< int >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__textureInternalFormat") ) { _hx___textureInternalFormat=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void BitmapData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("image",5b,1f,69,bd));
	outFields->push(HX_("readable",f0,1b,87,7d));
	outFields->push(HX_("rect",24,4d,a7,4b));
	outFields->push(HX_("transparent",52,2b,ba,22));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("__blendMode",34,2d,64,3a));
	outFields->push(HX_("__framebuffer",cd,55,c0,c2));
	outFields->push(HX_("__framebufferContext",a2,6b,52,89));
	outFields->push(HX_("__indexBuffer",92,a6,1e,3e));
	outFields->push(HX_("__indexBufferContext",7d,ed,2f,1d));
	outFields->push(HX_("__indexBufferData",dc,d9,26,67));
	outFields->push(HX_("__indexBufferGrid",78,5a,2f,69));
	outFields->push(HX_("__isMask",16,71,ec,0d));
	outFields->push(HX_("__isValid",92,69,8c,4f));
	outFields->push(HX_("__mask",0c,a4,4e,f7));
	outFields->push(HX_("__renderable",10,b7,2c,2b));
	outFields->push(HX_("__renderTransform",16,b8,95,b1));
	outFields->push(HX_("__scrollRect",f1,56,fa,41));
	outFields->push(HX_("__stencilBuffer",fc,cc,eb,b8));
	outFields->push(HX_("__surface",0d,b7,97,de));
	outFields->push(HX_("__symbol",78,1a,0d,97));
	outFields->push(HX_("__texture",bb,19,2f,20));
	outFields->push(HX_("__textureContext",74,21,78,6f));
	outFields->push(HX_("__textureHeight",02,14,16,1d));
	outFields->push(HX_("__textureVersion",9d,72,f2,d2));
	outFields->push(HX_("__textureWidth",4b,e6,c2,e3));
	outFields->push(HX_("__transform",4c,76,bf,73));
	outFields->push(HX_("__uvRect",45,8f,b9,97));
	outFields->push(HX_("__vertexBuffer",a4,32,6a,91));
	outFields->push(HX_("__vertexBufferContext",ab,e7,39,35));
	outFields->push(HX_("__vertexBufferData",ee,d6,5e,32));
	outFields->push(HX_("__vertexBufferGrid",8a,57,67,34));
	outFields->push(HX_("__vertexBufferHeight",ab,41,bc,88));
	outFields->push(HX_("__vertexBufferScaleX",52,24,96,c2));
	outFields->push(HX_("__vertexBufferScaleY",53,24,96,c2));
	outFields->push(HX_("__vertexBufferWidth",c2,e0,77,d6));
	outFields->push(HX_("__worldAlpha",cc,d2,d6,c5));
	outFields->push(HX_("__worldColorTransform",5b,ce,21,a3));
	outFields->push(HX_("__worldTransform",da,a7,d8,9a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapData_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BitmapData_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::lime::graphics::Image */ ,(int)offsetof(BitmapData_obj,image),HX_("image",5b,1f,69,bd)},
	{hx::fsBool,(int)offsetof(BitmapData_obj,readable),HX_("readable",f0,1b,87,7d)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,rect),HX_("rect",24,4d,a7,4b)},
	{hx::fsBool,(int)offsetof(BitmapData_obj,transparent),HX_("transparent",52,2b,ba,22)},
	{hx::fsInt,(int)offsetof(BitmapData_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BitmapData_obj,_hx___blendMode),HX_("__blendMode",34,2d,64,3a)},
	{hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(BitmapData_obj,_hx___framebuffer),HX_("__framebuffer",cd,55,c0,c2)},
	{hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___framebufferContext),HX_("__framebufferContext",a2,6b,52,89)},
	{hx::fsObject /*  ::openfl::display3D::IndexBuffer3D */ ,(int)offsetof(BitmapData_obj,_hx___indexBuffer),HX_("__indexBuffer",92,a6,1e,3e)},
	{hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___indexBufferContext),HX_("__indexBufferContext",7d,ed,2f,1d)},
	{hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(BitmapData_obj,_hx___indexBufferData),HX_("__indexBufferData",dc,d9,26,67)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___indexBufferGrid),HX_("__indexBufferGrid",78,5a,2f,69)},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isMask),HX_("__isMask",16,71,ec,0d)},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isValid),HX_("__isValid",92,69,8c,4f)},
	{hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BitmapData_obj,_hx___mask),HX_("__mask",0c,a4,4e,f7)},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___renderable),HX_("__renderable",10,b7,2c,2b)},
	{hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(BitmapData_obj,_hx___renderTransform),HX_("__renderTransform",16,b8,95,b1)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___scrollRect),HX_("__scrollRect",f1,56,fa,41)},
	{hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(BitmapData_obj,_hx___stencilBuffer),HX_("__stencilBuffer",fc,cc,eb,b8)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BitmapData_obj,_hx___surface),HX_("__surface",0d,b7,97,de)},
	{hx::fsObject /*  ::openfl::_internal::symbols::BitmapSymbol */ ,(int)offsetof(BitmapData_obj,_hx___symbol),HX_("__symbol",78,1a,0d,97)},
	{hx::fsObject /*  ::openfl::display3D::textures::RectangleTexture */ ,(int)offsetof(BitmapData_obj,_hx___texture),HX_("__texture",bb,19,2f,20)},
	{hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___textureContext),HX_("__textureContext",74,21,78,6f)},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureHeight),HX_("__textureHeight",02,14,16,1d)},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureVersion),HX_("__textureVersion",9d,72,f2,d2)},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureWidth),HX_("__textureWidth",4b,e6,c2,e3)},
	{hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(BitmapData_obj,_hx___transform),HX_("__transform",4c,76,bf,73)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___uvRect),HX_("__uvRect",45,8f,b9,97)},
	{hx::fsObject /*  ::openfl::display3D::VertexBuffer3D */ ,(int)offsetof(BitmapData_obj,_hx___vertexBuffer),HX_("__vertexBuffer",a4,32,6a,91)},
	{hx::fsObject /*  ::lime::graphics::RenderContext */ ,(int)offsetof(BitmapData_obj,_hx___vertexBufferContext),HX_("__vertexBufferContext",ab,e7,39,35)},
	{hx::fsObject /*  ::lime::utils::ArrayBufferView */ ,(int)offsetof(BitmapData_obj,_hx___vertexBufferData),HX_("__vertexBufferData",ee,d6,5e,32)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(BitmapData_obj,_hx___vertexBufferGrid),HX_("__vertexBufferGrid",8a,57,67,34)},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferHeight),HX_("__vertexBufferHeight",ab,41,bc,88)},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferScaleX),HX_("__vertexBufferScaleX",52,24,96,c2)},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferScaleY),HX_("__vertexBufferScaleY",53,24,96,c2)},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___vertexBufferWidth),HX_("__vertexBufferWidth",c2,e0,77,d6)},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___worldAlpha),HX_("__worldAlpha",cc,d2,d6,c5)},
	{hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(BitmapData_obj,_hx___worldColorTransform),HX_("__worldColorTransform",5b,ce,21,a3)},
	{hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(BitmapData_obj,_hx___worldTransform),HX_("__worldTransform",da,a7,d8,9a)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapData_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BitmapData_obj::VERTEX_BUFFER_STRIDE,HX_("VERTEX_BUFFER_STRIDE",5d,b3,e6,c3)},
	{hx::fsObject /*  ::Dynamic */ ,(void *) &BitmapData_obj::_hx___supportsBGRA,HX_("__supportsBGRA",58,53,57,0f)},
	{hx::fsInt,(void *) &BitmapData_obj::_hx___textureFormat,HX_("__textureFormat",52,9b,58,18)},
	{hx::fsInt,(void *) &BitmapData_obj::_hx___textureInternalFormat,HX_("__textureInternalFormat",6f,15,aa,a7)},
	{hx::fsObject /*  ::lime::math::Vector2 */ ,(void *) &BitmapData_obj::_hx___tempVector,HX_("__tempVector",17,ea,60,eb)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapData_obj_sMemberFields[] = {
	HX_("height",e7,07,4c,02),
	HX_("image",5b,1f,69,bd),
	HX_("readable",f0,1b,87,7d),
	HX_("rect",24,4d,a7,4b),
	HX_("transparent",52,2b,ba,22),
	HX_("width",06,b6,62,ca),
	HX_("__blendMode",34,2d,64,3a),
	HX_("__framebuffer",cd,55,c0,c2),
	HX_("__framebufferContext",a2,6b,52,89),
	HX_("__indexBuffer",92,a6,1e,3e),
	HX_("__indexBufferContext",7d,ed,2f,1d),
	HX_("__indexBufferData",dc,d9,26,67),
	HX_("__indexBufferGrid",78,5a,2f,69),
	HX_("__isMask",16,71,ec,0d),
	HX_("__isValid",92,69,8c,4f),
	HX_("__mask",0c,a4,4e,f7),
	HX_("__renderable",10,b7,2c,2b),
	HX_("__renderTransform",16,b8,95,b1),
	HX_("__scrollRect",f1,56,fa,41),
	HX_("__stencilBuffer",fc,cc,eb,b8),
	HX_("__surface",0d,b7,97,de),
	HX_("__symbol",78,1a,0d,97),
	HX_("__texture",bb,19,2f,20),
	HX_("__textureContext",74,21,78,6f),
	HX_("__textureHeight",02,14,16,1d),
	HX_("__textureVersion",9d,72,f2,d2),
	HX_("__textureWidth",4b,e6,c2,e3),
	HX_("__transform",4c,76,bf,73),
	HX_("__uvRect",45,8f,b9,97),
	HX_("__vertexBuffer",a4,32,6a,91),
	HX_("__vertexBufferContext",ab,e7,39,35),
	HX_("__vertexBufferData",ee,d6,5e,32),
	HX_("__vertexBufferGrid",8a,57,67,34),
	HX_("__vertexBufferHeight",ab,41,bc,88),
	HX_("__vertexBufferScaleX",52,24,96,c2),
	HX_("__vertexBufferScaleY",53,24,96,c2),
	HX_("__vertexBufferWidth",c2,e0,77,d6),
	HX_("__worldAlpha",cc,d2,d6,c5),
	HX_("__worldColorTransform",5b,ce,21,a3),
	HX_("__worldTransform",da,a7,d8,9a),
	HX_("applyFilter",c6,df,2f,c1),
	HX_("clone",5d,13,63,48),
	HX_("colorTransform",89,d7,3f,ad),
	HX_("compare",a5,18,69,83),
	HX_("copyChannel",8e,7d,e6,22),
	HX_("copyPixels",c2,54,6e,42),
	HX_("dispose",9f,80,4c,bb),
	HX_("disposeImage",3c,6e,b8,62),
	HX_("draw",04,2c,70,42),
	HX_("drawWithQuality",b5,c5,05,6f),
	HX_("encode",16,f2,e3,f9),
	HX_("fillRect",47,45,b9,6c),
	HX_("floodFill",61,83,8a,59),
	HX_("generateFilterRect",91,2c,98,7e),
	HX_("getIndexBuffer",bc,b8,44,7d),
	HX_("getVertexBuffer",3a,05,94,93),
	HX_("getColorBoundsRect",86,ad,e8,80),
	HX_("getPixel",10,d6,7a,22),
	HX_("getPixel32",af,a6,68,d7),
	HX_("getPixels",63,78,00,09),
	HX_("getSurface",37,ec,aa,ac),
	HX_("getTexture",e5,4e,42,ee),
	HX_("getVector",f9,39,b4,13),
	HX_("histogram",a4,de,33,65),
	HX_("hitTest",45,60,7f,e2),
	HX_("lock",eb,9b,b7,47),
	HX_("merge",b8,a2,c6,05),
	HX_("noise",9a,8f,c2,9f),
	HX_("paletteMap",e1,ae,2b,06),
	HX_("perlinNoise",66,84,f8,8b),
	HX_("scroll",0d,d8,64,47),
	HX_("setPixel",84,2f,d8,d0),
	HX_("setPixel32",23,45,e6,da),
	HX_("setPixels",6f,64,51,ec),
	HX_("setVector",05,26,05,f7),
	HX_("threshold",ab,c3,a3,34),
	HX_("unlock",c4,a2,8c,65),
	HX_("__applyAlpha",30,9e,7b,05),
	HX_("__drawCairo",c4,ae,50,37),
	HX_("__drawCanvas",1c,4b,99,32),
	HX_("__drawGL",49,de,05,88),
	HX_("__fillRect",67,b8,f1,0f),
	HX_("__fromBase64",b9,7d,ff,d0),
	HX_("__fromBytes",81,3b,4d,a0),
	HX_("__fromFile",26,10,c0,44),
	HX_("__fromImage",71,52,1e,a0),
	HX_("__fromSymbol",82,2f,b5,6a),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__loadFromBase64",7f,97,5c,63),
	HX_("__loadFromBytes",7b,fc,38,7c),
	HX_("__loadFromFile",6c,0c,b1,7b),
	HX_("__renderCairo",32,9e,42,55),
	HX_("__renderCairoMask",3e,0c,22,6b),
	HX_("__renderCanvas",ee,db,58,48),
	HX_("__renderCanvasMask",fa,d7,ef,51),
	HX_("__renderDOM",ac,f5,83,fb),
	HX_("__renderGL",1b,1e,14,56),
	HX_("__renderGLMask",a7,34,7c,b4),
	HX_("__resize",14,c5,aa,b0),
	HX_("__setUVRect",27,52,8b,10),
	HX_("__sync",7b,1d,58,fb),
	HX_("__update",29,f1,34,2f),
	HX_("__updateTransforms",10,f4,b0,50),
	::String(null()) };

static void BitmapData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapData_obj::VERTEX_BUFFER_STRIDE,"VERTEX_BUFFER_STRIDE");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___supportsBGRA,"__supportsBGRA");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___textureFormat,"__textureFormat");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___textureInternalFormat,"__textureInternalFormat");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___tempVector,"__tempVector");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapData_obj::VERTEX_BUFFER_STRIDE,"VERTEX_BUFFER_STRIDE");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___supportsBGRA,"__supportsBGRA");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___textureFormat,"__textureFormat");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___textureInternalFormat,"__textureInternalFormat");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___tempVector,"__tempVector");
};

#endif

hx::Class BitmapData_obj::__mClass;

static ::String BitmapData_obj_sStaticFields[] = {
	HX_("VERTEX_BUFFER_STRIDE",5d,b3,e6,c3),
	HX_("__supportsBGRA",58,53,57,0f),
	HX_("__textureFormat",52,9b,58,18),
	HX_("__textureInternalFormat",6f,15,aa,a7),
	HX_("__tempVector",17,ea,60,eb),
	HX_("fromBase64",99,02,6c,98),
	HX_("fromBytes",a1,f2,20,72),
	HX_("fromFile",06,9d,87,a1),
	HX_("fromImage",91,09,f2,71),
	HX_("fromTexture",91,2c,21,37),
	HX_("loadFromBase64",5f,0c,1d,2f),
	HX_("loadFromBytes",9b,c3,86,f4),
	HX_("loadFromFile",4c,89,f0,5a),
	::String(null())
};

void BitmapData_obj::__register()
{
	BitmapData_obj _hx_dummy;
	BitmapData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.display.BitmapData",a3,12,41,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapData_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapData_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_128_boot)
HXDLIN( 128)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(9)
            				->setFixed(0,HX_("compare",a5,18,69,83), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(1,HX_("__framebufferContext",a2,6b,52,89), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(2,HX_("__fromImage",71,52,1e,a0), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(3,HX_("getSurface",37,ec,aa,ac), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(4,HX_("image",5b,1f,69,bd), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(5,HX_("__surface",0d,b7,97,de), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(6,HX_("__indexBufferContext",7d,ed,2f,1d), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(7,HX_("__vertexBufferContext",ab,e7,39,35), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(8,HX_("__textureContext",74,21,78,6f), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c))))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_130_boot)
HXDLIN( 130)		VERTEX_BUFFER_STRIDE = 14;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e7567b6ca69cedca_131_boot)
HXDLIN( 131)		_hx___supportsBGRA = null();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_e7567b6ca69cedca_135_boot)
HXDLIN( 135)		_hx___tempVector =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace openfl
} // end namespace display
