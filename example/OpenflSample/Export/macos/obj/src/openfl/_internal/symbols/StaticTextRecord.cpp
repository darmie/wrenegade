// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_openfl__internal_symbols_StaticTextRecord
#include <openfl/_internal/symbols/StaticTextRecord.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_94798ee06130056c_130_new,"openfl._internal.symbols.StaticTextRecord","new",0xb28773e1,"openfl._internal.symbols.StaticTextRecord.new","openfl/_internal/symbols/StaticTextSymbol.hx",130,0x451958e5)
namespace openfl{
namespace _internal{
namespace symbols{

void StaticTextRecord_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_94798ee06130056c_130_new)
            	}

Dynamic StaticTextRecord_obj::__CreateEmpty() { return new StaticTextRecord_obj; }

void *StaticTextRecord_obj::_hx_vtable = 0;

Dynamic StaticTextRecord_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StaticTextRecord_obj > _hx_result = new StaticTextRecord_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StaticTextRecord_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x26a21b9b;
}


StaticTextRecord_obj::StaticTextRecord_obj()
{
}

void StaticTextRecord_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StaticTextRecord);
	HX_MARK_MEMBER_NAME(advances,"advances");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(fontHeight,"fontHeight");
	HX_MARK_MEMBER_NAME(fontID,"fontID");
	HX_MARK_MEMBER_NAME(glyphs,"glyphs");
	HX_MARK_MEMBER_NAME(offsetX,"offsetX");
	HX_MARK_MEMBER_NAME(offsetY,"offsetY");
	HX_MARK_END_CLASS();
}

void StaticTextRecord_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(advances,"advances");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(fontHeight,"fontHeight");
	HX_VISIT_MEMBER_NAME(fontID,"fontID");
	HX_VISIT_MEMBER_NAME(glyphs,"glyphs");
	HX_VISIT_MEMBER_NAME(offsetX,"offsetX");
	HX_VISIT_MEMBER_NAME(offsetY,"offsetY");
}

hx::Val StaticTextRecord_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fontID") ) { return hx::Val( fontID ); }
		if (HX_FIELD_EQ(inName,"glyphs") ) { return hx::Val( glyphs ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { return hx::Val( offsetX ); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { return hx::Val( offsetY ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"advances") ) { return hx::Val( advances ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fontHeight") ) { return hx::Val( fontHeight ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val StaticTextRecord_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fontID") ) { fontID=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glyphs") ) { glyphs=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { offsetX=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetY") ) { offsetY=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"advances") ) { advances=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fontHeight") ) { fontHeight=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StaticTextRecord_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("advances",b1,69,7b,3b));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("fontHeight",16,9f,9f,b6));
	outFields->push(HX_("fontID",6a,ef,ee,fa));
	outFields->push(HX_("glyphs",47,f9,58,ae));
	outFields->push(HX_("offsetX",65,09,65,d7));
	outFields->push(HX_("offsetY",66,09,65,d7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo StaticTextRecord_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< int > */ ,(int)offsetof(StaticTextRecord_obj,advances),HX_("advances",b1,69,7b,3b)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(StaticTextRecord_obj,color),HX_("color",63,71,5c,4a)},
	{hx::fsInt,(int)offsetof(StaticTextRecord_obj,fontHeight),HX_("fontHeight",16,9f,9f,b6)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(StaticTextRecord_obj,fontID),HX_("fontID",6a,ef,ee,fa)},
	{hx::fsObject /* ::Array< int > */ ,(int)offsetof(StaticTextRecord_obj,glyphs),HX_("glyphs",47,f9,58,ae)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(StaticTextRecord_obj,offsetX),HX_("offsetX",65,09,65,d7)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(StaticTextRecord_obj,offsetY),HX_("offsetY",66,09,65,d7)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *StaticTextRecord_obj_sStaticStorageInfo = 0;
#endif

static ::String StaticTextRecord_obj_sMemberFields[] = {
	HX_("advances",b1,69,7b,3b),
	HX_("color",63,71,5c,4a),
	HX_("fontHeight",16,9f,9f,b6),
	HX_("fontID",6a,ef,ee,fa),
	HX_("glyphs",47,f9,58,ae),
	HX_("offsetX",65,09,65,d7),
	HX_("offsetY",66,09,65,d7),
	::String(null()) };

hx::Class StaticTextRecord_obj::__mClass;

void StaticTextRecord_obj::__register()
{
	StaticTextRecord_obj _hx_dummy;
	StaticTextRecord_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.symbols.StaticTextRecord",6f,ef,2d,4b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StaticTextRecord_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StaticTextRecord_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StaticTextRecord_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StaticTextRecord_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace symbols
