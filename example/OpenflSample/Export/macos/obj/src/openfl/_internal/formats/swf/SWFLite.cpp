// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLite
#include <openfl/_internal/formats/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLiteLibrary
#include <openfl/_internal/formats/swf/SWFLiteLibrary.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_BitmapSymbol
#include <openfl/_internal/symbols/BitmapSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SpriteSymbol
#include <openfl/_internal/symbols/SpriteSymbol.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_SimpleButton
#include <openfl/display/SimpleButton.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_AssetLibrary
#include <openfl/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_31_new,"openfl._internal.formats.swf.SWFLite","new",0x8f32a7f4,"openfl._internal.formats.swf.SWFLite.new","openfl/_internal/formats/swf/SWFLite.hx",31,0x106a09c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_40_createButton,"openfl._internal.formats.swf.SWFLite","createButton",0x575137fa,"openfl._internal.formats.swf.SWFLite.createButton","openfl/_internal/formats/swf/SWFLite.hx",40,0x106a09c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_44_createMovieClip,"openfl._internal.formats.swf.SWFLite","createMovieClip",0x199da198,"openfl._internal.formats.swf.SWFLite.createMovieClip","openfl/_internal/formats/swf/SWFLite.hx",44,0x106a09c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_65_getBitmapData,"openfl._internal.formats.swf.SWFLite","getBitmapData",0xed3aaa83,"openfl._internal.formats.swf.SWFLite.getBitmapData","openfl/_internal/formats/swf/SWFLite.hx",65,0x106a09c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_82_hasSymbol,"openfl._internal.formats.swf.SWFLite","hasSymbol",0xca4920e6,"openfl._internal.formats.swf.SWFLite.hasSymbol","openfl/_internal/formats/swf/SWFLite.hx",82,0x106a09c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_128_serialize,"openfl._internal.formats.swf.SWFLite","serialize",0x8f751c74,"openfl._internal.formats.swf.SWFLite.serialize","openfl/_internal/formats/swf/SWFLite.hx",128,0x106a09c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_155___init,"openfl._internal.formats.swf.SWFLite","__init",0x0348bb1c,"openfl._internal.formats.swf.SWFLite.__init","openfl/_internal/formats/swf/SWFLite.hx",155,0x106a09c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_87_resolveClass,"openfl._internal.formats.swf.SWFLite","resolveClass",0xdbf95398,"openfl._internal.formats.swf.SWFLite.resolveClass","openfl/_internal/formats/swf/SWFLite.hx",87,0x106a09c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_106_resolveEnum,"openfl._internal.formats.swf.SWFLite","resolveEnum",0x2df01ba1,"openfl._internal.formats.swf.SWFLite.resolveEnum","openfl/_internal/formats/swf/SWFLite.hx",106,0x106a09c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_135_unserialize,"openfl._internal.formats.swf.SWFLite","unserialize",0xca376ffb,"openfl._internal.formats.swf.SWFLite.unserialize","openfl/_internal/formats/swf/SWFLite.hx",135,0x106a09c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_19_boot,"openfl._internal.formats.swf.SWFLite","boot",0xb5394e1e,"openfl._internal.formats.swf.SWFLite.boot","openfl/_internal/formats/swf/SWFLite.hx",19,0x106a09c0)
HX_LOCAL_STACK_FRAME(_hx_pos_6f11ba33c9e9e3a5_21_boot,"openfl._internal.formats.swf.SWFLite","boot",0xb5394e1e,"openfl._internal.formats.swf.SWFLite.boot","openfl/_internal/formats/swf/SWFLite.hx",21,0x106a09c0)
namespace openfl{
namespace _internal{
namespace formats{
namespace swf{

void SWFLite_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_31_new)
HXLINE(  32)		this->symbols =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  33)		this->symbolsByClassName =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}

Dynamic SWFLite_obj::__CreateEmpty() { return new SWFLite_obj; }

void *SWFLite_obj::_hx_vtable = 0;

Dynamic SWFLite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SWFLite_obj > _hx_result = new SWFLite_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SWFLite_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0009d586;
}

 ::openfl::display::SimpleButton SWFLite_obj::createButton(::String className){
            	HX_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_40_createButton)
HXDLIN(  40)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(SWFLite_obj,createButton,return )

 ::openfl::display::MovieClip SWFLite_obj::createMovieClip(::String __o_className){
            		::String className = __o_className;
            		if (hx::IsNull(__o_className)) className = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_44_createMovieClip)
HXLINE(  45)		if ((className == HX_("",00,00,00,00))) {
HXLINE(  47)			return Dynamic( this->root->_hx___createObject(hx::ObjectPtr<OBJ_>(this))).StaticCast<  ::openfl::display::MovieClip >();
            		}
            		else {
HXLINE(  51)			 ::openfl::_internal::symbols::SWFSymbol symbol = ( ( ::openfl::_internal::symbols::SWFSymbol)(this->symbolsByClassName->get(className)) );
HXLINE(  52)			if (hx::IsNotNull( symbol )) {
HXLINE(  54)				if (::Std_obj::is(symbol,hx::ClassOf< ::openfl::_internal::symbols::SpriteSymbol >())) {
HXLINE(  56)					return Dynamic( hx::TCast<  ::openfl::_internal::symbols::SpriteSymbol >::cast(symbol)->_hx___createObject(hx::ObjectPtr<OBJ_>(this))).StaticCast<  ::openfl::display::MovieClip >();
            				}
            			}
            		}
HXLINE(  61)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(SWFLite_obj,createMovieClip,return )

 ::openfl::display::BitmapData SWFLite_obj::getBitmapData(::String className){
            	HX_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_65_getBitmapData)
HXLINE(  66)		 ::openfl::_internal::symbols::SWFSymbol symbol = ( ( ::openfl::_internal::symbols::SWFSymbol)(this->symbolsByClassName->get(className)) );
HXLINE(  68)		if (hx::IsNotNull( symbol )) {
HXLINE(  70)			if (::Std_obj::is(symbol,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >())) {
HXLINE(  72)				 ::openfl::_internal::symbols::BitmapSymbol bitmap = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol) );
HXLINE(  73)				return ::openfl::utils::Assets_obj::getBitmapData(bitmap->path,null());
            			}
            		}
HXLINE(  77)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(SWFLite_obj,getBitmapData,return )

bool SWFLite_obj::hasSymbol(::String className){
            	HX_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_82_hasSymbol)
HXDLIN(  82)		return this->symbolsByClassName->exists(className);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SWFLite_obj,hasSymbol,return )

::String SWFLite_obj::serialize(){
            	HX_GC_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_128_serialize)
HXLINE( 129)		 ::haxe::Serializer serializer =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXLINE( 130)		serializer->serialize(hx::ObjectPtr<OBJ_>(this));
HXLINE( 131)		return serializer->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SWFLite_obj,serialize,return )

void SWFLite_obj::_hx___init(){
            	HX_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_155___init)
HXDLIN( 155)		 ::Dynamic symbol = this->symbols->iterator();
HXDLIN( 155)		while(( (bool)(symbol->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 155)			 ::openfl::_internal::symbols::SWFSymbol symbol1 = ( ( ::openfl::_internal::symbols::SWFSymbol)(symbol->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 157)			bool _hx_tmp;
HXDLIN( 157)			if (hx::IsNotNull( symbol1 )) {
HXLINE( 157)				_hx_tmp = hx::IsNull( symbol1->className );
            			}
            			else {
HXLINE( 157)				_hx_tmp = true;
            			}
HXDLIN( 157)			if (_hx_tmp) {
HXLINE( 157)				continue;
            			}
HXLINE( 158)			this->symbolsByClassName->set(symbol1->className,symbol1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SWFLite_obj,_hx___init,(void))

 ::haxe::ds::StringMap SWFLite_obj::instances;

hx::Class SWFLite_obj::resolveClass(::String name){
            	HX_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_87_resolveClass)
HXLINE(  88)		hx::Class value = ::Type_obj::resolveClass(name);
HXLINE(  97)		if (hx::IsNull( value )) {
HXLINE(  97)			value = ::Type_obj::resolveClass(::StringTools_obj::replace(name,HX_("openfl._legacy",0a,81,e4,28),HX_("openfl",90,63,94,21)));
            		}
HXLINE(  98)		if (hx::IsNull( value )) {
HXLINE(  98)			value = ::Type_obj::resolveClass(::StringTools_obj::replace(name,HX_("openfl._v2",3d,b9,65,2f),HX_("openfl",90,63,94,21)));
            		}
HXLINE( 101)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SWFLite_obj,resolveClass,return )

hx::Class SWFLite_obj::resolveEnum(::String name){
            	HX_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_106_resolveEnum)
HXLINE( 107)		hx::Class value = ::Type_obj::resolveEnum(name);
HXLINE( 120)		if (hx::IsNull( value )) {
HXLINE( 120)			value = ::Type_obj::resolveEnum(::StringTools_obj::replace(name,HX_("openfl._legacy",0a,81,e4,28),HX_("openfl",90,63,94,21)));
            		}
HXLINE( 121)		if (hx::IsNull( value )) {
HXLINE( 121)			value = ::Type_obj::resolveEnum(::StringTools_obj::replace(name,HX_("openfl._v2",3d,b9,65,2f),HX_("openfl",90,63,94,21)));
            		}
HXLINE( 124)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SWFLite_obj,resolveEnum,return )

 ::openfl::_internal::formats::swf::SWFLite SWFLite_obj::unserialize(::String data){
            	HX_GC_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_135_unserialize)
HXLINE( 136)		if (hx::IsNull( data )) {
HXLINE( 138)			return null();
            		}
HXLINE( 141)		 ::haxe::Unserializer unserializer =  ::haxe::Unserializer_obj::__alloc( HX_CTX ,data);
HXLINE( 142)		unserializer->setResolver( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("resolveClass",ac,bd,dd,80),::openfl::_internal::formats::swf::SWFLite_obj::resolveClass_dyn())
            			->setFixed(1,HX_("resolveEnum",0d,90,51,de),::openfl::_internal::formats::swf::SWFLite_obj::resolveEnum_dyn())));
HXLINE( 144)		 ::openfl::_internal::formats::swf::SWFLite swfLite = ( ( ::openfl::_internal::formats::swf::SWFLite)(unserializer->unserialize()) );
HXLINE( 145)		if (hx::IsNotNull( swfLite )) {
HXLINE( 147)			swfLite->_hx___init();
            		}
HXLINE( 150)		return swfLite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SWFLite_obj,unserialize,return )


hx::ObjectPtr< SWFLite_obj > SWFLite_obj::__new() {
	hx::ObjectPtr< SWFLite_obj > __this = new SWFLite_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SWFLite_obj > SWFLite_obj::__alloc(hx::Ctx *_hx_ctx) {
	SWFLite_obj *__this = (SWFLite_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SWFLite_obj), true, "openfl._internal.formats.swf.SWFLite"));
	*(void **)__this = SWFLite_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SWFLite_obj::SWFLite_obj()
{
}

void SWFLite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SWFLite);
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_MEMBER_NAME(library,"library");
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_MEMBER_NAME(symbols,"symbols");
	HX_MARK_MEMBER_NAME(symbolsByClassName,"symbolsByClassName");
	HX_MARK_END_CLASS();
}

void SWFLite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
	HX_VISIT_MEMBER_NAME(library,"library");
	HX_VISIT_MEMBER_NAME(root,"root");
	HX_VISIT_MEMBER_NAME(symbols,"symbols");
	HX_VISIT_MEMBER_NAME(symbolsByClassName,"symbolsByClassName");
}

hx::Val SWFLite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( root ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__init") ) { return hx::Val( _hx___init_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"library") ) { return hx::Val( library ); }
		if (HX_FIELD_EQ(inName,"symbols") ) { return hx::Val( symbols ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { return hx::Val( frameRate ); }
		if (HX_FIELD_EQ(inName,"hasSymbol") ) { return hx::Val( hasSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"serialize") ) { return hx::Val( serialize_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createButton") ) { return hx::Val( createButton_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { return hx::Val( getBitmapData_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createMovieClip") ) { return hx::Val( createMovieClip_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"symbolsByClassName") ) { return hx::Val( symbolsByClassName ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SWFLite_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"instances") ) { outValue = ( instances ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"resolveEnum") ) { outValue = resolveEnum_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"unserialize") ) { outValue = unserialize_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resolveClass") ) { outValue = resolveClass_dyn(); return true; }
	}
	return false;
}

hx::Val SWFLite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::openfl::_internal::symbols::SpriteSymbol >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"library") ) { library=inValue.Cast<  ::openfl::_internal::formats::swf::SWFLiteLibrary >(); return inValue; }
		if (HX_FIELD_EQ(inName,"symbols") ) { symbols=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { frameRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"symbolsByClassName") ) { symbolsByClassName=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SWFLite_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"instances") ) { instances=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void SWFLite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("frameRate",ad,11,25,39));
	outFields->push(HX_("library",fb,26,70,3f));
	outFields->push(HX_("root",22,ee,ae,4b));
	outFields->push(HX_("symbols",1b,be,1b,13));
	outFields->push(HX_("symbolsByClassName",71,53,ec,f9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SWFLite_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(SWFLite_obj,frameRate),HX_("frameRate",ad,11,25,39)},
	{hx::fsObject /*  ::openfl::_internal::formats::swf::SWFLiteLibrary */ ,(int)offsetof(SWFLite_obj,library),HX_("library",fb,26,70,3f)},
	{hx::fsObject /*  ::openfl::_internal::symbols::SpriteSymbol */ ,(int)offsetof(SWFLite_obj,root),HX_("root",22,ee,ae,4b)},
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(SWFLite_obj,symbols),HX_("symbols",1b,be,1b,13)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(SWFLite_obj,symbolsByClassName),HX_("symbolsByClassName",71,53,ec,f9)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SWFLite_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &SWFLite_obj::instances,HX_("instances",3e,83,1a,4b)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SWFLite_obj_sMemberFields[] = {
	HX_("frameRate",ad,11,25,39),
	HX_("library",fb,26,70,3f),
	HX_("root",22,ee,ae,4b),
	HX_("symbols",1b,be,1b,13),
	HX_("symbolsByClassName",71,53,ec,f9),
	HX_("createButton",0e,a2,35,fc),
	HX_("createMovieClip",04,bc,0f,b9),
	HX_("getBitmapData",ef,11,33,90),
	HX_("hasSymbol",52,62,c6,2f),
	HX_("serialize",e0,5d,f2,f4),
	HX_("__init",30,9e,b3,f4),
	::String(null()) };

static void SWFLite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SWFLite_obj::instances,"instances");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SWFLite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SWFLite_obj::instances,"instances");
};

#endif

hx::Class SWFLite_obj::__mClass;

static ::String SWFLite_obj_sStaticFields[] = {
	HX_("instances",3e,83,1a,4b),
	HX_("resolveClass",ac,bd,dd,80),
	HX_("resolveEnum",0d,90,51,de),
	HX_("unserialize",67,e4,98,7a),
	::String(null())
};

void SWFLite_obj::__register()
{
	SWFLite_obj _hx_dummy;
	SWFLite_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.formats.swf.SWFLite",02,de,e2,bb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SWFLite_obj::__GetStatic;
	__mClass->mSetStaticField = &SWFLite_obj::__SetStatic;
	__mClass->mMarkFunc = SWFLite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SWFLite_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SWFLite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SWFLite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SWFLite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SWFLite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SWFLite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SWFLite_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_19_boot)
HXDLIN(  19)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20)))))
            			->setFixed(1,HX_("statics",05,3c,65,36), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("resolveClass",ac,bd,dd,80), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))
            				->setFixed(1,HX_("resolveEnum",0d,90,51,de), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c))))))));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_6f11ba33c9e9e3a5_21_boot)
HXDLIN(  21)		instances =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace formats
} // end namespace swf
