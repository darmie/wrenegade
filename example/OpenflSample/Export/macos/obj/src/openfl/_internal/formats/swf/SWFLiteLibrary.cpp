// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_graphics_Image
#include <lime/app/Promise_lime_graphics_Image.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_utils_AssetLibrary
#include <lime/app/Promise_lime_utils_AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_AssetManifest
#include <lime/utils/AssetManifest.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLite
#include <openfl/_internal/formats/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_formats_swf_SWFLiteLibrary
#include <openfl/_internal/formats/swf/SWFLiteLibrary.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_BitmapSymbol
#include <openfl/_internal/symbols/BitmapSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_net_URLLoader
#include <openfl/net/URLLoader.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_AssetLibrary
#include <openfl/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_IAssetCache
#include <openfl/utils/IAssetCache.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_34737d8619f6a20d_40_new,"openfl._internal.formats.swf.SWFLiteLibrary","new",0xe9e9b68b,"openfl._internal.formats.swf.SWFLiteLibrary.new","openfl/_internal/formats/swf/SWFLiteLibrary.hx",40,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_65_exists,"openfl._internal.formats.swf.SWFLiteLibrary","exists",0x64ea2491,"openfl._internal.formats.swf.SWFLiteLibrary.exists","openfl/_internal/formats/swf/SWFLiteLibrary.hx",65,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_84_getImage,"openfl._internal.formats.swf.SWFLiteLibrary","getImage",0x9de10cda,"openfl._internal.formats.swf.SWFLiteLibrary.getImage","openfl/_internal/formats/swf/SWFLiteLibrary.hx",84,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_126_getMovieClip,"openfl._internal.formats.swf.SWFLiteLibrary","getMovieClip",0x17711b9f,"openfl._internal.formats.swf.SWFLiteLibrary.getMovieClip","openfl/_internal/formats/swf/SWFLiteLibrary.hx",126,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_133_isLocal,"openfl._internal.formats.swf.SWFLiteLibrary","isLocal",0xd93244cc,"openfl._internal.formats.swf.SWFLiteLibrary.isLocal","openfl/_internal/formats/swf/SWFLiteLibrary.hx",133,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_173_load,"openfl._internal.formats.swf.SWFLiteLibrary","load",0xc14b199b,"openfl._internal.formats.swf.SWFLiteLibrary.load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",173,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_149_load,"openfl._internal.formats.swf.SWFLiteLibrary","load",0xc14b199b,"openfl._internal.formats.swf.SWFLiteLibrary.load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",149,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_139_load,"openfl._internal.formats.swf.SWFLiteLibrary","load",0xc14b199b,"openfl._internal.formats.swf.SWFLiteLibrary.load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",139,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_209_load,"openfl._internal.formats.swf.SWFLiteLibrary","load",0xc14b199b,"openfl._internal.formats.swf.SWFLiteLibrary.load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",209,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_210_load,"openfl._internal.formats.swf.SWFLiteLibrary","load",0xc14b199b,"openfl._internal.formats.swf.SWFLiteLibrary.load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",210,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_220_loadImage,"openfl._internal.formats.swf.SWFLiteLibrary","loadImage",0xe4c1c3c0,"openfl._internal.formats.swf.SWFLiteLibrary.loadImage","openfl/_internal/formats/swf/SWFLiteLibrary.hx",220,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_246_loadImage,"openfl._internal.formats.swf.SWFLiteLibrary","loadImage",0xe4c1c3c0,"openfl._internal.formats.swf.SWFLiteLibrary.loadImage","openfl/_internal/formats/swf/SWFLiteLibrary.hx",246,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_243_loadImage,"openfl._internal.formats.swf.SWFLiteLibrary","loadImage",0xe4c1c3c0,"openfl._internal.formats.swf.SWFLiteLibrary.loadImage","openfl/_internal/formats/swf/SWFLiteLibrary.hx",243,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_274_unload,"openfl._internal.formats.swf.SWFLiteLibrary","unload",0x0a96a7b4,"openfl._internal.formats.swf.SWFLiteLibrary.unload","openfl/_internal/formats/swf/SWFLiteLibrary.hx",274,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_297___copyChannel,"openfl._internal.formats.swf.SWFLiteLibrary","__copyChannel",0x7aec2859,"openfl._internal.formats.swf.SWFLiteLibrary.__copyChannel","openfl/_internal/formats/swf/SWFLiteLibrary.hx",297,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_313___fromManifest,"openfl._internal.formats.swf.SWFLiteLibrary","__fromManifest",0x1d309e0e,"openfl._internal.formats.swf.SWFLiteLibrary.__fromManifest","openfl/_internal/formats/swf/SWFLiteLibrary.hx",313,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_329___load,"openfl._internal.formats.swf.SWFLiteLibrary","__load",0x9bba03fb,"openfl._internal.formats.swf.SWFLiteLibrary.__load","openfl/_internal/formats/swf/SWFLiteLibrary.hx",329,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_336___loadImage,"openfl._internal.formats.swf.SWFLiteLibrary","__loadImage",0x60453d60,"openfl._internal.formats.swf.SWFLiteLibrary.__loadImage","openfl/_internal/formats/swf/SWFLiteLibrary.hx",336,0x8efd6c01)
HX_LOCAL_STACK_FRAME(_hx_pos_34737d8619f6a20d_29_boot,"openfl._internal.formats.swf.SWFLiteLibrary","boot",0xbaaf03a7,"openfl._internal.formats.swf.SWFLiteLibrary.boot","openfl/_internal/formats/swf/SWFLiteLibrary.hx",29,0x8efd6c01)
namespace openfl{
namespace _internal{
namespace formats{
namespace swf{

void SWFLiteLibrary_obj::__construct(::String id,::String uuid){
            	HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_40_new)
HXLINE(  41)		super::__construct();
HXLINE(  43)		this->id = id;
HXLINE(  45)		::String _hx_tmp;
HXDLIN(  45)		if (hx::IsNotNull( uuid )) {
HXLINE(  45)			_hx_tmp = uuid;
            		}
            		else {
HXLINE(  45)			_hx_tmp = id;
            		}
HXDLIN(  45)		this->instanceID = _hx_tmp;
HXLINE(  47)		this->alphaCheck =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  48)		this->imageClassNames =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  53)		this->rootPath = HX_("",00,00,00,00);
            	}

Dynamic SWFLiteLibrary_obj::__CreateEmpty() { return new SWFLiteLibrary_obj; }

void *SWFLiteLibrary_obj::_hx_vtable = 0;

Dynamic SWFLiteLibrary_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SWFLiteLibrary_obj > _hx_result = new SWFLiteLibrary_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SWFLiteLibrary_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x34644188) {
		if (inClassId<=(int)0x0f09d631) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0f09d631;
		} else {
			return inClassId==(int)0x34644188;
		}
	} else {
		return inClassId==(int)0x425552e3;
	}
}

bool SWFLiteLibrary_obj::exists(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_65_exists)
HXLINE(  66)		if (hx::IsNull( this->swf )) {
HXLINE(  66)			return false;
            		}
HXLINE(  68)		bool _hx_tmp;
HXDLIN(  68)		if ((id == HX_("",00,00,00,00))) {
HXLINE(  68)			_hx_tmp = (type == HX_("MOVIE_CLIP",1f,e1,aa,77));
            		}
            		else {
HXLINE(  68)			_hx_tmp = false;
            		}
HXDLIN(  68)		if (_hx_tmp) {
HXLINE(  70)			return true;
            		}
HXLINE(  73)		bool _hx_tmp1;
HXDLIN(  73)		if ((type != HX_("IMAGE",3b,57,57,3b))) {
HXLINE(  73)			_hx_tmp1 = (type == HX_("MOVIE_CLIP",1f,e1,aa,77));
            		}
            		else {
HXLINE(  73)			_hx_tmp1 = true;
            		}
HXDLIN(  73)		if (_hx_tmp1) {
HXLINE(  75)			if (hx::IsNotNull( this->swf )) {
HXLINE(  75)				return this->swf->hasSymbol(id);
            			}
            			else {
HXLINE(  75)				return false;
            			}
            		}
HXLINE(  78)		return false;
            	}


 ::lime::graphics::Image SWFLiteLibrary_obj::getImage(::String id){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_84_getImage)
HXLINE(  85)		if (this->imageClassNames->exists(id)) {
HXLINE(  87)			id = this->imageClassNames->get_string(id);
            		}
HXLINE(  92)		if (!(this->alphaCheck->exists(id))) {
HXLINE(  94)			{
HXLINE(  94)				 ::Dynamic symbol = this->swf->symbols->iterator();
HXDLIN(  94)				while(( (bool)(symbol->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  94)					 ::openfl::_internal::symbols::SWFSymbol symbol1 = ( ( ::openfl::_internal::symbols::SWFSymbol)(symbol->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  96)					bool _hx_tmp;
HXDLIN(  96)					if (::Std_obj::is(symbol1,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >())) {
HXLINE(  96)						_hx_tmp = (hx::TCast<  ::openfl::_internal::symbols::BitmapSymbol >::cast(symbol1)->path == id);
            					}
            					else {
HXLINE(  96)						_hx_tmp = false;
            					}
HXDLIN(  96)					if (_hx_tmp) {
HXLINE(  98)						 ::openfl::_internal::symbols::BitmapSymbol bitmapSymbol = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol1) );
HXLINE( 100)						if (hx::IsNotNull( bitmapSymbol->alpha )) {
HXLINE( 102)							 ::lime::graphics::Image image = this->super::getImage(id);
HXLINE( 103)							 ::lime::graphics::Image alpha = this->super::getImage(bitmapSymbol->alpha);
HXLINE( 105)							this->_hx___copyChannel(image,alpha);
HXLINE( 107)							this->cachedImages->set(id,image);
HXLINE( 108)							this->cachedImages->remove(bitmapSymbol->alpha);
HXLINE( 109)							this->alphaCheck->set(id,true);
HXLINE( 111)							return image;
            						}
            					}
            				}
            			}
HXLINE( 116)			this->alphaCheck->set(id,true);
            		}
HXLINE( 119)		return this->super::getImage(id);
            	}


 ::openfl::display::MovieClip SWFLiteLibrary_obj::getMovieClip(::String id){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_126_getMovieClip)
HXDLIN( 126)		if (hx::IsNotNull( this->swf )) {
HXDLIN( 126)			return this->swf->createMovieClip(id);
            		}
            		else {
HXDLIN( 126)			return null();
            		}
HXDLIN( 126)		return null();
            	}


bool SWFLiteLibrary_obj::isLocal(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_133_isLocal)
HXDLIN( 133)		return true;
            	}


 ::lime::app::Future SWFLiteLibrary_obj::load(){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::openfl::_internal::formats::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            		void _hx_run(::String data){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::_internal::formats::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::lime::utils::AssetLibrary _){
            				HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_173_load)
HXLINE( 174)				_gthis->preloading = false;
HXLINE( 175)				promise->complete(_gthis);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_149_load)
HXLINE( 150)			_gthis->cachedText->set(_gthis->id,data);
HXLINE( 152)			_gthis->swf = ::openfl::_internal::formats::swf::SWFLite_obj::unserialize(data);
HXLINE( 153)			_gthis->swf->library = _gthis;
HXLINE( 155)			 ::openfl::_internal::symbols::BitmapSymbol bitmapSymbol;
HXLINE( 157)			{
HXLINE( 157)				 ::Dynamic symbol = _gthis->swf->symbols->iterator();
HXDLIN( 157)				while(( (bool)(symbol->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 157)					 ::openfl::_internal::symbols::SWFSymbol symbol1 = ( ( ::openfl::_internal::symbols::SWFSymbol)(symbol->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 159)					if (::Std_obj::is(symbol1,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >())) {
HXLINE( 161)						bitmapSymbol = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol1) );
HXLINE( 163)						if (hx::IsNotNull( bitmapSymbol->className )) {
HXLINE( 165)							_gthis->imageClassNames->set(bitmapSymbol->className,bitmapSymbol->path);
            						}
            					}
            				}
            			}
HXLINE( 170)			::openfl::_internal::formats::swf::SWFLite_obj::instances->set(_gthis->instanceID,_gthis->swf);
HXLINE( 172)			_gthis->_hx___load()->onProgress(promise->progress_dyn())->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_0(_gthis,promise)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_139_load)
HXLINE( 138)		 ::openfl::_internal::formats::swf::SWFLiteLibrary _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 140)		if (hx::IsNotNull( this->id )) {
HXLINE( 142)			this->preload->set(this->id,true);
            		}
HXLINE( 145)		 ::lime::app::Promise_lime_utils_AssetLibrary promise =  ::lime::app::Promise_lime_utils_AssetLibrary_obj::__alloc( HX_CTX );
HXLINE( 146)		this->preloading = true;
HXLINE( 148)		 ::Dynamic onComplete =  ::Dynamic(new _hx_Closure_1(_gthis,promise));
HXLINE( 179)		if (::openfl::utils::Assets_obj::exists(this->id,null())) {
HXLINE( 188)			this->loadText(this->id)->onError(promise->error_dyn())->onComplete(onComplete);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::openfl::net::URLLoader,loader, ::Dynamic,onComplete) HXARGC(1)
            			void _hx_run( ::openfl::events::Event _1){
            				HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_209_load)
HXLINE( 209)				onComplete(loader->data);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::openfl::events::IOErrorEvent e){
            				HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_210_load)
HXLINE( 210)				promise->error(e);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 192)			{
HXLINE( 192)				 ::Dynamic id = this->paths->keys();
HXDLIN( 192)				while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 192)					::String id1 = ( (::String)(id->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 194)					this->preload->set(id1,true);
            				}
            			}
HXLINE( 197)			::String path = null();
HXLINE( 199)			if (this->paths->exists(this->id)) {
HXLINE( 201)				path = this->paths->get_string(this->id);
            			}
            			else {
HXLINE( 205)				bool path1;
HXDLIN( 205)				if (hx::IsNotNull( this->rootPath )) {
HXLINE( 205)					path1 = (this->rootPath != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 205)					path1 = false;
            				}
HXDLIN( 205)				if (path1) {
HXLINE( 205)					path = ((this->rootPath + HX_("/",2f,00,00,00)) + this->id);
            				}
            				else {
HXLINE( 205)					path = this->id;
            				}
            			}
HXLINE( 208)			 ::openfl::net::URLLoader loader =  ::openfl::net::URLLoader_obj::__alloc( HX_CTX ,null());
HXLINE( 209)			loader->addEventListener(HX_("complete",b9,00,c8,7f), ::Dynamic(new _hx_Closure_2(loader,onComplete)),null(),null(),null());
HXLINE( 210)			loader->addEventListener(HX_("ioError",02,fe,41,76), ::Dynamic(new _hx_Closure_3(promise)),null(),null(),null());
HXLINE( 211)			loader->load( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,path));
            		}
HXLINE( 214)		return promise->future;
            	}


 ::lime::app::Future SWFLiteLibrary_obj::loadImage(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_220_loadImage)
HXLINE( 219)		 ::openfl::_internal::formats::swf::SWFLiteLibrary _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 221)		if (this->imageClassNames->exists(id)) {
HXLINE( 223)			id = this->imageClassNames->get_string(id);
            		}
HXLINE( 228)		bool _hx_tmp;
HXDLIN( 228)		if (!(this->preloading)) {
HXLINE( 228)			_hx_tmp = !(this->alphaCheck->exists(id));
            		}
            		else {
HXLINE( 228)			_hx_tmp = false;
            		}
HXDLIN( 228)		if (_hx_tmp) {
HXLINE( 230)			 ::Dynamic symbol = this->swf->symbols->iterator();
HXDLIN( 230)			while(( (bool)(symbol->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 230)				 ::openfl::_internal::symbols::SWFSymbol symbol1 = ( ( ::openfl::_internal::symbols::SWFSymbol)(symbol->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 232)				bool _hx_tmp1;
HXDLIN( 232)				if (::Std_obj::is(symbol1,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >())) {
HXLINE( 232)					_hx_tmp1 = (hx::TCast<  ::openfl::_internal::symbols::BitmapSymbol >::cast(symbol1)->path == id);
            				}
            				else {
HXLINE( 232)					_hx_tmp1 = false;
            				}
HXDLIN( 232)				if (_hx_tmp1) {
HXLINE( 234)					 ::openfl::_internal::symbols::BitmapSymbol bitmapSymbol = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol1) );
HXLINE( 236)					if (hx::IsNotNull( bitmapSymbol->alpha )) {
            						HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1,::String,id, ::openfl::_internal::formats::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_graphics_Image,promise, ::openfl::_internal::symbols::BitmapSymbol,bitmapSymbol) HXARGC(1)
            						void _hx_run( ::lime::graphics::Image image){
            							HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0,::String,id, ::openfl::_internal::formats::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_graphics_Image,promise, ::openfl::_internal::symbols::BitmapSymbol,bitmapSymbol, ::lime::graphics::Image,image) HXARGC(1)
            							void _hx_run( ::lime::graphics::Image alpha){
            								HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_246_loadImage)
HXLINE( 247)								_gthis->_hx___copyChannel(image,alpha);
HXLINE( 249)								_gthis->cachedImages->set(id,image);
HXLINE( 250)								_gthis->cachedImages->remove(bitmapSymbol->alpha);
HXLINE( 251)								_gthis->alphaCheck->set(id,true);
HXLINE( 253)								promise->complete(image);
            							}
            							HX_END_LOCAL_FUNC1((void))

            							HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_243_loadImage)
HXLINE( 243)							_gthis->_hx___loadImage(bitmapSymbol->alpha)->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_0(id,_gthis,promise,bitmapSymbol,image)));
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 238)						 ::lime::app::Promise_lime_graphics_Image promise =  ::lime::app::Promise_lime_graphics_Image_obj::__alloc( HX_CTX );
HXLINE( 240)						this->_hx___loadImage(id)->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_1(id,_gthis,promise,bitmapSymbol)));
HXLINE( 257)						return promise->future;
            					}
            					else {
HXLINE( 261)						this->alphaCheck->set(id,true);
            					}
            				}
            			}
            		}
HXLINE( 268)		return this->super::loadImage(id);
            	}


void SWFLiteLibrary_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_274_unload)
HXLINE( 275)		if (hx::IsNull( this->swf )) {
HXLINE( 275)			return;
            		}
HXLINE( 277)		bool _hx_tmp;
HXDLIN( 277)		if (::openfl::_internal::formats::swf::SWFLite_obj::instances->exists(this->instanceID)) {
HXLINE( 277)			 ::openfl::_internal::formats::swf::SWFLite _hx_tmp1 = ( ( ::openfl::_internal::formats::swf::SWFLite)(::openfl::_internal::formats::swf::SWFLite_obj::instances->get(this->instanceID)) );
HXDLIN( 277)			_hx_tmp = hx::IsEq( _hx_tmp1,this->swf );
            		}
            		else {
HXLINE( 277)			_hx_tmp = false;
            		}
HXDLIN( 277)		if (_hx_tmp) {
HXLINE( 279)			::openfl::_internal::formats::swf::SWFLite_obj::instances->remove(this->instanceID);
            		}
HXLINE( 282)		 ::openfl::_internal::symbols::BitmapSymbol bitmap;
HXLINE( 284)		{
HXLINE( 284)			 ::Dynamic symbol = this->swf->symbols->iterator();
HXDLIN( 284)			while(( (bool)(symbol->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 284)				 ::openfl::_internal::symbols::SWFSymbol symbol1 = ( ( ::openfl::_internal::symbols::SWFSymbol)(symbol->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 286)				if (::Std_obj::is(symbol1,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >())) {
HXLINE( 288)					bitmap = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol1) );
HXLINE( 289)					::openfl::utils::IAssetCache_obj::removeBitmapData(::openfl::utils::Assets_obj::cache,bitmap->path);
            				}
            			}
            		}
            	}


void SWFLiteLibrary_obj::_hx___copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image alpha){
            	HX_GC_STACKFRAME(&_hx_pos_34737d8619f6a20d_297___copyChannel)
HXLINE( 298)		if (hx::IsNotNull( alpha )) {
HXLINE( 300)			 ::lime::math::Rectangle _hx_tmp = alpha->get_rect();
HXDLIN( 300)			image->copyChannel(alpha,_hx_tmp, ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null()),::lime::graphics::ImageChannel_obj::RED_dyn(),::lime::graphics::ImageChannel_obj::ALPHA_dyn());
            		}
HXLINE( 303)		image->buffer->premultiplied = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SWFLiteLibrary_obj,_hx___copyChannel,(void))

void SWFLiteLibrary_obj::_hx___fromManifest( ::lime::utils::AssetManifest manifest){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_313___fromManifest)
HXLINE( 314)		this->rootPath = manifest->rootPath;
HXLINE( 315)		this->super::_hx___fromManifest(manifest);
HXLINE( 317)		this->bytesTotal = 0;
HXLINE( 319)		{
HXLINE( 319)			 ::Dynamic id = this->paths->keys();
HXDLIN( 319)			while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 319)				::String id1 = ( (::String)(id->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 321)				 ::openfl::_internal::formats::swf::SWFLiteLibrary _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 321)				int _hx_tmp1 = _hx_tmp->bytesTotal;
HXDLIN( 321)				_hx_tmp->bytesTotal = (_hx_tmp1 + this->sizes->get(id1));
            			}
            		}
            	}


 ::lime::app::Future SWFLiteLibrary_obj::_hx___load(){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_329___load)
HXDLIN( 329)		return this->super::load();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SWFLiteLibrary_obj,_hx___load,return )

 ::lime::app::Future SWFLiteLibrary_obj::_hx___loadImage(::String id){
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_336___loadImage)
HXDLIN( 336)		return this->super::loadImage(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SWFLiteLibrary_obj,_hx___loadImage,return )


hx::ObjectPtr< SWFLiteLibrary_obj > SWFLiteLibrary_obj::__new(::String id,::String uuid) {
	hx::ObjectPtr< SWFLiteLibrary_obj > __this = new SWFLiteLibrary_obj();
	__this->__construct(id,uuid);
	return __this;
}

hx::ObjectPtr< SWFLiteLibrary_obj > SWFLiteLibrary_obj::__alloc(hx::Ctx *_hx_ctx,::String id,::String uuid) {
	SWFLiteLibrary_obj *__this = (SWFLiteLibrary_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SWFLiteLibrary_obj), true, "openfl._internal.formats.swf.SWFLiteLibrary"));
	*(void **)__this = SWFLiteLibrary_obj::_hx_vtable;
	__this->__construct(id,uuid);
	return __this;
}

SWFLiteLibrary_obj::SWFLiteLibrary_obj()
{
}

void SWFLiteLibrary_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SWFLiteLibrary);
	HX_MARK_MEMBER_NAME(alphaCheck,"alphaCheck");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(imageClassNames,"imageClassNames");
	HX_MARK_MEMBER_NAME(instanceID,"instanceID");
	HX_MARK_MEMBER_NAME(preloading,"preloading");
	HX_MARK_MEMBER_NAME(rootPath,"rootPath");
	HX_MARK_MEMBER_NAME(swf,"swf");
	 ::openfl::utils::AssetLibrary_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SWFLiteLibrary_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(alphaCheck,"alphaCheck");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(imageClassNames,"imageClassNames");
	HX_VISIT_MEMBER_NAME(instanceID,"instanceID");
	HX_VISIT_MEMBER_NAME(preloading,"preloading");
	HX_VISIT_MEMBER_NAME(rootPath,"rootPath");
	HX_VISIT_MEMBER_NAME(swf,"swf");
	 ::openfl::utils::AssetLibrary_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SWFLiteLibrary_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"swf") ) { return hx::Val( swf ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn() ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		if (HX_FIELD_EQ(inName,"__load") ) { return hx::Val( _hx___load_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isLocal") ) { return hx::Val( isLocal_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rootPath") ) { return hx::Val( rootPath ); }
		if (HX_FIELD_EQ(inName,"getImage") ) { return hx::Val( getImage_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadImage") ) { return hx::Val( loadImage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphaCheck") ) { return hx::Val( alphaCheck ); }
		if (HX_FIELD_EQ(inName,"instanceID") ) { return hx::Val( instanceID ); }
		if (HX_FIELD_EQ(inName,"preloading") ) { return hx::Val( preloading ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__loadImage") ) { return hx::Val( _hx___loadImage_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getMovieClip") ) { return hx::Val( getMovieClip_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__copyChannel") ) { return hx::Val( _hx___copyChannel_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__fromManifest") ) { return hx::Val( _hx___fromManifest_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"imageClassNames") ) { return hx::Val( imageClassNames ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SWFLiteLibrary_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"swf") ) { swf=inValue.Cast<  ::openfl::_internal::formats::swf::SWFLite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rootPath") ) { rootPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphaCheck") ) { alphaCheck=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instanceID") ) { instanceID=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"preloading") ) { preloading=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"imageClassNames") ) { imageClassNames=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SWFLiteLibrary_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("alphaCheck",8a,ec,5b,66));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("imageClassNames",ab,bf,09,89));
	outFields->push(HX_("instanceID",b0,2e,18,6c));
	outFields->push(HX_("preloading",b9,08,ef,a9));
	outFields->push(HX_("rootPath",e7,b8,88,e1));
	outFields->push(HX_("swf",42,ab,57,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SWFLiteLibrary_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(SWFLiteLibrary_obj,alphaCheck),HX_("alphaCheck",8a,ec,5b,66)},
	{hx::fsString,(int)offsetof(SWFLiteLibrary_obj,id),HX_("id",db,5b,00,00)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(SWFLiteLibrary_obj,imageClassNames),HX_("imageClassNames",ab,bf,09,89)},
	{hx::fsString,(int)offsetof(SWFLiteLibrary_obj,instanceID),HX_("instanceID",b0,2e,18,6c)},
	{hx::fsBool,(int)offsetof(SWFLiteLibrary_obj,preloading),HX_("preloading",b9,08,ef,a9)},
	{hx::fsString,(int)offsetof(SWFLiteLibrary_obj,rootPath),HX_("rootPath",e7,b8,88,e1)},
	{hx::fsObject /*  ::openfl::_internal::formats::swf::SWFLite */ ,(int)offsetof(SWFLiteLibrary_obj,swf),HX_("swf",42,ab,57,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SWFLiteLibrary_obj_sStaticStorageInfo = 0;
#endif

static ::String SWFLiteLibrary_obj_sMemberFields[] = {
	HX_("alphaCheck",8a,ec,5b,66),
	HX_("id",db,5b,00,00),
	HX_("imageClassNames",ab,bf,09,89),
	HX_("instanceID",b0,2e,18,6c),
	HX_("preloading",b9,08,ef,a9),
	HX_("rootPath",e7,b8,88,e1),
	HX_("swf",42,ab,57,00),
	HX_("exists",dc,1d,e0,bf),
	HX_("getImage",e5,2e,40,1d),
	HX_("getMovieClip",2a,9f,71,27),
	HX_("isLocal",21,6d,76,15),
	HX_("load",26,9a,b7,47),
	HX_("loadImage",55,6b,a0,d8),
	HX_("unload",ff,a0,8c,65),
	HX_("__copyChannel",6e,be,5e,6b),
	HX_("__fromManifest",59,5a,01,91),
	HX_("__load",46,fd,af,f6),
	HX_("__loadImage",35,b4,cc,06),
	::String(null()) };

hx::Class SWFLiteLibrary_obj::__mClass;

void SWFLiteLibrary_obj::__register()
{
	SWFLiteLibrary_obj _hx_dummy;
	SWFLiteLibrary_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.formats.swf.SWFLiteLibrary",19,15,7b,a2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SWFLiteLibrary_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SWFLiteLibrary_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SWFLiteLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SWFLiteLibrary_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SWFLiteLibrary_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_34737d8619f6a20d_29_boot)
HXDLIN(  29)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace formats
} // end namespace swf
