// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_ShaderBuffer
#include <openfl/_internal/renderer/ShaderBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DBuffer
#include <openfl/_internal/renderer/context3D/Context3DBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DElementType
#include <openfl/_internal/renderer/context3D/Context3DElementType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DGraphics
#include <openfl/_internal/renderer/context3D/Context3DGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_context3D_Context3DMaskShader
#include <openfl/_internal/renderer/context3D/Context3DMaskShader.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_40_buildBuffer,"openfl._internal.renderer.context3D.Context3DGraphics","buildBuffer",0x73ee0a82,"openfl._internal.renderer.context3D.Context3DGraphics.buildBuffer","openfl/_internal/renderer/context3D/Context3DGraphics.hx",40,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_367_isCompatible,"openfl._internal.renderer.context3D.Context3DGraphics","isCompatible",0x42b459aa,"openfl._internal.renderer.context3D.Context3DGraphics.isCompatible","openfl/_internal/renderer/context3D/Context3DGraphics.hx",367,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_460_render,"openfl._internal.renderer.context3D.Context3DGraphics","render",0x91022022,"openfl._internal.renderer.context3D.Context3DGraphics.render","openfl/_internal/renderer/context3D/Context3DGraphics.hx",460,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_810_renderMask,"openfl._internal.renderer.context3D.Context3DGraphics","renderMask",0xd361462e,"openfl._internal.renderer.context3D.Context3DGraphics.renderMask","openfl/_internal/renderer/context3D/Context3DGraphics.hx",810,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_819_resizeIndexBuffer,"openfl._internal.renderer.context3D.Context3DGraphics","resizeIndexBuffer",0x8595e6d2,"openfl._internal.renderer.context3D.Context3DGraphics.resizeIndexBuffer","openfl/_internal/renderer/context3D/Context3DGraphics.hx",819,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_867_resizeVertexBuffer,"openfl._internal.renderer.context3D.Context3DGraphics","resizeVertexBuffer",0xd24b2a64,"openfl._internal.renderer.context3D.Context3DGraphics.resizeVertexBuffer","openfl/_internal/renderer/context3D/Context3DGraphics.hx",867,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_33_boot,"openfl._internal.renderer.context3D.Context3DGraphics","boot",0xd9dd2dfe,"openfl._internal.renderer.context3D.Context3DGraphics.boot","openfl/_internal/renderer/context3D/Context3DGraphics.hx",33,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_35_boot,"openfl._internal.renderer.context3D.Context3DGraphics","boot",0xd9dd2dfe,"openfl._internal.renderer.context3D.Context3DGraphics.boot","openfl/_internal/renderer/context3D/Context3DGraphics.hx",35,0x6c5d2b1c)
HX_LOCAL_STACK_FRAME(_hx_pos_d002914090c3588a_37_boot,"openfl._internal.renderer.context3D.Context3DGraphics","boot",0xd9dd2dfe,"openfl._internal.renderer.context3D.Context3DGraphics.boot","openfl/_internal/renderer/context3D/Context3DGraphics.hx",37,0x6c5d2b1c)
namespace openfl{
namespace _internal{
namespace renderer{
namespace context3D{

void Context3DGraphics_obj::__construct() { }

Dynamic Context3DGraphics_obj::__CreateEmpty() { return new Context3DGraphics_obj; }

void *Context3DGraphics_obj::_hx_vtable = 0;

Dynamic Context3DGraphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3DGraphics_obj > _hx_result = new Context3DGraphics_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Context3DGraphics_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7a96fc5a;
}

 ::openfl::display::BitmapData Context3DGraphics_obj::blankBitmapData;

bool Context3DGraphics_obj::maskRender;

 ::openfl::geom::ColorTransform Context3DGraphics_obj::tempColorTransform;

void Context3DGraphics_obj::buildBuffer( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer){
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_40_buildBuffer)
HXLINE(  41)		int quadBufferPosition = 0;
HXLINE(  42)		int triangleIndexBufferPosition = 0;
HXLINE(  43)		int vertexBufferPosition = 0;
HXLINE(  44)		int vertexBufferPositionUVT = 0;
HXLINE(  46)		 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE(  48)		 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE(  50)		 ::openfl::geom::Rectangle tileRect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE(  51)		 ::openfl::geom::Matrix tileTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE(  53)		 ::openfl::display::BitmapData bitmap = null();
HXLINE(  55)		{
HXLINE(  55)			int _g = 0;
HXDLIN(  55)			::Array< ::Dynamic> _g1 = graphics->_hx___commands->types;
HXDLIN(  55)			while((_g < _g1->length)){
HXLINE(  55)				 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN(  55)				_g = (_g + 1);
HXLINE(  57)				switch((int)(type->_hx_getIndex())){
            					case (int)0: {
HXLINE(  60)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN(  60)								data1->oPos = (data1->oPos + 2);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN(  60)								data2->bPos = (data2->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN(  60)								data3->iPos = (data3->iPos + 1);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN(  60)								data4->fPos = (data4->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data5 = data;
HXDLIN(  60)								data5->oPos = (data5->oPos + 4);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data6 = data;
HXDLIN(  60)								data6->iiPos = (data6->iiPos + 2);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data7 = data;
HXDLIN(  60)								data7->ffPos = (data7->ffPos + 1);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data8 = data;
HXDLIN(  60)								data8->fPos = (data8->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data9 = data;
HXDLIN(  60)								data9->oPos = (data9->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data10 = data;
HXDLIN(  60)								data10->fPos = (data10->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data11 = data;
HXDLIN(  60)								data11->fPos = (data11->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data12 = data;
HXDLIN(  60)								data12->fPos = (data12->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data13 = data;
HXDLIN(  60)								data13->fPos = (data13->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data14 = data;
HXDLIN(  60)								data14->oPos = (data14->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data15 = data;
HXDLIN(  60)								data15->fPos = (data15->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data16 = data;
HXDLIN(  60)								data16->fPos = (data16->fPos + 5);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data17 = data;
HXDLIN(  60)								data17->oPos = (data17->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data18 = data;
HXDLIN(  60)								data18->oPos = (data18->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data19 = data;
HXDLIN(  60)								data19->oPos = (data19->oPos + 2);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data20 = data;
HXDLIN(  60)								data20->bPos = (data20->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data21 = data;
HXDLIN(  60)								data21->oPos = (data21->oPos + 4);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data22 = data;
HXDLIN(  60)								data22->iiPos = (data22->iiPos + 2);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data23 = data;
HXDLIN(  60)								data23->ffPos = (data23->ffPos + 1);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data24 = data;
HXDLIN(  60)								data24->fPos = (data24->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data25 = data;
HXDLIN(  60)								data25->oPos = (data25->oPos + 4);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data26 = data;
HXDLIN(  60)								data26->iPos = (data26->iPos + 1);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data27 = data;
HXDLIN(  60)								data27->fPos = (data27->fPos + 2);
HXDLIN(  60)								 ::openfl::_internal::renderer::DrawCommandReader data28 = data;
HXDLIN(  60)								data28->bPos = (data28->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data29 = data;
HXDLIN(  60)								data29->fPos = (data29->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data30 = data;
HXDLIN(  60)								data30->fPos = (data30->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data31 = data;
HXDLIN(  60)								data31->oPos = (data31->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE(  60)								 ::openfl::_internal::renderer::DrawCommandReader data32 = data;
HXDLIN(  60)								data32->oPos = (data32->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  60)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(  60)						 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN(  60)						 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE(  61)						bitmap = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
            					}
            					break;
            					case (int)1: {
HXLINE(  64)						bitmap = null();
HXLINE(  65)						{
HXLINE(  65)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data33 = data;
HXDLIN(  65)									data33->oPos = (data33->oPos + 2);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data34 = data;
HXDLIN(  65)									data34->bPos = (data34->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data35 = data;
HXDLIN(  65)									data35->iPos = (data35->iPos + 1);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data36 = data;
HXDLIN(  65)									data36->fPos = (data36->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data37 = data;
HXDLIN(  65)									data37->oPos = (data37->oPos + 4);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data38 = data;
HXDLIN(  65)									data38->iiPos = (data38->iiPos + 2);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data39 = data;
HXDLIN(  65)									data39->ffPos = (data39->ffPos + 1);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data40 = data;
HXDLIN(  65)									data40->fPos = (data40->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data41 = data;
HXDLIN(  65)									data41->oPos = (data41->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data42 = data;
HXDLIN(  65)									data42->fPos = (data42->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data43 = data;
HXDLIN(  65)									data43->fPos = (data43->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data44 = data;
HXDLIN(  65)									data44->fPos = (data44->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data45 = data;
HXDLIN(  65)									data45->fPos = (data45->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data46 = data;
HXDLIN(  65)									data46->oPos = (data46->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data47 = data;
HXDLIN(  65)									data47->fPos = (data47->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data48 = data;
HXDLIN(  65)									data48->fPos = (data48->fPos + 5);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data49 = data;
HXDLIN(  65)									data49->oPos = (data49->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data50 = data;
HXDLIN(  65)									data50->oPos = (data50->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data51 = data;
HXDLIN(  65)									data51->oPos = (data51->oPos + 2);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data52 = data;
HXDLIN(  65)									data52->bPos = (data52->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data53 = data;
HXDLIN(  65)									data53->oPos = (data53->oPos + 4);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data54 = data;
HXDLIN(  65)									data54->iiPos = (data54->iiPos + 2);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data55 = data;
HXDLIN(  65)									data55->ffPos = (data55->ffPos + 1);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data56 = data;
HXDLIN(  65)									data56->fPos = (data56->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data57 = data;
HXDLIN(  65)									data57->oPos = (data57->oPos + 4);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data58 = data;
HXDLIN(  65)									data58->iPos = (data58->iPos + 1);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data59 = data;
HXDLIN(  65)									data59->fPos = (data59->fPos + 2);
HXDLIN(  65)									 ::openfl::_internal::renderer::DrawCommandReader data60 = data;
HXDLIN(  65)									data60->bPos = (data60->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data61 = data;
HXDLIN(  65)									data61->fPos = (data61->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data62 = data;
HXDLIN(  65)									data62->fPos = (data62->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data63 = data;
HXDLIN(  65)									data63->oPos = (data63->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE(  65)									 ::openfl::_internal::renderer::DrawCommandReader data64 = data;
HXDLIN(  65)									data64->oPos = (data64->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(  65)							data->prev = type;
            						}
            					}
            					break;
            					case (int)3: {
HXLINE(  68)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data65 = data;
HXDLIN(  68)								data65->oPos = (data65->oPos + 2);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data66 = data;
HXDLIN(  68)								data66->bPos = (data66->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data67 = data;
HXDLIN(  68)								data67->iPos = (data67->iPos + 1);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data68 = data;
HXDLIN(  68)								data68->fPos = (data68->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data69 = data;
HXDLIN(  68)								data69->oPos = (data69->oPos + 4);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data70 = data;
HXDLIN(  68)								data70->iiPos = (data70->iiPos + 2);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data71 = data;
HXDLIN(  68)								data71->ffPos = (data71->ffPos + 1);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data72 = data;
HXDLIN(  68)								data72->fPos = (data72->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data73 = data;
HXDLIN(  68)								data73->oPos = (data73->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data74 = data;
HXDLIN(  68)								data74->fPos = (data74->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data75 = data;
HXDLIN(  68)								data75->fPos = (data75->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data76 = data;
HXDLIN(  68)								data76->fPos = (data76->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data77 = data;
HXDLIN(  68)								data77->fPos = (data77->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data78 = data;
HXDLIN(  68)								data78->oPos = (data78->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data79 = data;
HXDLIN(  68)								data79->fPos = (data79->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data80 = data;
HXDLIN(  68)								data80->fPos = (data80->fPos + 5);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data81 = data;
HXDLIN(  68)								data81->oPos = (data81->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data82 = data;
HXDLIN(  68)								data82->oPos = (data82->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data83 = data;
HXDLIN(  68)								data83->oPos = (data83->oPos + 2);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data84 = data;
HXDLIN(  68)								data84->bPos = (data84->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data85 = data;
HXDLIN(  68)								data85->oPos = (data85->oPos + 4);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data86 = data;
HXDLIN(  68)								data86->iiPos = (data86->iiPos + 2);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data87 = data;
HXDLIN(  68)								data87->ffPos = (data87->ffPos + 1);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data88 = data;
HXDLIN(  68)								data88->fPos = (data88->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data89 = data;
HXDLIN(  68)								data89->oPos = (data89->oPos + 4);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data90 = data;
HXDLIN(  68)								data90->iPos = (data90->iPos + 1);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data91 = data;
HXDLIN(  68)								data91->fPos = (data91->fPos + 2);
HXDLIN(  68)								 ::openfl::_internal::renderer::DrawCommandReader data92 = data;
HXDLIN(  68)								data92->bPos = (data92->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data93 = data;
HXDLIN(  68)								data93->fPos = (data93->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data94 = data;
HXDLIN(  68)								data94->fPos = (data94->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data95 = data;
HXDLIN(  68)								data95->oPos = (data95->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE(  68)								 ::openfl::_internal::renderer::DrawCommandReader data96 = data;
HXDLIN(  68)								data96->oPos = (data96->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  68)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_SHADER_FILL_dyn();
HXDLIN(  68)						 ::openfl::_internal::renderer::DrawCommandReader this2 = data;
HXDLIN(  68)						 ::openfl::_internal::renderer::DrawCommandReader c1 = this2;
HXLINE(  69)						 ::openfl::_internal::renderer::ShaderBuffer shaderBuffer = ( ( ::openfl::_internal::renderer::ShaderBuffer)(c1->buffer->o->__get(c1->oPos)) );
HXLINE(  71)						bitmap = null();
HXLINE(  73)						if (hx::IsNotNull( shaderBuffer )) {
HXLINE(  75)							int _g2 = 0;
HXDLIN(  75)							int _g11 = shaderBuffer->inputCount;
HXDLIN(  75)							while((_g2 < _g11)){
HXLINE(  75)								_g2 = (_g2 + 1);
HXDLIN(  75)								int i = (_g2 - 1);
HXLINE(  77)								if ((shaderBuffer->inputRefs->__get(i).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >()->name == HX_("bitmap",ef,0f,0c,f1))) {
HXLINE(  79)									bitmap = shaderBuffer->inputs->__get(i).StaticCast<  ::openfl::display::BitmapData >();
HXLINE(  80)									goto _hx_goto_1;
            								}
            							}
            							_hx_goto_1:;
            						}
            					}
            					break;
            					case (int)8: {
HXLINE(  88)						if (hx::IsNotNull( bitmap )) {
HXLINE(  90)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data97 = data;
HXDLIN(  90)									data97->oPos = (data97->oPos + 2);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data98 = data;
HXDLIN(  90)									data98->bPos = (data98->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data99 = data;
HXDLIN(  90)									data99->iPos = (data99->iPos + 1);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data100 = data;
HXDLIN(  90)									data100->fPos = (data100->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data101 = data;
HXDLIN(  90)									data101->oPos = (data101->oPos + 4);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data102 = data;
HXDLIN(  90)									data102->iiPos = (data102->iiPos + 2);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data103 = data;
HXDLIN(  90)									data103->ffPos = (data103->ffPos + 1);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data104 = data;
HXDLIN(  90)									data104->fPos = (data104->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data105 = data;
HXDLIN(  90)									data105->oPos = (data105->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data106 = data;
HXDLIN(  90)									data106->fPos = (data106->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data107 = data;
HXDLIN(  90)									data107->fPos = (data107->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data108 = data;
HXDLIN(  90)									data108->fPos = (data108->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data109 = data;
HXDLIN(  90)									data109->fPos = (data109->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data110 = data;
HXDLIN(  90)									data110->oPos = (data110->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data111 = data;
HXDLIN(  90)									data111->fPos = (data111->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data112 = data;
HXDLIN(  90)									data112->fPos = (data112->fPos + 5);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data113 = data;
HXDLIN(  90)									data113->oPos = (data113->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data114 = data;
HXDLIN(  90)									data114->oPos = (data114->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data115 = data;
HXDLIN(  90)									data115->oPos = (data115->oPos + 2);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data116 = data;
HXDLIN(  90)									data116->bPos = (data116->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data117 = data;
HXDLIN(  90)									data117->oPos = (data117->oPos + 4);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data118 = data;
HXDLIN(  90)									data118->iiPos = (data118->iiPos + 2);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data119 = data;
HXDLIN(  90)									data119->ffPos = (data119->ffPos + 1);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data120 = data;
HXDLIN(  90)									data120->fPos = (data120->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data121 = data;
HXDLIN(  90)									data121->oPos = (data121->oPos + 4);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data122 = data;
HXDLIN(  90)									data122->iPos = (data122->iPos + 1);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data123 = data;
HXDLIN(  90)									data123->fPos = (data123->fPos + 2);
HXDLIN(  90)									 ::openfl::_internal::renderer::DrawCommandReader data124 = data;
HXDLIN(  90)									data124->bPos = (data124->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data125 = data;
HXDLIN(  90)									data125->fPos = (data125->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data126 = data;
HXDLIN(  90)									data126->fPos = (data126->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data127 = data;
HXDLIN(  90)									data127->oPos = (data127->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE(  90)									 ::openfl::_internal::renderer::DrawCommandReader data128 = data;
HXDLIN(  90)									data128->oPos = (data128->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(  90)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_QUADS_dyn();
HXDLIN(  90)							 ::openfl::_internal::renderer::DrawCommandReader this3 = data;
HXDLIN(  90)							 ::openfl::_internal::renderer::DrawCommandReader c2 = this3;
HXLINE(  91)							 ::openfl::_Vector::FloatVector rects = ( ( ::openfl::_Vector::FloatVector)(c2->buffer->o->__get(c2->oPos)) );
HXLINE(  92)							 ::openfl::_Vector::IntVector indices = ( ( ::openfl::_Vector::IntVector)(c2->buffer->o->__get((c2->oPos + 1))) );
HXLINE(  93)							 ::openfl::_Vector::FloatVector transforms = ( ( ::openfl::_Vector::FloatVector)(c2->buffer->o->__get((c2->oPos + 2))) );
HXLINE(  96)							::Array< Float > rects1;
HXDLIN(  96)							if (hx::IsNull( rects )) {
HXLINE(  96)								rects1 = null();
            							}
            							else {
HXLINE(  96)								rects1 = ( (::Array< Float >)(rects->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            							}
HXLINE(  97)							::Array< int > indices1;
HXDLIN(  97)							if (hx::IsNull( indices )) {
HXLINE(  97)								indices1 = null();
            							}
            							else {
HXLINE(  97)								indices1 = ( (::Array< int >)(indices->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            							}
HXLINE(  98)							::Array< Float > transforms1;
HXDLIN(  98)							if (hx::IsNull( transforms )) {
HXLINE(  98)								transforms1 = null();
            							}
            							else {
HXLINE(  98)								transforms1 = ( (::Array< Float >)(transforms->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            							}
HXLINE( 101)							bool hasIndices = hx::IsNotNull( indices1 );
HXLINE( 102)							bool transformABCD = false;
HXDLIN( 102)							bool transformXY = false;
HXLINE( 104)							int length;
HXDLIN( 104)							if (hasIndices) {
HXLINE( 104)								length = indices1->length;
            							}
            							else {
HXLINE( 104)								length = ::Math_obj::floor((( (Float)(rects1->length) ) / ( (Float)(4) )));
            							}
HXLINE( 105)							if ((length == 0)) {
HXLINE( 105)								return;
            							}
HXLINE( 107)							if (hx::IsNotNull( transforms1 )) {
HXLINE( 109)								if ((transforms1->length >= (length * 6))) {
HXLINE( 111)									transformABCD = true;
HXLINE( 112)									transformXY = true;
            								}
            								else {
HXLINE( 114)									if ((transforms1->length >= (length * 4))) {
HXLINE( 116)										transformABCD = true;
            									}
            									else {
HXLINE( 118)										if ((transforms1->length >= (length * 2))) {
HXLINE( 120)											transformXY = true;
            										}
            									}
            								}
            							}
HXLINE( 124)							int dataPerVertex = 4;
HXLINE( 125)							int stride = (dataPerVertex * 4);
HXLINE( 127)							if (hx::IsNull( graphics->_hx___quadBuffer )) {
HXLINE( 129)								graphics->_hx___quadBuffer =  ::openfl::_internal::renderer::context3D::Context3DBuffer_obj::__alloc( HX_CTX ,context,::openfl::_internal::renderer::context3D::Context3DElementType_obj::QUADS_dyn(),length,dataPerVertex);
            							}
            							else {
HXLINE( 133)								graphics->_hx___quadBuffer->resize((quadBufferPosition + length),dataPerVertex);
            							}
HXLINE( 136)							int vertexOffset;
HXDLIN( 136)							Float alpha = ((Float)1.0);
HXDLIN( 136)							 ::Dynamic tileData;
HXDLIN( 136)							 ::Dynamic id;
HXLINE( 137)							Float tileWidth;
HXDLIN( 137)							Float tileHeight;
HXLINE( 138)							Float uvX;
HXDLIN( 138)							Float uvY;
HXDLIN( 138)							Float uvWidth;
HXDLIN( 138)							Float uvHeight;
HXLINE( 139)							Float x;
HXDLIN( 139)							Float y;
HXDLIN( 139)							Float x2;
HXDLIN( 139)							Float y2;
HXDLIN( 139)							Float x3;
HXDLIN( 139)							Float y3;
HXDLIN( 139)							Float x4;
HXDLIN( 139)							Float y4;
HXLINE( 140)							int ri;
HXDLIN( 140)							int ti;
HXLINE( 142)							 ::lime::utils::ArrayBufferView vertexBufferData = graphics->_hx___quadBuffer->vertexBufferData;
HXLINE( 137)							int bitmapWidth = bitmap->width;
HXDLIN( 137)							int bitmapHeight = bitmap->height;
HXLINE( 160)							 ::openfl::geom::Rectangle sourceRect = bitmap->rect;
HXLINE( 162)							{
HXLINE( 162)								int _g3 = 0;
HXDLIN( 162)								int _g12 = length;
HXDLIN( 162)								while((_g3 < _g12)){
HXLINE( 162)									_g3 = (_g3 + 1);
HXDLIN( 162)									int i1 = (_g3 - 1);
HXLINE( 164)									vertexOffset = ((quadBufferPosition + i1) * stride);
HXLINE( 166)									if (hasIndices) {
HXLINE( 166)										ri = (indices1->__get(i1) * 4);
            									}
            									else {
HXLINE( 166)										ri = (i1 * 4);
            									}
HXLINE( 167)									if ((ri < 0)) {
HXLINE( 167)										continue;
            									}
HXLINE( 168)									tileRect->setTo(rects1->__get(ri),rects1->__get((ri + 1)),rects1->__get((ri + 2)),rects1->__get((ri + 3)));
HXLINE( 170)									tileWidth = tileRect->width;
HXLINE( 171)									tileHeight = tileRect->height;
HXLINE( 173)									bool _hx_tmp;
HXDLIN( 173)									if (!((tileWidth <= 0))) {
HXLINE( 173)										_hx_tmp = (tileHeight <= 0);
            									}
            									else {
HXLINE( 173)										_hx_tmp = true;
            									}
HXDLIN( 173)									if (_hx_tmp) {
HXLINE( 175)										continue;
            									}
HXLINE( 178)									bool _hx_tmp1;
HXDLIN( 178)									if (transformABCD) {
HXLINE( 178)										_hx_tmp1 = transformXY;
            									}
            									else {
HXLINE( 178)										_hx_tmp1 = false;
            									}
HXDLIN( 178)									if (_hx_tmp1) {
HXLINE( 180)										ti = (i1 * 6);
HXLINE( 181)										tileTransform->setTo(transforms1->__get(ti),transforms1->__get((ti + 1)),transforms1->__get((ti + 2)),transforms1->__get((ti + 3)),transforms1->__get((ti + 4)),transforms1->__get((ti + 5)));
            									}
            									else {
HXLINE( 185)										if (transformABCD) {
HXLINE( 187)											ti = (i1 * 4);
HXLINE( 188)											tileTransform->setTo(transforms1->__get(ti),transforms1->__get((ti + 1)),transforms1->__get((ti + 2)),transforms1->__get((ti + 3)),tileRect->x,tileRect->y);
            										}
            										else {
HXLINE( 190)											if (transformXY) {
HXLINE( 192)												ti = (i1 * 2);
HXLINE( 193)												tileTransform->tx = transforms1->__get(ti);
HXLINE( 194)												tileTransform->ty = transforms1->__get((ti + 1));
            											}
            											else {
HXLINE( 198)												tileTransform->tx = tileRect->x;
HXLINE( 199)												tileTransform->ty = tileRect->y;
            											}
            										}
            									}
HXLINE( 202)									uvX = (tileRect->x / ( (Float)(bitmapWidth) ));
HXLINE( 203)									uvY = (tileRect->y / ( (Float)(bitmapHeight) ));
HXLINE( 204)									uvWidth = (tileRect->get_right() / ( (Float)(bitmapWidth) ));
HXLINE( 205)									uvHeight = (tileRect->get_bottom() / ( (Float)(bitmapHeight) ));
HXLINE( 207)									x = (((( (Float)(0) ) * tileTransform->a) + (( (Float)(0) ) * tileTransform->c)) + tileTransform->tx);
HXLINE( 208)									y = (((( (Float)(0) ) * tileTransform->b) + (( (Float)(0) ) * tileTransform->d)) + tileTransform->ty);
HXLINE( 209)									x2 = (((tileWidth * tileTransform->a) + (( (Float)(0) ) * tileTransform->c)) + tileTransform->tx);
HXLINE( 210)									y2 = (((tileWidth * tileTransform->b) + (( (Float)(0) ) * tileTransform->d)) + tileTransform->ty);
HXLINE( 211)									x3 = (((( (Float)(0) ) * tileTransform->a) + (tileHeight * tileTransform->c)) + tileTransform->tx);
HXLINE( 212)									y3 = (((( (Float)(0) ) * tileTransform->b) + (tileHeight * tileTransform->d)) + tileTransform->ty);
HXLINE( 213)									x4 = (((tileWidth * tileTransform->a) + (tileHeight * tileTransform->c)) + tileTransform->tx);
HXLINE( 214)									y4 = (((tileWidth * tileTransform->b) + (tileHeight * tileTransform->d)) + tileTransform->ty);
HXLINE( 216)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (vertexOffset * 4)),x);
HXLINE( 217)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + 1) * 4)),y);
HXLINE( 218)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + 2) * 4)),uvX);
HXLINE( 219)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + 3) * 4)),uvY);
HXLINE( 221)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + dataPerVertex) * 4)),x2);
HXLINE( 222)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + dataPerVertex) + 1) * 4)),y2);
HXLINE( 223)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + dataPerVertex) + 2) * 4)),uvWidth);
HXLINE( 224)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + dataPerVertex) + 3) * 4)),uvY);
HXLINE( 226)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + (dataPerVertex * 2)) * 4)),x3);
HXLINE( 227)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 2)) + 1) * 4)),y3);
HXLINE( 228)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 2)) + 2) * 4)),uvX);
HXLINE( 229)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 2)) + 3) * 4)),uvHeight);
HXLINE( 231)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + ((vertexOffset + (dataPerVertex * 3)) * 4)),x4);
HXLINE( 232)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 3)) + 1) * 4)),y4);
HXLINE( 233)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 3)) + 2) * 4)),uvWidth);
HXLINE( 234)									 ::__hxcpp_memory_set_float(vertexBufferData->buffer->b,(vertexBufferData->byteOffset + (((vertexOffset + (dataPerVertex * 3)) + 3) * 4)),uvHeight);
            								}
            							}
HXLINE( 237)							quadBufferPosition = (quadBufferPosition + length);
            						}
            					}
            					break;
            					case (int)12: {
HXLINE( 241)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data129 = data;
HXDLIN( 241)								data129->oPos = (data129->oPos + 2);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data130 = data;
HXDLIN( 241)								data130->bPos = (data130->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data131 = data;
HXDLIN( 241)								data131->iPos = (data131->iPos + 1);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data132 = data;
HXDLIN( 241)								data132->fPos = (data132->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data133 = data;
HXDLIN( 241)								data133->oPos = (data133->oPos + 4);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data134 = data;
HXDLIN( 241)								data134->iiPos = (data134->iiPos + 2);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data135 = data;
HXDLIN( 241)								data135->ffPos = (data135->ffPos + 1);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data136 = data;
HXDLIN( 241)								data136->fPos = (data136->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data137 = data;
HXDLIN( 241)								data137->oPos = (data137->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data138 = data;
HXDLIN( 241)								data138->fPos = (data138->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data139 = data;
HXDLIN( 241)								data139->fPos = (data139->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data140 = data;
HXDLIN( 241)								data140->fPos = (data140->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data141 = data;
HXDLIN( 241)								data141->fPos = (data141->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data142 = data;
HXDLIN( 241)								data142->oPos = (data142->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data143 = data;
HXDLIN( 241)								data143->fPos = (data143->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data144 = data;
HXDLIN( 241)								data144->fPos = (data144->fPos + 5);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data145 = data;
HXDLIN( 241)								data145->oPos = (data145->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data146 = data;
HXDLIN( 241)								data146->oPos = (data146->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data147 = data;
HXDLIN( 241)								data147->oPos = (data147->oPos + 2);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data148 = data;
HXDLIN( 241)								data148->bPos = (data148->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data149 = data;
HXDLIN( 241)								data149->oPos = (data149->oPos + 4);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data150 = data;
HXDLIN( 241)								data150->iiPos = (data150->iiPos + 2);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data151 = data;
HXDLIN( 241)								data151->ffPos = (data151->ffPos + 1);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data152 = data;
HXDLIN( 241)								data152->fPos = (data152->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data153 = data;
HXDLIN( 241)								data153->oPos = (data153->oPos + 4);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data154 = data;
HXDLIN( 241)								data154->iPos = (data154->iPos + 1);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data155 = data;
HXDLIN( 241)								data155->fPos = (data155->fPos + 2);
HXDLIN( 241)								 ::openfl::_internal::renderer::DrawCommandReader data156 = data;
HXDLIN( 241)								data156->bPos = (data156->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data157 = data;
HXDLIN( 241)								data157->fPos = (data157->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data158 = data;
HXDLIN( 241)								data158->fPos = (data158->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data159 = data;
HXDLIN( 241)								data159->oPos = (data159->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE( 241)								 ::openfl::_internal::renderer::DrawCommandReader data160 = data;
HXDLIN( 241)								data160->oPos = (data160->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 241)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 241)						 ::openfl::_internal::renderer::DrawCommandReader this4 = data;
HXDLIN( 241)						 ::openfl::_internal::renderer::DrawCommandReader c3 = this4;
HXLINE( 242)						 ::openfl::_Vector::FloatVector vertices = ( ( ::openfl::_Vector::FloatVector)(c3->buffer->o->__get(c3->oPos)) );
HXLINE( 243)						 ::openfl::_Vector::IntVector indices2 = ( ( ::openfl::_Vector::IntVector)(c3->buffer->o->__get((c3->oPos + 1))) );
HXLINE( 244)						 ::openfl::_Vector::FloatVector uvtData = ( ( ::openfl::_Vector::FloatVector)(c3->buffer->o->__get((c3->oPos + 2))) );
HXLINE( 245)						 ::Dynamic culling = c3->buffer->o->__get((c3->oPos + 3));
HXLINE( 247)						bool hasIndices1 = hx::IsNotNull( indices2 );
HXLINE( 248)						int numVertices = ::Math_obj::floor((( (Float)(vertices->get_length()) ) / ( (Float)(2) )));
HXLINE( 249)						int length1;
HXDLIN( 249)						if (hasIndices1) {
HXLINE( 249)							length1 = indices2->get_length();
            						}
            						else {
HXLINE( 249)							length1 = numVertices;
            						}
HXLINE( 251)						bool hasUVData = hx::IsNotNull( uvtData );
HXLINE( 252)						bool hasUVTData;
HXDLIN( 252)						if (hasUVData) {
HXLINE( 252)							hasUVTData = (uvtData->get_length() >= (numVertices * 3));
            						}
            						else {
HXLINE( 252)							hasUVTData = false;
            						}
HXLINE( 253)						int vertLength;
HXDLIN( 253)						if (hasUVTData) {
HXLINE( 253)							vertLength = 4;
            						}
            						else {
HXLINE( 253)							vertLength = 2;
            						}
HXLINE( 254)						int uvStride;
HXDLIN( 254)						if (hasUVTData) {
HXLINE( 254)							uvStride = 3;
            						}
            						else {
HXLINE( 254)							uvStride = 2;
            						}
HXLINE( 256)						int dataPerVertex1 = (vertLength + 2);
HXLINE( 257)						int vertexOffset1;
HXDLIN( 257)						if (hasUVTData) {
HXLINE( 257)							vertexOffset1 = vertexBufferPositionUVT;
            						}
            						else {
HXLINE( 257)							vertexOffset1 = vertexBufferPosition;
            						}
HXLINE( 262)						::openfl::_internal::renderer::context3D::Context3DGraphics_obj::resizeVertexBuffer(graphics,hasUVTData,(vertexOffset1 + (length1 * dataPerVertex1)));
HXLINE( 265)						 ::lime::utils::ArrayBufferView vertexBufferData1;
HXDLIN( 265)						if (hasUVTData) {
HXLINE( 265)							vertexBufferData1 = graphics->_hx___vertexBufferDataUVT;
            						}
            						else {
HXLINE( 265)							vertexBufferData1 = graphics->_hx___vertexBufferData;
            						}
HXLINE( 266)						int offset;
HXDLIN( 266)						int vertOffset;
HXDLIN( 266)						int uvOffset;
HXDLIN( 266)						Float t;
HXLINE( 268)						{
HXLINE( 268)							int _g4 = 0;
HXDLIN( 268)							int _g13 = length1;
HXDLIN( 268)							while((_g4 < _g13)){
HXLINE( 268)								_g4 = (_g4 + 1);
HXDLIN( 268)								int i2 = (_g4 - 1);
HXLINE( 270)								offset = (vertexOffset1 + (i2 * dataPerVertex1));
HXLINE( 271)								if (hasIndices1) {
HXLINE( 271)									vertOffset = (indices2->get(i2) * 2);
            								}
            								else {
HXLINE( 271)									vertOffset = (i2 * 2);
            								}
HXLINE( 272)								if (hasIndices1) {
HXLINE( 272)									uvOffset = (indices2->get(i2) * uvStride);
            								}
            								else {
HXLINE( 272)									uvOffset = (i2 * uvStride);
            								}
HXLINE( 276)								if (hasUVTData) {
HXLINE( 278)									t = uvtData->get((uvOffset + 2));
HXLINE( 280)									{
HXLINE( 280)										Float val = (vertices->get(vertOffset) / t);
HXDLIN( 280)										 ::__hxcpp_memory_set_float(vertexBufferData1->buffer->b,(vertexBufferData1->byteOffset + (offset * 4)),val);
            									}
HXLINE( 281)									{
HXLINE( 281)										Float val1 = (vertices->get((vertOffset + 1)) / t);
HXDLIN( 281)										 ::__hxcpp_memory_set_float(vertexBufferData1->buffer->b,(vertexBufferData1->byteOffset + ((offset + 1) * 4)),val1);
            									}
HXLINE( 282)									 ::__hxcpp_memory_set_float(vertexBufferData1->buffer->b,(vertexBufferData1->byteOffset + ((offset + 2) * 4)),0);
HXLINE( 283)									{
HXLINE( 283)										Float val2 = (( (Float)(1) ) / t);
HXDLIN( 283)										 ::__hxcpp_memory_set_float(vertexBufferData1->buffer->b,(vertexBufferData1->byteOffset + ((offset + 3) * 4)),val2);
            									}
            								}
            								else {
HXLINE( 287)									{
HXLINE( 287)										Float val3 = vertices->get(vertOffset);
HXDLIN( 287)										 ::__hxcpp_memory_set_float(vertexBufferData1->buffer->b,(vertexBufferData1->byteOffset + (offset * 4)),val3);
            									}
HXLINE( 288)									{
HXLINE( 288)										Float val4 = vertices->get((vertOffset + 1));
HXDLIN( 288)										 ::__hxcpp_memory_set_float(vertexBufferData1->buffer->b,(vertexBufferData1->byteOffset + ((offset + 1) * 4)),val4);
            									}
            								}
HXLINE( 291)								{
HXLINE( 291)									Float val5;
HXDLIN( 291)									if (hasUVData) {
HXLINE( 291)										val5 = uvtData->get(uvOffset);
            									}
            									else {
HXLINE( 291)										val5 = ( (Float)(0) );
            									}
HXDLIN( 291)									 ::__hxcpp_memory_set_float(vertexBufferData1->buffer->b,(vertexBufferData1->byteOffset + ((offset + vertLength) * 4)),val5);
            								}
HXLINE( 292)								{
HXLINE( 292)									Float val6;
HXDLIN( 292)									if (hasUVData) {
HXLINE( 292)										val6 = uvtData->get((uvOffset + 1));
            									}
            									else {
HXLINE( 292)										val6 = ( (Float)(0) );
            									}
HXDLIN( 292)									 ::__hxcpp_memory_set_float(vertexBufferData1->buffer->b,(vertexBufferData1->byteOffset + (((offset + vertLength) + 1) * 4)),val6);
            								}
            							}
            						}
HXLINE( 296)						if (hasUVTData) {
HXLINE( 298)							vertexBufferPositionUVT = (vertexBufferPositionUVT + (length1 * dataPerVertex1));
            						}
            						else {
HXLINE( 302)							vertexBufferPosition = (vertexBufferPosition + (length1 * dataPerVertex1));
            						}
            					}
            					break;
            					case (int)13: {
HXLINE( 306)						bitmap = null();
            					}
            					break;
            					default:{
HXLINE( 309)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data161 = data;
HXDLIN( 309)								data161->oPos = (data161->oPos + 2);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data162 = data;
HXDLIN( 309)								data162->bPos = (data162->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data163 = data;
HXDLIN( 309)								data163->iPos = (data163->iPos + 1);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data164 = data;
HXDLIN( 309)								data164->fPos = (data164->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data165 = data;
HXDLIN( 309)								data165->oPos = (data165->oPos + 4);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data166 = data;
HXDLIN( 309)								data166->iiPos = (data166->iiPos + 2);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data167 = data;
HXDLIN( 309)								data167->ffPos = (data167->ffPos + 1);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data168 = data;
HXDLIN( 309)								data168->fPos = (data168->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data169 = data;
HXDLIN( 309)								data169->oPos = (data169->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data170 = data;
HXDLIN( 309)								data170->fPos = (data170->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data171 = data;
HXDLIN( 309)								data171->fPos = (data171->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data172 = data;
HXDLIN( 309)								data172->fPos = (data172->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data173 = data;
HXDLIN( 309)								data173->fPos = (data173->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data174 = data;
HXDLIN( 309)								data174->oPos = (data174->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data175 = data;
HXDLIN( 309)								data175->fPos = (data175->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data176 = data;
HXDLIN( 309)								data176->fPos = (data176->fPos + 5);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data177 = data;
HXDLIN( 309)								data177->oPos = (data177->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data178 = data;
HXDLIN( 309)								data178->oPos = (data178->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data179 = data;
HXDLIN( 309)								data179->oPos = (data179->oPos + 2);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data180 = data;
HXDLIN( 309)								data180->bPos = (data180->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data181 = data;
HXDLIN( 309)								data181->oPos = (data181->oPos + 4);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data182 = data;
HXDLIN( 309)								data182->iiPos = (data182->iiPos + 2);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data183 = data;
HXDLIN( 309)								data183->ffPos = (data183->ffPos + 1);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data184 = data;
HXDLIN( 309)								data184->fPos = (data184->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data185 = data;
HXDLIN( 309)								data185->oPos = (data185->oPos + 4);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data186 = data;
HXDLIN( 309)								data186->iPos = (data186->iPos + 1);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data187 = data;
HXDLIN( 309)								data187->fPos = (data187->fPos + 2);
HXDLIN( 309)								 ::openfl::_internal::renderer::DrawCommandReader data188 = data;
HXDLIN( 309)								data188->bPos = (data188->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data189 = data;
HXDLIN( 309)								data189->fPos = (data189->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data190 = data;
HXDLIN( 309)								data190->fPos = (data190->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data191 = data;
HXDLIN( 309)								data191->oPos = (data191->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE( 309)								 ::openfl::_internal::renderer::DrawCommandReader data192 = data;
HXDLIN( 309)								data192->oPos = (data192->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 309)						data->prev = type;
            					}
            				}
            			}
            		}
HXLINE( 315)		if ((quadBufferPosition > 0)) {
HXLINE( 317)			graphics->_hx___quadBuffer->flushVertexBufferData();
            		}
HXLINE( 320)		if ((triangleIndexBufferPosition > 0)) {
HXLINE( 322)			 ::openfl::display3D::IndexBuffer3D buffer = graphics->_hx___triangleIndexBuffer;
HXLINE( 324)			bool _hx_tmp2;
HXDLIN( 324)			if (hx::IsNotNull( buffer )) {
HXLINE( 324)				_hx_tmp2 = (triangleIndexBufferPosition > graphics->_hx___triangleIndexBufferCount);
            			}
            			else {
HXLINE( 324)				_hx_tmp2 = true;
            			}
HXDLIN( 324)			if (_hx_tmp2) {
HXLINE( 326)				buffer = context->createIndexBuffer(triangleIndexBufferPosition,0);
HXLINE( 327)				graphics->_hx___triangleIndexBuffer = buffer;
HXLINE( 328)				graphics->_hx___triangleIndexBufferCount = triangleIndexBufferPosition;
            			}
HXLINE( 331)			buffer->uploadFromTypedArray(graphics->_hx___triangleIndexBufferData,null());
            		}
HXLINE( 334)		if ((vertexBufferPosition > 0)) {
HXLINE( 336)			 ::openfl::display3D::VertexBuffer3D buffer1 = graphics->_hx___vertexBuffer;
HXLINE( 338)			bool _hx_tmp3;
HXDLIN( 338)			if (hx::IsNotNull( buffer1 )) {
HXLINE( 338)				_hx_tmp3 = (vertexBufferPosition > graphics->_hx___vertexBufferCount);
            			}
            			else {
HXLINE( 338)				_hx_tmp3 = true;
            			}
HXDLIN( 338)			if (_hx_tmp3) {
HXLINE( 340)				buffer1 = context->createVertexBuffer(vertexBufferPosition,4,0);
HXLINE( 341)				graphics->_hx___vertexBuffer = buffer1;
HXLINE( 342)				graphics->_hx___vertexBufferCount = vertexBufferPosition;
            			}
HXLINE( 345)			buffer1->uploadFromTypedArray(graphics->_hx___vertexBufferData,null());
            		}
HXLINE( 348)		if ((vertexBufferPositionUVT > 0)) {
HXLINE( 350)			 ::openfl::display3D::VertexBuffer3D buffer2 = graphics->_hx___vertexBufferUVT;
HXLINE( 352)			bool _hx_tmp4;
HXDLIN( 352)			if (hx::IsNotNull( buffer2 )) {
HXLINE( 352)				_hx_tmp4 = (vertexBufferPositionUVT > graphics->_hx___vertexBufferCountUVT);
            			}
            			else {
HXLINE( 352)				_hx_tmp4 = true;
            			}
HXDLIN( 352)			if (_hx_tmp4) {
HXLINE( 354)				buffer2 = context->createVertexBuffer(vertexBufferPositionUVT,6,0);
HXLINE( 355)				graphics->_hx___vertexBufferUVT = buffer2;
HXLINE( 356)				graphics->_hx___vertexBufferCountUVT = vertexBufferPositionUVT;
            			}
HXLINE( 359)			buffer2->uploadFromTypedArray(graphics->_hx___vertexBufferDataUVT,null());
            		}
HXLINE( 362)		::openfl::geom::Rectangle_obj::_hx___pool->release(tileRect);
HXLINE( 363)		::openfl::geom::Matrix_obj::_hx___pool->release(tileTransform);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DGraphics_obj,buildBuffer,(void))

bool Context3DGraphics_obj::isCompatible( ::openfl::display::Graphics graphics){
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_367_isCompatible)
HXLINE( 374)		if (hx::IsNotNull( graphics->_hx___owner->_hx___worldScale9Grid )) {
HXLINE( 376)			return false;
            		}
HXLINE( 379)		 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE( 380)		bool hasColorFill = false;
HXDLIN( 380)		bool hasBitmapFill = false;
HXDLIN( 380)		bool hasShaderFill = false;
HXLINE( 382)		{
HXLINE( 382)			int _g = 0;
HXDLIN( 382)			::Array< ::Dynamic> _g1 = graphics->_hx___commands->types;
HXDLIN( 382)			while((_g < _g1->length)){
HXLINE( 382)				 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN( 382)				_g = (_g + 1);
HXLINE( 384)				switch((int)(type->_hx_getIndex())){
            					case (int)0: {
HXLINE( 387)						hasBitmapFill = true;
HXLINE( 388)						hasColorFill = false;
HXLINE( 389)						hasShaderFill = false;
HXLINE( 390)						{
HXLINE( 390)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 390)									data1->oPos = (data1->oPos + 2);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 390)									data2->bPos = (data2->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 390)									data3->iPos = (data3->iPos + 1);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 390)									data4->fPos = (data4->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data5 = data;
HXDLIN( 390)									data5->oPos = (data5->oPos + 4);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data6 = data;
HXDLIN( 390)									data6->iiPos = (data6->iiPos + 2);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data7 = data;
HXDLIN( 390)									data7->ffPos = (data7->ffPos + 1);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data8 = data;
HXDLIN( 390)									data8->fPos = (data8->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data9 = data;
HXDLIN( 390)									data9->oPos = (data9->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data10 = data;
HXDLIN( 390)									data10->fPos = (data10->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data11 = data;
HXDLIN( 390)									data11->fPos = (data11->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data12 = data;
HXDLIN( 390)									data12->fPos = (data12->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data13 = data;
HXDLIN( 390)									data13->fPos = (data13->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data14 = data;
HXDLIN( 390)									data14->oPos = (data14->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data15 = data;
HXDLIN( 390)									data15->fPos = (data15->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data16 = data;
HXDLIN( 390)									data16->fPos = (data16->fPos + 5);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data17 = data;
HXDLIN( 390)									data17->oPos = (data17->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data18 = data;
HXDLIN( 390)									data18->oPos = (data18->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data19 = data;
HXDLIN( 390)									data19->oPos = (data19->oPos + 2);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data20 = data;
HXDLIN( 390)									data20->bPos = (data20->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data21 = data;
HXDLIN( 390)									data21->oPos = (data21->oPos + 4);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data22 = data;
HXDLIN( 390)									data22->iiPos = (data22->iiPos + 2);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data23 = data;
HXDLIN( 390)									data23->ffPos = (data23->ffPos + 1);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data24 = data;
HXDLIN( 390)									data24->fPos = (data24->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data25 = data;
HXDLIN( 390)									data25->oPos = (data25->oPos + 4);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data26 = data;
HXDLIN( 390)									data26->iPos = (data26->iPos + 1);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data27 = data;
HXDLIN( 390)									data27->fPos = (data27->fPos + 2);
HXDLIN( 390)									 ::openfl::_internal::renderer::DrawCommandReader data28 = data;
HXDLIN( 390)									data28->bPos = (data28->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data29 = data;
HXDLIN( 390)									data29->fPos = (data29->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data30 = data;
HXDLIN( 390)									data30->fPos = (data30->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data31 = data;
HXDLIN( 390)									data31->oPos = (data31->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 390)									 ::openfl::_internal::renderer::DrawCommandReader data32 = data;
HXDLIN( 390)									data32->oPos = (data32->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 390)							data->prev = type;
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 393)						hasBitmapFill = false;
HXLINE( 394)						hasColorFill = true;
HXLINE( 395)						hasShaderFill = false;
HXLINE( 396)						{
HXLINE( 396)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data33 = data;
HXDLIN( 396)									data33->oPos = (data33->oPos + 2);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data34 = data;
HXDLIN( 396)									data34->bPos = (data34->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data35 = data;
HXDLIN( 396)									data35->iPos = (data35->iPos + 1);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data36 = data;
HXDLIN( 396)									data36->fPos = (data36->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data37 = data;
HXDLIN( 396)									data37->oPos = (data37->oPos + 4);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data38 = data;
HXDLIN( 396)									data38->iiPos = (data38->iiPos + 2);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data39 = data;
HXDLIN( 396)									data39->ffPos = (data39->ffPos + 1);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data40 = data;
HXDLIN( 396)									data40->fPos = (data40->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data41 = data;
HXDLIN( 396)									data41->oPos = (data41->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data42 = data;
HXDLIN( 396)									data42->fPos = (data42->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data43 = data;
HXDLIN( 396)									data43->fPos = (data43->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data44 = data;
HXDLIN( 396)									data44->fPos = (data44->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data45 = data;
HXDLIN( 396)									data45->fPos = (data45->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data46 = data;
HXDLIN( 396)									data46->oPos = (data46->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data47 = data;
HXDLIN( 396)									data47->fPos = (data47->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data48 = data;
HXDLIN( 396)									data48->fPos = (data48->fPos + 5);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data49 = data;
HXDLIN( 396)									data49->oPos = (data49->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data50 = data;
HXDLIN( 396)									data50->oPos = (data50->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data51 = data;
HXDLIN( 396)									data51->oPos = (data51->oPos + 2);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data52 = data;
HXDLIN( 396)									data52->bPos = (data52->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data53 = data;
HXDLIN( 396)									data53->oPos = (data53->oPos + 4);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data54 = data;
HXDLIN( 396)									data54->iiPos = (data54->iiPos + 2);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data55 = data;
HXDLIN( 396)									data55->ffPos = (data55->ffPos + 1);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data56 = data;
HXDLIN( 396)									data56->fPos = (data56->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data57 = data;
HXDLIN( 396)									data57->oPos = (data57->oPos + 4);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data58 = data;
HXDLIN( 396)									data58->iPos = (data58->iPos + 1);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data59 = data;
HXDLIN( 396)									data59->fPos = (data59->fPos + 2);
HXDLIN( 396)									 ::openfl::_internal::renderer::DrawCommandReader data60 = data;
HXDLIN( 396)									data60->bPos = (data60->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data61 = data;
HXDLIN( 396)									data61->fPos = (data61->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data62 = data;
HXDLIN( 396)									data62->fPos = (data62->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data63 = data;
HXDLIN( 396)									data63->oPos = (data63->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 396)									 ::openfl::_internal::renderer::DrawCommandReader data64 = data;
HXDLIN( 396)									data64->oPos = (data64->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 396)							data->prev = type;
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 399)						hasBitmapFill = false;
HXLINE( 400)						hasColorFill = false;
HXLINE( 401)						hasShaderFill = true;
HXLINE( 402)						{
HXLINE( 402)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data65 = data;
HXDLIN( 402)									data65->oPos = (data65->oPos + 2);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data66 = data;
HXDLIN( 402)									data66->bPos = (data66->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data67 = data;
HXDLIN( 402)									data67->iPos = (data67->iPos + 1);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data68 = data;
HXDLIN( 402)									data68->fPos = (data68->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data69 = data;
HXDLIN( 402)									data69->oPos = (data69->oPos + 4);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data70 = data;
HXDLIN( 402)									data70->iiPos = (data70->iiPos + 2);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data71 = data;
HXDLIN( 402)									data71->ffPos = (data71->ffPos + 1);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data72 = data;
HXDLIN( 402)									data72->fPos = (data72->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data73 = data;
HXDLIN( 402)									data73->oPos = (data73->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data74 = data;
HXDLIN( 402)									data74->fPos = (data74->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data75 = data;
HXDLIN( 402)									data75->fPos = (data75->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data76 = data;
HXDLIN( 402)									data76->fPos = (data76->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data77 = data;
HXDLIN( 402)									data77->fPos = (data77->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data78 = data;
HXDLIN( 402)									data78->oPos = (data78->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data79 = data;
HXDLIN( 402)									data79->fPos = (data79->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data80 = data;
HXDLIN( 402)									data80->fPos = (data80->fPos + 5);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data81 = data;
HXDLIN( 402)									data81->oPos = (data81->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data82 = data;
HXDLIN( 402)									data82->oPos = (data82->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data83 = data;
HXDLIN( 402)									data83->oPos = (data83->oPos + 2);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data84 = data;
HXDLIN( 402)									data84->bPos = (data84->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data85 = data;
HXDLIN( 402)									data85->oPos = (data85->oPos + 4);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data86 = data;
HXDLIN( 402)									data86->iiPos = (data86->iiPos + 2);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data87 = data;
HXDLIN( 402)									data87->ffPos = (data87->ffPos + 1);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data88 = data;
HXDLIN( 402)									data88->fPos = (data88->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data89 = data;
HXDLIN( 402)									data89->oPos = (data89->oPos + 4);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data90 = data;
HXDLIN( 402)									data90->iPos = (data90->iPos + 1);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data91 = data;
HXDLIN( 402)									data91->fPos = (data91->fPos + 2);
HXDLIN( 402)									 ::openfl::_internal::renderer::DrawCommandReader data92 = data;
HXDLIN( 402)									data92->bPos = (data92->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data93 = data;
HXDLIN( 402)									data93->fPos = (data93->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data94 = data;
HXDLIN( 402)									data94->fPos = (data94->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data95 = data;
HXDLIN( 402)									data95->oPos = (data95->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 402)									 ::openfl::_internal::renderer::DrawCommandReader data96 = data;
HXDLIN( 402)									data96->oPos = (data96->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 402)							data->prev = type;
            						}
            					}
            					break;
            					case (int)8: {
HXLINE( 405)						bool _hx_tmp;
HXDLIN( 405)						if (!(hasBitmapFill)) {
HXLINE( 405)							_hx_tmp = hasShaderFill;
            						}
            						else {
HXLINE( 405)							_hx_tmp = true;
            						}
HXDLIN( 405)						if (_hx_tmp) {
HXLINE( 407)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data97 = data;
HXDLIN( 407)									data97->oPos = (data97->oPos + 2);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data98 = data;
HXDLIN( 407)									data98->bPos = (data98->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data99 = data;
HXDLIN( 407)									data99->iPos = (data99->iPos + 1);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data100 = data;
HXDLIN( 407)									data100->fPos = (data100->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data101 = data;
HXDLIN( 407)									data101->oPos = (data101->oPos + 4);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data102 = data;
HXDLIN( 407)									data102->iiPos = (data102->iiPos + 2);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data103 = data;
HXDLIN( 407)									data103->ffPos = (data103->ffPos + 1);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data104 = data;
HXDLIN( 407)									data104->fPos = (data104->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data105 = data;
HXDLIN( 407)									data105->oPos = (data105->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data106 = data;
HXDLIN( 407)									data106->fPos = (data106->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data107 = data;
HXDLIN( 407)									data107->fPos = (data107->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data108 = data;
HXDLIN( 407)									data108->fPos = (data108->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data109 = data;
HXDLIN( 407)									data109->fPos = (data109->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data110 = data;
HXDLIN( 407)									data110->oPos = (data110->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data111 = data;
HXDLIN( 407)									data111->fPos = (data111->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data112 = data;
HXDLIN( 407)									data112->fPos = (data112->fPos + 5);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data113 = data;
HXDLIN( 407)									data113->oPos = (data113->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data114 = data;
HXDLIN( 407)									data114->oPos = (data114->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data115 = data;
HXDLIN( 407)									data115->oPos = (data115->oPos + 2);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data116 = data;
HXDLIN( 407)									data116->bPos = (data116->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data117 = data;
HXDLIN( 407)									data117->oPos = (data117->oPos + 4);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data118 = data;
HXDLIN( 407)									data118->iiPos = (data118->iiPos + 2);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data119 = data;
HXDLIN( 407)									data119->ffPos = (data119->ffPos + 1);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data120 = data;
HXDLIN( 407)									data120->fPos = (data120->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data121 = data;
HXDLIN( 407)									data121->oPos = (data121->oPos + 4);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data122 = data;
HXDLIN( 407)									data122->iPos = (data122->iPos + 1);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data123 = data;
HXDLIN( 407)									data123->fPos = (data123->fPos + 2);
HXDLIN( 407)									 ::openfl::_internal::renderer::DrawCommandReader data124 = data;
HXDLIN( 407)									data124->bPos = (data124->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data125 = data;
HXDLIN( 407)									data125->fPos = (data125->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data126 = data;
HXDLIN( 407)									data126->fPos = (data126->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data127 = data;
HXDLIN( 407)									data127->oPos = (data127->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 407)									 ::openfl::_internal::renderer::DrawCommandReader data128 = data;
HXDLIN( 407)									data128->oPos = (data128->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 407)							data->prev = type;
            						}
            						else {
HXLINE( 411)							data->destroy();
HXLINE( 412)							return false;
            						}
            					}
            					break;
            					case (int)9: {
HXLINE( 416)						if (hasColorFill) {
HXLINE( 418)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data129 = data;
HXDLIN( 418)									data129->oPos = (data129->oPos + 2);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data130 = data;
HXDLIN( 418)									data130->bPos = (data130->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data131 = data;
HXDLIN( 418)									data131->iPos = (data131->iPos + 1);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data132 = data;
HXDLIN( 418)									data132->fPos = (data132->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data133 = data;
HXDLIN( 418)									data133->oPos = (data133->oPos + 4);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data134 = data;
HXDLIN( 418)									data134->iiPos = (data134->iiPos + 2);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data135 = data;
HXDLIN( 418)									data135->ffPos = (data135->ffPos + 1);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data136 = data;
HXDLIN( 418)									data136->fPos = (data136->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data137 = data;
HXDLIN( 418)									data137->oPos = (data137->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data138 = data;
HXDLIN( 418)									data138->fPos = (data138->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data139 = data;
HXDLIN( 418)									data139->fPos = (data139->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data140 = data;
HXDLIN( 418)									data140->fPos = (data140->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data141 = data;
HXDLIN( 418)									data141->fPos = (data141->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data142 = data;
HXDLIN( 418)									data142->oPos = (data142->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data143 = data;
HXDLIN( 418)									data143->fPos = (data143->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data144 = data;
HXDLIN( 418)									data144->fPos = (data144->fPos + 5);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data145 = data;
HXDLIN( 418)									data145->oPos = (data145->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data146 = data;
HXDLIN( 418)									data146->oPos = (data146->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data147 = data;
HXDLIN( 418)									data147->oPos = (data147->oPos + 2);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data148 = data;
HXDLIN( 418)									data148->bPos = (data148->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data149 = data;
HXDLIN( 418)									data149->oPos = (data149->oPos + 4);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data150 = data;
HXDLIN( 418)									data150->iiPos = (data150->iiPos + 2);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data151 = data;
HXDLIN( 418)									data151->ffPos = (data151->ffPos + 1);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data152 = data;
HXDLIN( 418)									data152->fPos = (data152->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data153 = data;
HXDLIN( 418)									data153->oPos = (data153->oPos + 4);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data154 = data;
HXDLIN( 418)									data154->iPos = (data154->iPos + 1);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data155 = data;
HXDLIN( 418)									data155->fPos = (data155->fPos + 2);
HXDLIN( 418)									 ::openfl::_internal::renderer::DrawCommandReader data156 = data;
HXDLIN( 418)									data156->bPos = (data156->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data157 = data;
HXDLIN( 418)									data157->fPos = (data157->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data158 = data;
HXDLIN( 418)									data158->fPos = (data158->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data159 = data;
HXDLIN( 418)									data159->oPos = (data159->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 418)									 ::openfl::_internal::renderer::DrawCommandReader data160 = data;
HXDLIN( 418)									data160->oPos = (data160->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 418)							data->prev = type;
            						}
            						else {
HXLINE( 422)							data->destroy();
HXLINE( 423)							return false;
            						}
            					}
            					break;
            					case (int)12: {
HXLINE( 427)						bool _hx_tmp1;
HXDLIN( 427)						if (!(hasBitmapFill)) {
HXLINE( 427)							_hx_tmp1 = hasShaderFill;
            						}
            						else {
HXLINE( 427)							_hx_tmp1 = true;
            						}
HXDLIN( 427)						if (_hx_tmp1) {
HXLINE( 429)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data161 = data;
HXDLIN( 429)									data161->oPos = (data161->oPos + 2);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data162 = data;
HXDLIN( 429)									data162->bPos = (data162->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data163 = data;
HXDLIN( 429)									data163->iPos = (data163->iPos + 1);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data164 = data;
HXDLIN( 429)									data164->fPos = (data164->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data165 = data;
HXDLIN( 429)									data165->oPos = (data165->oPos + 4);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data166 = data;
HXDLIN( 429)									data166->iiPos = (data166->iiPos + 2);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data167 = data;
HXDLIN( 429)									data167->ffPos = (data167->ffPos + 1);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data168 = data;
HXDLIN( 429)									data168->fPos = (data168->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data169 = data;
HXDLIN( 429)									data169->oPos = (data169->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data170 = data;
HXDLIN( 429)									data170->fPos = (data170->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data171 = data;
HXDLIN( 429)									data171->fPos = (data171->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data172 = data;
HXDLIN( 429)									data172->fPos = (data172->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data173 = data;
HXDLIN( 429)									data173->fPos = (data173->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data174 = data;
HXDLIN( 429)									data174->oPos = (data174->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data175 = data;
HXDLIN( 429)									data175->fPos = (data175->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data176 = data;
HXDLIN( 429)									data176->fPos = (data176->fPos + 5);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data177 = data;
HXDLIN( 429)									data177->oPos = (data177->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data178 = data;
HXDLIN( 429)									data178->oPos = (data178->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data179 = data;
HXDLIN( 429)									data179->oPos = (data179->oPos + 2);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data180 = data;
HXDLIN( 429)									data180->bPos = (data180->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data181 = data;
HXDLIN( 429)									data181->oPos = (data181->oPos + 4);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data182 = data;
HXDLIN( 429)									data182->iiPos = (data182->iiPos + 2);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data183 = data;
HXDLIN( 429)									data183->ffPos = (data183->ffPos + 1);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data184 = data;
HXDLIN( 429)									data184->fPos = (data184->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data185 = data;
HXDLIN( 429)									data185->oPos = (data185->oPos + 4);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data186 = data;
HXDLIN( 429)									data186->iPos = (data186->iPos + 1);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data187 = data;
HXDLIN( 429)									data187->fPos = (data187->fPos + 2);
HXDLIN( 429)									 ::openfl::_internal::renderer::DrawCommandReader data188 = data;
HXDLIN( 429)									data188->bPos = (data188->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data189 = data;
HXDLIN( 429)									data189->fPos = (data189->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data190 = data;
HXDLIN( 429)									data190->fPos = (data190->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data191 = data;
HXDLIN( 429)									data191->oPos = (data191->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 429)									 ::openfl::_internal::renderer::DrawCommandReader data192 = data;
HXDLIN( 429)									data192->oPos = (data192->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 429)							data->prev = type;
            						}
            						else {
HXLINE( 433)							data->destroy();
HXLINE( 434)							return false;
            						}
            					}
            					break;
            					case (int)13: {
HXLINE( 438)						hasBitmapFill = false;
HXLINE( 439)						hasColorFill = false;
HXLINE( 440)						hasShaderFill = false;
HXLINE( 441)						{
HXLINE( 441)							switch((int)(data->prev->_hx_getIndex())){
            								case (int)0: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data193 = data;
HXDLIN( 441)									data193->oPos = (data193->oPos + 2);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data194 = data;
HXDLIN( 441)									data194->bPos = (data194->bPos + 2);
            								}
            								break;
            								case (int)1: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data195 = data;
HXDLIN( 441)									data195->iPos = (data195->iPos + 1);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data196 = data;
HXDLIN( 441)									data196->fPos = (data196->fPos + 1);
            								}
            								break;
            								case (int)2: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data197 = data;
HXDLIN( 441)									data197->oPos = (data197->oPos + 4);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data198 = data;
HXDLIN( 441)									data198->iiPos = (data198->iiPos + 2);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data199 = data;
HXDLIN( 441)									data199->ffPos = (data199->ffPos + 1);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data200 = data;
HXDLIN( 441)									data200->fPos = (data200->fPos + 1);
            								}
            								break;
            								case (int)3: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data201 = data;
HXDLIN( 441)									data201->oPos = (data201->oPos + 1);
            								}
            								break;
            								case (int)4: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data202 = data;
HXDLIN( 441)									data202->fPos = (data202->fPos + 6);
            								}
            								break;
            								case (int)5: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data203 = data;
HXDLIN( 441)									data203->fPos = (data203->fPos + 4);
            								}
            								break;
            								case (int)6: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data204 = data;
HXDLIN( 441)									data204->fPos = (data204->fPos + 3);
            								}
            								break;
            								case (int)7: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data205 = data;
HXDLIN( 441)									data205->fPos = (data205->fPos + 4);
            								}
            								break;
            								case (int)8: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data206 = data;
HXDLIN( 441)									data206->oPos = (data206->oPos + 3);
            								}
            								break;
            								case (int)9: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data207 = data;
HXDLIN( 441)									data207->fPos = (data207->fPos + 4);
            								}
            								break;
            								case (int)10: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data208 = data;
HXDLIN( 441)									data208->fPos = (data208->fPos + 5);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data209 = data;
HXDLIN( 441)									data209->oPos = (data209->oPos + 1);
            								}
            								break;
            								case (int)12: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data210 = data;
HXDLIN( 441)									data210->oPos = (data210->oPos + 4);
            								}
            								break;
            								case (int)13: {
            								}
            								break;
            								case (int)14: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data211 = data;
HXDLIN( 441)									data211->oPos = (data211->oPos + 2);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data212 = data;
HXDLIN( 441)									data212->bPos = (data212->bPos + 2);
            								}
            								break;
            								case (int)15: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data213 = data;
HXDLIN( 441)									data213->oPos = (data213->oPos + 4);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data214 = data;
HXDLIN( 441)									data214->iiPos = (data214->iiPos + 2);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data215 = data;
HXDLIN( 441)									data215->ffPos = (data215->ffPos + 1);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data216 = data;
HXDLIN( 441)									data216->fPos = (data216->fPos + 1);
            								}
            								break;
            								case (int)16: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data217 = data;
HXDLIN( 441)									data217->oPos = (data217->oPos + 4);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data218 = data;
HXDLIN( 441)									data218->iPos = (data218->iPos + 1);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data219 = data;
HXDLIN( 441)									data219->fPos = (data219->fPos + 2);
HXDLIN( 441)									 ::openfl::_internal::renderer::DrawCommandReader data220 = data;
HXDLIN( 441)									data220->bPos = (data220->bPos + 1);
            								}
            								break;
            								case (int)17: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data221 = data;
HXDLIN( 441)									data221->fPos = (data221->fPos + 2);
            								}
            								break;
            								case (int)18: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data222 = data;
HXDLIN( 441)									data222->fPos = (data222->fPos + 2);
            								}
            								break;
            								case (int)19: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data223 = data;
HXDLIN( 441)									data223->oPos = (data223->oPos + 1);
            								}
            								break;
            								case (int)20: {
HXLINE( 441)									 ::openfl::_internal::renderer::DrawCommandReader data224 = data;
HXDLIN( 441)									data224->oPos = (data224->oPos + 1);
            								}
            								break;
            								case (int)21: case (int)22: {
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 441)							data->prev = type;
            						}
            					}
            					break;
            					case (int)18: {
HXLINE( 444)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data225 = data;
HXDLIN( 444)								data225->oPos = (data225->oPos + 2);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data226 = data;
HXDLIN( 444)								data226->bPos = (data226->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data227 = data;
HXDLIN( 444)								data227->iPos = (data227->iPos + 1);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data228 = data;
HXDLIN( 444)								data228->fPos = (data228->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data229 = data;
HXDLIN( 444)								data229->oPos = (data229->oPos + 4);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data230 = data;
HXDLIN( 444)								data230->iiPos = (data230->iiPos + 2);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data231 = data;
HXDLIN( 444)								data231->ffPos = (data231->ffPos + 1);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data232 = data;
HXDLIN( 444)								data232->fPos = (data232->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data233 = data;
HXDLIN( 444)								data233->oPos = (data233->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data234 = data;
HXDLIN( 444)								data234->fPos = (data234->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data235 = data;
HXDLIN( 444)								data235->fPos = (data235->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data236 = data;
HXDLIN( 444)								data236->fPos = (data236->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data237 = data;
HXDLIN( 444)								data237->fPos = (data237->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data238 = data;
HXDLIN( 444)								data238->oPos = (data238->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data239 = data;
HXDLIN( 444)								data239->fPos = (data239->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data240 = data;
HXDLIN( 444)								data240->fPos = (data240->fPos + 5);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data241 = data;
HXDLIN( 444)								data241->oPos = (data241->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data242 = data;
HXDLIN( 444)								data242->oPos = (data242->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data243 = data;
HXDLIN( 444)								data243->oPos = (data243->oPos + 2);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data244 = data;
HXDLIN( 444)								data244->bPos = (data244->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data245 = data;
HXDLIN( 444)								data245->oPos = (data245->oPos + 4);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data246 = data;
HXDLIN( 444)								data246->iiPos = (data246->iiPos + 2);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data247 = data;
HXDLIN( 444)								data247->ffPos = (data247->ffPos + 1);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data248 = data;
HXDLIN( 444)								data248->fPos = (data248->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data249 = data;
HXDLIN( 444)								data249->oPos = (data249->oPos + 4);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data250 = data;
HXDLIN( 444)								data250->iPos = (data250->iPos + 1);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data251 = data;
HXDLIN( 444)								data251->fPos = (data251->fPos + 2);
HXDLIN( 444)								 ::openfl::_internal::renderer::DrawCommandReader data252 = data;
HXDLIN( 444)								data252->bPos = (data252->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data253 = data;
HXDLIN( 444)								data253->fPos = (data253->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data254 = data;
HXDLIN( 444)								data254->fPos = (data254->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data255 = data;
HXDLIN( 444)								data255->oPos = (data255->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE( 444)								 ::openfl::_internal::renderer::DrawCommandReader data256 = data;
HXDLIN( 444)								data256->oPos = (data256->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 444)						data->prev = type;
            					}
            					break;
            					case (int)19: {
HXLINE( 447)						switch((int)(data->prev->_hx_getIndex())){
            							case (int)0: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data257 = data;
HXDLIN( 447)								data257->oPos = (data257->oPos + 2);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data258 = data;
HXDLIN( 447)								data258->bPos = (data258->bPos + 2);
            							}
            							break;
            							case (int)1: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data259 = data;
HXDLIN( 447)								data259->iPos = (data259->iPos + 1);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data260 = data;
HXDLIN( 447)								data260->fPos = (data260->fPos + 1);
            							}
            							break;
            							case (int)2: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data261 = data;
HXDLIN( 447)								data261->oPos = (data261->oPos + 4);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data262 = data;
HXDLIN( 447)								data262->iiPos = (data262->iiPos + 2);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data263 = data;
HXDLIN( 447)								data263->ffPos = (data263->ffPos + 1);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data264 = data;
HXDLIN( 447)								data264->fPos = (data264->fPos + 1);
            							}
            							break;
            							case (int)3: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data265 = data;
HXDLIN( 447)								data265->oPos = (data265->oPos + 1);
            							}
            							break;
            							case (int)4: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data266 = data;
HXDLIN( 447)								data266->fPos = (data266->fPos + 6);
            							}
            							break;
            							case (int)5: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data267 = data;
HXDLIN( 447)								data267->fPos = (data267->fPos + 4);
            							}
            							break;
            							case (int)6: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data268 = data;
HXDLIN( 447)								data268->fPos = (data268->fPos + 3);
            							}
            							break;
            							case (int)7: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data269 = data;
HXDLIN( 447)								data269->fPos = (data269->fPos + 4);
            							}
            							break;
            							case (int)8: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data270 = data;
HXDLIN( 447)								data270->oPos = (data270->oPos + 3);
            							}
            							break;
            							case (int)9: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data271 = data;
HXDLIN( 447)								data271->fPos = (data271->fPos + 4);
            							}
            							break;
            							case (int)10: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data272 = data;
HXDLIN( 447)								data272->fPos = (data272->fPos + 5);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data273 = data;
HXDLIN( 447)								data273->oPos = (data273->oPos + 1);
            							}
            							break;
            							case (int)12: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data274 = data;
HXDLIN( 447)								data274->oPos = (data274->oPos + 4);
            							}
            							break;
            							case (int)13: {
            							}
            							break;
            							case (int)14: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data275 = data;
HXDLIN( 447)								data275->oPos = (data275->oPos + 2);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data276 = data;
HXDLIN( 447)								data276->bPos = (data276->bPos + 2);
            							}
            							break;
            							case (int)15: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data277 = data;
HXDLIN( 447)								data277->oPos = (data277->oPos + 4);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data278 = data;
HXDLIN( 447)								data278->iiPos = (data278->iiPos + 2);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data279 = data;
HXDLIN( 447)								data279->ffPos = (data279->ffPos + 1);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data280 = data;
HXDLIN( 447)								data280->fPos = (data280->fPos + 1);
            							}
            							break;
            							case (int)16: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data281 = data;
HXDLIN( 447)								data281->oPos = (data281->oPos + 4);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data282 = data;
HXDLIN( 447)								data282->iPos = (data282->iPos + 1);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data283 = data;
HXDLIN( 447)								data283->fPos = (data283->fPos + 2);
HXDLIN( 447)								 ::openfl::_internal::renderer::DrawCommandReader data284 = data;
HXDLIN( 447)								data284->bPos = (data284->bPos + 1);
            							}
            							break;
            							case (int)17: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data285 = data;
HXDLIN( 447)								data285->fPos = (data285->fPos + 2);
            							}
            							break;
            							case (int)18: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data286 = data;
HXDLIN( 447)								data286->fPos = (data286->fPos + 2);
            							}
            							break;
            							case (int)19: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data287 = data;
HXDLIN( 447)								data287->oPos = (data287->oPos + 1);
            							}
            							break;
            							case (int)20: {
HXLINE( 447)								 ::openfl::_internal::renderer::DrawCommandReader data288 = data;
HXDLIN( 447)								data288->oPos = (data288->oPos + 1);
            							}
            							break;
            							case (int)21: case (int)22: {
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 447)						data->prev = type;
            					}
            					break;
            					default:{
HXLINE( 450)						data->destroy();
HXLINE( 451)						return false;
            					}
            				}
            			}
            		}
HXLINE( 455)		data->destroy();
HXLINE( 456)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Context3DGraphics_obj,isCompatible,return )

void Context3DGraphics_obj::render( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer){
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_460_render)
HXLINE( 461)		bool _hx_tmp;
HXDLIN( 461)		if (!(!(graphics->_hx___visible))) {
HXLINE( 461)			_hx_tmp = (graphics->_hx___commands->get_length() == 0);
            		}
            		else {
HXLINE( 461)			_hx_tmp = true;
            		}
HXDLIN( 461)		if (_hx_tmp) {
HXLINE( 461)			return;
            		}
HXLINE( 463)		bool _hx_tmp1;
HXDLIN( 463)		bool _hx_tmp2;
HXDLIN( 463)		if (hx::IsNotNull( graphics->_hx___bitmap )) {
HXLINE( 463)			_hx_tmp2 = !(graphics->_hx___dirty);
            		}
            		else {
HXLINE( 463)			_hx_tmp2 = false;
            		}
HXDLIN( 463)		if (!(_hx_tmp2)) {
HXLINE( 463)			_hx_tmp1 = !(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::isCompatible(graphics));
            		}
            		else {
HXLINE( 463)			_hx_tmp1 = true;
            		}
HXDLIN( 463)		if (_hx_tmp1) {
HXLINE( 479)			 ::openfl::geom::Matrix cacheTransform = renderer->_hx___softwareRenderer->_hx___worldTransform;
HXLINE( 480)			renderer->_hx___softwareRenderer->_hx___worldTransform = renderer->_hx___worldTransform;
HXLINE( 485)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(graphics,( ( ::openfl::display::CairoRenderer)(renderer->_hx___softwareRenderer) ));
HXLINE( 488)			renderer->_hx___softwareRenderer->_hx___worldTransform = cacheTransform;
            		}
            		else {
HXLINE( 492)			graphics->_hx___bitmap = null();
HXLINE( 493)			graphics->_hx___update(renderer->_hx___worldTransform);
HXLINE( 495)			 ::openfl::geom::Rectangle bounds = graphics->_hx___bounds;
HXLINE( 497)			int width = graphics->_hx___width;
HXLINE( 498)			int height = graphics->_hx___height;
HXLINE( 500)			bool _hx_tmp3;
HXDLIN( 500)			bool _hx_tmp4;
HXDLIN( 500)			if (hx::IsNotNull( bounds )) {
HXLINE( 500)				_hx_tmp4 = (width >= 1);
            			}
            			else {
HXLINE( 500)				_hx_tmp4 = false;
            			}
HXDLIN( 500)			if (_hx_tmp4) {
HXLINE( 500)				_hx_tmp3 = (height >= 1);
            			}
            			else {
HXLINE( 500)				_hx_tmp3 = false;
            			}
HXDLIN( 500)			if (_hx_tmp3) {
HXLINE( 502)				bool _hx_tmp5;
HXDLIN( 502)				if (!(graphics->_hx___hardwareDirty)) {
HXLINE( 503)					bool _hx_tmp6;
HXDLIN( 503)					if (hx::IsNull( graphics->_hx___quadBuffer )) {
HXLINE( 503)						_hx_tmp6 = hx::IsNull( graphics->_hx___vertexBuffer );
            					}
            					else {
HXLINE( 503)						_hx_tmp6 = false;
            					}
HXDLIN( 503)					if (_hx_tmp6) {
HXLINE( 502)						_hx_tmp5 = hx::IsNull( graphics->_hx___vertexBufferUVT );
            					}
            					else {
HXLINE( 502)						_hx_tmp5 = false;
            					}
            				}
            				else {
HXLINE( 502)					_hx_tmp5 = true;
            				}
HXDLIN( 502)				if (_hx_tmp5) {
HXLINE( 505)					::openfl::_internal::renderer::context3D::Context3DGraphics_obj::buildBuffer(graphics,renderer);
            				}
HXLINE( 508)				 ::openfl::_internal::renderer::DrawCommandReader data =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE( 510)				 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXLINE( 511)				 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = context->gl;
HXLINE( 513)				 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE( 515)				 ::openfl::_internal::renderer::ShaderBuffer shaderBuffer = null();
HXLINE( 516)				 ::openfl::display::BitmapData bitmap = null();
HXLINE( 517)				bool repeat = false;
HXLINE( 518)				bool smooth = false;
HXLINE( 519)				 ::Dynamic fill = null();
HXLINE( 521)				Float positionX = ((Float)0.0);
HXLINE( 522)				Float positionY = ((Float)0.0);
HXLINE( 524)				int quadBufferPosition = 0;
HXLINE( 525)				int shaderBufferOffset = 0;
HXLINE( 526)				int triangleIndexBufferPosition = 0;
HXLINE( 527)				int vertexBufferPosition = 0;
HXLINE( 528)				int vertexBufferPositionUVT = 0;
HXLINE( 530)				{
HXLINE( 530)					int _g = 0;
HXDLIN( 530)					::Array< ::Dynamic> _g1 = graphics->_hx___commands->types;
HXDLIN( 530)					while((_g < _g1->length)){
HXLINE( 530)						 ::openfl::_internal::renderer::DrawCommandType type = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN( 530)						_g = (_g + 1);
HXLINE( 532)						switch((int)(type->_hx_getIndex())){
            							case (int)0: {
HXLINE( 535)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data1 = data;
HXDLIN( 535)										data1->oPos = (data1->oPos + 2);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data2 = data;
HXDLIN( 535)										data2->bPos = (data2->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data3 = data;
HXDLIN( 535)										data3->iPos = (data3->iPos + 1);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data4 = data;
HXDLIN( 535)										data4->fPos = (data4->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data5 = data;
HXDLIN( 535)										data5->oPos = (data5->oPos + 4);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data6 = data;
HXDLIN( 535)										data6->iiPos = (data6->iiPos + 2);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data7 = data;
HXDLIN( 535)										data7->ffPos = (data7->ffPos + 1);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data8 = data;
HXDLIN( 535)										data8->fPos = (data8->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data9 = data;
HXDLIN( 535)										data9->oPos = (data9->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data10 = data;
HXDLIN( 535)										data10->fPos = (data10->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data11 = data;
HXDLIN( 535)										data11->fPos = (data11->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data12 = data;
HXDLIN( 535)										data12->fPos = (data12->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data13 = data;
HXDLIN( 535)										data13->fPos = (data13->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data14 = data;
HXDLIN( 535)										data14->oPos = (data14->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data15 = data;
HXDLIN( 535)										data15->fPos = (data15->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data16 = data;
HXDLIN( 535)										data16->fPos = (data16->fPos + 5);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data17 = data;
HXDLIN( 535)										data17->oPos = (data17->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data18 = data;
HXDLIN( 535)										data18->oPos = (data18->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data19 = data;
HXDLIN( 535)										data19->oPos = (data19->oPos + 2);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data20 = data;
HXDLIN( 535)										data20->bPos = (data20->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data21 = data;
HXDLIN( 535)										data21->oPos = (data21->oPos + 4);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data22 = data;
HXDLIN( 535)										data22->iiPos = (data22->iiPos + 2);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data23 = data;
HXDLIN( 535)										data23->ffPos = (data23->ffPos + 1);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data24 = data;
HXDLIN( 535)										data24->fPos = (data24->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data25 = data;
HXDLIN( 535)										data25->oPos = (data25->oPos + 4);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data26 = data;
HXDLIN( 535)										data26->iPos = (data26->iPos + 1);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data27 = data;
HXDLIN( 535)										data27->fPos = (data27->fPos + 2);
HXDLIN( 535)										 ::openfl::_internal::renderer::DrawCommandReader data28 = data;
HXDLIN( 535)										data28->bPos = (data28->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data29 = data;
HXDLIN( 535)										data29->fPos = (data29->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data30 = data;
HXDLIN( 535)										data30->fPos = (data30->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data31 = data;
HXDLIN( 535)										data31->oPos = (data31->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 535)										 ::openfl::_internal::renderer::DrawCommandReader data32 = data;
HXDLIN( 535)										data32->oPos = (data32->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 535)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 535)								 ::openfl::_internal::renderer::DrawCommandReader this1 = data;
HXDLIN( 535)								 ::openfl::_internal::renderer::DrawCommandReader c = this1;
HXLINE( 536)								bitmap = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXLINE( 537)								repeat = c->buffer->b->__get(c->bPos);
HXLINE( 538)								smooth = c->buffer->b->__get((c->bPos + 1));
HXLINE( 539)								shaderBuffer = null();
HXLINE( 540)								fill = null();
            							}
            							break;
            							case (int)1: {
HXLINE( 543)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data33 = data;
HXDLIN( 543)										data33->oPos = (data33->oPos + 2);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data34 = data;
HXDLIN( 543)										data34->bPos = (data34->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data35 = data;
HXDLIN( 543)										data35->iPos = (data35->iPos + 1);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data36 = data;
HXDLIN( 543)										data36->fPos = (data36->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data37 = data;
HXDLIN( 543)										data37->oPos = (data37->oPos + 4);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data38 = data;
HXDLIN( 543)										data38->iiPos = (data38->iiPos + 2);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data39 = data;
HXDLIN( 543)										data39->ffPos = (data39->ffPos + 1);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data40 = data;
HXDLIN( 543)										data40->fPos = (data40->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data41 = data;
HXDLIN( 543)										data41->oPos = (data41->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data42 = data;
HXDLIN( 543)										data42->fPos = (data42->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data43 = data;
HXDLIN( 543)										data43->fPos = (data43->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data44 = data;
HXDLIN( 543)										data44->fPos = (data44->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data45 = data;
HXDLIN( 543)										data45->fPos = (data45->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data46 = data;
HXDLIN( 543)										data46->oPos = (data46->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data47 = data;
HXDLIN( 543)										data47->fPos = (data47->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data48 = data;
HXDLIN( 543)										data48->fPos = (data48->fPos + 5);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data49 = data;
HXDLIN( 543)										data49->oPos = (data49->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data50 = data;
HXDLIN( 543)										data50->oPos = (data50->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data51 = data;
HXDLIN( 543)										data51->oPos = (data51->oPos + 2);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data52 = data;
HXDLIN( 543)										data52->bPos = (data52->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data53 = data;
HXDLIN( 543)										data53->oPos = (data53->oPos + 4);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data54 = data;
HXDLIN( 543)										data54->iiPos = (data54->iiPos + 2);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data55 = data;
HXDLIN( 543)										data55->ffPos = (data55->ffPos + 1);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data56 = data;
HXDLIN( 543)										data56->fPos = (data56->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data57 = data;
HXDLIN( 543)										data57->oPos = (data57->oPos + 4);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data58 = data;
HXDLIN( 543)										data58->iPos = (data58->iPos + 1);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data59 = data;
HXDLIN( 543)										data59->fPos = (data59->fPos + 2);
HXDLIN( 543)										 ::openfl::_internal::renderer::DrawCommandReader data60 = data;
HXDLIN( 543)										data60->bPos = (data60->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data61 = data;
HXDLIN( 543)										data61->fPos = (data61->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data62 = data;
HXDLIN( 543)										data62->fPos = (data62->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data63 = data;
HXDLIN( 543)										data63->oPos = (data63->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 543)										 ::openfl::_internal::renderer::DrawCommandReader data64 = data;
HXDLIN( 543)										data64->oPos = (data64->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 543)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 543)								 ::openfl::_internal::renderer::DrawCommandReader this2 = data;
HXDLIN( 543)								 ::openfl::_internal::renderer::DrawCommandReader c1 = this2;
HXLINE( 544)								int color = ::Std_obj::_hx_int(( (Float)(c1->buffer->i->__get(c1->iPos)) ));
HXLINE( 545)								int alpha = ::Std_obj::_hx_int((c1->buffer->f->__get(c1->fPos) * ( (Float)(255) )));
HXLINE( 547)								fill = ((color & 16777215) | (alpha << 24));
HXLINE( 548)								shaderBuffer = null();
HXLINE( 549)								bitmap = null();
            							}
            							break;
            							case (int)3: {
HXLINE( 552)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data65 = data;
HXDLIN( 552)										data65->oPos = (data65->oPos + 2);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data66 = data;
HXDLIN( 552)										data66->bPos = (data66->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data67 = data;
HXDLIN( 552)										data67->iPos = (data67->iPos + 1);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data68 = data;
HXDLIN( 552)										data68->fPos = (data68->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data69 = data;
HXDLIN( 552)										data69->oPos = (data69->oPos + 4);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data70 = data;
HXDLIN( 552)										data70->iiPos = (data70->iiPos + 2);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data71 = data;
HXDLIN( 552)										data71->ffPos = (data71->ffPos + 1);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data72 = data;
HXDLIN( 552)										data72->fPos = (data72->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data73 = data;
HXDLIN( 552)										data73->oPos = (data73->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data74 = data;
HXDLIN( 552)										data74->fPos = (data74->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data75 = data;
HXDLIN( 552)										data75->fPos = (data75->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data76 = data;
HXDLIN( 552)										data76->fPos = (data76->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data77 = data;
HXDLIN( 552)										data77->fPos = (data77->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data78 = data;
HXDLIN( 552)										data78->oPos = (data78->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data79 = data;
HXDLIN( 552)										data79->fPos = (data79->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data80 = data;
HXDLIN( 552)										data80->fPos = (data80->fPos + 5);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data81 = data;
HXDLIN( 552)										data81->oPos = (data81->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data82 = data;
HXDLIN( 552)										data82->oPos = (data82->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data83 = data;
HXDLIN( 552)										data83->oPos = (data83->oPos + 2);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data84 = data;
HXDLIN( 552)										data84->bPos = (data84->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data85 = data;
HXDLIN( 552)										data85->oPos = (data85->oPos + 4);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data86 = data;
HXDLIN( 552)										data86->iiPos = (data86->iiPos + 2);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data87 = data;
HXDLIN( 552)										data87->ffPos = (data87->ffPos + 1);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data88 = data;
HXDLIN( 552)										data88->fPos = (data88->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data89 = data;
HXDLIN( 552)										data89->oPos = (data89->oPos + 4);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data90 = data;
HXDLIN( 552)										data90->iPos = (data90->iPos + 1);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data91 = data;
HXDLIN( 552)										data91->fPos = (data91->fPos + 2);
HXDLIN( 552)										 ::openfl::_internal::renderer::DrawCommandReader data92 = data;
HXDLIN( 552)										data92->bPos = (data92->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data93 = data;
HXDLIN( 552)										data93->fPos = (data93->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data94 = data;
HXDLIN( 552)										data94->fPos = (data94->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data95 = data;
HXDLIN( 552)										data95->oPos = (data95->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 552)										 ::openfl::_internal::renderer::DrawCommandReader data96 = data;
HXDLIN( 552)										data96->oPos = (data96->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 552)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_SHADER_FILL_dyn();
HXDLIN( 552)								 ::openfl::_internal::renderer::DrawCommandReader this3 = data;
HXDLIN( 552)								 ::openfl::_internal::renderer::DrawCommandReader c2 = this3;
HXLINE( 553)								shaderBuffer = ( ( ::openfl::_internal::renderer::ShaderBuffer)(c2->buffer->o->__get(c2->oPos)) );
HXLINE( 554)								shaderBufferOffset = 0;
HXLINE( 556)								bool _hx_tmp7;
HXDLIN( 556)								bool _hx_tmp8;
HXDLIN( 556)								if (hx::IsNotNull( shaderBuffer )) {
HXLINE( 556)									_hx_tmp8 = hx::IsNull( shaderBuffer->shader );
            								}
            								else {
HXLINE( 556)									_hx_tmp8 = true;
            								}
HXDLIN( 556)								if (!(_hx_tmp8)) {
HXLINE( 556)									_hx_tmp7 = hx::IsNull( shaderBuffer->shader->_hx___bitmap );
            								}
            								else {
HXLINE( 556)									_hx_tmp7 = true;
            								}
HXDLIN( 556)								if (_hx_tmp7) {
HXLINE( 558)									bitmap = null();
            								}
            								else {
HXLINE( 562)									bitmap = shaderBuffer->shader->_hx___bitmap->input;
            								}
HXLINE( 565)								fill = null();
            							}
            							break;
            							case (int)8: {
HXLINE( 568)								if (hx::IsNotNull( bitmap )) {
HXLINE( 570)									switch((int)(data->prev->_hx_getIndex())){
            										case (int)0: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data97 = data;
HXDLIN( 570)											data97->oPos = (data97->oPos + 2);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data98 = data;
HXDLIN( 570)											data98->bPos = (data98->bPos + 2);
            										}
            										break;
            										case (int)1: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data99 = data;
HXDLIN( 570)											data99->iPos = (data99->iPos + 1);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data100 = data;
HXDLIN( 570)											data100->fPos = (data100->fPos + 1);
            										}
            										break;
            										case (int)2: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data101 = data;
HXDLIN( 570)											data101->oPos = (data101->oPos + 4);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data102 = data;
HXDLIN( 570)											data102->iiPos = (data102->iiPos + 2);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data103 = data;
HXDLIN( 570)											data103->ffPos = (data103->ffPos + 1);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data104 = data;
HXDLIN( 570)											data104->fPos = (data104->fPos + 1);
            										}
            										break;
            										case (int)3: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data105 = data;
HXDLIN( 570)											data105->oPos = (data105->oPos + 1);
            										}
            										break;
            										case (int)4: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data106 = data;
HXDLIN( 570)											data106->fPos = (data106->fPos + 6);
            										}
            										break;
            										case (int)5: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data107 = data;
HXDLIN( 570)											data107->fPos = (data107->fPos + 4);
            										}
            										break;
            										case (int)6: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data108 = data;
HXDLIN( 570)											data108->fPos = (data108->fPos + 3);
            										}
            										break;
            										case (int)7: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data109 = data;
HXDLIN( 570)											data109->fPos = (data109->fPos + 4);
            										}
            										break;
            										case (int)8: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data110 = data;
HXDLIN( 570)											data110->oPos = (data110->oPos + 3);
            										}
            										break;
            										case (int)9: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data111 = data;
HXDLIN( 570)											data111->fPos = (data111->fPos + 4);
            										}
            										break;
            										case (int)10: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data112 = data;
HXDLIN( 570)											data112->fPos = (data112->fPos + 5);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data113 = data;
HXDLIN( 570)											data113->oPos = (data113->oPos + 1);
            										}
            										break;
            										case (int)12: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data114 = data;
HXDLIN( 570)											data114->oPos = (data114->oPos + 4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data115 = data;
HXDLIN( 570)											data115->oPos = (data115->oPos + 2);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data116 = data;
HXDLIN( 570)											data116->bPos = (data116->bPos + 2);
            										}
            										break;
            										case (int)15: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data117 = data;
HXDLIN( 570)											data117->oPos = (data117->oPos + 4);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data118 = data;
HXDLIN( 570)											data118->iiPos = (data118->iiPos + 2);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data119 = data;
HXDLIN( 570)											data119->ffPos = (data119->ffPos + 1);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data120 = data;
HXDLIN( 570)											data120->fPos = (data120->fPos + 1);
            										}
            										break;
            										case (int)16: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data121 = data;
HXDLIN( 570)											data121->oPos = (data121->oPos + 4);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data122 = data;
HXDLIN( 570)											data122->iPos = (data122->iPos + 1);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data123 = data;
HXDLIN( 570)											data123->fPos = (data123->fPos + 2);
HXDLIN( 570)											 ::openfl::_internal::renderer::DrawCommandReader data124 = data;
HXDLIN( 570)											data124->bPos = (data124->bPos + 1);
            										}
            										break;
            										case (int)17: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data125 = data;
HXDLIN( 570)											data125->fPos = (data125->fPos + 2);
            										}
            										break;
            										case (int)18: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data126 = data;
HXDLIN( 570)											data126->fPos = (data126->fPos + 2);
            										}
            										break;
            										case (int)19: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data127 = data;
HXDLIN( 570)											data127->oPos = (data127->oPos + 1);
            										}
            										break;
            										case (int)20: {
HXLINE( 570)											 ::openfl::_internal::renderer::DrawCommandReader data128 = data;
HXDLIN( 570)											data128->oPos = (data128->oPos + 1);
            										}
            										break;
            										case (int)21: case (int)22: {
            										}
            										break;
            										default:{
            										}
            									}
HXLINE( 570)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_QUADS_dyn();
HXDLIN( 570)									 ::openfl::_internal::renderer::DrawCommandReader this4 = data;
HXDLIN( 570)									 ::openfl::_internal::renderer::DrawCommandReader c3 = this4;
HXLINE( 571)									 ::openfl::_Vector::FloatVector rects = ( ( ::openfl::_Vector::FloatVector)(c3->buffer->o->__get(c3->oPos)) );
HXLINE( 572)									 ::openfl::_Vector::IntVector indices = ( ( ::openfl::_Vector::IntVector)(c3->buffer->o->__get((c3->oPos + 1))) );
HXLINE( 573)									 ::openfl::_Vector::FloatVector transforms = ( ( ::openfl::_Vector::FloatVector)(c3->buffer->o->__get((c3->oPos + 2))) );
HXLINE( 576)									::Array< Float > rects1;
HXDLIN( 576)									if (hx::IsNull( rects )) {
HXLINE( 576)										rects1 = null();
            									}
            									else {
HXLINE( 576)										rects1 = ( (::Array< Float >)(rects->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            									}
HXLINE( 577)									::Array< int > indices1;
HXDLIN( 577)									if (hx::IsNull( indices )) {
HXLINE( 577)										indices1 = null();
            									}
            									else {
HXLINE( 577)										indices1 = ( (::Array< int >)(indices->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            									}
HXLINE( 578)									::Array< Float > transforms1;
HXDLIN( 578)									if (hx::IsNull( transforms )) {
HXLINE( 578)										transforms1 = null();
            									}
            									else {
HXLINE( 578)										transforms1 = ( (::Array< Float >)(transforms->__Field(HX_("__array",79,c6,ed,8f),hx::paccDynamic)) );
            									}
HXLINE( 581)									bool hasIndices = hx::IsNotNull( indices1 );
HXLINE( 582)									int length;
HXDLIN( 582)									if (hasIndices) {
HXLINE( 582)										length = indices1->length;
            									}
            									else {
HXLINE( 582)										length = ::Math_obj::floor((( (Float)(rects1->length) ) / ( (Float)(4) )));
            									}
HXLINE( 584)									::Array< Float > uMatrix = renderer->_hx___getMatrix(graphics->_hx___owner->_hx___renderTransform,1);
HXLINE( 585)									 ::openfl::display::Shader shader;
HXLINE( 587)									bool _hx_tmp9;
HXDLIN( 587)									if (hx::IsNotNull( shaderBuffer )) {
HXLINE( 587)										_hx_tmp9 = !(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender);
            									}
            									else {
HXLINE( 587)										_hx_tmp9 = false;
            									}
HXDLIN( 587)									if (_hx_tmp9) {
HXLINE( 589)										shader = renderer->_hx___initShaderBuffer(shaderBuffer);
HXLINE( 591)										renderer->_hx___setShaderBuffer(shaderBuffer);
HXLINE( 592)										renderer->applyMatrix(uMatrix);
HXLINE( 593)										renderer->applyBitmapData(bitmap,false,repeat);
HXLINE( 594)										renderer->applyAlpha(graphics->_hx___owner->_hx___worldAlpha);
HXLINE( 595)										renderer->applyColorTransform(graphics->_hx___owner->_hx___worldColorTransform);
            									}
            									else {
HXLINE( 600)										if (::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender) {
HXLINE( 600)											shader = renderer->_hx___maskShader;
            										}
            										else {
HXLINE( 600)											shader = renderer->_hx___initGraphicsShader(null());
            										}
HXLINE( 601)										renderer->setShader(shader);
HXLINE( 602)										renderer->applyMatrix(uMatrix);
HXLINE( 603)										renderer->applyBitmapData(bitmap,smooth,repeat);
HXLINE( 604)										renderer->applyAlpha(graphics->_hx___owner->_hx___worldAlpha);
HXLINE( 605)										renderer->applyColorTransform(graphics->_hx___owner->_hx___worldColorTransform);
HXLINE( 606)										renderer->updateShader();
            									}
HXLINE( 609)									int end = (quadBufferPosition + length);
HXLINE( 611)									while((quadBufferPosition < end)){
HXLINE( 613)										length = ::Std_obj::_hx_int(::Math_obj::min(( (Float)((end - quadBufferPosition)) ),( (Float)(context->_hx___quadIndexBufferElements) )));
HXLINE( 614)										if ((length <= 0)) {
HXLINE( 614)											goto _hx_goto_8;
            										}
HXLINE( 616)										bool _hx_tmp10;
HXDLIN( 616)										if (hx::IsNotNull( shaderBuffer )) {
HXLINE( 616)											_hx_tmp10 = !(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender);
            										}
            										else {
HXLINE( 616)											_hx_tmp10 = false;
            										}
HXDLIN( 616)										if (_hx_tmp10) {
HXLINE( 618)											renderer->_hx___updateShaderBuffer(shaderBufferOffset);
            										}
HXLINE( 621)										if (hx::IsNotNull( shader->_hx___position )) {
HXLINE( 621)											context->setVertexBufferAt(shader->_hx___position->index,graphics->_hx___quadBuffer->vertexBuffer,(quadBufferPosition * 16),2);
            										}
HXLINE( 623)										if (hx::IsNotNull( shader->_hx___textureCoord )) {
HXLINE( 623)											context->setVertexBufferAt(shader->_hx___textureCoord->index,graphics->_hx___quadBuffer->vertexBuffer,((quadBufferPosition * 16) + 2),2);
            										}
HXLINE( 627)										context->drawTriangles(context->_hx___quadIndexBuffer,0,(length * 2));
HXLINE( 629)										shaderBufferOffset = (shaderBufferOffset + (length * 4));
HXLINE( 630)										quadBufferPosition = (quadBufferPosition + length);
            									}
            									_hx_goto_8:;
HXLINE( 637)									renderer->_hx___clearShader();
            								}
            							}
            							break;
            							case (int)9: {
HXLINE( 641)								if (hx::IsNotNull( fill )) {
HXLINE( 643)									switch((int)(data->prev->_hx_getIndex())){
            										case (int)0: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data129 = data;
HXDLIN( 643)											data129->oPos = (data129->oPos + 2);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data130 = data;
HXDLIN( 643)											data130->bPos = (data130->bPos + 2);
            										}
            										break;
            										case (int)1: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data131 = data;
HXDLIN( 643)											data131->iPos = (data131->iPos + 1);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data132 = data;
HXDLIN( 643)											data132->fPos = (data132->fPos + 1);
            										}
            										break;
            										case (int)2: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data133 = data;
HXDLIN( 643)											data133->oPos = (data133->oPos + 4);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data134 = data;
HXDLIN( 643)											data134->iiPos = (data134->iiPos + 2);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data135 = data;
HXDLIN( 643)											data135->ffPos = (data135->ffPos + 1);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data136 = data;
HXDLIN( 643)											data136->fPos = (data136->fPos + 1);
            										}
            										break;
            										case (int)3: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data137 = data;
HXDLIN( 643)											data137->oPos = (data137->oPos + 1);
            										}
            										break;
            										case (int)4: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data138 = data;
HXDLIN( 643)											data138->fPos = (data138->fPos + 6);
            										}
            										break;
            										case (int)5: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data139 = data;
HXDLIN( 643)											data139->fPos = (data139->fPos + 4);
            										}
            										break;
            										case (int)6: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data140 = data;
HXDLIN( 643)											data140->fPos = (data140->fPos + 3);
            										}
            										break;
            										case (int)7: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data141 = data;
HXDLIN( 643)											data141->fPos = (data141->fPos + 4);
            										}
            										break;
            										case (int)8: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data142 = data;
HXDLIN( 643)											data142->oPos = (data142->oPos + 3);
            										}
            										break;
            										case (int)9: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data143 = data;
HXDLIN( 643)											data143->fPos = (data143->fPos + 4);
            										}
            										break;
            										case (int)10: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data144 = data;
HXDLIN( 643)											data144->fPos = (data144->fPos + 5);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data145 = data;
HXDLIN( 643)											data145->oPos = (data145->oPos + 1);
            										}
            										break;
            										case (int)12: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data146 = data;
HXDLIN( 643)											data146->oPos = (data146->oPos + 4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data147 = data;
HXDLIN( 643)											data147->oPos = (data147->oPos + 2);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data148 = data;
HXDLIN( 643)											data148->bPos = (data148->bPos + 2);
            										}
            										break;
            										case (int)15: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data149 = data;
HXDLIN( 643)											data149->oPos = (data149->oPos + 4);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data150 = data;
HXDLIN( 643)											data150->iiPos = (data150->iiPos + 2);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data151 = data;
HXDLIN( 643)											data151->ffPos = (data151->ffPos + 1);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data152 = data;
HXDLIN( 643)											data152->fPos = (data152->fPos + 1);
            										}
            										break;
            										case (int)16: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data153 = data;
HXDLIN( 643)											data153->oPos = (data153->oPos + 4);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data154 = data;
HXDLIN( 643)											data154->iPos = (data154->iPos + 1);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data155 = data;
HXDLIN( 643)											data155->fPos = (data155->fPos + 2);
HXDLIN( 643)											 ::openfl::_internal::renderer::DrawCommandReader data156 = data;
HXDLIN( 643)											data156->bPos = (data156->bPos + 1);
            										}
            										break;
            										case (int)17: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data157 = data;
HXDLIN( 643)											data157->fPos = (data157->fPos + 2);
            										}
            										break;
            										case (int)18: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data158 = data;
HXDLIN( 643)											data158->fPos = (data158->fPos + 2);
            										}
            										break;
            										case (int)19: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data159 = data;
HXDLIN( 643)											data159->oPos = (data159->oPos + 1);
            										}
            										break;
            										case (int)20: {
HXLINE( 643)											 ::openfl::_internal::renderer::DrawCommandReader data160 = data;
HXDLIN( 643)											data160->oPos = (data160->oPos + 1);
            										}
            										break;
            										case (int)21: case (int)22: {
            										}
            										break;
            										default:{
            										}
            									}
HXLINE( 643)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 643)									 ::openfl::_internal::renderer::DrawCommandReader this5 = data;
HXDLIN( 643)									 ::openfl::_internal::renderer::DrawCommandReader c4 = this5;
HXLINE( 644)									Float x = c4->buffer->f->__get(c4->fPos);
HXLINE( 645)									Float y = c4->buffer->f->__get((c4->fPos + 1));
HXLINE( 646)									Float width1 = c4->buffer->f->__get((c4->fPos + 2));
HXLINE( 647)									Float height1 = c4->buffer->f->__get((c4->fPos + 3));
HXLINE( 650)									int color1 = ( (int)(fill) );
HXLINE( 651)									::openfl::_internal::renderer::context3D::Context3DGraphics_obj::tempColorTransform->redOffset = ( (Float)((hx::UShr(color1,16) & 255)) );
HXLINE( 652)									::openfl::_internal::renderer::context3D::Context3DGraphics_obj::tempColorTransform->greenOffset = ( (Float)((hx::UShr(color1,8) & 255)) );
HXLINE( 653)									::openfl::_internal::renderer::context3D::Context3DGraphics_obj::tempColorTransform->blueOffset = ( (Float)((color1 & 255)) );
HXLINE( 655)									::openfl::_internal::renderer::context3D::Context3DGraphics_obj::tempColorTransform->_hx___combine(graphics->_hx___owner->_hx___worldColorTransform);
HXLINE( 657)									matrix->identity();
HXLINE( 658)									matrix->scale(width1,height1);
HXLINE( 659)									matrix->tx = x;
HXLINE( 660)									matrix->ty = y;
HXLINE( 661)									matrix->concat(graphics->_hx___owner->_hx___renderTransform);
HXLINE( 663)									 ::openfl::display::Shader shader1;
HXDLIN( 663)									if (::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender) {
HXLINE( 663)										shader1 = renderer->_hx___maskShader;
            									}
            									else {
HXLINE( 663)										shader1 = renderer->_hx___initGraphicsShader(null());
            									}
HXLINE( 664)									renderer->setShader(shader1);
HXLINE( 665)									renderer->applyMatrix(renderer->_hx___getMatrix(matrix,1));
HXLINE( 666)									renderer->applyBitmapData(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::blankBitmapData,true,repeat);
HXLINE( 668)									renderer->applyAlpha(((( (Float)((hx::UShr(color1,24) & 255)) ) / ( (Float)(255) )) * graphics->_hx___owner->_hx___worldAlpha));
HXLINE( 670)									renderer->applyColorTransform(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::tempColorTransform);
HXLINE( 671)									renderer->updateShader();
HXLINE( 673)									 ::openfl::display3D::VertexBuffer3D vertexBuffer = ::openfl::_internal::renderer::context3D::Context3DGraphics_obj::blankBitmapData->getVertexBuffer(context,null(),null());
HXLINE( 674)									if (hx::IsNotNull( shader1->_hx___position )) {
HXLINE( 674)										context->setVertexBufferAt(shader1->_hx___position->index,vertexBuffer,0,3);
            									}
HXLINE( 675)									if (hx::IsNotNull( shader1->_hx___textureCoord )) {
HXLINE( 675)										context->setVertexBufferAt(shader1->_hx___textureCoord->index,vertexBuffer,3,2);
            									}
HXLINE( 676)									 ::openfl::display3D::IndexBuffer3D indexBuffer = ::openfl::_internal::renderer::context3D::Context3DGraphics_obj::blankBitmapData->getIndexBuffer(context,null());
HXLINE( 677)									context->drawTriangles(indexBuffer,null(),null());
HXLINE( 679)									shaderBufferOffset = (shaderBufferOffset + 4);
HXLINE( 685)									renderer->_hx___clearShader();
            								}
            							}
            							break;
            							case (int)12: {
HXLINE( 689)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data161 = data;
HXDLIN( 689)										data161->oPos = (data161->oPos + 2);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data162 = data;
HXDLIN( 689)										data162->bPos = (data162->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data163 = data;
HXDLIN( 689)										data163->iPos = (data163->iPos + 1);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data164 = data;
HXDLIN( 689)										data164->fPos = (data164->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data165 = data;
HXDLIN( 689)										data165->oPos = (data165->oPos + 4);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data166 = data;
HXDLIN( 689)										data166->iiPos = (data166->iiPos + 2);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data167 = data;
HXDLIN( 689)										data167->ffPos = (data167->ffPos + 1);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data168 = data;
HXDLIN( 689)										data168->fPos = (data168->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data169 = data;
HXDLIN( 689)										data169->oPos = (data169->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data170 = data;
HXDLIN( 689)										data170->fPos = (data170->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data171 = data;
HXDLIN( 689)										data171->fPos = (data171->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data172 = data;
HXDLIN( 689)										data172->fPos = (data172->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data173 = data;
HXDLIN( 689)										data173->fPos = (data173->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data174 = data;
HXDLIN( 689)										data174->oPos = (data174->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data175 = data;
HXDLIN( 689)										data175->fPos = (data175->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data176 = data;
HXDLIN( 689)										data176->fPos = (data176->fPos + 5);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data177 = data;
HXDLIN( 689)										data177->oPos = (data177->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data178 = data;
HXDLIN( 689)										data178->oPos = (data178->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data179 = data;
HXDLIN( 689)										data179->oPos = (data179->oPos + 2);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data180 = data;
HXDLIN( 689)										data180->bPos = (data180->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data181 = data;
HXDLIN( 689)										data181->oPos = (data181->oPos + 4);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data182 = data;
HXDLIN( 689)										data182->iiPos = (data182->iiPos + 2);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data183 = data;
HXDLIN( 689)										data183->ffPos = (data183->ffPos + 1);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data184 = data;
HXDLIN( 689)										data184->fPos = (data184->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data185 = data;
HXDLIN( 689)										data185->oPos = (data185->oPos + 4);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data186 = data;
HXDLIN( 689)										data186->iPos = (data186->iPos + 1);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data187 = data;
HXDLIN( 689)										data187->fPos = (data187->fPos + 2);
HXDLIN( 689)										 ::openfl::_internal::renderer::DrawCommandReader data188 = data;
HXDLIN( 689)										data188->bPos = (data188->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data189 = data;
HXDLIN( 689)										data189->fPos = (data189->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data190 = data;
HXDLIN( 689)										data190->fPos = (data190->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data191 = data;
HXDLIN( 689)										data191->oPos = (data191->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 689)										 ::openfl::_internal::renderer::DrawCommandReader data192 = data;
HXDLIN( 689)										data192->oPos = (data192->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 689)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 689)								 ::openfl::_internal::renderer::DrawCommandReader this6 = data;
HXDLIN( 689)								 ::openfl::_internal::renderer::DrawCommandReader c5 = this6;
HXLINE( 690)								 ::openfl::_Vector::FloatVector vertices = ( ( ::openfl::_Vector::FloatVector)(c5->buffer->o->__get(c5->oPos)) );
HXLINE( 691)								 ::openfl::_Vector::IntVector indices2 = ( ( ::openfl::_Vector::IntVector)(c5->buffer->o->__get((c5->oPos + 1))) );
HXLINE( 692)								 ::openfl::_Vector::FloatVector uvtData = ( ( ::openfl::_Vector::FloatVector)(c5->buffer->o->__get((c5->oPos + 2))) );
HXLINE( 693)								 ::Dynamic culling = c5->buffer->o->__get((c5->oPos + 3));
HXLINE( 695)								bool hasIndices1 = hx::IsNotNull( indices2 );
HXLINE( 696)								int numVertices = ::Math_obj::floor((( (Float)(vertices->get_length()) ) / ( (Float)(2) )));
HXLINE( 697)								int length1;
HXDLIN( 697)								if (hasIndices1) {
HXLINE( 697)									length1 = indices2->get_length();
            								}
            								else {
HXLINE( 697)									length1 = numVertices;
            								}
HXLINE( 699)								bool hasUVData = hx::IsNotNull( uvtData );
HXLINE( 700)								bool hasUVTData;
HXDLIN( 700)								if (hasUVData) {
HXLINE( 700)									hasUVTData = (uvtData->get_length() >= (numVertices * 3));
            								}
            								else {
HXLINE( 700)									hasUVTData = false;
            								}
HXLINE( 701)								int vertLength;
HXDLIN( 701)								if (hasUVTData) {
HXLINE( 701)									vertLength = 4;
            								}
            								else {
HXLINE( 701)									vertLength = 2;
            								}
HXLINE( 702)								int uvStride;
HXDLIN( 702)								if (hasUVTData) {
HXLINE( 702)									uvStride = 3;
            								}
            								else {
HXLINE( 702)									uvStride = 2;
            								}
HXLINE( 704)								int dataPerVertex = (vertLength + 2);
HXLINE( 705)								 ::openfl::display3D::VertexBuffer3D vertexBuffer1;
HXDLIN( 705)								if (hasUVTData) {
HXLINE( 705)									vertexBuffer1 = graphics->_hx___vertexBufferUVT;
            								}
            								else {
HXLINE( 705)									vertexBuffer1 = graphics->_hx___vertexBuffer;
            								}
HXLINE( 706)								int bufferPosition;
HXDLIN( 706)								if (hasUVTData) {
HXLINE( 706)									bufferPosition = vertexBufferPositionUVT;
            								}
            								else {
HXLINE( 706)									bufferPosition = vertexBufferPosition;
            								}
HXLINE( 708)								::Array< Float > uMatrix1 = renderer->_hx___getMatrix(graphics->_hx___owner->_hx___renderTransform,1);
HXLINE( 709)								 ::openfl::display::Shader shader2;
HXLINE( 711)								bool _hx_tmp11;
HXDLIN( 711)								if (hx::IsNotNull( shaderBuffer )) {
HXLINE( 711)									_hx_tmp11 = !(::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender);
            								}
            								else {
HXLINE( 711)									_hx_tmp11 = false;
            								}
HXDLIN( 711)								if (_hx_tmp11) {
HXLINE( 713)									shader2 = renderer->_hx___initShaderBuffer(shaderBuffer);
HXLINE( 715)									renderer->_hx___setShaderBuffer(shaderBuffer);
HXLINE( 716)									renderer->applyMatrix(uMatrix1);
HXLINE( 717)									renderer->applyBitmapData(bitmap,false,repeat);
HXLINE( 718)									renderer->applyAlpha(( (Float)(1) ));
HXLINE( 719)									renderer->applyColorTransform(null());
HXLINE( 720)									renderer->_hx___updateShaderBuffer(shaderBufferOffset);
            								}
            								else {
HXLINE( 724)									if (::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender) {
HXLINE( 724)										shader2 = renderer->_hx___maskShader;
            									}
            									else {
HXLINE( 724)										shader2 = renderer->_hx___initGraphicsShader(null());
            									}
HXLINE( 725)									renderer->setShader(shader2);
HXLINE( 726)									renderer->applyMatrix(uMatrix1);
HXLINE( 727)									renderer->applyBitmapData(bitmap,smooth,repeat);
HXLINE( 728)									renderer->applyAlpha(graphics->_hx___owner->_hx___worldAlpha);
HXLINE( 729)									renderer->applyColorTransform(graphics->_hx___owner->_hx___worldColorTransform);
HXLINE( 730)									renderer->updateShader();
            								}
HXLINE( 733)								if (hx::IsNotNull( shader2->_hx___position )) {
HXLINE( 734)									 ::Dynamic _hx_tmp12;
HXDLIN( 734)									if (hasUVTData) {
HXLINE( 734)										_hx_tmp12 = 4;
            									}
            									else {
HXLINE( 734)										_hx_tmp12 = 2;
            									}
HXLINE( 733)									context->setVertexBufferAt(shader2->_hx___position->index,vertexBuffer1,bufferPosition,_hx_tmp12);
            								}
HXLINE( 735)								if (hx::IsNotNull( shader2->_hx___textureCoord )) {
HXLINE( 735)									context->setVertexBufferAt(shader2->_hx___textureCoord->index,vertexBuffer1,(bufferPosition + vertLength),2);
            								}
HXLINE( 738)								 ::Dynamic _hx_switch_0 = culling;
            								if (  (_hx_switch_0==0) ){
HXLINE( 744)									context->setCulling(0);
HXDLIN( 744)									goto _hx_goto_9;
            								}
            								if (  (_hx_switch_0==2) ){
HXLINE( 741)									context->setCulling(1);
HXDLIN( 741)									goto _hx_goto_9;
            								}
            								/* default */{
            								}
            								_hx_goto_9:;
HXLINE( 756)								context->_hx___drawTriangles(0,length1);
HXLINE( 760)								shaderBufferOffset = (shaderBufferOffset + length1);
HXLINE( 761)								if (hasUVTData) {
HXLINE( 763)									vertexBufferPositionUVT = (vertexBufferPositionUVT + (dataPerVertex * length1));
            								}
            								else {
HXLINE( 767)									vertexBufferPosition = (vertexBufferPosition + (dataPerVertex * length1));
            								}
HXLINE( 770)								if (hx::IsNotEq( culling,1 )) {
HXLINE( 772)									context->setCulling(0);
            								}
HXLINE( 779)								renderer->_hx___clearShader();
            							}
            							break;
            							case (int)13: {
HXLINE( 782)								bitmap = null();
HXLINE( 783)								fill = null();
HXLINE( 784)								shaderBuffer = null();
HXLINE( 785)								{
HXLINE( 785)									switch((int)(data->prev->_hx_getIndex())){
            										case (int)0: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data193 = data;
HXDLIN( 785)											data193->oPos = (data193->oPos + 2);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data194 = data;
HXDLIN( 785)											data194->bPos = (data194->bPos + 2);
            										}
            										break;
            										case (int)1: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data195 = data;
HXDLIN( 785)											data195->iPos = (data195->iPos + 1);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data196 = data;
HXDLIN( 785)											data196->fPos = (data196->fPos + 1);
            										}
            										break;
            										case (int)2: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data197 = data;
HXDLIN( 785)											data197->oPos = (data197->oPos + 4);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data198 = data;
HXDLIN( 785)											data198->iiPos = (data198->iiPos + 2);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data199 = data;
HXDLIN( 785)											data199->ffPos = (data199->ffPos + 1);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data200 = data;
HXDLIN( 785)											data200->fPos = (data200->fPos + 1);
            										}
            										break;
            										case (int)3: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data201 = data;
HXDLIN( 785)											data201->oPos = (data201->oPos + 1);
            										}
            										break;
            										case (int)4: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data202 = data;
HXDLIN( 785)											data202->fPos = (data202->fPos + 6);
            										}
            										break;
            										case (int)5: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data203 = data;
HXDLIN( 785)											data203->fPos = (data203->fPos + 4);
            										}
            										break;
            										case (int)6: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data204 = data;
HXDLIN( 785)											data204->fPos = (data204->fPos + 3);
            										}
            										break;
            										case (int)7: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data205 = data;
HXDLIN( 785)											data205->fPos = (data205->fPos + 4);
            										}
            										break;
            										case (int)8: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data206 = data;
HXDLIN( 785)											data206->oPos = (data206->oPos + 3);
            										}
            										break;
            										case (int)9: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data207 = data;
HXDLIN( 785)											data207->fPos = (data207->fPos + 4);
            										}
            										break;
            										case (int)10: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data208 = data;
HXDLIN( 785)											data208->fPos = (data208->fPos + 5);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data209 = data;
HXDLIN( 785)											data209->oPos = (data209->oPos + 1);
            										}
            										break;
            										case (int)12: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data210 = data;
HXDLIN( 785)											data210->oPos = (data210->oPos + 4);
            										}
            										break;
            										case (int)13: {
            										}
            										break;
            										case (int)14: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data211 = data;
HXDLIN( 785)											data211->oPos = (data211->oPos + 2);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data212 = data;
HXDLIN( 785)											data212->bPos = (data212->bPos + 2);
            										}
            										break;
            										case (int)15: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data213 = data;
HXDLIN( 785)											data213->oPos = (data213->oPos + 4);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data214 = data;
HXDLIN( 785)											data214->iiPos = (data214->iiPos + 2);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data215 = data;
HXDLIN( 785)											data215->ffPos = (data215->ffPos + 1);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data216 = data;
HXDLIN( 785)											data216->fPos = (data216->fPos + 1);
            										}
            										break;
            										case (int)16: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data217 = data;
HXDLIN( 785)											data217->oPos = (data217->oPos + 4);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data218 = data;
HXDLIN( 785)											data218->iPos = (data218->iPos + 1);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data219 = data;
HXDLIN( 785)											data219->fPos = (data219->fPos + 2);
HXDLIN( 785)											 ::openfl::_internal::renderer::DrawCommandReader data220 = data;
HXDLIN( 785)											data220->bPos = (data220->bPos + 1);
            										}
            										break;
            										case (int)17: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data221 = data;
HXDLIN( 785)											data221->fPos = (data221->fPos + 2);
            										}
            										break;
            										case (int)18: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data222 = data;
HXDLIN( 785)											data222->fPos = (data222->fPos + 2);
            										}
            										break;
            										case (int)19: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data223 = data;
HXDLIN( 785)											data223->oPos = (data223->oPos + 1);
            										}
            										break;
            										case (int)20: {
HXLINE( 785)											 ::openfl::_internal::renderer::DrawCommandReader data224 = data;
HXDLIN( 785)											data224->oPos = (data224->oPos + 1);
            										}
            										break;
            										case (int)21: case (int)22: {
            										}
            										break;
            										default:{
            										}
            									}
HXLINE( 785)									data->prev = type;
            								}
            							}
            							break;
            							case (int)18: {
HXLINE( 788)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data225 = data;
HXDLIN( 788)										data225->oPos = (data225->oPos + 2);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data226 = data;
HXDLIN( 788)										data226->bPos = (data226->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data227 = data;
HXDLIN( 788)										data227->iPos = (data227->iPos + 1);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data228 = data;
HXDLIN( 788)										data228->fPos = (data228->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data229 = data;
HXDLIN( 788)										data229->oPos = (data229->oPos + 4);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data230 = data;
HXDLIN( 788)										data230->iiPos = (data230->iiPos + 2);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data231 = data;
HXDLIN( 788)										data231->ffPos = (data231->ffPos + 1);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data232 = data;
HXDLIN( 788)										data232->fPos = (data232->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data233 = data;
HXDLIN( 788)										data233->oPos = (data233->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data234 = data;
HXDLIN( 788)										data234->fPos = (data234->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data235 = data;
HXDLIN( 788)										data235->fPos = (data235->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data236 = data;
HXDLIN( 788)										data236->fPos = (data236->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data237 = data;
HXDLIN( 788)										data237->fPos = (data237->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data238 = data;
HXDLIN( 788)										data238->oPos = (data238->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data239 = data;
HXDLIN( 788)										data239->fPos = (data239->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data240 = data;
HXDLIN( 788)										data240->fPos = (data240->fPos + 5);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data241 = data;
HXDLIN( 788)										data241->oPos = (data241->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data242 = data;
HXDLIN( 788)										data242->oPos = (data242->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data243 = data;
HXDLIN( 788)										data243->oPos = (data243->oPos + 2);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data244 = data;
HXDLIN( 788)										data244->bPos = (data244->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data245 = data;
HXDLIN( 788)										data245->oPos = (data245->oPos + 4);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data246 = data;
HXDLIN( 788)										data246->iiPos = (data246->iiPos + 2);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data247 = data;
HXDLIN( 788)										data247->ffPos = (data247->ffPos + 1);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data248 = data;
HXDLIN( 788)										data248->fPos = (data248->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data249 = data;
HXDLIN( 788)										data249->oPos = (data249->oPos + 4);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data250 = data;
HXDLIN( 788)										data250->iPos = (data250->iPos + 1);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data251 = data;
HXDLIN( 788)										data251->fPos = (data251->fPos + 2);
HXDLIN( 788)										 ::openfl::_internal::renderer::DrawCommandReader data252 = data;
HXDLIN( 788)										data252->bPos = (data252->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data253 = data;
HXDLIN( 788)										data253->fPos = (data253->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data254 = data;
HXDLIN( 788)										data254->fPos = (data254->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data255 = data;
HXDLIN( 788)										data255->oPos = (data255->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 788)										 ::openfl::_internal::renderer::DrawCommandReader data256 = data;
HXDLIN( 788)										data256->oPos = (data256->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 788)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 788)								 ::openfl::_internal::renderer::DrawCommandReader this7 = data;
HXDLIN( 788)								 ::openfl::_internal::renderer::DrawCommandReader c6 = this7;
HXLINE( 789)								positionX = c6->buffer->f->__get(c6->fPos);
HXLINE( 790)								positionY = c6->buffer->f->__get((c6->fPos + 1));
            							}
            							break;
            							case (int)19: {
HXLINE( 793)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data257 = data;
HXDLIN( 793)										data257->oPos = (data257->oPos + 2);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data258 = data;
HXDLIN( 793)										data258->bPos = (data258->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data259 = data;
HXDLIN( 793)										data259->iPos = (data259->iPos + 1);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data260 = data;
HXDLIN( 793)										data260->fPos = (data260->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data261 = data;
HXDLIN( 793)										data261->oPos = (data261->oPos + 4);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data262 = data;
HXDLIN( 793)										data262->iiPos = (data262->iiPos + 2);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data263 = data;
HXDLIN( 793)										data263->ffPos = (data263->ffPos + 1);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data264 = data;
HXDLIN( 793)										data264->fPos = (data264->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data265 = data;
HXDLIN( 793)										data265->oPos = (data265->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data266 = data;
HXDLIN( 793)										data266->fPos = (data266->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data267 = data;
HXDLIN( 793)										data267->fPos = (data267->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data268 = data;
HXDLIN( 793)										data268->fPos = (data268->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data269 = data;
HXDLIN( 793)										data269->fPos = (data269->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data270 = data;
HXDLIN( 793)										data270->oPos = (data270->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data271 = data;
HXDLIN( 793)										data271->fPos = (data271->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data272 = data;
HXDLIN( 793)										data272->fPos = (data272->fPos + 5);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data273 = data;
HXDLIN( 793)										data273->oPos = (data273->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data274 = data;
HXDLIN( 793)										data274->oPos = (data274->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data275 = data;
HXDLIN( 793)										data275->oPos = (data275->oPos + 2);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data276 = data;
HXDLIN( 793)										data276->bPos = (data276->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data277 = data;
HXDLIN( 793)										data277->oPos = (data277->oPos + 4);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data278 = data;
HXDLIN( 793)										data278->iiPos = (data278->iiPos + 2);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data279 = data;
HXDLIN( 793)										data279->ffPos = (data279->ffPos + 1);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data280 = data;
HXDLIN( 793)										data280->fPos = (data280->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data281 = data;
HXDLIN( 793)										data281->oPos = (data281->oPos + 4);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data282 = data;
HXDLIN( 793)										data282->iPos = (data282->iPos + 1);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data283 = data;
HXDLIN( 793)										data283->fPos = (data283->fPos + 2);
HXDLIN( 793)										 ::openfl::_internal::renderer::DrawCommandReader data284 = data;
HXDLIN( 793)										data284->bPos = (data284->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data285 = data;
HXDLIN( 793)										data285->fPos = (data285->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data286 = data;
HXDLIN( 793)										data286->fPos = (data286->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data287 = data;
HXDLIN( 793)										data287->oPos = (data287->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 793)										 ::openfl::_internal::renderer::DrawCommandReader data288 = data;
HXDLIN( 793)										data288->oPos = (data288->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 793)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::OVERRIDE_BLEND_MODE_dyn();
HXDLIN( 793)								 ::openfl::_internal::renderer::DrawCommandReader this8 = data;
HXDLIN( 793)								 ::openfl::_internal::renderer::DrawCommandReader c7 = this8;
HXLINE( 794)								renderer->_hx___setBlendMode(c7->buffer->o->__get(c7->oPos));
            							}
            							break;
            							default:{
HXLINE( 797)								switch((int)(data->prev->_hx_getIndex())){
            									case (int)0: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data289 = data;
HXDLIN( 797)										data289->oPos = (data289->oPos + 2);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data290 = data;
HXDLIN( 797)										data290->bPos = (data290->bPos + 2);
            									}
            									break;
            									case (int)1: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data291 = data;
HXDLIN( 797)										data291->iPos = (data291->iPos + 1);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data292 = data;
HXDLIN( 797)										data292->fPos = (data292->fPos + 1);
            									}
            									break;
            									case (int)2: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data293 = data;
HXDLIN( 797)										data293->oPos = (data293->oPos + 4);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data294 = data;
HXDLIN( 797)										data294->iiPos = (data294->iiPos + 2);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data295 = data;
HXDLIN( 797)										data295->ffPos = (data295->ffPos + 1);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data296 = data;
HXDLIN( 797)										data296->fPos = (data296->fPos + 1);
            									}
            									break;
            									case (int)3: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data297 = data;
HXDLIN( 797)										data297->oPos = (data297->oPos + 1);
            									}
            									break;
            									case (int)4: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data298 = data;
HXDLIN( 797)										data298->fPos = (data298->fPos + 6);
            									}
            									break;
            									case (int)5: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data299 = data;
HXDLIN( 797)										data299->fPos = (data299->fPos + 4);
            									}
            									break;
            									case (int)6: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data300 = data;
HXDLIN( 797)										data300->fPos = (data300->fPos + 3);
            									}
            									break;
            									case (int)7: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data301 = data;
HXDLIN( 797)										data301->fPos = (data301->fPos + 4);
            									}
            									break;
            									case (int)8: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data302 = data;
HXDLIN( 797)										data302->oPos = (data302->oPos + 3);
            									}
            									break;
            									case (int)9: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data303 = data;
HXDLIN( 797)										data303->fPos = (data303->fPos + 4);
            									}
            									break;
            									case (int)10: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data304 = data;
HXDLIN( 797)										data304->fPos = (data304->fPos + 5);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data305 = data;
HXDLIN( 797)										data305->oPos = (data305->oPos + 1);
            									}
            									break;
            									case (int)12: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data306 = data;
HXDLIN( 797)										data306->oPos = (data306->oPos + 4);
            									}
            									break;
            									case (int)13: {
            									}
            									break;
            									case (int)14: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data307 = data;
HXDLIN( 797)										data307->oPos = (data307->oPos + 2);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data308 = data;
HXDLIN( 797)										data308->bPos = (data308->bPos + 2);
            									}
            									break;
            									case (int)15: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data309 = data;
HXDLIN( 797)										data309->oPos = (data309->oPos + 4);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data310 = data;
HXDLIN( 797)										data310->iiPos = (data310->iiPos + 2);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data311 = data;
HXDLIN( 797)										data311->ffPos = (data311->ffPos + 1);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data312 = data;
HXDLIN( 797)										data312->fPos = (data312->fPos + 1);
            									}
            									break;
            									case (int)16: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data313 = data;
HXDLIN( 797)										data313->oPos = (data313->oPos + 4);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data314 = data;
HXDLIN( 797)										data314->iPos = (data314->iPos + 1);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data315 = data;
HXDLIN( 797)										data315->fPos = (data315->fPos + 2);
HXDLIN( 797)										 ::openfl::_internal::renderer::DrawCommandReader data316 = data;
HXDLIN( 797)										data316->bPos = (data316->bPos + 1);
            									}
            									break;
            									case (int)17: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data317 = data;
HXDLIN( 797)										data317->fPos = (data317->fPos + 2);
            									}
            									break;
            									case (int)18: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data318 = data;
HXDLIN( 797)										data318->fPos = (data318->fPos + 2);
            									}
            									break;
            									case (int)19: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data319 = data;
HXDLIN( 797)										data319->oPos = (data319->oPos + 1);
            									}
            									break;
            									case (int)20: {
HXLINE( 797)										 ::openfl::_internal::renderer::DrawCommandReader data320 = data;
HXDLIN( 797)										data320->oPos = (data320->oPos + 1);
            									}
            									break;
            									case (int)21: case (int)22: {
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 797)								data->prev = type;
            							}
            						}
            					}
            				}
HXLINE( 801)				::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
            			}
HXLINE( 804)			graphics->_hx___hardwareDirty = false;
HXLINE( 805)			graphics->set___dirty(false);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DGraphics_obj,render,(void))

void Context3DGraphics_obj::renderMask( ::openfl::display::Graphics graphics, ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_d002914090c3588a_810_renderMask)
HXLINE( 813)		::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender = true;
HXLINE( 814)		::openfl::_internal::renderer::context3D::Context3DGraphics_obj::render(graphics,renderer);
HXLINE( 815)		::openfl::_internal::renderer::context3D::Context3DGraphics_obj::maskRender = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Context3DGraphics_obj,renderMask,(void))

void Context3DGraphics_obj::resizeIndexBuffer( ::openfl::display::Graphics graphics,bool isQuad,int length){
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_819_resizeIndexBuffer)
HXLINE( 820)		if (isQuad) {
HXLINE( 820)			return;
            		}
HXLINE( 822)		 ::lime::utils::ArrayBufferView buffer;
HXDLIN( 822)		if (isQuad) {
HXLINE( 822)			buffer = null();
            		}
            		else {
HXLINE( 822)			buffer = graphics->_hx___triangleIndexBufferData;
            		}
HXLINE( 823)		int position = 0;
HXDLIN( 823)		 ::lime::utils::ArrayBufferView newBuffer = null();
HXLINE( 826)		if (hx::IsNull( buffer )) {
HXLINE( 828)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 828)			if (hx::IsNotNull( length )) {
HXLINE( 828)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,length,6);
            			}
            			else {
HXLINE( 828)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            			}
HXDLIN( 828)			newBuffer = this1;
            		}
            		else {
HXLINE( 830)			if ((length > buffer->length)) {
HXLINE( 832)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 832)				if (hx::IsNotNull( length )) {
HXLINE( 832)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,length,6);
            				}
            				else {
HXLINE( 832)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            				}
HXDLIN( 832)				newBuffer = this2;
HXLINE( 833)				{
HXLINE( 833)					int offset = 0;
HXDLIN( 833)					if (hx::IsNotNull( buffer )) {
HXLINE( 833)						newBuffer->buffer->blit((offset * newBuffer->bytesPerElement),buffer->buffer,buffer->byteOffset,buffer->byteLength);
            					}
            					else {
HXLINE( 833)						HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            					}
            				}
HXLINE( 834)				position = buffer->length;
            			}
            		}
HXLINE( 838)		if (hx::IsNotNull( newBuffer )) {
HXLINE( 840)			if (!(isQuad)) {
HXLINE( 861)				graphics->_hx___triangleIndexBufferData = newBuffer;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Context3DGraphics_obj,resizeIndexBuffer,(void))

void Context3DGraphics_obj::resizeVertexBuffer( ::openfl::display::Graphics graphics,bool hasUVTData,int length){
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_867_resizeVertexBuffer)
HXLINE( 868)		 ::lime::utils::ArrayBufferView buffer;
HXDLIN( 868)		if (hasUVTData) {
HXLINE( 868)			buffer = graphics->_hx___vertexBufferDataUVT;
            		}
            		else {
HXLINE( 868)			buffer = graphics->_hx___vertexBufferData;
            		}
HXLINE( 869)		 ::lime::utils::ArrayBufferView newBuffer = null();
HXLINE( 872)		if (hx::IsNull( buffer )) {
HXLINE( 874)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 874)			if (hx::IsNotNull( length )) {
HXLINE( 874)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,length,8);
            			}
            			else {
HXLINE( 874)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN( 874)			newBuffer = this1;
            		}
            		else {
HXLINE( 876)			if ((length > buffer->length)) {
HXLINE( 878)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 878)				if (hx::IsNotNull( length )) {
HXLINE( 878)					this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,length,8);
            				}
            				else {
HXLINE( 878)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXDLIN( 878)				newBuffer = this2;
HXLINE( 879)				{
HXLINE( 879)					int offset = 0;
HXDLIN( 879)					if (hx::IsNotNull( buffer )) {
HXLINE( 879)						newBuffer->buffer->blit((offset * newBuffer->bytesPerElement),buffer->buffer,buffer->byteOffset,buffer->byteLength);
            					}
            					else {
HXLINE( 879)						HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            					}
            				}
            			}
            		}
HXLINE( 883)		if (hx::IsNotNull( newBuffer )) {
HXLINE( 885)			if (hasUVTData) {
HXLINE( 885)				graphics->_hx___vertexBufferDataUVT = newBuffer;
            			}
            			else {
HXLINE( 885)				graphics->_hx___vertexBufferData = newBuffer;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Context3DGraphics_obj,resizeVertexBuffer,(void))


Context3DGraphics_obj::Context3DGraphics_obj()
{
}

bool Context3DGraphics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"maskRender") ) { outValue = ( maskRender ); return true; }
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buildBuffer") ) { outValue = buildBuffer_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isCompatible") ) { outValue = isCompatible_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blankBitmapData") ) { outValue = ( blankBitmapData ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"resizeIndexBuffer") ) { outValue = resizeIndexBuffer_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"tempColorTransform") ) { outValue = ( tempColorTransform ); return true; }
		if (HX_FIELD_EQ(inName,"resizeVertexBuffer") ) { outValue = resizeVertexBuffer_dyn(); return true; }
	}
	return false;
}

bool Context3DGraphics_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"maskRender") ) { maskRender=ioValue.Cast< bool >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"blankBitmapData") ) { blankBitmapData=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"tempColorTransform") ) { tempColorTransform=ioValue.Cast<  ::openfl::geom::ColorTransform >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Context3DGraphics_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Context3DGraphics_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::openfl::display::BitmapData */ ,(void *) &Context3DGraphics_obj::blankBitmapData,HX_("blankBitmapData",2d,8a,0b,df)},
	{hx::fsBool,(void *) &Context3DGraphics_obj::maskRender,HX_("maskRender",62,99,0d,1a)},
	{hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(void *) &Context3DGraphics_obj::tempColorTransform,HX_("tempColorTransform",bd,e9,a6,54)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Context3DGraphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3DGraphics_obj::blankBitmapData,"blankBitmapData");
	HX_MARK_MEMBER_NAME(Context3DGraphics_obj::maskRender,"maskRender");
	HX_MARK_MEMBER_NAME(Context3DGraphics_obj::tempColorTransform,"tempColorTransform");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3DGraphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3DGraphics_obj::blankBitmapData,"blankBitmapData");
	HX_VISIT_MEMBER_NAME(Context3DGraphics_obj::maskRender,"maskRender");
	HX_VISIT_MEMBER_NAME(Context3DGraphics_obj::tempColorTransform,"tempColorTransform");
};

#endif

hx::Class Context3DGraphics_obj::__mClass;

static ::String Context3DGraphics_obj_sStaticFields[] = {
	HX_("blankBitmapData",2d,8a,0b,df),
	HX_("maskRender",62,99,0d,1a),
	HX_("tempColorTransform",bd,e9,a6,54),
	HX_("buildBuffer",ce,a2,05,21),
	HX_("isCompatible",de,03,42,0a),
	HX_("render",56,6b,29,05),
	HX_("renderMask",62,3b,60,e5),
	HX_("resizeIndexBuffer",1e,c0,ce,b4),
	HX_("resizeVertexBuffer",98,73,d0,f4),
	::String(null())
};

void Context3DGraphics_obj::__register()
{
	Context3DGraphics_obj _hx_dummy;
	Context3DGraphics_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.renderer.context3D.Context3DGraphics",22,0a,8b,15);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3DGraphics_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3DGraphics_obj::__SetStatic;
	__mClass->mMarkFunc = Context3DGraphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3DGraphics_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Context3DGraphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3DGraphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3DGraphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3DGraphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3DGraphics_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d002914090c3588a_33_boot)
HXDLIN(  33)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_35_boot)
HXDLIN(  35)		blankBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,1,1,false,0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d002914090c3588a_37_boot)
HXDLIN(  37)		tempColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,1,1,1,0,0,0,0);
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace context3D
