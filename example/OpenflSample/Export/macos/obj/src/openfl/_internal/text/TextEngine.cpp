// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_text_GlyphPosition
#include <openfl/_internal/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayout
#include <openfl/_internal/text/TextLayout.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_104_new,"openfl._internal.text.TextEngine","new",0xcc80cb52,"openfl._internal.text.TextEngine.new","openfl/_internal/text/TextEngine.hx",104,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_151_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",151,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_146_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",146,0xdff93b7f)
static const ::String _hx_array_data_a0887a60_3[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_233_getBounds,"openfl._internal.text.TextEngine","getBounds",0x5ce2cc1d,"openfl._internal.text.TextEngine.getBounds","openfl/_internal/text/TextEngine.hx",233,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_546_getLine,"openfl._internal.text.TextEngine","getLine",0xf060239c,"openfl._internal.text.TextEngine.getLine","openfl/_internal/text/TextEngine.hx",546,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_563_getLineBreakIndex,"openfl._internal.text.TextEngine","getLineBreakIndex",0x0741948f,"openfl._internal.text.TextEngine.getLineBreakIndex","openfl/_internal/text/TextEngine.hx",563,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_573_getLineMeasurements,"openfl._internal.text.TextEngine","getLineMeasurements",0x203f1eb3,"openfl._internal.text.TextEngine.getLineMeasurements","openfl/_internal/text/TextEngine.hx",573,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_738_getLayoutGroups,"openfl._internal.text.TextEngine","getLayoutGroups",0xa3099646,"openfl._internal.text.TextEngine.getLayoutGroups","openfl/_internal/text/TextEngine.hx",738,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1537_restrictText,"openfl._internal.text.TextEngine","restrictText",0x020728d7,"openfl._internal.text.TextEngine.restrictText","openfl/_internal/text/TextEngine.hx",1537,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1558_setTextAlignment,"openfl._internal.text.TextEngine","setTextAlignment",0xb5caa542,"openfl._internal.text.TextEngine.setTextAlignment","openfl/_internal/text/TextEngine.hx",1558,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1664_trimText,"openfl._internal.text.TextEngine","trimText",0xf449c67d,"openfl._internal.text.TextEngine.trimText","openfl/_internal/text/TextEngine.hx",1664,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1679_update,"openfl._internal.text.TextEngine","update",0x7da66e57,"openfl._internal.text.TextEngine.update","openfl/_internal/text/TextEngine.hx",1679,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1709_set_restrict,"openfl._internal.text.TextEngine","set_restrict",0x897ab987,"openfl._internal.text.TextEngine.set_restrict","openfl/_internal/text/TextEngine.hx",1709,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1731_set_text,"openfl._internal.text.TextEngine","set_text",0x09f7f978,"openfl._internal.text.TextEngine.set_text","openfl/_internal/text/TextEngine.hx",1731,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_172_findFont,"openfl._internal.text.TextEngine","findFont",0x253a8276,"openfl._internal.text.TextEngine.findFont","openfl/_internal/text/TextEngine.hx",172,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_208_findFontVariant,"openfl._internal.text.TextEngine","findFontVariant",0xfb6dc0af,"openfl._internal.text.TextEngine.findFontVariant","openfl/_internal/text/TextEngine.hx",208,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_258_getFormatHeight,"openfl._internal.text.TextEngine","getFormatHeight",0xaafdc226,"openfl._internal.text.TextEngine.getFormatHeight","openfl/_internal/text/TextEngine.hx",258,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_294_getFont,"openfl._internal.text.TextEngine","getFont",0xec6d6977,"openfl._internal.text.TextEngine.getFont","openfl/_internal/text/TextEngine.hx",294,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_351_getFontInstance,"openfl._internal.text.TextEngine","getFontInstance",0xe749142c,"openfl._internal.text.TextEngine.getFontInstance","openfl/_internal/text/TextEngine.hx",351,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_33_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",33,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_35_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",35,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_36_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",36,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_37_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",37,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_38_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",38,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_39_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",39,0xdff93b7f)
namespace openfl{
namespace _internal{
namespace text{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_104_new)
HXLINE( 105)		this->textField = textField;
HXLINE( 107)		this->width = ( (Float)(100) );
HXLINE( 108)		this->height = ( (Float)(100) );
HXLINE( 109)		this->set_text(HX_("",00,00,00,00));
HXLINE( 111)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,0,0);
HXLINE( 112)		this->textBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,0,0);
HXLINE( 114)		this->type = 0;
HXLINE( 115)		this->autoSize = 2;
HXLINE( 116)		this->embedFonts = false;
HXLINE( 117)		this->selectable = true;
HXLINE( 118)		this->borderColor = 0;
HXLINE( 119)		this->border = false;
HXLINE( 120)		this->backgroundColor = 16777215;
HXLINE( 121)		this->background = false;
HXLINE( 122)		this->gridFitType = 1;
HXLINE( 123)		this->maxChars = 0;
HXLINE( 124)		this->multiline = false;
HXLINE( 125)		this->sharpness = ( (Float)(0) );
HXLINE( 126)		this->scrollH = 0;
HXLINE( 127)		this->scrollV = 1;
HXLINE( 128)		this->wordWrap = false;
HXLINE( 130)		int length = null();
HXDLIN( 130)		bool fixed = null();
HXDLIN( 130)		this->lineAscents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
HXLINE( 131)		int length1 = null();
HXDLIN( 131)		bool fixed1 = null();
HXDLIN( 131)		this->lineBreaks =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,null());
HXLINE( 132)		int length2 = null();
HXDLIN( 132)		bool fixed2 = null();
HXDLIN( 132)		this->lineDescents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,null(),true);
HXLINE( 133)		int length3 = null();
HXDLIN( 133)		bool fixed3 = null();
HXDLIN( 133)		this->lineLeadings =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,null(),true);
HXLINE( 134)		int length4 = null();
HXDLIN( 134)		bool fixed4 = null();
HXDLIN( 134)		this->lineHeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length4,fixed4,null(),true);
HXLINE( 135)		int length5 = null();
HXDLIN( 135)		bool fixed5 = null();
HXDLIN( 135)		this->lineWidths =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length5,fixed5,null(),true);
HXLINE( 136)		int length6 = null();
HXDLIN( 136)		bool fixed6 = null();
HXDLIN( 136)		this->layoutGroups =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length6,fixed6,null(),true);
HXLINE( 137)		int length7 = null();
HXDLIN( 137)		bool fixed7 = null();
HXDLIN( 137)		this->textFormatRanges =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length7,fixed7,null(),true);
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

void *TextEngine_obj::_hx_vtable = 0;

Dynamic TextEngine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextEngine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x278047a0;
}

 ::EReg TextEngine_obj::createRestrictRegexp(::String restrict){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,declined) HXARGC(1)
            		::String _hx_run( ::EReg ereg){
            			HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_151_createRestrictRegexp)
HXLINE( 152)			::Array< ::String > declined1 = declined;
HXDLIN( 152)			int accepted1 = 0;
HXDLIN( 152)			::String declined2 = declined1->__get(accepted1);
HXDLIN( 152)			declined1[accepted1] = (declined2 + ereg->matched(1));
HXLINE( 153)			return HX_("",00,00,00,00);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_146_createRestrictRegexp)
HXLINE( 147)		 ::EReg declinedRange =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\^(.-.|.)",ee,f5,da,ba),HX_("gu",2e,5a,00,00));
HXLINE( 148)		::Array< ::String > declined = ::Array_obj< ::String >::fromData( _hx_array_data_a0887a60_3,1);
HXLINE( 150)		::String accepted = declinedRange->map(restrict, ::Dynamic(new _hx_Closure_0(declined)));
HXLINE( 156)		::Array< ::String > testRegexpParts = ::Array_obj< ::String >::__new(0);
HXLINE( 158)		if ((accepted.length > 0)) {
HXLINE( 160)			testRegexpParts->push(((HX_("[^",a3,4f,00,00) + restrict) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 163)		if ((declined->__get(0).length > 0)) {
HXLINE( 165)			testRegexpParts->push(((HX_("[",5b,00,00,00) + declined->__get(0)) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 168)		return  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + testRegexpParts->join(HX_("|",7c,00,00,00))) + HX_(")",29,00,00,00)),HX_("g",67,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,createRestrictRegexp,return )

void TextEngine_obj::getBounds(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_233_getBounds)
HXLINE( 234)		int padding;
HXDLIN( 234)		if (this->border) {
HXLINE( 234)			padding = 1;
            		}
            		else {
HXLINE( 234)			padding = 0;
            		}
HXLINE( 236)		this->bounds->width = (this->width + padding);
HXLINE( 237)		this->bounds->height = (this->height + padding);
HXLINE( 239)		Float x = this->width;
HXDLIN( 239)		Float y = this->width;
HXLINE( 241)		{
HXLINE( 241)			 ::Dynamic group = this->layoutGroups->iterator();
HXDLIN( 241)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 241)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 243)				if ((group1->offsetX < x)) {
HXLINE( 243)					x = group1->offsetX;
            				}
HXLINE( 244)				if ((group1->offsetY < y)) {
HXLINE( 244)					y = group1->offsetY;
            				}
            			}
            		}
HXLINE( 247)		if ((x >= this->width)) {
HXLINE( 247)			x = ( (Float)(2) );
            		}
HXLINE( 248)		if ((y >= this->height)) {
HXLINE( 248)			y = ( (Float)(2) );
            		}
HXLINE( 254)		this->textBounds->setTo(::Math_obj::max((x - ( (Float)(2) )),( (Float)(0) )),::Math_obj::max((y - ( (Float)(2) )),( (Float)(0) )),::Math_obj::min((this->textWidth + 4),(this->bounds->width + 4)),::Math_obj::min((this->textHeight + 4),(this->bounds->height + 4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(int index){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_546_getLine)
HXLINE( 547)		bool _hx_tmp;
HXDLIN( 547)		if ((index >= 0)) {
HXLINE( 547)			_hx_tmp = (index > (this->lineBreaks->get_length() + 1));
            		}
            		else {
HXLINE( 547)			_hx_tmp = true;
            		}
HXDLIN( 547)		if (_hx_tmp) {
HXLINE( 549)			return null();
            		}
HXLINE( 552)		if ((this->lineBreaks->get_length() == 0)) {
HXLINE( 554)			return this->text;
            		}
            		else {
HXLINE( 558)			::String _hx_tmp1 = this->text;
HXDLIN( 558)			int _hx_tmp2;
HXDLIN( 558)			if ((index > 0)) {
HXLINE( 558)				_hx_tmp2 = this->lineBreaks->get((index - 1));
            			}
            			else {
HXLINE( 558)				_hx_tmp2 = 0;
            			}
HXDLIN( 558)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_hx_tmp1,_hx_tmp2,this->lineBreaks->get(index));
            		}
HXLINE( 552)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

int TextEngine_obj::getLineBreakIndex(hx::Null< int >  __o_startIndex){
            		int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_563_getLineBreakIndex)
HXLINE( 564)		int cr = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\n",0a,00,00,00),startIndex);
HXLINE( 565)		int lf = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\r",0d,00,00,00),startIndex);
HXLINE( 567)		if ((cr == -1)) {
HXLINE( 567)			return lf;
            		}
HXLINE( 568)		if ((lf == -1)) {
HXLINE( 568)			return cr;
            		}
HXLINE( 569)		if ((cr < lf)) {
HXLINE( 569)			return cr;
            		}
            		else {
HXLINE( 569)			return lf;
            		}
HXDLIN( 569)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_573_getLineMeasurements)
HXLINE( 574)		this->lineAscents->set_length(0);
HXLINE( 575)		this->lineDescents->set_length(0);
HXLINE( 576)		this->lineLeadings->set_length(0);
HXLINE( 577)		this->lineHeights->set_length(0);
HXLINE( 578)		this->lineWidths->set_length(0);
HXLINE( 580)		Float currentLineAscent = ((Float)0.0);
HXLINE( 581)		Float currentLineDescent = ((Float)0.0);
HXLINE( 582)		 ::Dynamic currentLineLeading = null();
HXLINE( 583)		Float currentLineHeight = ((Float)0.0);
HXLINE( 584)		Float currentLineWidth = ((Float)0.0);
HXLINE( 585)		Float currentTextHeight = ((Float)0.0);
HXLINE( 587)		this->textWidth = ( (Float)(0) );
HXLINE( 588)		this->textHeight = ( (Float)(0) );
HXLINE( 589)		this->numLines = 1;
HXLINE( 590)		this->bottomScrollV = 0;
HXLINE( 591)		this->maxScrollH = 0;
HXLINE( 593)		{
HXLINE( 593)			 ::Dynamic group = this->layoutGroups->iterator();
HXDLIN( 593)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 593)				 ::openfl::_internal::text::TextLayoutGroup group1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 595)				while((group1->lineIndex > (this->numLines - 1))){
HXLINE( 597)					this->lineAscents->push(currentLineAscent);
HXLINE( 598)					this->lineDescents->push(currentLineDescent);
HXLINE( 599)					{
HXLINE( 599)						Float _hx_tmp;
HXDLIN( 599)						if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 599)							_hx_tmp = ( (Float)(currentLineLeading) );
            						}
            						else {
HXLINE( 599)							_hx_tmp = ( (Float)(0) );
            						}
HXDLIN( 599)						this->lineLeadings->push(_hx_tmp);
            					}
HXLINE( 600)					this->lineHeights->push(currentLineHeight);
HXLINE( 601)					this->lineWidths->push(currentLineWidth);
HXLINE( 603)					currentLineAscent = ( (Float)(0) );
HXLINE( 604)					currentLineDescent = ( (Float)(0) );
HXLINE( 605)					currentLineLeading = null();
HXLINE( 606)					currentLineHeight = ( (Float)(0) );
HXLINE( 607)					currentLineWidth = ( (Float)(0) );
HXLINE( 609)					this->numLines++;
HXLINE( 611)					if ((this->textHeight <= (this->height - ( (Float)(2) )))) {
HXLINE( 613)						this->bottomScrollV++;
            					}
            				}
HXLINE( 617)				currentLineAscent = ::Math_obj::max(currentLineAscent,group1->ascent);
HXLINE( 618)				currentLineDescent = ::Math_obj::max(currentLineDescent,group1->descent);
HXLINE( 620)				if (hx::IsNull( currentLineLeading )) {
HXLINE( 622)					currentLineLeading = group1->leading;
            				}
            				else {
HXLINE( 626)					currentLineLeading = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(currentLineLeading) ),( (Float)(group1->leading) )));
            				}
HXLINE( 629)				currentLineHeight = ::Math_obj::max(currentLineHeight,group1->height);
HXLINE( 630)				currentLineWidth = ((group1->offsetX - ( (Float)(2) )) + group1->width);
HXLINE( 632)				if ((currentLineWidth > this->textWidth)) {
HXLINE( 634)					this->textWidth = currentLineWidth;
            				}
HXLINE( 637)				currentTextHeight = (((group1->offsetY - ( (Float)(2) )) + group1->ascent) + group1->descent);
HXLINE( 639)				if ((currentTextHeight > this->textHeight)) {
HXLINE( 641)					this->textHeight = currentTextHeight;
            				}
            			}
            		}
HXLINE( 645)		bool _hx_tmp1;
HXDLIN( 645)		bool _hx_tmp2;
HXDLIN( 645)		if ((this->textHeight == 0)) {
HXLINE( 645)			_hx_tmp2 = hx::IsNotNull( this->textField );
            		}
            		else {
HXLINE( 645)			_hx_tmp2 = false;
            		}
HXDLIN( 645)		if (_hx_tmp2) {
HXLINE( 645)			_hx_tmp1 = hx::IsEq( this->textField->get_type(),1 );
            		}
            		else {
HXLINE( 645)			_hx_tmp1 = false;
            		}
HXDLIN( 645)		if (_hx_tmp1) {
HXLINE( 647)			 ::openfl::text::TextFormat currentFormat = this->textField->_hx___textFormat;
HXLINE( 648)			Float ascent;
HXDLIN( 648)			Float descent;
HXLINE( 650)			 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE( 652)			if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 654)				ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 655)				descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            			}
            			else {
HXLINE( 657)				bool _hx_tmp3;
HXDLIN( 657)				if (hx::IsNotNull( font )) {
HXLINE( 657)					_hx_tmp3 = (font->unitsPerEM != 0);
            				}
            				else {
HXLINE( 657)					_hx_tmp3 = false;
            				}
HXDLIN( 657)				if (_hx_tmp3) {
HXLINE( 660)					ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 661)					descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            				}
            				else {
HXLINE( 669)					ascent = ( (Float)(currentFormat->size) );
HXLINE( 670)					descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            				}
            			}
HXLINE( 648)			 ::Dynamic leading = currentFormat->leading;
HXDLIN( 648)			Float heightValue = ((ascent + descent) + leading);
HXLINE( 677)			currentLineAscent = ascent;
HXLINE( 678)			currentLineDescent = descent;
HXLINE( 679)			currentLineLeading = leading;
HXLINE( 681)			currentTextHeight = (ascent + descent);
HXLINE( 682)			this->textHeight = currentTextHeight;
            		}
HXLINE( 685)		this->lineAscents->push(currentLineAscent);
HXLINE( 686)		this->lineDescents->push(currentLineDescent);
HXLINE( 687)		{
HXLINE( 687)			Float _hx_tmp4;
HXDLIN( 687)			if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 687)				_hx_tmp4 = ( (Float)(currentLineLeading) );
            			}
            			else {
HXLINE( 687)				_hx_tmp4 = ( (Float)(0) );
            			}
HXDLIN( 687)			this->lineLeadings->push(_hx_tmp4);
            		}
HXLINE( 688)		this->lineHeights->push(currentLineHeight);
HXLINE( 689)		this->lineWidths->push(currentLineWidth);
HXLINE( 691)		if ((this->numLines == 1)) {
HXLINE( 693)			this->bottomScrollV = 1;
HXLINE( 695)			if (hx::IsGreater( currentLineLeading,0 )) {
HXLINE( 697)				 ::openfl::_internal::text::TextEngine _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 697)				_hx_tmp5->textHeight = (_hx_tmp5->textHeight + currentLineLeading);
            			}
            		}
            		else {
HXLINE( 700)			if ((this->textHeight <= (this->height - ( (Float)(2) )))) {
HXLINE( 702)				this->bottomScrollV++;
            			}
            		}
HXLINE( 705)		if (hx::IsNotEq( this->autoSize,2 )) {
HXLINE( 707)			 ::Dynamic _hx_switch_0 = this->autoSize;
            			if (  (_hx_switch_0==0) ||  (_hx_switch_0==1) ||  (_hx_switch_0==3) ){
HXLINE( 710)				if (!(this->wordWrap)) {
HXLINE( 712)					this->width = (this->textWidth + 4);
            				}
HXLINE( 715)				this->height = (this->textHeight + 4);
HXLINE( 716)				this->bottomScrollV = this->numLines;
HXLINE( 709)				goto _hx_goto_10;
            			}
            			/* default */{
            			}
            			_hx_goto_10:;
            		}
HXLINE( 722)		if ((this->textWidth > (this->width - ( (Float)(4) )))) {
HXLINE( 724)			this->maxScrollH = ::Std_obj::_hx_int(((this->textWidth - this->width) + 4));
            		}
            		else {
HXLINE( 728)			this->maxScrollH = 0;
            		}
HXLINE( 731)		this->maxScrollV = ((this->numLines - this->bottomScrollV) + 1);
HXLINE( 733)		if ((this->scrollV > this->maxScrollV)) {
HXLINE( 733)			this->scrollV = this->maxScrollV;
            		}
HXLINE( 734)		if ((this->scrollH > this->maxScrollH)) {
HXLINE( 734)			this->scrollH = this->maxScrollH;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_738_getLayoutGroups)
HXLINE( 737)		 ::openfl::_internal::text::TextEngine _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 739)		this->layoutGroups->set_length(0);
HXLINE( 741)		bool _hx_tmp;
HXDLIN( 741)		if (hx::IsNotNull( this->text )) {
HXLINE( 741)			_hx_tmp = ::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->text,HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 741)			_hx_tmp = true;
            		}
HXDLIN( 741)		if (_hx_tmp) {
HXLINE( 741)			return;
            		}
HXLINE( 743)		int rangeIndex = -1;
HXLINE( 744)		 ::openfl::_internal::text::TextFormatRange formatRange = null();
HXLINE( 745)		 ::lime::text::Font font = null();
HXLINE( 747)		 ::openfl::text::TextFormat currentFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 749)		int leading = 0;
HXLINE( 750)		Float ascent = ((Float)0.0);
HXDLIN( 750)		Float maxAscent = ((Float)0.0);
HXLINE( 751)		Float descent = ((Float)0.0);
HXLINE( 753)		 ::openfl::_internal::text::TextLayoutGroup layoutGroup = null();
HXDLIN( 753)		::Array< ::Dynamic> positions = null();
HXLINE( 754)		Float widthValue = ((Float)0.0);
HXDLIN( 754)		int heightValue = 0;
HXDLIN( 754)		int maxHeightValue = 0;
HXLINE( 755)		int previousSpaceIndex = -2;
HXLINE( 756)		int spaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),null());
HXLINE( 757)		int breakIndex = this->getLineBreakIndex(null());
HXLINE( 759)		Float offsetX = ((Float)2.0);
HXLINE( 760)		Float offsetY = ((Float)2.0);
HXLINE( 761)		int textIndex = 0;
HXLINE( 762)		int lineIndex = 0;
HXLINE( 763)		 ::openfl::text::TextFormat lineFormat = null();
HXLINE(1234)		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1234)			rangeIndex = (rangeIndex + 1);
HXDLIN(1234)			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1234)			currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            		}
HXLINE(1235)		{
HXLINE(1235)			if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)				ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)				descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            			}
            			else {
HXLINE(1235)				bool _hx_tmp1;
HXDLIN(1235)				if (hx::IsNotNull( font )) {
HXLINE(1235)					_hx_tmp1 = (font->unitsPerEM != 0);
            				}
            				else {
HXLINE(1235)					_hx_tmp1 = false;
            				}
HXDLIN(1235)				if (_hx_tmp1) {
HXLINE( 934)					ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)					descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            				}
            				else {
HXLINE( 940)					ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)					descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            				}
            			}
HXLINE( 944)			leading = ( (int)(currentFormat->leading) );
HXLINE( 946)			heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1235)			if ((heightValue > maxHeightValue)) {
HXLINE( 950)				maxHeightValue = heightValue;
            			}
HXLINE(1235)			if ((ascent > maxAscent)) {
HXLINE( 955)				maxAscent = ascent;
            			}
            		}
HXLINE(1237)		lineFormat = formatRange->format;
HXLINE(1238)		bool wrap;
HXLINE(1239)		int maxLoops = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) + 1);
HXLINE(1242)		while((textIndex < maxLoops)){
HXLINE(1244)			bool _hx_tmp2;
HXDLIN(1244)			if ((breakIndex > -1)) {
HXLINE(1244)				if ((spaceIndex != -1)) {
HXLINE(1244)					_hx_tmp2 = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE(1244)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE(1244)				_hx_tmp2 = false;
            			}
HXDLIN(1244)			if (_hx_tmp2) {
HXLINE(1248)				if ((textIndex <= breakIndex)) {
HXLINE(1250)					if ((breakIndex <= formatRange->end)) {
HXLINE(1250)						::String text = _gthis->text;
HXDLIN(1250)						Float letterSpacing = ((Float)0.0);
HXDLIN(1250)						if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)							letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            						}
HXLINE(1250)						if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1250)							_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN(1250)						Float width = ((Float)0.0);
HXDLIN(1250)						_gthis->_hx___textLayout->set_text(null());
HXDLIN(1250)						_gthis->_hx___textLayout->set_font(font);
HXDLIN(1250)						if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1250)							_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            						}
HXDLIN(1250)						_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1250)						bool positions1;
HXDLIN(1250)						if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1250)							positions1 = (_gthis->sharpness < 400);
            						}
            						else {
HXLINE(1250)							positions1 = true;
            						}
HXDLIN(1250)						_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1250)						 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1250)						_gthis1->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text,textIndex,breakIndex));
HXDLIN(1250)						positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1250)						Float width1 = ((Float)0.0);
HXDLIN(1250)						int _g = 0;
HXDLIN(1250)						while((_g < positions->length)){
HXLINE(1250)							 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1250)							_g = (_g + 1);
HXDLIN(1250)							width1 = (width1 + position->advance->x);
            						}
HXDLIN(1250)						widthValue = width1;
            					}
            					else {
HXLINE(1250)						int tempIndex = textIndex;
HXDLIN(1250)						int tempRangeEnd = formatRange->end;
HXDLIN(1250)						int countRanges = 0;
HXLINE( 996)						positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)						widthValue = ( (Float)(0) );
HXLINE(1250)						while(true){
HXLINE(1250)							if ((tempIndex != tempRangeEnd)) {
HXLINE(1250)								::String text1 = _gthis->text;
HXDLIN(1250)								Float letterSpacing1 = ((Float)0.0);
HXDLIN(1250)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)									letterSpacing1 = ( (Float)(formatRange->format->letterSpacing) );
            								}
HXLINE(1250)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1250)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1250)								Float width2 = ((Float)0.0);
HXDLIN(1250)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1250)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1250)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1250)									_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            								}
HXDLIN(1250)								_gthis->_hx___textLayout->letterSpacing = letterSpacing1;
HXDLIN(1250)								bool _hx_tmp3;
HXDLIN(1250)								if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1250)									_hx_tmp3 = (_gthis->sharpness < 400);
            								}
            								else {
HXLINE(1250)									_hx_tmp3 = true;
            								}
HXDLIN(1250)								_gthis->_hx___textLayout->autoHint = _hx_tmp3;
HXDLIN(1250)								 ::openfl::_internal::text::TextLayout _gthis2 = _gthis->_hx___textLayout;
HXDLIN(1250)								_gthis2->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text1,tempIndex,tempRangeEnd));
HXDLIN(1250)								::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)								positions = positions->concat(tempPositions);
            							}
HXLINE(1250)							if ((tempRangeEnd != breakIndex)) {
HXLINE(1250)								bool _hx_tmp4;
HXDLIN(1250)								if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1250)									rangeIndex = (rangeIndex + 1);
HXDLIN(1250)									formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1250)									currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1250)									_hx_tmp4 = true;
            								}
            								else {
HXLINE(1250)									_hx_tmp4 = false;
            								}
HXDLIN(1250)								if (!(_hx_tmp4)) {
HXLINE(1250)									::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1250)									goto _hx_goto_14;
            								}
HXLINE(1015)								tempIndex = tempRangeEnd;
HXLINE(1250)								if ((breakIndex < formatRange->end)) {
HXLINE(1250)									tempRangeEnd = breakIndex;
            								}
            								else {
HXLINE(1250)									tempRangeEnd = formatRange->end;
            								}
HXDLIN(1250)								countRanges = (countRanges + 1);
            							}
            							else {
HXLINE(1250)								Float width3 = ((Float)0.0);
HXDLIN(1250)								int _g1 = 0;
HXDLIN(1250)								while((_g1 < positions->length)){
HXLINE(1250)									 ::openfl::_internal::text::GlyphPosition position1 = positions->__get(_g1).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1250)									_g1 = (_g1 + 1);
HXDLIN(1250)									width3 = (width3 + position1->advance->x);
            								}
HXDLIN(1250)								widthValue = width3;
HXDLIN(1250)								goto _hx_goto_14;
            							}
            						}
            						_hx_goto_14:;
HXDLIN(1250)						rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1250)						if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1250)							rangeIndex = (rangeIndex + 1);
HXDLIN(1250)							formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1250)							currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)							font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            						}
            					}
HXLINE(1251)					{
HXLINE(1251)						bool _hx_tmp5;
HXDLIN(1251)						if ((_gthis->width >= 4)) {
HXLINE(1251)							_hx_tmp5 = _gthis->wordWrap;
            						}
            						else {
HXLINE(1251)							_hx_tmp5 = false;
            						}
HXDLIN(1251)						if (_hx_tmp5) {
HXLINE(1251)							::Array< ::Dynamic> remainingPositions = positions;
HXDLIN(1251)							int i;
HXDLIN(1251)							int bufferCount;
HXDLIN(1251)							int placeIndex;
HXDLIN(1251)							Float positionWidth;
HXDLIN(1251)							 ::openfl::_internal::text::GlyphPosition currentPosition;
HXDLIN(1251)							Float width4 = ((Float)0.0);
HXDLIN(1251)							{
HXLINE(1251)								int _g2 = 0;
HXDLIN(1251)								while((_g2 < remainingPositions->length)){
HXLINE(1251)									 ::openfl::_internal::text::GlyphPosition position2 = remainingPositions->__get(_g2).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1251)									_g2 = (_g2 + 1);
HXDLIN(1251)									width4 = (width4 + position2->advance->x);
            								}
            							}
HXDLIN(1251)							Float tempWidth = width4;
HXDLIN(1251)							while(((offsetX + tempWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1152)								bufferCount = 0;
HXDLIN(1152)								i = bufferCount;
HXLINE(1153)								positionWidth = ((Float)0.0);
HXLINE(1251)								while(((offsetX + positionWidth) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1157)									currentPosition = remainingPositions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1251)									if ((currentPosition->advance->x == ((Float)0.0))) {
HXLINE(1251)										i = (i + 1);
HXDLIN(1251)										bufferCount = (bufferCount + 1);
            									}
            									else {
HXLINE(1251)										positionWidth = (positionWidth + currentPosition->advance->x);
HXDLIN(1251)										i = (i + 1);
            									}
            								}
HXDLIN(1251)								bool _hx_tmp6;
HXDLIN(1251)								if ((i < 2)) {
HXLINE(1251)									_hx_tmp6 = ((positionWidth + offsetX) > (_gthis->width - ( (Float)(2) )));
            								}
            								else {
HXLINE(1251)									_hx_tmp6 = false;
            								}
HXDLIN(1251)								if (_hx_tmp6) {
HXLINE(1251)									if ((((textIndex + i) - bufferCount) == breakIndex)) {
HXLINE(1251)										goto _hx_goto_17;
            									}
            								}
            								else {
HXLINE(1251)									while(((offsetX + positionWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1251)										i = (i - 1);
HXDLIN(1251)										if (((i - bufferCount) > 0)) {
HXLINE(1251)											{
HXLINE(1251)												int endIndex = ((textIndex + i) - bufferCount);
HXDLIN(1251)												if ((endIndex <= formatRange->end)) {
HXLINE(1251)													::String text2 = _gthis->text;
HXDLIN(1251)													Float letterSpacing2 = ((Float)0.0);
HXDLIN(1251)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)														letterSpacing2 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1251)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1251)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1251)													Float width5 = ((Float)0.0);
HXDLIN(1251)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1251)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1251)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1251)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1251)													_gthis->_hx___textLayout->letterSpacing = letterSpacing2;
HXDLIN(1251)													bool positions2;
HXDLIN(1251)													if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1251)														positions2 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1251)														positions2 = true;
            													}
HXDLIN(1251)													_gthis->_hx___textLayout->autoHint = positions2;
HXDLIN(1251)													 ::openfl::_internal::text::TextLayout _gthis3 = _gthis->_hx___textLayout;
HXDLIN(1251)													_gthis3->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text2,textIndex,endIndex));
HXDLIN(1251)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1251)													Float width6 = ((Float)0.0);
HXDLIN(1251)													int _g3 = 0;
HXDLIN(1251)													while((_g3 < positions->length)){
HXLINE(1251)														 ::openfl::_internal::text::GlyphPosition position3 = positions->__get(_g3).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1251)														_g3 = (_g3 + 1);
HXDLIN(1251)														width6 = (width6 + position3->advance->x);
            													}
HXDLIN(1251)													widthValue = width6;
            												}
            												else {
HXLINE(1251)													int tempIndex1 = textIndex;
HXDLIN(1251)													int tempRangeEnd1 = formatRange->end;
HXDLIN(1251)													int countRanges1 = 0;
HXLINE( 996)													positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)													widthValue = ( (Float)(0) );
HXLINE(1251)													while(true){
HXLINE(1251)														if ((tempIndex1 != tempRangeEnd1)) {
HXLINE(1251)															::String text3 = _gthis->text;
HXDLIN(1251)															Float letterSpacing3 = ((Float)0.0);
HXDLIN(1251)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																letterSpacing3 = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXLINE(1251)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1251)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1251)															Float width7 = ((Float)0.0);
HXDLIN(1251)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1251)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1251)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1251)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1251)															_gthis->_hx___textLayout->letterSpacing = letterSpacing3;
HXDLIN(1251)															bool _hx_tmp7;
HXDLIN(1251)															if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1251)																_hx_tmp7 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1251)																_hx_tmp7 = true;
            															}
HXDLIN(1251)															_gthis->_hx___textLayout->autoHint = _hx_tmp7;
HXDLIN(1251)															 ::openfl::_internal::text::TextLayout _gthis4 = _gthis->_hx___textLayout;
HXDLIN(1251)															_gthis4->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text3,tempIndex1,tempRangeEnd1));
HXDLIN(1251)															::Array< ::Dynamic> tempPositions1 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)															positions = positions->concat(tempPositions1);
            														}
HXLINE(1251)														if ((tempRangeEnd1 != endIndex)) {
HXLINE(1251)															bool _hx_tmp8;
HXDLIN(1251)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1251)																rangeIndex = (rangeIndex + 1);
HXDLIN(1251)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1251)																currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1251)																_hx_tmp8 = true;
            															}
            															else {
HXLINE(1251)																_hx_tmp8 = false;
            															}
HXDLIN(1251)															if (!(_hx_tmp8)) {
HXLINE(1251)																::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1251)																goto _hx_goto_21;
            															}
HXLINE(1015)															tempIndex1 = tempRangeEnd1;
HXLINE(1251)															if ((endIndex < formatRange->end)) {
HXLINE(1251)																tempRangeEnd1 = endIndex;
            															}
            															else {
HXLINE(1251)																tempRangeEnd1 = formatRange->end;
            															}
HXDLIN(1251)															countRanges1 = (countRanges1 + 1);
            														}
            														else {
HXLINE(1251)															Float width8 = ((Float)0.0);
HXDLIN(1251)															int _g4 = 0;
HXDLIN(1251)															while((_g4 < positions->length)){
HXLINE(1251)																 ::openfl::_internal::text::GlyphPosition position4 = positions->__get(_g4).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1251)																_g4 = (_g4 + 1);
HXDLIN(1251)																width8 = (width8 + position4->advance->x);
            															}
HXDLIN(1251)															widthValue = width8;
HXDLIN(1251)															goto _hx_goto_21;
            														}
            													}
            													_hx_goto_21:;
HXDLIN(1251)													rangeIndex = (rangeIndex - (countRanges1 + 1));
HXDLIN(1251)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1251)														rangeIndex = (rangeIndex + 1);
HXDLIN(1251)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1251)														currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
            												}
            											}
HXLINE(1195)											positionWidth = widthValue;
            										}
            										else {
HXLINE(1201)											i = 1;
HXLINE(1202)											bufferCount = 0;
HXLINE(1251)											{
HXLINE(1251)												int endIndex1 = (textIndex + 1);
HXDLIN(1251)												if ((endIndex1 <= formatRange->end)) {
HXLINE(1251)													::String text4 = _gthis->text;
HXDLIN(1251)													Float letterSpacing4 = ((Float)0.0);
HXDLIN(1251)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)														letterSpacing4 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1251)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1251)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1251)													Float width9 = ((Float)0.0);
HXDLIN(1251)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1251)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1251)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1251)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1251)													_gthis->_hx___textLayout->letterSpacing = letterSpacing4;
HXDLIN(1251)													bool positions3;
HXDLIN(1251)													if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1251)														positions3 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1251)														positions3 = true;
            													}
HXDLIN(1251)													_gthis->_hx___textLayout->autoHint = positions3;
HXDLIN(1251)													 ::openfl::_internal::text::TextLayout _gthis5 = _gthis->_hx___textLayout;
HXDLIN(1251)													_gthis5->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text4,textIndex,endIndex1));
HXDLIN(1251)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1251)													Float width10 = ((Float)0.0);
HXDLIN(1251)													int _g5 = 0;
HXDLIN(1251)													while((_g5 < positions->length)){
HXLINE(1251)														 ::openfl::_internal::text::GlyphPosition position5 = positions->__get(_g5).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1251)														_g5 = (_g5 + 1);
HXDLIN(1251)														width10 = (width10 + position5->advance->x);
            													}
HXDLIN(1251)													widthValue = width10;
            												}
            												else {
HXLINE(1251)													int tempIndex2 = textIndex;
HXDLIN(1251)													int tempRangeEnd2 = formatRange->end;
HXDLIN(1251)													int countRanges2 = 0;
HXLINE( 996)													positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)													widthValue = ( (Float)(0) );
HXLINE(1251)													while(true){
HXLINE(1251)														if ((tempIndex2 != tempRangeEnd2)) {
HXLINE(1251)															::String text5 = _gthis->text;
HXDLIN(1251)															Float letterSpacing5 = ((Float)0.0);
HXDLIN(1251)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																letterSpacing5 = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXLINE(1251)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1251)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1251)															Float width11 = ((Float)0.0);
HXDLIN(1251)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1251)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1251)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1251)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1251)															_gthis->_hx___textLayout->letterSpacing = letterSpacing5;
HXDLIN(1251)															bool _hx_tmp9;
HXDLIN(1251)															if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1251)																_hx_tmp9 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1251)																_hx_tmp9 = true;
            															}
HXDLIN(1251)															_gthis->_hx___textLayout->autoHint = _hx_tmp9;
HXDLIN(1251)															 ::openfl::_internal::text::TextLayout _gthis6 = _gthis->_hx___textLayout;
HXDLIN(1251)															_gthis6->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text5,tempIndex2,tempRangeEnd2));
HXDLIN(1251)															::Array< ::Dynamic> tempPositions2 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)															positions = positions->concat(tempPositions2);
            														}
HXLINE(1251)														if ((tempRangeEnd2 != endIndex1)) {
HXLINE(1251)															bool _hx_tmp10;
HXDLIN(1251)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1251)																rangeIndex = (rangeIndex + 1);
HXDLIN(1251)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1251)																currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1251)																_hx_tmp10 = true;
            															}
            															else {
HXLINE(1251)																_hx_tmp10 = false;
            															}
HXDLIN(1251)															if (!(_hx_tmp10)) {
HXLINE(1251)																::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1251)																goto _hx_goto_24;
            															}
HXLINE(1015)															tempIndex2 = tempRangeEnd2;
HXLINE(1251)															if ((endIndex1 < formatRange->end)) {
HXLINE(1251)																tempRangeEnd2 = endIndex1;
            															}
            															else {
HXLINE(1251)																tempRangeEnd2 = formatRange->end;
            															}
HXDLIN(1251)															countRanges2 = (countRanges2 + 1);
            														}
            														else {
HXLINE(1251)															Float width12 = ((Float)0.0);
HXDLIN(1251)															int _g6 = 0;
HXDLIN(1251)															while((_g6 < positions->length)){
HXLINE(1251)																 ::openfl::_internal::text::GlyphPosition position6 = positions->__get(_g6).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1251)																_g6 = (_g6 + 1);
HXDLIN(1251)																width12 = (width12 + position6->advance->x);
            															}
HXDLIN(1251)															widthValue = width12;
HXDLIN(1251)															goto _hx_goto_24;
            														}
            													}
            													_hx_goto_24:;
HXDLIN(1251)													rangeIndex = (rangeIndex - (countRanges2 + 1));
HXDLIN(1251)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1251)														rangeIndex = (rangeIndex + 1);
HXDLIN(1251)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1251)														currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
            												}
            											}
HXLINE(1205)											positionWidth = ( (Float)(0) );
            										}
            									}
            								}
HXLINE(1210)								placeIndex = ((textIndex + i) - bufferCount);
HXLINE(1251)								{
HXLINE(1251)									if ((placeIndex <= formatRange->end)) {
HXLINE(1251)										::String text6 = _gthis->text;
HXDLIN(1251)										Float letterSpacing6 = ((Float)0.0);
HXDLIN(1251)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)											letterSpacing6 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1251)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1251)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1251)										Float width13 = ((Float)0.0);
HXDLIN(1251)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1251)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1251)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1251)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1251)										_gthis->_hx___textLayout->letterSpacing = letterSpacing6;
HXDLIN(1251)										bool positions4;
HXDLIN(1251)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1251)											positions4 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1251)											positions4 = true;
            										}
HXDLIN(1251)										_gthis->_hx___textLayout->autoHint = positions4;
HXDLIN(1251)										 ::openfl::_internal::text::TextLayout _gthis7 = _gthis->_hx___textLayout;
HXDLIN(1251)										_gthis7->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text6,textIndex,placeIndex));
HXDLIN(1251)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1251)										Float width14 = ((Float)0.0);
HXDLIN(1251)										int _g7 = 0;
HXDLIN(1251)										while((_g7 < positions->length)){
HXLINE(1251)											 ::openfl::_internal::text::GlyphPosition position7 = positions->__get(_g7).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1251)											_g7 = (_g7 + 1);
HXDLIN(1251)											width14 = (width14 + position7->advance->x);
            										}
HXDLIN(1251)										widthValue = width14;
HXDLIN(1251)										bool _hx_tmp11;
HXDLIN(1251)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1251)											_hx_tmp11 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1251)											_hx_tmp11 = true;
            										}
HXDLIN(1251)										if (_hx_tmp11) {
HXLINE( 912)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex);
HXLINE(1251)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1251)											layoutGroup->format = formatRange->format;
HXDLIN(1251)											layoutGroup->startIndex = textIndex;
HXDLIN(1251)											layoutGroup->endIndex = placeIndex;
            										}
HXDLIN(1251)										layoutGroup->positions = positions;
HXDLIN(1251)										layoutGroup->offsetX = offsetX;
HXDLIN(1251)										layoutGroup->ascent = ascent;
HXDLIN(1251)										layoutGroup->descent = descent;
HXDLIN(1251)										layoutGroup->leading = leading;
HXDLIN(1251)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1251)										layoutGroup->offsetY = offsetY;
HXDLIN(1251)										layoutGroup->width = widthValue;
HXDLIN(1251)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1251)										offsetX = (offsetX + widthValue);
HXDLIN(1251)										if ((placeIndex == formatRange->end)) {
HXLINE(1058)											layoutGroup = null();
HXLINE(1251)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1251)												rangeIndex = (rangeIndex + 1);
HXDLIN(1251)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1251)												currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXLINE(1251)											{
HXLINE(1251)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1251)													bool _hx_tmp12;
HXDLIN(1251)													if (hx::IsNotNull( font )) {
HXLINE(1251)														_hx_tmp12 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1251)														_hx_tmp12 = false;
            													}
HXDLIN(1251)													if (_hx_tmp12) {
HXLINE( 934)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 940)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 944)												leading = ( (int)(currentFormat->leading) );
HXLINE( 946)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1251)												if ((heightValue > maxHeightValue)) {
HXLINE( 950)													maxHeightValue = heightValue;
            												}
HXLINE(1251)												if ((ascent > maxAscent)) {
HXLINE( 955)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1251)										while(true){
HXLINE(1251)											int tempRangeEnd3;
HXDLIN(1251)											if ((placeIndex < formatRange->end)) {
HXLINE(1251)												tempRangeEnd3 = placeIndex;
            											}
            											else {
HXLINE(1251)												tempRangeEnd3 = formatRange->end;
            											}
HXDLIN(1251)											if ((textIndex != tempRangeEnd3)) {
HXLINE(1251)												::String text7 = _gthis->text;
HXDLIN(1251)												Float letterSpacing7 = ((Float)0.0);
HXDLIN(1251)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)													letterSpacing7 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1251)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1251)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1251)												Float width15 = ((Float)0.0);
HXDLIN(1251)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1251)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1251)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1251)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1251)												_gthis->_hx___textLayout->letterSpacing = letterSpacing7;
HXDLIN(1251)												bool positions5;
HXDLIN(1251)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1251)													positions5 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1251)													positions5 = true;
            												}
HXDLIN(1251)												_gthis->_hx___textLayout->autoHint = positions5;
HXDLIN(1251)												 ::openfl::_internal::text::TextLayout _gthis8 = _gthis->_hx___textLayout;
HXDLIN(1251)												_gthis8->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text7,textIndex,tempRangeEnd3));
HXDLIN(1251)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1251)												Float width16 = ((Float)0.0);
HXDLIN(1251)												int _g8 = 0;
HXDLIN(1251)												while((_g8 < positions->length)){
HXLINE(1251)													 ::openfl::_internal::text::GlyphPosition position8 = positions->__get(_g8).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1251)													_g8 = (_g8 + 1);
HXDLIN(1251)													width16 = (width16 + position8->advance->x);
            												}
HXDLIN(1251)												widthValue = width16;
HXDLIN(1251)												bool _hx_tmp13;
HXDLIN(1251)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1251)													_hx_tmp13 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1251)													_hx_tmp13 = true;
            												}
HXDLIN(1251)												if (_hx_tmp13) {
HXLINE( 912)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd3);
HXLINE(1251)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1251)													layoutGroup->format = formatRange->format;
HXDLIN(1251)													layoutGroup->startIndex = textIndex;
HXDLIN(1251)													layoutGroup->endIndex = tempRangeEnd3;
            												}
HXDLIN(1251)												layoutGroup->positions = positions;
HXDLIN(1251)												layoutGroup->offsetX = offsetX;
HXDLIN(1251)												layoutGroup->ascent = ascent;
HXDLIN(1251)												layoutGroup->descent = descent;
HXDLIN(1251)												layoutGroup->leading = leading;
HXDLIN(1251)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1251)												layoutGroup->offsetY = offsetY;
HXDLIN(1251)												layoutGroup->width = widthValue;
HXDLIN(1251)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1251)												offsetX = (offsetX + widthValue);
HXLINE(1090)												textIndex = tempRangeEnd3;
            											}
HXLINE(1251)											if ((tempRangeEnd3 == formatRange->end)) {
HXLINE(1093)												layoutGroup = null();
            											}
HXLINE(1251)											if ((tempRangeEnd3 == placeIndex)) {
HXLINE(1251)												goto _hx_goto_27;
            											}
HXDLIN(1251)											bool _hx_tmp14;
HXDLIN(1251)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1251)												rangeIndex = (rangeIndex + 1);
HXDLIN(1251)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1251)												currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1251)												_hx_tmp14 = true;
            											}
            											else {
HXLINE(1251)												_hx_tmp14 = false;
            											}
HXDLIN(1251)											if (!(_hx_tmp14)) {
HXLINE(1251)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1099,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1251)												goto _hx_goto_27;
            											}
HXDLIN(1251)											{
HXLINE(1251)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1251)													bool _hx_tmp15;
HXDLIN(1251)													if (hx::IsNotNull( font )) {
HXLINE(1251)														_hx_tmp15 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1251)														_hx_tmp15 = false;
            													}
HXDLIN(1251)													if (_hx_tmp15) {
HXLINE( 934)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 940)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 944)												leading = ( (int)(currentFormat->leading) );
HXLINE( 946)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1251)												if ((heightValue > maxHeightValue)) {
HXLINE( 950)													maxHeightValue = heightValue;
            												}
HXLINE(1251)												if ((ascent > maxAscent)) {
HXLINE( 955)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_27:;
            									}
HXLINE(1107)									textIndex = placeIndex;
            								}
HXLINE(1251)								{
HXLINE(1251)									{
HXLINE(1251)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1251)											bool _hx_tmp16;
HXDLIN(1251)											if (hx::IsNotNull( font )) {
HXLINE(1251)												_hx_tmp16 = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1251)												_hx_tmp16 = false;
            											}
HXDLIN(1251)											if (_hx_tmp16) {
HXLINE( 934)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE( 940)												ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXLINE( 944)										leading = ( (int)(currentFormat->leading) );
HXLINE( 946)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1251)										if ((heightValue > maxHeightValue)) {
HXLINE( 950)											maxHeightValue = heightValue;
            										}
HXLINE(1251)										if ((ascent > maxAscent)) {
HXLINE( 955)											maxAscent = ascent;
            										}
            									}
HXLINE(1251)									int i1 = _gthis->layoutGroups->get_length();
HXDLIN(1251)									while(true){
HXLINE(1251)										i1 = (i1 - 1);
HXDLIN(1251)										if (!((i1 > -1))) {
HXLINE(1251)											goto _hx_goto_29;
            										}
HXDLIN(1251)										 ::openfl::_internal::text::TextLayoutGroup lg = _gthis->layoutGroups->get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1251)										if ((lg->lineIndex < lineIndex)) {
HXLINE(1251)											goto _hx_goto_29;
            										}
HXDLIN(1251)										if ((lg->lineIndex > lineIndex)) {
HXLINE(1251)											continue;
            										}
HXDLIN(1251)										lg->ascent = maxAscent;
HXDLIN(1251)										lg->height = ( (Float)(maxHeightValue) );
            									}
            									_hx_goto_29:;
HXDLIN(1251)									offsetY = (offsetY + maxHeightValue);
HXLINE(1132)									maxAscent = ((Float)0.0);
HXLINE(1133)									maxHeightValue = 0;
HXLINE(1251)									lineIndex = (lineIndex + 1);
HXLINE(1136)									offsetX = ( (Float)(2) );
            								}
HXLINE(1251)								if ((breakIndex <= formatRange->end)) {
HXLINE(1251)									::String text8 = _gthis->text;
HXDLIN(1251)									Float letterSpacing8 = ((Float)0.0);
HXDLIN(1251)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)										letterSpacing8 = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXLINE(1251)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1251)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1251)									Float width17 = ((Float)0.0);
HXDLIN(1251)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1251)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1251)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1251)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1251)									_gthis->_hx___textLayout->letterSpacing = letterSpacing8;
HXDLIN(1251)									bool positions6;
HXDLIN(1251)									if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1251)										positions6 = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1251)										positions6 = true;
            									}
HXDLIN(1251)									_gthis->_hx___textLayout->autoHint = positions6;
HXDLIN(1251)									 ::openfl::_internal::text::TextLayout _gthis9 = _gthis->_hx___textLayout;
HXDLIN(1251)									_gthis9->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text8,placeIndex,breakIndex));
HXDLIN(1251)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1251)									Float width18 = ((Float)0.0);
HXDLIN(1251)									int _g9 = 0;
HXDLIN(1251)									while((_g9 < positions->length)){
HXLINE(1251)										 ::openfl::_internal::text::GlyphPosition position9 = positions->__get(_g9).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1251)										_g9 = (_g9 + 1);
HXDLIN(1251)										width18 = (width18 + position9->advance->x);
            									}
HXDLIN(1251)									widthValue = width18;
            								}
            								else {
HXLINE(1251)									int tempIndex3 = placeIndex;
HXDLIN(1251)									int tempRangeEnd4 = formatRange->end;
HXDLIN(1251)									int countRanges3 = 0;
HXLINE( 996)									positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)									widthValue = ( (Float)(0) );
HXLINE(1251)									while(true){
HXLINE(1251)										if ((tempIndex3 != tempRangeEnd4)) {
HXLINE(1251)											::String text9 = _gthis->text;
HXDLIN(1251)											Float letterSpacing9 = ((Float)0.0);
HXDLIN(1251)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)												letterSpacing9 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1251)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1251)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1251)											Float width19 = ((Float)0.0);
HXDLIN(1251)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1251)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1251)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1251)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1251)											_gthis->_hx___textLayout->letterSpacing = letterSpacing9;
HXDLIN(1251)											bool _hx_tmp17;
HXDLIN(1251)											if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1251)												_hx_tmp17 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1251)												_hx_tmp17 = true;
            											}
HXDLIN(1251)											_gthis->_hx___textLayout->autoHint = _hx_tmp17;
HXDLIN(1251)											 ::openfl::_internal::text::TextLayout _gthis10 = _gthis->_hx___textLayout;
HXDLIN(1251)											_gthis10->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text9,tempIndex3,tempRangeEnd4));
HXDLIN(1251)											::Array< ::Dynamic> tempPositions3 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)											positions = positions->concat(tempPositions3);
            										}
HXLINE(1251)										if ((tempRangeEnd4 != breakIndex)) {
HXLINE(1251)											bool _hx_tmp18;
HXDLIN(1251)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1251)												rangeIndex = (rangeIndex + 1);
HXDLIN(1251)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1251)												currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1251)												_hx_tmp18 = true;
            											}
            											else {
HXLINE(1251)												_hx_tmp18 = false;
            											}
HXDLIN(1251)											if (!(_hx_tmp18)) {
HXLINE(1251)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1251)												goto _hx_goto_31;
            											}
HXLINE(1015)											tempIndex3 = tempRangeEnd4;
HXLINE(1251)											if ((breakIndex < formatRange->end)) {
HXLINE(1251)												tempRangeEnd4 = breakIndex;
            											}
            											else {
HXLINE(1251)												tempRangeEnd4 = formatRange->end;
            											}
HXDLIN(1251)											countRanges3 = (countRanges3 + 1);
            										}
            										else {
HXLINE(1251)											Float width20 = ((Float)0.0);
HXDLIN(1251)											int _g10 = 0;
HXDLIN(1251)											while((_g10 < positions->length)){
HXLINE(1251)												 ::openfl::_internal::text::GlyphPosition position10 = positions->__get(_g10).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1251)												_g10 = (_g10 + 1);
HXDLIN(1251)												width20 = (width20 + position10->advance->x);
            											}
HXDLIN(1251)											widthValue = width20;
HXDLIN(1251)											goto _hx_goto_31;
            										}
            									}
            									_hx_goto_31:;
HXDLIN(1251)									rangeIndex = (rangeIndex - (countRanges3 + 1));
HXDLIN(1251)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1251)										rangeIndex = (rangeIndex + 1);
HXDLIN(1251)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1251)										currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
            								}
HXLINE(1216)								remainingPositions = positions;
HXLINE(1217)								tempWidth = widthValue;
            							}
            							_hx_goto_17:;
            						}
HXLINE(1251)						{
HXLINE(1251)							if ((breakIndex <= formatRange->end)) {
HXLINE(1251)								::String text10 = _gthis->text;
HXDLIN(1251)								Float letterSpacing10 = ((Float)0.0);
HXDLIN(1251)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)									letterSpacing10 = ( (Float)(formatRange->format->letterSpacing) );
            								}
HXLINE(1251)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1251)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1251)								Float width21 = ((Float)0.0);
HXDLIN(1251)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1251)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1251)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1251)									_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            								}
HXDLIN(1251)								_gthis->_hx___textLayout->letterSpacing = letterSpacing10;
HXDLIN(1251)								bool positions7;
HXDLIN(1251)								if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1251)									positions7 = (_gthis->sharpness < 400);
            								}
            								else {
HXLINE(1251)									positions7 = true;
            								}
HXDLIN(1251)								_gthis->_hx___textLayout->autoHint = positions7;
HXDLIN(1251)								 ::openfl::_internal::text::TextLayout _gthis11 = _gthis->_hx___textLayout;
HXDLIN(1251)								_gthis11->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text10,textIndex,breakIndex));
HXDLIN(1251)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1251)								Float width22 = ((Float)0.0);
HXDLIN(1251)								int _g11 = 0;
HXDLIN(1251)								while((_g11 < positions->length)){
HXLINE(1251)									 ::openfl::_internal::text::GlyphPosition position11 = positions->__get(_g11).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1251)									_g11 = (_g11 + 1);
HXDLIN(1251)									width22 = (width22 + position11->advance->x);
            								}
HXDLIN(1251)								widthValue = width22;
HXDLIN(1251)								bool _hx_tmp19;
HXDLIN(1251)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1251)									_hx_tmp19 = (layoutGroup->startIndex != layoutGroup->endIndex);
            								}
            								else {
HXLINE(1251)									_hx_tmp19 = true;
            								}
HXDLIN(1251)								if (_hx_tmp19) {
HXLINE( 912)									layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,breakIndex);
HXLINE(1251)									_gthis->layoutGroups->push(layoutGroup);
            								}
            								else {
HXLINE(1251)									layoutGroup->format = formatRange->format;
HXDLIN(1251)									layoutGroup->startIndex = textIndex;
HXDLIN(1251)									layoutGroup->endIndex = breakIndex;
            								}
HXDLIN(1251)								layoutGroup->positions = positions;
HXDLIN(1251)								layoutGroup->offsetX = offsetX;
HXDLIN(1251)								layoutGroup->ascent = ascent;
HXDLIN(1251)								layoutGroup->descent = descent;
HXDLIN(1251)								layoutGroup->leading = leading;
HXDLIN(1251)								layoutGroup->lineIndex = lineIndex;
HXDLIN(1251)								layoutGroup->offsetY = offsetY;
HXDLIN(1251)								layoutGroup->width = widthValue;
HXDLIN(1251)								layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1251)								offsetX = (offsetX + widthValue);
HXDLIN(1251)								if ((breakIndex == formatRange->end)) {
HXLINE(1058)									layoutGroup = null();
HXLINE(1251)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1251)										rangeIndex = (rangeIndex + 1);
HXDLIN(1251)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1251)										currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
HXLINE(1251)									{
HXLINE(1251)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1251)											bool _hx_tmp20;
HXDLIN(1251)											if (hx::IsNotNull( font )) {
HXLINE(1251)												_hx_tmp20 = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1251)												_hx_tmp20 = false;
            											}
HXDLIN(1251)											if (_hx_tmp20) {
HXLINE( 934)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE( 940)												ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXLINE( 944)										leading = ( (int)(currentFormat->leading) );
HXLINE( 946)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1251)										if ((heightValue > maxHeightValue)) {
HXLINE( 950)											maxHeightValue = heightValue;
            										}
HXLINE(1251)										if ((ascent > maxAscent)) {
HXLINE( 955)											maxAscent = ascent;
            										}
            									}
            								}
            							}
            							else {
HXLINE(1251)								while(true){
HXLINE(1251)									int tempRangeEnd5;
HXDLIN(1251)									if ((breakIndex < formatRange->end)) {
HXLINE(1251)										tempRangeEnd5 = breakIndex;
            									}
            									else {
HXLINE(1251)										tempRangeEnd5 = formatRange->end;
            									}
HXDLIN(1251)									if ((textIndex != tempRangeEnd5)) {
HXLINE(1251)										::String text11 = _gthis->text;
HXDLIN(1251)										Float letterSpacing11 = ((Float)0.0);
HXDLIN(1251)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)											letterSpacing11 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1251)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1251)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1251)										Float width23 = ((Float)0.0);
HXDLIN(1251)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1251)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1251)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1251)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1251)										_gthis->_hx___textLayout->letterSpacing = letterSpacing11;
HXDLIN(1251)										bool positions8;
HXDLIN(1251)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1251)											positions8 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1251)											positions8 = true;
            										}
HXDLIN(1251)										_gthis->_hx___textLayout->autoHint = positions8;
HXDLIN(1251)										 ::openfl::_internal::text::TextLayout _gthis12 = _gthis->_hx___textLayout;
HXDLIN(1251)										_gthis12->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text11,textIndex,tempRangeEnd5));
HXDLIN(1251)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1251)										Float width24 = ((Float)0.0);
HXDLIN(1251)										int _g12 = 0;
HXDLIN(1251)										while((_g12 < positions->length)){
HXLINE(1251)											 ::openfl::_internal::text::GlyphPosition position12 = positions->__get(_g12).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1251)											_g12 = (_g12 + 1);
HXDLIN(1251)											width24 = (width24 + position12->advance->x);
            										}
HXDLIN(1251)										widthValue = width24;
HXDLIN(1251)										bool _hx_tmp21;
HXDLIN(1251)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1251)											_hx_tmp21 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1251)											_hx_tmp21 = true;
            										}
HXDLIN(1251)										if (_hx_tmp21) {
HXLINE( 912)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd5);
HXLINE(1251)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1251)											layoutGroup->format = formatRange->format;
HXDLIN(1251)											layoutGroup->startIndex = textIndex;
HXDLIN(1251)											layoutGroup->endIndex = tempRangeEnd5;
            										}
HXDLIN(1251)										layoutGroup->positions = positions;
HXDLIN(1251)										layoutGroup->offsetX = offsetX;
HXDLIN(1251)										layoutGroup->ascent = ascent;
HXDLIN(1251)										layoutGroup->descent = descent;
HXDLIN(1251)										layoutGroup->leading = leading;
HXDLIN(1251)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1251)										layoutGroup->offsetY = offsetY;
HXDLIN(1251)										layoutGroup->width = widthValue;
HXDLIN(1251)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1251)										offsetX = (offsetX + widthValue);
HXLINE(1090)										textIndex = tempRangeEnd5;
            									}
HXLINE(1251)									if ((tempRangeEnd5 == formatRange->end)) {
HXLINE(1093)										layoutGroup = null();
            									}
HXLINE(1251)									if ((tempRangeEnd5 == breakIndex)) {
HXLINE(1251)										goto _hx_goto_34;
            									}
HXDLIN(1251)									bool _hx_tmp22;
HXDLIN(1251)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1251)										rangeIndex = (rangeIndex + 1);
HXDLIN(1251)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1251)										currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1251)										_hx_tmp22 = true;
            									}
            									else {
HXLINE(1251)										_hx_tmp22 = false;
            									}
HXDLIN(1251)									if (!(_hx_tmp22)) {
HXLINE(1251)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1099,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1251)										goto _hx_goto_34;
            									}
HXDLIN(1251)									{
HXLINE(1251)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1251)											bool _hx_tmp23;
HXDLIN(1251)											if (hx::IsNotNull( font )) {
HXLINE(1251)												_hx_tmp23 = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1251)												_hx_tmp23 = false;
            											}
HXDLIN(1251)											if (_hx_tmp23) {
HXLINE( 934)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE( 940)												ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXLINE( 944)										leading = ( (int)(currentFormat->leading) );
HXLINE( 946)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1251)										if ((heightValue > maxHeightValue)) {
HXLINE( 950)											maxHeightValue = heightValue;
            										}
HXLINE(1251)										if ((ascent > maxAscent)) {
HXLINE( 955)											maxAscent = ascent;
            										}
            									}
            								}
            								_hx_goto_34:;
            							}
HXLINE(1107)							textIndex = breakIndex;
            						}
            					}
HXLINE(1253)					layoutGroup = null();
            				}
            				else {
HXLINE(1255)					bool _hx_tmp24;
HXDLIN(1255)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1255)						_hx_tmp24 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1255)						_hx_tmp24 = false;
            					}
HXDLIN(1255)					if (_hx_tmp24) {
HXLINE(1258)						if ((layoutGroup->endIndex == spaceIndex)) {
HXLINE(1260)							 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1260)							int index = (layoutGroup->positions->length - 1);
HXDLIN(1260)							Float _hx_tmp25;
HXDLIN(1260)							bool _hx_tmp26;
HXDLIN(1260)							if ((index >= 0)) {
HXLINE(1260)								_hx_tmp26 = (index < layoutGroup->positions->length);
            							}
            							else {
HXLINE(1260)								_hx_tmp26 = false;
            							}
HXDLIN(1260)							if (_hx_tmp26) {
HXLINE(1260)								_hx_tmp25 = layoutGroup->positions->__get(index).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1260)								_hx_tmp25 = ( (Float)(0) );
            							}
HXDLIN(1260)							layoutGroup1->width = (layoutGroup1->width - _hx_tmp25);
            						}
HXLINE(1263)						layoutGroup = null();
            					}
            				}
HXLINE(1266)				if ((formatRange->end == breakIndex)) {
HXLINE(1268)					if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1268)						rangeIndex = (rangeIndex + 1);
HXDLIN(1268)						formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1268)						currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)						font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            					}
HXLINE(1269)					{
HXLINE(1269)						if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)							ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)							descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            						}
            						else {
HXLINE(1269)							bool _hx_tmp27;
HXDLIN(1269)							if (hx::IsNotNull( font )) {
HXLINE(1269)								_hx_tmp27 = (font->unitsPerEM != 0);
            							}
            							else {
HXLINE(1269)								_hx_tmp27 = false;
            							}
HXDLIN(1269)							if (_hx_tmp27) {
HXLINE( 934)								ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)								descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            							}
            							else {
HXLINE( 940)								ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)								descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            							}
            						}
HXLINE( 944)						leading = ( (int)(currentFormat->leading) );
HXLINE( 946)						heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1269)						if ((heightValue > maxHeightValue)) {
HXLINE( 950)							maxHeightValue = heightValue;
            						}
HXLINE(1269)						if ((ascent > maxAscent)) {
HXLINE( 955)							maxAscent = ascent;
            						}
            					}
HXLINE(1270)					lineFormat = formatRange->format;
            				}
HXLINE(1273)				if ((breakIndex >= (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) - 1))) {
HXLINE(1276)					offsetY = (offsetY - ( (Float)(maxHeightValue) ));
            				}
HXLINE(1279)				{
HXLINE(1279)					{
HXLINE(1279)						if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)							ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)							descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            						}
            						else {
HXLINE(1279)							bool _hx_tmp28;
HXDLIN(1279)							if (hx::IsNotNull( font )) {
HXLINE(1279)								_hx_tmp28 = (font->unitsPerEM != 0);
            							}
            							else {
HXLINE(1279)								_hx_tmp28 = false;
            							}
HXDLIN(1279)							if (_hx_tmp28) {
HXLINE( 934)								ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)								descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            							}
            							else {
HXLINE( 940)								ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)								descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            							}
            						}
HXLINE( 944)						leading = ( (int)(currentFormat->leading) );
HXLINE( 946)						heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1279)						if ((heightValue > maxHeightValue)) {
HXLINE( 950)							maxHeightValue = heightValue;
            						}
HXLINE(1279)						if ((ascent > maxAscent)) {
HXLINE( 955)							maxAscent = ascent;
            						}
            					}
HXLINE(1279)					int i2 = _gthis->layoutGroups->get_length();
HXDLIN(1279)					while(true){
HXLINE(1279)						i2 = (i2 - 1);
HXDLIN(1279)						if (!((i2 > -1))) {
HXLINE(1279)							goto _hx_goto_36;
            						}
HXDLIN(1279)						 ::openfl::_internal::text::TextLayoutGroup lg1 = _gthis->layoutGroups->get(i2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1279)						if ((lg1->lineIndex < lineIndex)) {
HXLINE(1279)							goto _hx_goto_36;
            						}
HXDLIN(1279)						if ((lg1->lineIndex > lineIndex)) {
HXLINE(1279)							continue;
            						}
HXDLIN(1279)						lg1->ascent = maxAscent;
HXDLIN(1279)						lg1->height = ( (Float)(maxHeightValue) );
            					}
            					_hx_goto_36:;
HXDLIN(1279)					offsetY = (offsetY + maxHeightValue);
HXLINE(1132)					maxAscent = ((Float)0.0);
HXLINE(1133)					maxHeightValue = 0;
HXLINE(1279)					lineIndex = (lineIndex + 1);
HXLINE(1136)					offsetX = ( (Float)(2) );
            				}
HXLINE(1281)				textIndex = (breakIndex + 1);
HXLINE(1282)				breakIndex = this->getLineBreakIndex(textIndex);
            			}
            			else {
HXLINE(1284)				if ((spaceIndex > -1)) {
HXLINE(1288)					bool _hx_tmp29;
HXDLIN(1288)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1288)						_hx_tmp29 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1288)						_hx_tmp29 = false;
            					}
HXDLIN(1288)					if (_hx_tmp29) {
HXLINE(1290)						layoutGroup = null();
            					}
HXLINE(1293)					wrap = false;
HXLINE(1295)					while((textIndex < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))){
HXLINE(1299)						int endIndex2 = -1;
HXLINE(1301)						if ((spaceIndex == -1)) {
HXLINE(1303)							endIndex2 = breakIndex;
            						}
            						else {
HXLINE(1307)							endIndex2 = (spaceIndex + 1);
HXLINE(1309)							bool _hx_tmp30;
HXDLIN(1309)							if ((breakIndex > -1)) {
HXLINE(1309)								_hx_tmp30 = (breakIndex < endIndex2);
            							}
            							else {
HXLINE(1309)								_hx_tmp30 = false;
            							}
HXDLIN(1309)							if (_hx_tmp30) {
HXLINE(1311)								endIndex2 = breakIndex;
            							}
            						}
HXLINE(1315)						if ((endIndex2 == -1)) {
HXLINE(1317)							endIndex2 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
            						}
HXLINE(1320)						if ((endIndex2 <= formatRange->end)) {
HXLINE(1320)							::String text12 = _gthis->text;
HXDLIN(1320)							Float letterSpacing12 = ((Float)0.0);
HXDLIN(1320)							if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)								letterSpacing12 = ( (Float)(formatRange->format->letterSpacing) );
            							}
HXLINE(1320)							if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1320)								_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1320)							Float width25 = ((Float)0.0);
HXDLIN(1320)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1320)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1320)							if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1320)								_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            							}
HXDLIN(1320)							_gthis->_hx___textLayout->letterSpacing = letterSpacing12;
HXDLIN(1320)							bool positions9;
HXDLIN(1320)							if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1320)								positions9 = (_gthis->sharpness < 400);
            							}
            							else {
HXLINE(1320)								positions9 = true;
            							}
HXDLIN(1320)							_gthis->_hx___textLayout->autoHint = positions9;
HXDLIN(1320)							 ::openfl::_internal::text::TextLayout _gthis13 = _gthis->_hx___textLayout;
HXDLIN(1320)							_gthis13->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text12,textIndex,endIndex2));
HXDLIN(1320)							positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1320)							Float width26 = ((Float)0.0);
HXDLIN(1320)							int _g13 = 0;
HXDLIN(1320)							while((_g13 < positions->length)){
HXLINE(1320)								 ::openfl::_internal::text::GlyphPosition position13 = positions->__get(_g13).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1320)								_g13 = (_g13 + 1);
HXDLIN(1320)								width26 = (width26 + position13->advance->x);
            							}
HXDLIN(1320)							widthValue = width26;
            						}
            						else {
HXLINE(1320)							int tempIndex4 = textIndex;
HXDLIN(1320)							int tempRangeEnd6 = formatRange->end;
HXDLIN(1320)							int countRanges4 = 0;
HXLINE( 996)							positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)							widthValue = ( (Float)(0) );
HXLINE(1320)							while(true){
HXLINE(1320)								if ((tempIndex4 != tempRangeEnd6)) {
HXLINE(1320)									::String text13 = _gthis->text;
HXDLIN(1320)									Float letterSpacing13 = ((Float)0.0);
HXDLIN(1320)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)										letterSpacing13 = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXLINE(1320)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1320)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1320)									Float width27 = ((Float)0.0);
HXDLIN(1320)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1320)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1320)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1320)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1320)									_gthis->_hx___textLayout->letterSpacing = letterSpacing13;
HXDLIN(1320)									bool _hx_tmp31;
HXDLIN(1320)									if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1320)										_hx_tmp31 = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1320)										_hx_tmp31 = true;
            									}
HXDLIN(1320)									_gthis->_hx___textLayout->autoHint = _hx_tmp31;
HXDLIN(1320)									 ::openfl::_internal::text::TextLayout _gthis14 = _gthis->_hx___textLayout;
HXDLIN(1320)									_gthis14->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text13,tempIndex4,tempRangeEnd6));
HXDLIN(1320)									::Array< ::Dynamic> tempPositions4 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)									positions = positions->concat(tempPositions4);
            								}
HXLINE(1320)								if ((tempRangeEnd6 != endIndex2)) {
HXLINE(1320)									bool _hx_tmp32;
HXDLIN(1320)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1320)										rangeIndex = (rangeIndex + 1);
HXDLIN(1320)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1320)										currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1320)										_hx_tmp32 = true;
            									}
            									else {
HXLINE(1320)										_hx_tmp32 = false;
            									}
HXDLIN(1320)									if (!(_hx_tmp32)) {
HXLINE(1320)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1320)										goto _hx_goto_39;
            									}
HXLINE(1015)									tempIndex4 = tempRangeEnd6;
HXLINE(1320)									if ((endIndex2 < formatRange->end)) {
HXLINE(1320)										tempRangeEnd6 = endIndex2;
            									}
            									else {
HXLINE(1320)										tempRangeEnd6 = formatRange->end;
            									}
HXDLIN(1320)									countRanges4 = (countRanges4 + 1);
            								}
            								else {
HXLINE(1320)									Float width28 = ((Float)0.0);
HXDLIN(1320)									int _g14 = 0;
HXDLIN(1320)									while((_g14 < positions->length)){
HXLINE(1320)										 ::openfl::_internal::text::GlyphPosition position14 = positions->__get(_g14).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1320)										_g14 = (_g14 + 1);
HXDLIN(1320)										width28 = (width28 + position14->advance->x);
            									}
HXDLIN(1320)									widthValue = width28;
HXDLIN(1320)									goto _hx_goto_39;
            								}
            							}
            							_hx_goto_39:;
HXDLIN(1320)							rangeIndex = (rangeIndex - (countRanges4 + 1));
HXDLIN(1320)							if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1320)								rangeIndex = (rangeIndex + 1);
HXDLIN(1320)								formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1320)								currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)								font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            							}
            						}
HXLINE(1322)						if (hx::IsEq( lineFormat->align,2 )) {
HXLINE(1324)							bool _hx_tmp33;
HXDLIN(1324)							if ((positions->length > 0)) {
HXLINE(1324)								_hx_tmp33 = (textIndex == previousSpaceIndex);
            							}
            							else {
HXLINE(1324)								_hx_tmp33 = false;
            							}
HXDLIN(1324)							if (_hx_tmp33) {
HXLINE(1327)								textIndex = (textIndex + 1);
HXLINE(1329)								Float spaceWidth = positions->shift().StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
HXLINE(1330)								widthValue = (widthValue - spaceWidth);
HXLINE(1331)								offsetX = (offsetX + spaceWidth);
            							}
HXLINE(1334)							bool _hx_tmp34;
HXDLIN(1334)							if ((positions->length > 0)) {
HXLINE(1334)								_hx_tmp34 = (endIndex2 == (spaceIndex + 1));
            							}
            							else {
HXLINE(1334)								_hx_tmp34 = false;
            							}
HXDLIN(1334)							if (_hx_tmp34) {
HXLINE(1337)								endIndex2 = (endIndex2 - 1);
HXLINE(1339)								Float spaceWidth1 = positions->pop().StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
HXLINE(1340)								widthValue = (widthValue - spaceWidth1);
            							}
            						}
HXLINE(1344)						if (this->wordWrap) {
HXLINE(1346)							if (((offsetX + widthValue) > (this->width - ( (Float)(2) )))) {
HXLINE(1348)								wrap = true;
HXLINE(1350)								bool _hx_tmp35;
HXDLIN(1350)								if ((positions->length > 0)) {
HXLINE(1350)									_hx_tmp35 = (endIndex2 == (spaceIndex + 1));
            								}
            								else {
HXLINE(1350)									_hx_tmp35 = false;
            								}
HXDLIN(1350)								if (_hx_tmp35) {
HXLINE(1355)									 ::openfl::_internal::text::GlyphPosition lastPosition = positions->__get((positions->length - 1)).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1356)									Float spaceWidth2 = lastPosition->advance->x;
HXLINE(1358)									if ((((offsetX + widthValue) - spaceWidth2) <= (this->width - ( (Float)(2) )))) {
HXLINE(1360)										wrap = false;
            									}
            								}
            							}
            						}
HXLINE(1366)						if (wrap) {
HXLINE(1368)							bool _hx_tmp36;
HXDLIN(1368)							if (hx::IsNotEq( lineFormat->align,2 )) {
HXLINE(1368)								if (hx::IsNull( layoutGroup )) {
HXLINE(1368)									_hx_tmp36 = (this->layoutGroups->get_length() > 0);
            								}
            								else {
HXLINE(1368)									_hx_tmp36 = true;
            								}
            							}
            							else {
HXLINE(1368)								_hx_tmp36 = false;
            							}
HXDLIN(1368)							if (_hx_tmp36) {
HXLINE(1370)								 ::openfl::_internal::text::TextLayoutGroup previous = layoutGroup;
HXLINE(1371)								if (hx::IsNull( previous )) {
HXLINE(1373)									::Dynamic this1 = this->layoutGroups;
HXDLIN(1373)									previous = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - 1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            								}
HXLINE(1377)								 ::openfl::_internal::text::TextLayoutGroup previous1 = previous;
HXDLIN(1377)								int index1 = (previous->positions->length - 1);
HXDLIN(1377)								Float _hx_tmp37;
HXDLIN(1377)								bool _hx_tmp38;
HXDLIN(1377)								if ((index1 >= 0)) {
HXLINE(1377)									_hx_tmp38 = (index1 < previous->positions->length);
            								}
            								else {
HXLINE(1377)									_hx_tmp38 = false;
            								}
HXDLIN(1377)								if (_hx_tmp38) {
HXLINE(1377)									_hx_tmp37 = previous->positions->__get(index1).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1377)									_hx_tmp37 = ( (Float)(0) );
            								}
HXDLIN(1377)								previous1->width = (previous1->width - _hx_tmp37);
HXLINE(1378)								previous->endIndex--;
            							}
HXLINE(1381)							int i3 = (this->layoutGroups->get_length() - 1);
HXLINE(1382)							int offsetCount = 0;
HXLINE(1384)							while(true){
HXLINE(1386)								layoutGroup = this->layoutGroups->get(i3).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1388)								bool _hx_tmp39;
HXDLIN(1388)								if ((i3 > 0)) {
HXLINE(1388)									_hx_tmp39 = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE(1388)									_hx_tmp39 = false;
            								}
HXDLIN(1388)								if (_hx_tmp39) {
HXLINE(1390)									offsetCount = (offsetCount + 1);
            								}
            								else {
HXLINE(1394)									goto _hx_goto_41;
            								}
HXLINE(1397)								i3 = (i3 - 1);
            							}
            							_hx_goto_41:;
HXLINE(1400)							if ((textIndex == (previousSpaceIndex + 1))) {
HXLINE(1402)								{
HXLINE(1402)									if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)										ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)										descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            									}
            									else {
HXLINE(1402)										bool _hx_tmp40;
HXDLIN(1402)										if (hx::IsNotNull( font )) {
HXLINE(1402)											_hx_tmp40 = (font->unitsPerEM != 0);
            										}
            										else {
HXLINE(1402)											_hx_tmp40 = false;
            										}
HXDLIN(1402)										if (_hx_tmp40) {
HXLINE( 934)											ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)											descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            										}
            										else {
HXLINE( 940)											ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)											descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            										}
            									}
HXLINE( 944)									leading = ( (int)(currentFormat->leading) );
HXLINE( 946)									heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1402)									if ((heightValue > maxHeightValue)) {
HXLINE( 950)										maxHeightValue = heightValue;
            									}
HXLINE(1402)									if ((ascent > maxAscent)) {
HXLINE( 955)										maxAscent = ascent;
            									}
            								}
HXLINE(1402)								int i4 = _gthis->layoutGroups->get_length();
HXDLIN(1402)								while(true){
HXLINE(1402)									i4 = (i4 - 1);
HXDLIN(1402)									if (!((i4 > -1))) {
HXLINE(1402)										goto _hx_goto_42;
            									}
HXDLIN(1402)									 ::openfl::_internal::text::TextLayoutGroup lg2 = _gthis->layoutGroups->get(i4).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1402)									if ((lg2->lineIndex < lineIndex)) {
HXLINE(1402)										goto _hx_goto_42;
            									}
HXDLIN(1402)									if ((lg2->lineIndex > lineIndex)) {
HXLINE(1402)										continue;
            									}
HXDLIN(1402)									lg2->ascent = maxAscent;
HXDLIN(1402)									lg2->height = ( (Float)(maxHeightValue) );
            								}
            								_hx_goto_42:;
HXDLIN(1402)								offsetY = (offsetY + maxHeightValue);
HXLINE(1132)								maxAscent = ((Float)0.0);
HXLINE(1133)								maxHeightValue = 0;
HXLINE(1402)								lineIndex = (lineIndex + 1);
HXLINE(1136)								offsetX = ( (Float)(2) );
            							}
HXLINE(1405)							offsetX = ( (Float)(2) );
HXLINE(1407)							if ((offsetCount > 0)) {
HXLINE(1409)								::Dynamic this2 = this->layoutGroups;
HXDLIN(1409)								Float bumpX = ( ( ::openfl::_Vector::ObjectVector)(this2) )->get((this->layoutGroups->get_length() - offsetCount)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->offsetX;
HXLINE(1411)								{
HXLINE(1411)									int _g15 = (this->layoutGroups->get_length() - offsetCount);
HXDLIN(1411)									int _g16 = this->layoutGroups->get_length();
HXDLIN(1411)									while((_g15 < _g16)){
HXLINE(1411)										_g15 = (_g15 + 1);
HXDLIN(1411)										int i5 = (_g15 - 1);
HXLINE(1413)										layoutGroup = this->layoutGroups->get(i5).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1414)										 ::openfl::_internal::text::TextLayoutGroup layoutGroup2 = layoutGroup;
HXDLIN(1414)										layoutGroup2->offsetX = (layoutGroup2->offsetX - bumpX);
HXLINE(1415)										layoutGroup->offsetY = offsetY;
HXLINE(1416)										layoutGroup->lineIndex = lineIndex;
HXLINE(1417)										offsetX = (offsetX + layoutGroup->width);
            									}
            								}
            							}
HXLINE(1421)							{
HXLINE(1421)								bool _hx_tmp41;
HXDLIN(1421)								if ((_gthis->width >= 4)) {
HXLINE(1421)									_hx_tmp41 = _gthis->wordWrap;
            								}
            								else {
HXLINE(1421)									_hx_tmp41 = false;
            								}
HXDLIN(1421)								if (_hx_tmp41) {
HXLINE(1421)									::Array< ::Dynamic> remainingPositions1 = positions;
HXDLIN(1421)									int i6;
HXDLIN(1421)									int bufferCount1;
HXDLIN(1421)									int placeIndex1;
HXDLIN(1421)									Float positionWidth1;
HXDLIN(1421)									 ::openfl::_internal::text::GlyphPosition currentPosition1;
HXDLIN(1421)									Float width29 = ((Float)0.0);
HXDLIN(1421)									{
HXLINE(1421)										int _g17 = 0;
HXDLIN(1421)										while((_g17 < remainingPositions1->length)){
HXLINE(1421)											 ::openfl::_internal::text::GlyphPosition position15 = remainingPositions1->__get(_g17).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1421)											_g17 = (_g17 + 1);
HXDLIN(1421)											width29 = (width29 + position15->advance->x);
            										}
            									}
HXDLIN(1421)									Float tempWidth1 = width29;
HXDLIN(1421)									while(((offsetX + tempWidth1) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1152)										bufferCount1 = 0;
HXDLIN(1152)										i6 = bufferCount1;
HXLINE(1153)										positionWidth1 = ((Float)0.0);
HXLINE(1421)										while(((offsetX + positionWidth1) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1157)											currentPosition1 = remainingPositions1->__get(i6).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1421)											if ((currentPosition1->advance->x == ((Float)0.0))) {
HXLINE(1421)												i6 = (i6 + 1);
HXDLIN(1421)												bufferCount1 = (bufferCount1 + 1);
            											}
            											else {
HXLINE(1421)												positionWidth1 = (positionWidth1 + currentPosition1->advance->x);
HXDLIN(1421)												i6 = (i6 + 1);
            											}
            										}
HXDLIN(1421)										bool _hx_tmp42;
HXDLIN(1421)										if ((i6 < 2)) {
HXLINE(1421)											_hx_tmp42 = ((positionWidth1 + offsetX) > (_gthis->width - ( (Float)(2) )));
            										}
            										else {
HXLINE(1421)											_hx_tmp42 = false;
            										}
HXDLIN(1421)										if (_hx_tmp42) {
HXLINE(1421)											if ((((textIndex + i6) - bufferCount1) == endIndex2)) {
HXLINE(1421)												goto _hx_goto_45;
            											}
            										}
            										else {
HXLINE(1421)											while(((offsetX + positionWidth1) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1421)												i6 = (i6 - 1);
HXDLIN(1421)												if (((i6 - bufferCount1) > 0)) {
HXLINE(1421)													{
HXLINE(1421)														int endIndex3 = ((textIndex + i6) - bufferCount1);
HXDLIN(1421)														if ((endIndex3 <= formatRange->end)) {
HXLINE(1421)															::String text14 = _gthis->text;
HXDLIN(1421)															Float letterSpacing14 = ((Float)0.0);
HXDLIN(1421)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																letterSpacing14 = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXLINE(1421)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1421)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1421)															Float width30 = ((Float)0.0);
HXDLIN(1421)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1421)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1421)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1421)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1421)															_gthis->_hx___textLayout->letterSpacing = letterSpacing14;
HXDLIN(1421)															bool positions10;
HXDLIN(1421)															if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1421)																positions10 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1421)																positions10 = true;
            															}
HXDLIN(1421)															_gthis->_hx___textLayout->autoHint = positions10;
HXDLIN(1421)															 ::openfl::_internal::text::TextLayout _gthis15 = _gthis->_hx___textLayout;
HXDLIN(1421)															_gthis15->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text14,textIndex,endIndex3));
HXDLIN(1421)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1421)															Float width31 = ((Float)0.0);
HXDLIN(1421)															int _g18 = 0;
HXDLIN(1421)															while((_g18 < positions->length)){
HXLINE(1421)																 ::openfl::_internal::text::GlyphPosition position16 = positions->__get(_g18).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1421)																_g18 = (_g18 + 1);
HXDLIN(1421)																width31 = (width31 + position16->advance->x);
            															}
HXDLIN(1421)															widthValue = width31;
            														}
            														else {
HXLINE(1421)															int tempIndex5 = textIndex;
HXDLIN(1421)															int tempRangeEnd7 = formatRange->end;
HXDLIN(1421)															int countRanges5 = 0;
HXLINE( 996)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)															widthValue = ( (Float)(0) );
HXLINE(1421)															while(true){
HXLINE(1421)																if ((tempIndex5 != tempRangeEnd7)) {
HXLINE(1421)																	::String text15 = _gthis->text;
HXDLIN(1421)																	Float letterSpacing15 = ((Float)0.0);
HXDLIN(1421)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																		letterSpacing15 = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXLINE(1421)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1421)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1421)																	Float width32 = ((Float)0.0);
HXDLIN(1421)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1421)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1421)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1421)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1421)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing15;
HXDLIN(1421)																	bool _hx_tmp43;
HXDLIN(1421)																	if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1421)																		_hx_tmp43 = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1421)																		_hx_tmp43 = true;
            																	}
HXDLIN(1421)																	_gthis->_hx___textLayout->autoHint = _hx_tmp43;
HXDLIN(1421)																	 ::openfl::_internal::text::TextLayout _gthis16 = _gthis->_hx___textLayout;
HXDLIN(1421)																	_gthis16->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text15,tempIndex5,tempRangeEnd7));
HXDLIN(1421)																	::Array< ::Dynamic> tempPositions5 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)																	positions = positions->concat(tempPositions5);
            																}
HXLINE(1421)																if ((tempRangeEnd7 != endIndex3)) {
HXLINE(1421)																	bool _hx_tmp44;
HXDLIN(1421)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1421)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1421)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1421)																		currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1421)																		_hx_tmp44 = true;
            																	}
            																	else {
HXLINE(1421)																		_hx_tmp44 = false;
            																	}
HXDLIN(1421)																	if (!(_hx_tmp44)) {
HXLINE(1421)																		::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1421)																		goto _hx_goto_49;
            																	}
HXLINE(1015)																	tempIndex5 = tempRangeEnd7;
HXLINE(1421)																	if ((endIndex3 < formatRange->end)) {
HXLINE(1421)																		tempRangeEnd7 = endIndex3;
            																	}
            																	else {
HXLINE(1421)																		tempRangeEnd7 = formatRange->end;
            																	}
HXDLIN(1421)																	countRanges5 = (countRanges5 + 1);
            																}
            																else {
HXLINE(1421)																	Float width33 = ((Float)0.0);
HXDLIN(1421)																	int _g19 = 0;
HXDLIN(1421)																	while((_g19 < positions->length)){
HXLINE(1421)																		 ::openfl::_internal::text::GlyphPosition position17 = positions->__get(_g19).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1421)																		_g19 = (_g19 + 1);
HXDLIN(1421)																		width33 = (width33 + position17->advance->x);
            																	}
HXDLIN(1421)																	widthValue = width33;
HXDLIN(1421)																	goto _hx_goto_49;
            																}
            															}
            															_hx_goto_49:;
HXDLIN(1421)															rangeIndex = (rangeIndex - (countRanges5 + 1));
HXDLIN(1421)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1421)																rangeIndex = (rangeIndex + 1);
HXDLIN(1421)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1421)																currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
HXLINE(1195)													positionWidth1 = widthValue;
            												}
            												else {
HXLINE(1201)													i6 = 1;
HXLINE(1202)													bufferCount1 = 0;
HXLINE(1421)													{
HXLINE(1421)														int endIndex4 = (textIndex + 1);
HXDLIN(1421)														if ((endIndex4 <= formatRange->end)) {
HXLINE(1421)															::String text16 = _gthis->text;
HXDLIN(1421)															Float letterSpacing16 = ((Float)0.0);
HXDLIN(1421)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																letterSpacing16 = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXLINE(1421)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1421)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1421)															Float width34 = ((Float)0.0);
HXDLIN(1421)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1421)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1421)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1421)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1421)															_gthis->_hx___textLayout->letterSpacing = letterSpacing16;
HXDLIN(1421)															bool positions11;
HXDLIN(1421)															if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1421)																positions11 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1421)																positions11 = true;
            															}
HXDLIN(1421)															_gthis->_hx___textLayout->autoHint = positions11;
HXDLIN(1421)															 ::openfl::_internal::text::TextLayout _gthis17 = _gthis->_hx___textLayout;
HXDLIN(1421)															_gthis17->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text16,textIndex,endIndex4));
HXDLIN(1421)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1421)															Float width35 = ((Float)0.0);
HXDLIN(1421)															int _g20 = 0;
HXDLIN(1421)															while((_g20 < positions->length)){
HXLINE(1421)																 ::openfl::_internal::text::GlyphPosition position18 = positions->__get(_g20).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1421)																_g20 = (_g20 + 1);
HXDLIN(1421)																width35 = (width35 + position18->advance->x);
            															}
HXDLIN(1421)															widthValue = width35;
            														}
            														else {
HXLINE(1421)															int tempIndex6 = textIndex;
HXDLIN(1421)															int tempRangeEnd8 = formatRange->end;
HXDLIN(1421)															int countRanges6 = 0;
HXLINE( 996)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)															widthValue = ( (Float)(0) );
HXLINE(1421)															while(true){
HXLINE(1421)																if ((tempIndex6 != tempRangeEnd8)) {
HXLINE(1421)																	::String text17 = _gthis->text;
HXDLIN(1421)																	Float letterSpacing17 = ((Float)0.0);
HXDLIN(1421)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																		letterSpacing17 = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXLINE(1421)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1421)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1421)																	Float width36 = ((Float)0.0);
HXDLIN(1421)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1421)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1421)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1421)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1421)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing17;
HXDLIN(1421)																	bool _hx_tmp45;
HXDLIN(1421)																	if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1421)																		_hx_tmp45 = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1421)																		_hx_tmp45 = true;
            																	}
HXDLIN(1421)																	_gthis->_hx___textLayout->autoHint = _hx_tmp45;
HXDLIN(1421)																	 ::openfl::_internal::text::TextLayout _gthis18 = _gthis->_hx___textLayout;
HXDLIN(1421)																	_gthis18->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text17,tempIndex6,tempRangeEnd8));
HXDLIN(1421)																	::Array< ::Dynamic> tempPositions6 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)																	positions = positions->concat(tempPositions6);
            																}
HXLINE(1421)																if ((tempRangeEnd8 != endIndex4)) {
HXLINE(1421)																	bool _hx_tmp46;
HXDLIN(1421)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1421)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1421)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1421)																		currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1421)																		_hx_tmp46 = true;
            																	}
            																	else {
HXLINE(1421)																		_hx_tmp46 = false;
            																	}
HXDLIN(1421)																	if (!(_hx_tmp46)) {
HXLINE(1421)																		::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1421)																		goto _hx_goto_52;
            																	}
HXLINE(1015)																	tempIndex6 = tempRangeEnd8;
HXLINE(1421)																	if ((endIndex4 < formatRange->end)) {
HXLINE(1421)																		tempRangeEnd8 = endIndex4;
            																	}
            																	else {
HXLINE(1421)																		tempRangeEnd8 = formatRange->end;
            																	}
HXDLIN(1421)																	countRanges6 = (countRanges6 + 1);
            																}
            																else {
HXLINE(1421)																	Float width37 = ((Float)0.0);
HXDLIN(1421)																	int _g21 = 0;
HXDLIN(1421)																	while((_g21 < positions->length)){
HXLINE(1421)																		 ::openfl::_internal::text::GlyphPosition position19 = positions->__get(_g21).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1421)																		_g21 = (_g21 + 1);
HXDLIN(1421)																		width37 = (width37 + position19->advance->x);
            																	}
HXDLIN(1421)																	widthValue = width37;
HXDLIN(1421)																	goto _hx_goto_52;
            																}
            															}
            															_hx_goto_52:;
HXDLIN(1421)															rangeIndex = (rangeIndex - (countRanges6 + 1));
HXDLIN(1421)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1421)																rangeIndex = (rangeIndex + 1);
HXDLIN(1421)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1421)																currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
HXLINE(1205)													positionWidth1 = ( (Float)(0) );
            												}
            											}
            										}
HXLINE(1210)										placeIndex1 = ((textIndex + i6) - bufferCount1);
HXLINE(1421)										{
HXLINE(1421)											if ((placeIndex1 <= formatRange->end)) {
HXLINE(1421)												::String text18 = _gthis->text;
HXDLIN(1421)												Float letterSpacing18 = ((Float)0.0);
HXDLIN(1421)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)													letterSpacing18 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1421)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1421)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1421)												Float width38 = ((Float)0.0);
HXDLIN(1421)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1421)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1421)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1421)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1421)												_gthis->_hx___textLayout->letterSpacing = letterSpacing18;
HXDLIN(1421)												bool positions12;
HXDLIN(1421)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1421)													positions12 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1421)													positions12 = true;
            												}
HXDLIN(1421)												_gthis->_hx___textLayout->autoHint = positions12;
HXDLIN(1421)												 ::openfl::_internal::text::TextLayout _gthis19 = _gthis->_hx___textLayout;
HXDLIN(1421)												_gthis19->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text18,textIndex,placeIndex1));
HXDLIN(1421)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1421)												Float width39 = ((Float)0.0);
HXDLIN(1421)												int _g22 = 0;
HXDLIN(1421)												while((_g22 < positions->length)){
HXLINE(1421)													 ::openfl::_internal::text::GlyphPosition position20 = positions->__get(_g22).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1421)													_g22 = (_g22 + 1);
HXDLIN(1421)													width39 = (width39 + position20->advance->x);
            												}
HXDLIN(1421)												widthValue = width39;
HXDLIN(1421)												bool _hx_tmp47;
HXDLIN(1421)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1421)													_hx_tmp47 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1421)													_hx_tmp47 = true;
            												}
HXDLIN(1421)												if (_hx_tmp47) {
HXLINE( 912)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex1);
HXLINE(1421)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1421)													layoutGroup->format = formatRange->format;
HXDLIN(1421)													layoutGroup->startIndex = textIndex;
HXDLIN(1421)													layoutGroup->endIndex = placeIndex1;
            												}
HXDLIN(1421)												layoutGroup->positions = positions;
HXDLIN(1421)												layoutGroup->offsetX = offsetX;
HXDLIN(1421)												layoutGroup->ascent = ascent;
HXDLIN(1421)												layoutGroup->descent = descent;
HXDLIN(1421)												layoutGroup->leading = leading;
HXDLIN(1421)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1421)												layoutGroup->offsetY = offsetY;
HXDLIN(1421)												layoutGroup->width = widthValue;
HXDLIN(1421)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1421)												offsetX = (offsetX + widthValue);
HXDLIN(1421)												if ((placeIndex1 == formatRange->end)) {
HXLINE(1058)													layoutGroup = null();
HXLINE(1421)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1421)														rangeIndex = (rangeIndex + 1);
HXDLIN(1421)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1421)														currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXLINE(1421)													{
HXLINE(1421)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1421)															bool _hx_tmp48;
HXDLIN(1421)															if (hx::IsNotNull( font )) {
HXLINE(1421)																_hx_tmp48 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1421)																_hx_tmp48 = false;
            															}
HXDLIN(1421)															if (_hx_tmp48) {
HXLINE( 934)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 940)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 944)														leading = ( (int)(currentFormat->leading) );
HXLINE( 946)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1421)														if ((heightValue > maxHeightValue)) {
HXLINE( 950)															maxHeightValue = heightValue;
            														}
HXLINE(1421)														if ((ascent > maxAscent)) {
HXLINE( 955)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1421)												while(true){
HXLINE(1421)													int tempRangeEnd9;
HXDLIN(1421)													if ((placeIndex1 < formatRange->end)) {
HXLINE(1421)														tempRangeEnd9 = placeIndex1;
            													}
            													else {
HXLINE(1421)														tempRangeEnd9 = formatRange->end;
            													}
HXDLIN(1421)													if ((textIndex != tempRangeEnd9)) {
HXLINE(1421)														::String text19 = _gthis->text;
HXDLIN(1421)														Float letterSpacing19 = ((Float)0.0);
HXDLIN(1421)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)															letterSpacing19 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1421)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1421)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1421)														Float width40 = ((Float)0.0);
HXDLIN(1421)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1421)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1421)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1421)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1421)														_gthis->_hx___textLayout->letterSpacing = letterSpacing19;
HXDLIN(1421)														bool positions13;
HXDLIN(1421)														if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1421)															positions13 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1421)															positions13 = true;
            														}
HXDLIN(1421)														_gthis->_hx___textLayout->autoHint = positions13;
HXDLIN(1421)														 ::openfl::_internal::text::TextLayout _gthis20 = _gthis->_hx___textLayout;
HXDLIN(1421)														_gthis20->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text19,textIndex,tempRangeEnd9));
HXDLIN(1421)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1421)														Float width41 = ((Float)0.0);
HXDLIN(1421)														int _g23 = 0;
HXDLIN(1421)														while((_g23 < positions->length)){
HXLINE(1421)															 ::openfl::_internal::text::GlyphPosition position21 = positions->__get(_g23).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1421)															_g23 = (_g23 + 1);
HXDLIN(1421)															width41 = (width41 + position21->advance->x);
            														}
HXDLIN(1421)														widthValue = width41;
HXDLIN(1421)														bool _hx_tmp49;
HXDLIN(1421)														if (hx::IsNotNull( layoutGroup )) {
HXLINE(1421)															_hx_tmp49 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1421)															_hx_tmp49 = true;
            														}
HXDLIN(1421)														if (_hx_tmp49) {
HXLINE( 912)															layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd9);
HXLINE(1421)															_gthis->layoutGroups->push(layoutGroup);
            														}
            														else {
HXLINE(1421)															layoutGroup->format = formatRange->format;
HXDLIN(1421)															layoutGroup->startIndex = textIndex;
HXDLIN(1421)															layoutGroup->endIndex = tempRangeEnd9;
            														}
HXDLIN(1421)														layoutGroup->positions = positions;
HXDLIN(1421)														layoutGroup->offsetX = offsetX;
HXDLIN(1421)														layoutGroup->ascent = ascent;
HXDLIN(1421)														layoutGroup->descent = descent;
HXDLIN(1421)														layoutGroup->leading = leading;
HXDLIN(1421)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1421)														layoutGroup->offsetY = offsetY;
HXDLIN(1421)														layoutGroup->width = widthValue;
HXDLIN(1421)														layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1421)														offsetX = (offsetX + widthValue);
HXLINE(1090)														textIndex = tempRangeEnd9;
            													}
HXLINE(1421)													if ((tempRangeEnd9 == formatRange->end)) {
HXLINE(1093)														layoutGroup = null();
            													}
HXLINE(1421)													if ((tempRangeEnd9 == placeIndex1)) {
HXLINE(1421)														goto _hx_goto_55;
            													}
HXDLIN(1421)													bool _hx_tmp50;
HXDLIN(1421)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1421)														rangeIndex = (rangeIndex + 1);
HXDLIN(1421)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1421)														currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1421)														_hx_tmp50 = true;
            													}
            													else {
HXLINE(1421)														_hx_tmp50 = false;
            													}
HXDLIN(1421)													if (!(_hx_tmp50)) {
HXLINE(1421)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1099,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1421)														goto _hx_goto_55;
            													}
HXDLIN(1421)													{
HXLINE(1421)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1421)															bool _hx_tmp51;
HXDLIN(1421)															if (hx::IsNotNull( font )) {
HXLINE(1421)																_hx_tmp51 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1421)																_hx_tmp51 = false;
            															}
HXDLIN(1421)															if (_hx_tmp51) {
HXLINE( 934)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 940)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 944)														leading = ( (int)(currentFormat->leading) );
HXLINE( 946)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1421)														if ((heightValue > maxHeightValue)) {
HXLINE( 950)															maxHeightValue = heightValue;
            														}
HXLINE(1421)														if ((ascent > maxAscent)) {
HXLINE( 955)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_55:;
            											}
HXLINE(1107)											textIndex = placeIndex1;
            										}
HXLINE(1421)										{
HXLINE(1421)											{
HXLINE(1421)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1421)													bool _hx_tmp52;
HXDLIN(1421)													if (hx::IsNotNull( font )) {
HXLINE(1421)														_hx_tmp52 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1421)														_hx_tmp52 = false;
            													}
HXDLIN(1421)													if (_hx_tmp52) {
HXLINE( 934)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 940)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 944)												leading = ( (int)(currentFormat->leading) );
HXLINE( 946)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1421)												if ((heightValue > maxHeightValue)) {
HXLINE( 950)													maxHeightValue = heightValue;
            												}
HXLINE(1421)												if ((ascent > maxAscent)) {
HXLINE( 955)													maxAscent = ascent;
            												}
            											}
HXLINE(1421)											int i7 = _gthis->layoutGroups->get_length();
HXDLIN(1421)											while(true){
HXLINE(1421)												i7 = (i7 - 1);
HXDLIN(1421)												if (!((i7 > -1))) {
HXLINE(1421)													goto _hx_goto_57;
            												}
HXDLIN(1421)												 ::openfl::_internal::text::TextLayoutGroup lg3 = _gthis->layoutGroups->get(i7).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1421)												if ((lg3->lineIndex < lineIndex)) {
HXLINE(1421)													goto _hx_goto_57;
            												}
HXDLIN(1421)												if ((lg3->lineIndex > lineIndex)) {
HXLINE(1421)													continue;
            												}
HXDLIN(1421)												lg3->ascent = maxAscent;
HXDLIN(1421)												lg3->height = ( (Float)(maxHeightValue) );
            											}
            											_hx_goto_57:;
HXDLIN(1421)											offsetY = (offsetY + maxHeightValue);
HXLINE(1132)											maxAscent = ((Float)0.0);
HXLINE(1133)											maxHeightValue = 0;
HXLINE(1421)											lineIndex = (lineIndex + 1);
HXLINE(1136)											offsetX = ( (Float)(2) );
            										}
HXLINE(1421)										if ((endIndex2 <= formatRange->end)) {
HXLINE(1421)											::String text20 = _gthis->text;
HXDLIN(1421)											Float letterSpacing20 = ((Float)0.0);
HXDLIN(1421)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)												letterSpacing20 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1421)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1421)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1421)											Float width42 = ((Float)0.0);
HXDLIN(1421)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1421)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1421)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1421)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1421)											_gthis->_hx___textLayout->letterSpacing = letterSpacing20;
HXDLIN(1421)											bool positions14;
HXDLIN(1421)											if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1421)												positions14 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1421)												positions14 = true;
            											}
HXDLIN(1421)											_gthis->_hx___textLayout->autoHint = positions14;
HXDLIN(1421)											 ::openfl::_internal::text::TextLayout _gthis21 = _gthis->_hx___textLayout;
HXDLIN(1421)											_gthis21->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text20,placeIndex1,endIndex2));
HXDLIN(1421)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1421)											Float width43 = ((Float)0.0);
HXDLIN(1421)											int _g24 = 0;
HXDLIN(1421)											while((_g24 < positions->length)){
HXLINE(1421)												 ::openfl::_internal::text::GlyphPosition position22 = positions->__get(_g24).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1421)												_g24 = (_g24 + 1);
HXDLIN(1421)												width43 = (width43 + position22->advance->x);
            											}
HXDLIN(1421)											widthValue = width43;
            										}
            										else {
HXLINE(1421)											int tempIndex7 = placeIndex1;
HXDLIN(1421)											int tempRangeEnd10 = formatRange->end;
HXDLIN(1421)											int countRanges7 = 0;
HXLINE( 996)											positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)											widthValue = ( (Float)(0) );
HXLINE(1421)											while(true){
HXLINE(1421)												if ((tempIndex7 != tempRangeEnd10)) {
HXLINE(1421)													::String text21 = _gthis->text;
HXDLIN(1421)													Float letterSpacing21 = ((Float)0.0);
HXDLIN(1421)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)														letterSpacing21 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1421)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1421)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1421)													Float width44 = ((Float)0.0);
HXDLIN(1421)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1421)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1421)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1421)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1421)													_gthis->_hx___textLayout->letterSpacing = letterSpacing21;
HXDLIN(1421)													bool _hx_tmp53;
HXDLIN(1421)													if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1421)														_hx_tmp53 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1421)														_hx_tmp53 = true;
            													}
HXDLIN(1421)													_gthis->_hx___textLayout->autoHint = _hx_tmp53;
HXDLIN(1421)													 ::openfl::_internal::text::TextLayout _gthis22 = _gthis->_hx___textLayout;
HXDLIN(1421)													_gthis22->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text21,tempIndex7,tempRangeEnd10));
HXDLIN(1421)													::Array< ::Dynamic> tempPositions7 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)													positions = positions->concat(tempPositions7);
            												}
HXLINE(1421)												if ((tempRangeEnd10 != endIndex2)) {
HXLINE(1421)													bool _hx_tmp54;
HXDLIN(1421)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1421)														rangeIndex = (rangeIndex + 1);
HXDLIN(1421)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1421)														currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1421)														_hx_tmp54 = true;
            													}
            													else {
HXLINE(1421)														_hx_tmp54 = false;
            													}
HXDLIN(1421)													if (!(_hx_tmp54)) {
HXLINE(1421)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1421)														goto _hx_goto_59;
            													}
HXLINE(1015)													tempIndex7 = tempRangeEnd10;
HXLINE(1421)													if ((endIndex2 < formatRange->end)) {
HXLINE(1421)														tempRangeEnd10 = endIndex2;
            													}
            													else {
HXLINE(1421)														tempRangeEnd10 = formatRange->end;
            													}
HXDLIN(1421)													countRanges7 = (countRanges7 + 1);
            												}
            												else {
HXLINE(1421)													Float width45 = ((Float)0.0);
HXDLIN(1421)													int _g25 = 0;
HXDLIN(1421)													while((_g25 < positions->length)){
HXLINE(1421)														 ::openfl::_internal::text::GlyphPosition position23 = positions->__get(_g25).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1421)														_g25 = (_g25 + 1);
HXDLIN(1421)														width45 = (width45 + position23->advance->x);
            													}
HXDLIN(1421)													widthValue = width45;
HXDLIN(1421)													goto _hx_goto_59;
            												}
            											}
            											_hx_goto_59:;
HXDLIN(1421)											rangeIndex = (rangeIndex - (countRanges7 + 1));
HXDLIN(1421)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1421)												rangeIndex = (rangeIndex + 1);
HXDLIN(1421)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1421)												currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
            										}
HXLINE(1216)										remainingPositions1 = positions;
HXLINE(1217)										tempWidth1 = widthValue;
            									}
            									_hx_goto_45:;
            								}
HXLINE(1421)								{
HXLINE(1421)									if ((endIndex2 <= formatRange->end)) {
HXLINE(1421)										::String text22 = _gthis->text;
HXDLIN(1421)										Float letterSpacing22 = ((Float)0.0);
HXDLIN(1421)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)											letterSpacing22 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1421)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1421)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1421)										Float width46 = ((Float)0.0);
HXDLIN(1421)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1421)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1421)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1421)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1421)										_gthis->_hx___textLayout->letterSpacing = letterSpacing22;
HXDLIN(1421)										bool positions15;
HXDLIN(1421)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1421)											positions15 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1421)											positions15 = true;
            										}
HXDLIN(1421)										_gthis->_hx___textLayout->autoHint = positions15;
HXDLIN(1421)										 ::openfl::_internal::text::TextLayout _gthis23 = _gthis->_hx___textLayout;
HXDLIN(1421)										_gthis23->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text22,textIndex,endIndex2));
HXDLIN(1421)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1421)										Float width47 = ((Float)0.0);
HXDLIN(1421)										int _g26 = 0;
HXDLIN(1421)										while((_g26 < positions->length)){
HXLINE(1421)											 ::openfl::_internal::text::GlyphPosition position24 = positions->__get(_g26).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1421)											_g26 = (_g26 + 1);
HXDLIN(1421)											width47 = (width47 + position24->advance->x);
            										}
HXDLIN(1421)										widthValue = width47;
HXDLIN(1421)										bool _hx_tmp55;
HXDLIN(1421)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1421)											_hx_tmp55 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1421)											_hx_tmp55 = true;
            										}
HXDLIN(1421)										if (_hx_tmp55) {
HXLINE( 912)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXLINE(1421)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1421)											layoutGroup->format = formatRange->format;
HXDLIN(1421)											layoutGroup->startIndex = textIndex;
HXDLIN(1421)											layoutGroup->endIndex = endIndex2;
            										}
HXDLIN(1421)										layoutGroup->positions = positions;
HXDLIN(1421)										layoutGroup->offsetX = offsetX;
HXDLIN(1421)										layoutGroup->ascent = ascent;
HXDLIN(1421)										layoutGroup->descent = descent;
HXDLIN(1421)										layoutGroup->leading = leading;
HXDLIN(1421)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1421)										layoutGroup->offsetY = offsetY;
HXDLIN(1421)										layoutGroup->width = widthValue;
HXDLIN(1421)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1421)										offsetX = (offsetX + widthValue);
HXDLIN(1421)										if ((endIndex2 == formatRange->end)) {
HXLINE(1058)											layoutGroup = null();
HXLINE(1421)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1421)												rangeIndex = (rangeIndex + 1);
HXDLIN(1421)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1421)												currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXLINE(1421)											{
HXLINE(1421)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1421)													bool _hx_tmp56;
HXDLIN(1421)													if (hx::IsNotNull( font )) {
HXLINE(1421)														_hx_tmp56 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1421)														_hx_tmp56 = false;
            													}
HXDLIN(1421)													if (_hx_tmp56) {
HXLINE( 934)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 940)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 944)												leading = ( (int)(currentFormat->leading) );
HXLINE( 946)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1421)												if ((heightValue > maxHeightValue)) {
HXLINE( 950)													maxHeightValue = heightValue;
            												}
HXLINE(1421)												if ((ascent > maxAscent)) {
HXLINE( 955)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1421)										while(true){
HXLINE(1421)											int tempRangeEnd11;
HXDLIN(1421)											if ((endIndex2 < formatRange->end)) {
HXLINE(1421)												tempRangeEnd11 = endIndex2;
            											}
            											else {
HXLINE(1421)												tempRangeEnd11 = formatRange->end;
            											}
HXDLIN(1421)											if ((textIndex != tempRangeEnd11)) {
HXLINE(1421)												::String text23 = _gthis->text;
HXDLIN(1421)												Float letterSpacing23 = ((Float)0.0);
HXDLIN(1421)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)													letterSpacing23 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1421)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1421)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1421)												Float width48 = ((Float)0.0);
HXDLIN(1421)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1421)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1421)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1421)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1421)												_gthis->_hx___textLayout->letterSpacing = letterSpacing23;
HXDLIN(1421)												bool positions16;
HXDLIN(1421)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1421)													positions16 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1421)													positions16 = true;
            												}
HXDLIN(1421)												_gthis->_hx___textLayout->autoHint = positions16;
HXDLIN(1421)												 ::openfl::_internal::text::TextLayout _gthis24 = _gthis->_hx___textLayout;
HXDLIN(1421)												_gthis24->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text23,textIndex,tempRangeEnd11));
HXDLIN(1421)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1421)												Float width49 = ((Float)0.0);
HXDLIN(1421)												int _g27 = 0;
HXDLIN(1421)												while((_g27 < positions->length)){
HXLINE(1421)													 ::openfl::_internal::text::GlyphPosition position25 = positions->__get(_g27).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1421)													_g27 = (_g27 + 1);
HXDLIN(1421)													width49 = (width49 + position25->advance->x);
            												}
HXDLIN(1421)												widthValue = width49;
HXDLIN(1421)												bool _hx_tmp57;
HXDLIN(1421)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1421)													_hx_tmp57 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1421)													_hx_tmp57 = true;
            												}
HXDLIN(1421)												if (_hx_tmp57) {
HXLINE( 912)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd11);
HXLINE(1421)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1421)													layoutGroup->format = formatRange->format;
HXDLIN(1421)													layoutGroup->startIndex = textIndex;
HXDLIN(1421)													layoutGroup->endIndex = tempRangeEnd11;
            												}
HXDLIN(1421)												layoutGroup->positions = positions;
HXDLIN(1421)												layoutGroup->offsetX = offsetX;
HXDLIN(1421)												layoutGroup->ascent = ascent;
HXDLIN(1421)												layoutGroup->descent = descent;
HXDLIN(1421)												layoutGroup->leading = leading;
HXDLIN(1421)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1421)												layoutGroup->offsetY = offsetY;
HXDLIN(1421)												layoutGroup->width = widthValue;
HXDLIN(1421)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1421)												offsetX = (offsetX + widthValue);
HXLINE(1090)												textIndex = tempRangeEnd11;
            											}
HXLINE(1421)											if ((tempRangeEnd11 == formatRange->end)) {
HXLINE(1093)												layoutGroup = null();
            											}
HXLINE(1421)											if ((tempRangeEnd11 == endIndex2)) {
HXLINE(1421)												goto _hx_goto_62;
            											}
HXDLIN(1421)											bool _hx_tmp58;
HXDLIN(1421)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1421)												rangeIndex = (rangeIndex + 1);
HXDLIN(1421)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1421)												currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1421)												_hx_tmp58 = true;
            											}
            											else {
HXLINE(1421)												_hx_tmp58 = false;
            											}
HXDLIN(1421)											if (!(_hx_tmp58)) {
HXLINE(1421)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1099,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1421)												goto _hx_goto_62;
            											}
HXDLIN(1421)											{
HXLINE(1421)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1421)													bool _hx_tmp59;
HXDLIN(1421)													if (hx::IsNotNull( font )) {
HXLINE(1421)														_hx_tmp59 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1421)														_hx_tmp59 = false;
            													}
HXDLIN(1421)													if (_hx_tmp59) {
HXLINE( 934)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 940)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 944)												leading = ( (int)(currentFormat->leading) );
HXLINE( 946)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1421)												if ((heightValue > maxHeightValue)) {
HXLINE( 950)													maxHeightValue = heightValue;
            												}
HXLINE(1421)												if ((ascent > maxAscent)) {
HXLINE( 955)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_62:;
            									}
HXLINE(1107)									textIndex = endIndex2;
            								}
            							}
HXLINE(1423)							wrap = false;
            						}
            						else {
HXLINE(1427)							bool _hx_tmp60;
HXDLIN(1427)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1427)								_hx_tmp60 = (textIndex == spaceIndex);
            							}
            							else {
HXLINE(1427)								_hx_tmp60 = false;
            							}
HXDLIN(1427)							if (_hx_tmp60) {
HXLINE(1430)								if (hx::IsNotEq( lineFormat->align,2 )) {
HXLINE(1432)									layoutGroup->endIndex = spaceIndex;
HXLINE(1433)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1434)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup3 = layoutGroup;
HXDLIN(1434)									layoutGroup3->width = (layoutGroup3->width + widthValue);
            								}
HXLINE(1437)								offsetX = (offsetX + widthValue);
HXLINE(1439)								textIndex = endIndex2;
            							}
            							else {
HXLINE(1441)								bool _hx_tmp61;
HXDLIN(1441)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1441)									_hx_tmp61 = hx::IsEq( lineFormat->align,2 );
            								}
            								else {
HXLINE(1441)									_hx_tmp61 = true;
            								}
HXDLIN(1441)								if (_hx_tmp61) {
HXLINE(1443)									bool _hx_tmp62;
HXDLIN(1443)									if ((_gthis->width >= 4)) {
HXLINE(1443)										_hx_tmp62 = _gthis->wordWrap;
            									}
            									else {
HXLINE(1443)										_hx_tmp62 = false;
            									}
HXDLIN(1443)									if (_hx_tmp62) {
HXLINE(1443)										::Array< ::Dynamic> remainingPositions2 = positions;
HXDLIN(1443)										int i8;
HXDLIN(1443)										int bufferCount2;
HXDLIN(1443)										int placeIndex2;
HXDLIN(1443)										Float positionWidth2;
HXDLIN(1443)										 ::openfl::_internal::text::GlyphPosition currentPosition2;
HXDLIN(1443)										Float width50 = ((Float)0.0);
HXDLIN(1443)										{
HXLINE(1443)											int _g28 = 0;
HXDLIN(1443)											while((_g28 < remainingPositions2->length)){
HXLINE(1443)												 ::openfl::_internal::text::GlyphPosition position26 = remainingPositions2->__get(_g28).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1443)												_g28 = (_g28 + 1);
HXDLIN(1443)												width50 = (width50 + position26->advance->x);
            											}
            										}
HXDLIN(1443)										Float tempWidth2 = width50;
HXDLIN(1443)										while(((offsetX + tempWidth2) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1152)											bufferCount2 = 0;
HXDLIN(1152)											i8 = bufferCount2;
HXLINE(1153)											positionWidth2 = ((Float)0.0);
HXLINE(1443)											while(((offsetX + positionWidth2) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1157)												currentPosition2 = remainingPositions2->__get(i8).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1443)												if ((currentPosition2->advance->x == ((Float)0.0))) {
HXLINE(1443)													i8 = (i8 + 1);
HXDLIN(1443)													bufferCount2 = (bufferCount2 + 1);
            												}
            												else {
HXLINE(1443)													positionWidth2 = (positionWidth2 + currentPosition2->advance->x);
HXDLIN(1443)													i8 = (i8 + 1);
            												}
            											}
HXDLIN(1443)											bool _hx_tmp63;
HXDLIN(1443)											if ((i8 < 2)) {
HXLINE(1443)												_hx_tmp63 = ((positionWidth2 + offsetX) > (_gthis->width - ( (Float)(2) )));
            											}
            											else {
HXLINE(1443)												_hx_tmp63 = false;
            											}
HXDLIN(1443)											if (_hx_tmp63) {
HXLINE(1443)												if ((((textIndex + i8) - bufferCount2) == endIndex2)) {
HXLINE(1443)													goto _hx_goto_65;
            												}
            											}
            											else {
HXLINE(1443)												while(((offsetX + positionWidth2) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1443)													i8 = (i8 - 1);
HXDLIN(1443)													if (((i8 - bufferCount2) > 0)) {
HXLINE(1443)														{
HXLINE(1443)															int endIndex5 = ((textIndex + i8) - bufferCount2);
HXDLIN(1443)															if ((endIndex5 <= formatRange->end)) {
HXLINE(1443)																::String text24 = _gthis->text;
HXDLIN(1443)																Float letterSpacing24 = ((Float)0.0);
HXDLIN(1443)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																	letterSpacing24 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1443)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1443)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1443)																Float width51 = ((Float)0.0);
HXDLIN(1443)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1443)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1443)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1443)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1443)																_gthis->_hx___textLayout->letterSpacing = letterSpacing24;
HXDLIN(1443)																bool positions17;
HXDLIN(1443)																if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1443)																	positions17 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1443)																	positions17 = true;
            																}
HXDLIN(1443)																_gthis->_hx___textLayout->autoHint = positions17;
HXDLIN(1443)																 ::openfl::_internal::text::TextLayout _gthis25 = _gthis->_hx___textLayout;
HXDLIN(1443)																_gthis25->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text24,textIndex,endIndex5));
HXDLIN(1443)																positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1443)																Float width52 = ((Float)0.0);
HXDLIN(1443)																int _g29 = 0;
HXDLIN(1443)																while((_g29 < positions->length)){
HXLINE(1443)																	 ::openfl::_internal::text::GlyphPosition position27 = positions->__get(_g29).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1443)																	_g29 = (_g29 + 1);
HXDLIN(1443)																	width52 = (width52 + position27->advance->x);
            																}
HXDLIN(1443)																widthValue = width52;
            															}
            															else {
HXLINE(1443)																int tempIndex8 = textIndex;
HXDLIN(1443)																int tempRangeEnd12 = formatRange->end;
HXDLIN(1443)																int countRanges8 = 0;
HXLINE( 996)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)																widthValue = ( (Float)(0) );
HXLINE(1443)																while(true){
HXLINE(1443)																	if ((tempIndex8 != tempRangeEnd12)) {
HXLINE(1443)																		::String text25 = _gthis->text;
HXDLIN(1443)																		Float letterSpacing25 = ((Float)0.0);
HXDLIN(1443)																		if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																			letterSpacing25 = ( (Float)(formatRange->format->letterSpacing) );
            																		}
HXLINE(1443)																		if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1443)																			_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1443)																		Float width53 = ((Float)0.0);
HXDLIN(1443)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1443)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1443)																		if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1443)																			_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																		}
HXDLIN(1443)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing25;
HXDLIN(1443)																		bool _hx_tmp64;
HXDLIN(1443)																		if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1443)																			_hx_tmp64 = (_gthis->sharpness < 400);
            																		}
            																		else {
HXLINE(1443)																			_hx_tmp64 = true;
            																		}
HXDLIN(1443)																		_gthis->_hx___textLayout->autoHint = _hx_tmp64;
HXDLIN(1443)																		 ::openfl::_internal::text::TextLayout _gthis26 = _gthis->_hx___textLayout;
HXDLIN(1443)																		_gthis26->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text25,tempIndex8,tempRangeEnd12));
HXDLIN(1443)																		::Array< ::Dynamic> tempPositions8 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)																		positions = positions->concat(tempPositions8);
            																	}
HXLINE(1443)																	if ((tempRangeEnd12 != endIndex5)) {
HXLINE(1443)																		bool _hx_tmp65;
HXDLIN(1443)																		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1443)																			rangeIndex = (rangeIndex + 1);
HXDLIN(1443)																			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1443)																			currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1443)																			_hx_tmp65 = true;
            																		}
            																		else {
HXLINE(1443)																			_hx_tmp65 = false;
            																		}
HXDLIN(1443)																		if (!(_hx_tmp65)) {
HXLINE(1443)																			::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1443)																			goto _hx_goto_69;
            																		}
HXLINE(1015)																		tempIndex8 = tempRangeEnd12;
HXLINE(1443)																		if ((endIndex5 < formatRange->end)) {
HXLINE(1443)																			tempRangeEnd12 = endIndex5;
            																		}
            																		else {
HXLINE(1443)																			tempRangeEnd12 = formatRange->end;
            																		}
HXDLIN(1443)																		countRanges8 = (countRanges8 + 1);
            																	}
            																	else {
HXLINE(1443)																		Float width54 = ((Float)0.0);
HXDLIN(1443)																		int _g30 = 0;
HXDLIN(1443)																		while((_g30 < positions->length)){
HXLINE(1443)																			 ::openfl::_internal::text::GlyphPosition position28 = positions->__get(_g30).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1443)																			_g30 = (_g30 + 1);
HXDLIN(1443)																			width54 = (width54 + position28->advance->x);
            																		}
HXDLIN(1443)																		widthValue = width54;
HXDLIN(1443)																		goto _hx_goto_69;
            																	}
            																}
            																_hx_goto_69:;
HXDLIN(1443)																rangeIndex = (rangeIndex - (countRanges8 + 1));
HXDLIN(1443)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1443)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1443)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1443)																	currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
HXLINE(1195)														positionWidth2 = widthValue;
            													}
            													else {
HXLINE(1201)														i8 = 1;
HXLINE(1202)														bufferCount2 = 0;
HXLINE(1443)														{
HXLINE(1443)															int endIndex6 = (textIndex + 1);
HXDLIN(1443)															if ((endIndex6 <= formatRange->end)) {
HXLINE(1443)																::String text26 = _gthis->text;
HXDLIN(1443)																Float letterSpacing26 = ((Float)0.0);
HXDLIN(1443)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																	letterSpacing26 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1443)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1443)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1443)																Float width55 = ((Float)0.0);
HXDLIN(1443)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1443)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1443)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1443)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1443)																_gthis->_hx___textLayout->letterSpacing = letterSpacing26;
HXDLIN(1443)																bool positions18;
HXDLIN(1443)																if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1443)																	positions18 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1443)																	positions18 = true;
            																}
HXDLIN(1443)																_gthis->_hx___textLayout->autoHint = positions18;
HXDLIN(1443)																 ::openfl::_internal::text::TextLayout _gthis27 = _gthis->_hx___textLayout;
HXDLIN(1443)																_gthis27->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text26,textIndex,endIndex6));
HXDLIN(1443)																positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1443)																Float width56 = ((Float)0.0);
HXDLIN(1443)																int _g31 = 0;
HXDLIN(1443)																while((_g31 < positions->length)){
HXLINE(1443)																	 ::openfl::_internal::text::GlyphPosition position29 = positions->__get(_g31).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1443)																	_g31 = (_g31 + 1);
HXDLIN(1443)																	width56 = (width56 + position29->advance->x);
            																}
HXDLIN(1443)																widthValue = width56;
            															}
            															else {
HXLINE(1443)																int tempIndex9 = textIndex;
HXDLIN(1443)																int tempRangeEnd13 = formatRange->end;
HXDLIN(1443)																int countRanges9 = 0;
HXLINE( 996)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)																widthValue = ( (Float)(0) );
HXLINE(1443)																while(true){
HXLINE(1443)																	if ((tempIndex9 != tempRangeEnd13)) {
HXLINE(1443)																		::String text27 = _gthis->text;
HXDLIN(1443)																		Float letterSpacing27 = ((Float)0.0);
HXDLIN(1443)																		if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																			letterSpacing27 = ( (Float)(formatRange->format->letterSpacing) );
            																		}
HXLINE(1443)																		if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1443)																			_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1443)																		Float width57 = ((Float)0.0);
HXDLIN(1443)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1443)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1443)																		if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1443)																			_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																		}
HXDLIN(1443)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing27;
HXDLIN(1443)																		bool _hx_tmp66;
HXDLIN(1443)																		if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1443)																			_hx_tmp66 = (_gthis->sharpness < 400);
            																		}
            																		else {
HXLINE(1443)																			_hx_tmp66 = true;
            																		}
HXDLIN(1443)																		_gthis->_hx___textLayout->autoHint = _hx_tmp66;
HXDLIN(1443)																		 ::openfl::_internal::text::TextLayout _gthis28 = _gthis->_hx___textLayout;
HXDLIN(1443)																		_gthis28->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text27,tempIndex9,tempRangeEnd13));
HXDLIN(1443)																		::Array< ::Dynamic> tempPositions9 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)																		positions = positions->concat(tempPositions9);
            																	}
HXLINE(1443)																	if ((tempRangeEnd13 != endIndex6)) {
HXLINE(1443)																		bool _hx_tmp67;
HXDLIN(1443)																		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1443)																			rangeIndex = (rangeIndex + 1);
HXDLIN(1443)																			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1443)																			currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1443)																			_hx_tmp67 = true;
            																		}
            																		else {
HXLINE(1443)																			_hx_tmp67 = false;
            																		}
HXDLIN(1443)																		if (!(_hx_tmp67)) {
HXLINE(1443)																			::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1443)																			goto _hx_goto_72;
            																		}
HXLINE(1015)																		tempIndex9 = tempRangeEnd13;
HXLINE(1443)																		if ((endIndex6 < formatRange->end)) {
HXLINE(1443)																			tempRangeEnd13 = endIndex6;
            																		}
            																		else {
HXLINE(1443)																			tempRangeEnd13 = formatRange->end;
            																		}
HXDLIN(1443)																		countRanges9 = (countRanges9 + 1);
            																	}
            																	else {
HXLINE(1443)																		Float width58 = ((Float)0.0);
HXDLIN(1443)																		int _g32 = 0;
HXDLIN(1443)																		while((_g32 < positions->length)){
HXLINE(1443)																			 ::openfl::_internal::text::GlyphPosition position30 = positions->__get(_g32).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1443)																			_g32 = (_g32 + 1);
HXDLIN(1443)																			width58 = (width58 + position30->advance->x);
            																		}
HXDLIN(1443)																		widthValue = width58;
HXDLIN(1443)																		goto _hx_goto_72;
            																	}
            																}
            																_hx_goto_72:;
HXDLIN(1443)																rangeIndex = (rangeIndex - (countRanges9 + 1));
HXDLIN(1443)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1443)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1443)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1443)																	currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
HXLINE(1205)														positionWidth2 = ( (Float)(0) );
            													}
            												}
            											}
HXLINE(1210)											placeIndex2 = ((textIndex + i8) - bufferCount2);
HXLINE(1443)											{
HXLINE(1443)												if ((placeIndex2 <= formatRange->end)) {
HXLINE(1443)													::String text28 = _gthis->text;
HXDLIN(1443)													Float letterSpacing28 = ((Float)0.0);
HXDLIN(1443)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)														letterSpacing28 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1443)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1443)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1443)													Float width59 = ((Float)0.0);
HXDLIN(1443)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1443)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1443)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1443)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1443)													_gthis->_hx___textLayout->letterSpacing = letterSpacing28;
HXDLIN(1443)													bool positions19;
HXDLIN(1443)													if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1443)														positions19 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1443)														positions19 = true;
            													}
HXDLIN(1443)													_gthis->_hx___textLayout->autoHint = positions19;
HXDLIN(1443)													 ::openfl::_internal::text::TextLayout _gthis29 = _gthis->_hx___textLayout;
HXDLIN(1443)													_gthis29->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text28,textIndex,placeIndex2));
HXDLIN(1443)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1443)													Float width60 = ((Float)0.0);
HXDLIN(1443)													int _g33 = 0;
HXDLIN(1443)													while((_g33 < positions->length)){
HXLINE(1443)														 ::openfl::_internal::text::GlyphPosition position31 = positions->__get(_g33).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1443)														_g33 = (_g33 + 1);
HXDLIN(1443)														width60 = (width60 + position31->advance->x);
            													}
HXDLIN(1443)													widthValue = width60;
HXDLIN(1443)													bool _hx_tmp68;
HXDLIN(1443)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1443)														_hx_tmp68 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1443)														_hx_tmp68 = true;
            													}
HXDLIN(1443)													if (_hx_tmp68) {
HXLINE( 912)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex2);
HXLINE(1443)														_gthis->layoutGroups->push(layoutGroup);
            													}
            													else {
HXLINE(1443)														layoutGroup->format = formatRange->format;
HXDLIN(1443)														layoutGroup->startIndex = textIndex;
HXDLIN(1443)														layoutGroup->endIndex = placeIndex2;
            													}
HXDLIN(1443)													layoutGroup->positions = positions;
HXDLIN(1443)													layoutGroup->offsetX = offsetX;
HXDLIN(1443)													layoutGroup->ascent = ascent;
HXDLIN(1443)													layoutGroup->descent = descent;
HXDLIN(1443)													layoutGroup->leading = leading;
HXDLIN(1443)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1443)													layoutGroup->offsetY = offsetY;
HXDLIN(1443)													layoutGroup->width = widthValue;
HXDLIN(1443)													layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1443)													offsetX = (offsetX + widthValue);
HXDLIN(1443)													if ((placeIndex2 == formatRange->end)) {
HXLINE(1058)														layoutGroup = null();
HXLINE(1443)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1443)															rangeIndex = (rangeIndex + 1);
HXDLIN(1443)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1443)															currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
HXLINE(1443)														{
HXLINE(1443)															if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)																ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)																descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            															}
            															else {
HXLINE(1443)																bool _hx_tmp69;
HXDLIN(1443)																if (hx::IsNotNull( font )) {
HXLINE(1443)																	_hx_tmp69 = (font->unitsPerEM != 0);
            																}
            																else {
HXLINE(1443)																	_hx_tmp69 = false;
            																}
HXDLIN(1443)																if (_hx_tmp69) {
HXLINE( 934)																	ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)																	descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            																}
            																else {
HXLINE( 940)																	ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)																	descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            																}
            															}
HXLINE( 944)															leading = ( (int)(currentFormat->leading) );
HXLINE( 946)															heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1443)															if ((heightValue > maxHeightValue)) {
HXLINE( 950)																maxHeightValue = heightValue;
            															}
HXLINE(1443)															if ((ascent > maxAscent)) {
HXLINE( 955)																maxAscent = ascent;
            															}
            														}
            													}
            												}
            												else {
HXLINE(1443)													while(true){
HXLINE(1443)														int tempRangeEnd14;
HXDLIN(1443)														if ((placeIndex2 < formatRange->end)) {
HXLINE(1443)															tempRangeEnd14 = placeIndex2;
            														}
            														else {
HXLINE(1443)															tempRangeEnd14 = formatRange->end;
            														}
HXDLIN(1443)														if ((textIndex != tempRangeEnd14)) {
HXLINE(1443)															::String text29 = _gthis->text;
HXDLIN(1443)															Float letterSpacing29 = ((Float)0.0);
HXDLIN(1443)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																letterSpacing29 = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXLINE(1443)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1443)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1443)															Float width61 = ((Float)0.0);
HXDLIN(1443)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1443)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1443)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1443)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1443)															_gthis->_hx___textLayout->letterSpacing = letterSpacing29;
HXDLIN(1443)															bool positions20;
HXDLIN(1443)															if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1443)																positions20 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1443)																positions20 = true;
            															}
HXDLIN(1443)															_gthis->_hx___textLayout->autoHint = positions20;
HXDLIN(1443)															 ::openfl::_internal::text::TextLayout _gthis30 = _gthis->_hx___textLayout;
HXDLIN(1443)															_gthis30->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text29,textIndex,tempRangeEnd14));
HXDLIN(1443)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1443)															Float width62 = ((Float)0.0);
HXDLIN(1443)															int _g34 = 0;
HXDLIN(1443)															while((_g34 < positions->length)){
HXLINE(1443)																 ::openfl::_internal::text::GlyphPosition position32 = positions->__get(_g34).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1443)																_g34 = (_g34 + 1);
HXDLIN(1443)																width62 = (width62 + position32->advance->x);
            															}
HXDLIN(1443)															widthValue = width62;
HXDLIN(1443)															bool _hx_tmp70;
HXDLIN(1443)															if (hx::IsNotNull( layoutGroup )) {
HXLINE(1443)																_hx_tmp70 = (layoutGroup->startIndex != layoutGroup->endIndex);
            															}
            															else {
HXLINE(1443)																_hx_tmp70 = true;
            															}
HXDLIN(1443)															if (_hx_tmp70) {
HXLINE( 912)																layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd14);
HXLINE(1443)																_gthis->layoutGroups->push(layoutGroup);
            															}
            															else {
HXLINE(1443)																layoutGroup->format = formatRange->format;
HXDLIN(1443)																layoutGroup->startIndex = textIndex;
HXDLIN(1443)																layoutGroup->endIndex = tempRangeEnd14;
            															}
HXDLIN(1443)															layoutGroup->positions = positions;
HXDLIN(1443)															layoutGroup->offsetX = offsetX;
HXDLIN(1443)															layoutGroup->ascent = ascent;
HXDLIN(1443)															layoutGroup->descent = descent;
HXDLIN(1443)															layoutGroup->leading = leading;
HXDLIN(1443)															layoutGroup->lineIndex = lineIndex;
HXDLIN(1443)															layoutGroup->offsetY = offsetY;
HXDLIN(1443)															layoutGroup->width = widthValue;
HXDLIN(1443)															layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1443)															offsetX = (offsetX + widthValue);
HXLINE(1090)															textIndex = tempRangeEnd14;
            														}
HXLINE(1443)														if ((tempRangeEnd14 == formatRange->end)) {
HXLINE(1093)															layoutGroup = null();
            														}
HXLINE(1443)														if ((tempRangeEnd14 == placeIndex2)) {
HXLINE(1443)															goto _hx_goto_75;
            														}
HXDLIN(1443)														bool _hx_tmp71;
HXDLIN(1443)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1443)															rangeIndex = (rangeIndex + 1);
HXDLIN(1443)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1443)															currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1443)															_hx_tmp71 = true;
            														}
            														else {
HXLINE(1443)															_hx_tmp71 = false;
            														}
HXDLIN(1443)														if (!(_hx_tmp71)) {
HXLINE(1443)															::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1099,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1443)															goto _hx_goto_75;
            														}
HXDLIN(1443)														{
HXLINE(1443)															if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)																ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)																descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            															}
            															else {
HXLINE(1443)																bool _hx_tmp72;
HXDLIN(1443)																if (hx::IsNotNull( font )) {
HXLINE(1443)																	_hx_tmp72 = (font->unitsPerEM != 0);
            																}
            																else {
HXLINE(1443)																	_hx_tmp72 = false;
            																}
HXDLIN(1443)																if (_hx_tmp72) {
HXLINE( 934)																	ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)																	descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            																}
            																else {
HXLINE( 940)																	ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)																	descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            																}
            															}
HXLINE( 944)															leading = ( (int)(currentFormat->leading) );
HXLINE( 946)															heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1443)															if ((heightValue > maxHeightValue)) {
HXLINE( 950)																maxHeightValue = heightValue;
            															}
HXLINE(1443)															if ((ascent > maxAscent)) {
HXLINE( 955)																maxAscent = ascent;
            															}
            														}
            													}
            													_hx_goto_75:;
            												}
HXLINE(1107)												textIndex = placeIndex2;
            											}
HXLINE(1443)											{
HXLINE(1443)												{
HXLINE(1443)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1443)														bool _hx_tmp73;
HXDLIN(1443)														if (hx::IsNotNull( font )) {
HXLINE(1443)															_hx_tmp73 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1443)															_hx_tmp73 = false;
            														}
HXDLIN(1443)														if (_hx_tmp73) {
HXLINE( 934)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 940)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 944)													leading = ( (int)(currentFormat->leading) );
HXLINE( 946)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1443)													if ((heightValue > maxHeightValue)) {
HXLINE( 950)														maxHeightValue = heightValue;
            													}
HXLINE(1443)													if ((ascent > maxAscent)) {
HXLINE( 955)														maxAscent = ascent;
            													}
            												}
HXLINE(1443)												int i9 = _gthis->layoutGroups->get_length();
HXDLIN(1443)												while(true){
HXLINE(1443)													i9 = (i9 - 1);
HXDLIN(1443)													if (!((i9 > -1))) {
HXLINE(1443)														goto _hx_goto_77;
            													}
HXDLIN(1443)													 ::openfl::_internal::text::TextLayoutGroup lg4 = _gthis->layoutGroups->get(i9).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1443)													if ((lg4->lineIndex < lineIndex)) {
HXLINE(1443)														goto _hx_goto_77;
            													}
HXDLIN(1443)													if ((lg4->lineIndex > lineIndex)) {
HXLINE(1443)														continue;
            													}
HXDLIN(1443)													lg4->ascent = maxAscent;
HXDLIN(1443)													lg4->height = ( (Float)(maxHeightValue) );
            												}
            												_hx_goto_77:;
HXDLIN(1443)												offsetY = (offsetY + maxHeightValue);
HXLINE(1132)												maxAscent = ((Float)0.0);
HXLINE(1133)												maxHeightValue = 0;
HXLINE(1443)												lineIndex = (lineIndex + 1);
HXLINE(1136)												offsetX = ( (Float)(2) );
            											}
HXLINE(1443)											if ((endIndex2 <= formatRange->end)) {
HXLINE(1443)												::String text30 = _gthis->text;
HXDLIN(1443)												Float letterSpacing30 = ((Float)0.0);
HXDLIN(1443)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)													letterSpacing30 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1443)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1443)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1443)												Float width63 = ((Float)0.0);
HXDLIN(1443)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1443)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1443)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1443)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1443)												_gthis->_hx___textLayout->letterSpacing = letterSpacing30;
HXDLIN(1443)												bool positions21;
HXDLIN(1443)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1443)													positions21 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1443)													positions21 = true;
            												}
HXDLIN(1443)												_gthis->_hx___textLayout->autoHint = positions21;
HXDLIN(1443)												 ::openfl::_internal::text::TextLayout _gthis31 = _gthis->_hx___textLayout;
HXDLIN(1443)												_gthis31->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text30,placeIndex2,endIndex2));
HXDLIN(1443)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1443)												Float width64 = ((Float)0.0);
HXDLIN(1443)												int _g35 = 0;
HXDLIN(1443)												while((_g35 < positions->length)){
HXLINE(1443)													 ::openfl::_internal::text::GlyphPosition position33 = positions->__get(_g35).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1443)													_g35 = (_g35 + 1);
HXDLIN(1443)													width64 = (width64 + position33->advance->x);
            												}
HXDLIN(1443)												widthValue = width64;
            											}
            											else {
HXLINE(1443)												int tempIndex10 = placeIndex2;
HXDLIN(1443)												int tempRangeEnd15 = formatRange->end;
HXDLIN(1443)												int countRanges10 = 0;
HXLINE( 996)												positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)												widthValue = ( (Float)(0) );
HXLINE(1443)												while(true){
HXLINE(1443)													if ((tempIndex10 != tempRangeEnd15)) {
HXLINE(1443)														::String text31 = _gthis->text;
HXDLIN(1443)														Float letterSpacing31 = ((Float)0.0);
HXDLIN(1443)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)															letterSpacing31 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1443)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1443)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1443)														Float width65 = ((Float)0.0);
HXDLIN(1443)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1443)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1443)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1443)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1443)														_gthis->_hx___textLayout->letterSpacing = letterSpacing31;
HXDLIN(1443)														bool _hx_tmp74;
HXDLIN(1443)														if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1443)															_hx_tmp74 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1443)															_hx_tmp74 = true;
            														}
HXDLIN(1443)														_gthis->_hx___textLayout->autoHint = _hx_tmp74;
HXDLIN(1443)														 ::openfl::_internal::text::TextLayout _gthis32 = _gthis->_hx___textLayout;
HXDLIN(1443)														_gthis32->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text31,tempIndex10,tempRangeEnd15));
HXDLIN(1443)														::Array< ::Dynamic> tempPositions10 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)														positions = positions->concat(tempPositions10);
            													}
HXLINE(1443)													if ((tempRangeEnd15 != endIndex2)) {
HXLINE(1443)														bool _hx_tmp75;
HXDLIN(1443)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1443)															rangeIndex = (rangeIndex + 1);
HXDLIN(1443)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1443)															currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1443)															_hx_tmp75 = true;
            														}
            														else {
HXLINE(1443)															_hx_tmp75 = false;
            														}
HXDLIN(1443)														if (!(_hx_tmp75)) {
HXLINE(1443)															::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1443)															goto _hx_goto_79;
            														}
HXLINE(1015)														tempIndex10 = tempRangeEnd15;
HXLINE(1443)														if ((endIndex2 < formatRange->end)) {
HXLINE(1443)															tempRangeEnd15 = endIndex2;
            														}
            														else {
HXLINE(1443)															tempRangeEnd15 = formatRange->end;
            														}
HXDLIN(1443)														countRanges10 = (countRanges10 + 1);
            													}
            													else {
HXLINE(1443)														Float width66 = ((Float)0.0);
HXDLIN(1443)														int _g36 = 0;
HXDLIN(1443)														while((_g36 < positions->length)){
HXLINE(1443)															 ::openfl::_internal::text::GlyphPosition position34 = positions->__get(_g36).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1443)															_g36 = (_g36 + 1);
HXDLIN(1443)															width66 = (width66 + position34->advance->x);
            														}
HXDLIN(1443)														widthValue = width66;
HXDLIN(1443)														goto _hx_goto_79;
            													}
            												}
            												_hx_goto_79:;
HXDLIN(1443)												rangeIndex = (rangeIndex - (countRanges10 + 1));
HXDLIN(1443)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1443)													rangeIndex = (rangeIndex + 1);
HXDLIN(1443)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1443)													currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
            											}
HXLINE(1216)											remainingPositions2 = positions;
HXLINE(1217)											tempWidth2 = widthValue;
            										}
            										_hx_goto_65:;
            									}
HXLINE(1443)									{
HXLINE(1443)										if ((endIndex2 <= formatRange->end)) {
HXLINE(1443)											::String text32 = _gthis->text;
HXDLIN(1443)											Float letterSpacing32 = ((Float)0.0);
HXDLIN(1443)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)												letterSpacing32 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1443)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1443)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1443)											Float width67 = ((Float)0.0);
HXDLIN(1443)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1443)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1443)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1443)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1443)											_gthis->_hx___textLayout->letterSpacing = letterSpacing32;
HXDLIN(1443)											bool positions22;
HXDLIN(1443)											if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1443)												positions22 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1443)												positions22 = true;
            											}
HXDLIN(1443)											_gthis->_hx___textLayout->autoHint = positions22;
HXDLIN(1443)											 ::openfl::_internal::text::TextLayout _gthis33 = _gthis->_hx___textLayout;
HXDLIN(1443)											_gthis33->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text32,textIndex,endIndex2));
HXDLIN(1443)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1443)											Float width68 = ((Float)0.0);
HXDLIN(1443)											int _g37 = 0;
HXDLIN(1443)											while((_g37 < positions->length)){
HXLINE(1443)												 ::openfl::_internal::text::GlyphPosition position35 = positions->__get(_g37).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1443)												_g37 = (_g37 + 1);
HXDLIN(1443)												width68 = (width68 + position35->advance->x);
            											}
HXDLIN(1443)											widthValue = width68;
HXDLIN(1443)											bool _hx_tmp76;
HXDLIN(1443)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1443)												_hx_tmp76 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1443)												_hx_tmp76 = true;
            											}
HXDLIN(1443)											if (_hx_tmp76) {
HXLINE( 912)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXLINE(1443)												_gthis->layoutGroups->push(layoutGroup);
            											}
            											else {
HXLINE(1443)												layoutGroup->format = formatRange->format;
HXDLIN(1443)												layoutGroup->startIndex = textIndex;
HXDLIN(1443)												layoutGroup->endIndex = endIndex2;
            											}
HXDLIN(1443)											layoutGroup->positions = positions;
HXDLIN(1443)											layoutGroup->offsetX = offsetX;
HXDLIN(1443)											layoutGroup->ascent = ascent;
HXDLIN(1443)											layoutGroup->descent = descent;
HXDLIN(1443)											layoutGroup->leading = leading;
HXDLIN(1443)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1443)											layoutGroup->offsetY = offsetY;
HXDLIN(1443)											layoutGroup->width = widthValue;
HXDLIN(1443)											layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1443)											offsetX = (offsetX + widthValue);
HXDLIN(1443)											if ((endIndex2 == formatRange->end)) {
HXLINE(1058)												layoutGroup = null();
HXLINE(1443)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1443)													rangeIndex = (rangeIndex + 1);
HXDLIN(1443)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1443)													currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXLINE(1443)												{
HXLINE(1443)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1443)														bool _hx_tmp77;
HXDLIN(1443)														if (hx::IsNotNull( font )) {
HXLINE(1443)															_hx_tmp77 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1443)															_hx_tmp77 = false;
            														}
HXDLIN(1443)														if (_hx_tmp77) {
HXLINE( 934)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 940)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 944)													leading = ( (int)(currentFormat->leading) );
HXLINE( 946)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1443)													if ((heightValue > maxHeightValue)) {
HXLINE( 950)														maxHeightValue = heightValue;
            													}
HXLINE(1443)													if ((ascent > maxAscent)) {
HXLINE( 955)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1443)											while(true){
HXLINE(1443)												int tempRangeEnd16;
HXDLIN(1443)												if ((endIndex2 < formatRange->end)) {
HXLINE(1443)													tempRangeEnd16 = endIndex2;
            												}
            												else {
HXLINE(1443)													tempRangeEnd16 = formatRange->end;
            												}
HXDLIN(1443)												if ((textIndex != tempRangeEnd16)) {
HXLINE(1443)													::String text33 = _gthis->text;
HXDLIN(1443)													Float letterSpacing33 = ((Float)0.0);
HXDLIN(1443)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)														letterSpacing33 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1443)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1443)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1443)													Float width69 = ((Float)0.0);
HXDLIN(1443)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1443)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1443)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1443)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1443)													_gthis->_hx___textLayout->letterSpacing = letterSpacing33;
HXDLIN(1443)													bool positions23;
HXDLIN(1443)													if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1443)														positions23 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1443)														positions23 = true;
            													}
HXDLIN(1443)													_gthis->_hx___textLayout->autoHint = positions23;
HXDLIN(1443)													 ::openfl::_internal::text::TextLayout _gthis34 = _gthis->_hx___textLayout;
HXDLIN(1443)													_gthis34->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text33,textIndex,tempRangeEnd16));
HXDLIN(1443)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1443)													Float width70 = ((Float)0.0);
HXDLIN(1443)													int _g38 = 0;
HXDLIN(1443)													while((_g38 < positions->length)){
HXLINE(1443)														 ::openfl::_internal::text::GlyphPosition position36 = positions->__get(_g38).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1443)														_g38 = (_g38 + 1);
HXDLIN(1443)														width70 = (width70 + position36->advance->x);
            													}
HXDLIN(1443)													widthValue = width70;
HXDLIN(1443)													bool _hx_tmp78;
HXDLIN(1443)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1443)														_hx_tmp78 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1443)														_hx_tmp78 = true;
            													}
HXDLIN(1443)													if (_hx_tmp78) {
HXLINE( 912)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd16);
HXLINE(1443)														_gthis->layoutGroups->push(layoutGroup);
            													}
            													else {
HXLINE(1443)														layoutGroup->format = formatRange->format;
HXDLIN(1443)														layoutGroup->startIndex = textIndex;
HXDLIN(1443)														layoutGroup->endIndex = tempRangeEnd16;
            													}
HXDLIN(1443)													layoutGroup->positions = positions;
HXDLIN(1443)													layoutGroup->offsetX = offsetX;
HXDLIN(1443)													layoutGroup->ascent = ascent;
HXDLIN(1443)													layoutGroup->descent = descent;
HXDLIN(1443)													layoutGroup->leading = leading;
HXDLIN(1443)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1443)													layoutGroup->offsetY = offsetY;
HXDLIN(1443)													layoutGroup->width = widthValue;
HXDLIN(1443)													layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1443)													offsetX = (offsetX + widthValue);
HXLINE(1090)													textIndex = tempRangeEnd16;
            												}
HXLINE(1443)												if ((tempRangeEnd16 == formatRange->end)) {
HXLINE(1093)													layoutGroup = null();
            												}
HXLINE(1443)												if ((tempRangeEnd16 == endIndex2)) {
HXLINE(1443)													goto _hx_goto_82;
            												}
HXDLIN(1443)												bool _hx_tmp79;
HXDLIN(1443)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1443)													rangeIndex = (rangeIndex + 1);
HXDLIN(1443)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1443)													currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1443)													_hx_tmp79 = true;
            												}
            												else {
HXLINE(1443)													_hx_tmp79 = false;
            												}
HXDLIN(1443)												if (!(_hx_tmp79)) {
HXLINE(1443)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1099,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1443)													goto _hx_goto_82;
            												}
HXDLIN(1443)												{
HXLINE(1443)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1443)														bool _hx_tmp80;
HXDLIN(1443)														if (hx::IsNotNull( font )) {
HXLINE(1443)															_hx_tmp80 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1443)															_hx_tmp80 = false;
            														}
HXDLIN(1443)														if (_hx_tmp80) {
HXLINE( 934)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 940)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 944)													leading = ( (int)(currentFormat->leading) );
HXLINE( 946)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1443)													if ((heightValue > maxHeightValue)) {
HXLINE( 950)														maxHeightValue = heightValue;
            													}
HXLINE(1443)													if ((ascent > maxAscent)) {
HXLINE( 955)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_82:;
            										}
HXLINE(1107)										textIndex = endIndex2;
            									}
            								}
            								else {
HXLINE(1447)									int tempRangeEnd17;
HXDLIN(1447)									if ((endIndex2 < formatRange->end)) {
HXLINE(1447)										tempRangeEnd17 = endIndex2;
            									}
            									else {
HXLINE(1447)										tempRangeEnd17 = formatRange->end;
            									}
HXLINE(1449)									if ((tempRangeEnd17 < endIndex2)) {
HXLINE(1451)										::String text34 = this->text;
HXDLIN(1451)										Float letterSpacing34 = ((Float)0.0);
HXDLIN(1451)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)											letterSpacing34 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1451)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1451)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1451)										Float width71 = ((Float)0.0);
HXDLIN(1451)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1451)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1451)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1451)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1451)										_gthis->_hx___textLayout->letterSpacing = letterSpacing34;
HXDLIN(1451)										bool positions24;
HXDLIN(1451)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1451)											positions24 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1451)											positions24 = true;
            										}
HXDLIN(1451)										_gthis->_hx___textLayout->autoHint = positions24;
HXDLIN(1451)										 ::openfl::_internal::text::TextLayout _gthis35 = _gthis->_hx___textLayout;
HXDLIN(1451)										_gthis35->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text34,textIndex,tempRangeEnd17));
HXDLIN(1451)										positions = _gthis->_hx___textLayout->get_positions();
HXLINE(1452)										Float width72 = ((Float)0.0);
HXDLIN(1452)										int _g39 = 0;
HXDLIN(1452)										while((_g39 < positions->length)){
HXLINE(1452)											 ::openfl::_internal::text::GlyphPosition position37 = positions->__get(_g39).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1452)											_g39 = (_g39 + 1);
HXDLIN(1452)											width72 = (width72 + position37->advance->x);
            										}
HXDLIN(1452)										widthValue = width72;
            									}
HXLINE(1455)									layoutGroup->endIndex = tempRangeEnd17;
HXLINE(1456)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1457)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup4 = layoutGroup;
HXDLIN(1457)									layoutGroup4->width = (layoutGroup4->width + widthValue);
HXLINE(1459)									offsetX = (offsetX + widthValue);
HXLINE(1461)									if ((tempRangeEnd17 == formatRange->end)) {
HXLINE(1463)										layoutGroup = null();
HXLINE(1464)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1464)											rangeIndex = (rangeIndex + 1);
HXDLIN(1464)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1464)											currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXLINE(1465)										{
HXLINE(1465)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1465)												bool _hx_tmp81;
HXDLIN(1465)												if (hx::IsNotNull( font )) {
HXLINE(1465)													_hx_tmp81 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1465)													_hx_tmp81 = false;
            												}
HXDLIN(1465)												if (_hx_tmp81) {
HXLINE( 934)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 940)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 944)											leading = ( (int)(currentFormat->leading) );
HXLINE( 946)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1465)											if ((heightValue > maxHeightValue)) {
HXLINE( 950)												maxHeightValue = heightValue;
            											}
HXLINE(1465)											if ((ascent > maxAscent)) {
HXLINE( 955)												maxAscent = ascent;
            											}
            										}
HXLINE(1467)										textIndex = tempRangeEnd17;
HXLINE(1469)										if ((tempRangeEnd17 != endIndex2)) {
HXLINE(1471)											if ((endIndex2 <= formatRange->end)) {
HXLINE(1471)												::String text35 = _gthis->text;
HXDLIN(1471)												Float letterSpacing35 = ((Float)0.0);
HXDLIN(1471)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)													letterSpacing35 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1471)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1471)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1471)												Float width73 = ((Float)0.0);
HXDLIN(1471)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1471)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1471)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1471)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1471)												_gthis->_hx___textLayout->letterSpacing = letterSpacing35;
HXDLIN(1471)												bool positions25;
HXDLIN(1471)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1471)													positions25 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1471)													positions25 = true;
            												}
HXDLIN(1471)												_gthis->_hx___textLayout->autoHint = positions25;
HXDLIN(1471)												 ::openfl::_internal::text::TextLayout _gthis36 = _gthis->_hx___textLayout;
HXDLIN(1471)												_gthis36->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text35,textIndex,endIndex2));
HXDLIN(1471)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1471)												Float width74 = ((Float)0.0);
HXDLIN(1471)												int _g40 = 0;
HXDLIN(1471)												while((_g40 < positions->length)){
HXLINE(1471)													 ::openfl::_internal::text::GlyphPosition position38 = positions->__get(_g40).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1471)													_g40 = (_g40 + 1);
HXDLIN(1471)													width74 = (width74 + position38->advance->x);
            												}
HXDLIN(1471)												widthValue = width74;
HXDLIN(1471)												bool _hx_tmp82;
HXDLIN(1471)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1471)													_hx_tmp82 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1471)													_hx_tmp82 = true;
            												}
HXDLIN(1471)												if (_hx_tmp82) {
HXLINE( 912)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXLINE(1471)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1471)													layoutGroup->format = formatRange->format;
HXDLIN(1471)													layoutGroup->startIndex = textIndex;
HXDLIN(1471)													layoutGroup->endIndex = endIndex2;
            												}
HXDLIN(1471)												layoutGroup->positions = positions;
HXDLIN(1471)												layoutGroup->offsetX = offsetX;
HXDLIN(1471)												layoutGroup->ascent = ascent;
HXDLIN(1471)												layoutGroup->descent = descent;
HXDLIN(1471)												layoutGroup->leading = leading;
HXDLIN(1471)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1471)												layoutGroup->offsetY = offsetY;
HXDLIN(1471)												layoutGroup->width = widthValue;
HXDLIN(1471)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1471)												offsetX = (offsetX + widthValue);
HXDLIN(1471)												if ((endIndex2 == formatRange->end)) {
HXLINE(1058)													layoutGroup = null();
HXLINE(1471)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1471)														rangeIndex = (rangeIndex + 1);
HXDLIN(1471)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1471)														currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXLINE(1471)													{
HXLINE(1471)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1471)															bool _hx_tmp83;
HXDLIN(1471)															if (hx::IsNotNull( font )) {
HXLINE(1471)																_hx_tmp83 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1471)																_hx_tmp83 = false;
            															}
HXDLIN(1471)															if (_hx_tmp83) {
HXLINE( 934)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 940)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 944)														leading = ( (int)(currentFormat->leading) );
HXLINE( 946)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1471)														if ((heightValue > maxHeightValue)) {
HXLINE( 950)															maxHeightValue = heightValue;
            														}
HXLINE(1471)														if ((ascent > maxAscent)) {
HXLINE( 955)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1471)												while(true){
HXLINE(1471)													int tempRangeEnd18;
HXDLIN(1471)													if ((endIndex2 < formatRange->end)) {
HXLINE(1471)														tempRangeEnd18 = endIndex2;
            													}
            													else {
HXLINE(1471)														tempRangeEnd18 = formatRange->end;
            													}
HXDLIN(1471)													if ((textIndex != tempRangeEnd18)) {
HXLINE(1471)														::String text36 = _gthis->text;
HXDLIN(1471)														Float letterSpacing36 = ((Float)0.0);
HXDLIN(1471)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)															letterSpacing36 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1471)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1471)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1471)														Float width75 = ((Float)0.0);
HXDLIN(1471)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1471)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1471)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1471)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1471)														_gthis->_hx___textLayout->letterSpacing = letterSpacing36;
HXDLIN(1471)														bool positions26;
HXDLIN(1471)														if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1471)															positions26 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1471)															positions26 = true;
            														}
HXDLIN(1471)														_gthis->_hx___textLayout->autoHint = positions26;
HXDLIN(1471)														 ::openfl::_internal::text::TextLayout _gthis37 = _gthis->_hx___textLayout;
HXDLIN(1471)														_gthis37->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text36,textIndex,tempRangeEnd18));
HXDLIN(1471)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1471)														Float width76 = ((Float)0.0);
HXDLIN(1471)														int _g41 = 0;
HXDLIN(1471)														while((_g41 < positions->length)){
HXLINE(1471)															 ::openfl::_internal::text::GlyphPosition position39 = positions->__get(_g41).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1471)															_g41 = (_g41 + 1);
HXDLIN(1471)															width76 = (width76 + position39->advance->x);
            														}
HXDLIN(1471)														widthValue = width76;
HXDLIN(1471)														bool _hx_tmp84;
HXDLIN(1471)														if (hx::IsNotNull( layoutGroup )) {
HXLINE(1471)															_hx_tmp84 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1471)															_hx_tmp84 = true;
            														}
HXDLIN(1471)														if (_hx_tmp84) {
HXLINE( 912)															layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd18);
HXLINE(1471)															_gthis->layoutGroups->push(layoutGroup);
            														}
            														else {
HXLINE(1471)															layoutGroup->format = formatRange->format;
HXDLIN(1471)															layoutGroup->startIndex = textIndex;
HXDLIN(1471)															layoutGroup->endIndex = tempRangeEnd18;
            														}
HXDLIN(1471)														layoutGroup->positions = positions;
HXDLIN(1471)														layoutGroup->offsetX = offsetX;
HXDLIN(1471)														layoutGroup->ascent = ascent;
HXDLIN(1471)														layoutGroup->descent = descent;
HXDLIN(1471)														layoutGroup->leading = leading;
HXDLIN(1471)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1471)														layoutGroup->offsetY = offsetY;
HXDLIN(1471)														layoutGroup->width = widthValue;
HXDLIN(1471)														layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1471)														offsetX = (offsetX + widthValue);
HXLINE(1090)														textIndex = tempRangeEnd18;
            													}
HXLINE(1471)													if ((tempRangeEnd18 == formatRange->end)) {
HXLINE(1093)														layoutGroup = null();
            													}
HXLINE(1471)													if ((tempRangeEnd18 == endIndex2)) {
HXLINE(1471)														goto _hx_goto_86;
            													}
HXDLIN(1471)													bool _hx_tmp85;
HXDLIN(1471)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1471)														rangeIndex = (rangeIndex + 1);
HXDLIN(1471)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1471)														currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1471)														_hx_tmp85 = true;
            													}
            													else {
HXLINE(1471)														_hx_tmp85 = false;
            													}
HXDLIN(1471)													if (!(_hx_tmp85)) {
HXLINE(1471)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1099,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1471)														goto _hx_goto_86;
            													}
HXDLIN(1471)													{
HXLINE(1471)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1471)															bool _hx_tmp86;
HXDLIN(1471)															if (hx::IsNotNull( font )) {
HXLINE(1471)																_hx_tmp86 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1471)																_hx_tmp86 = false;
            															}
HXDLIN(1471)															if (_hx_tmp86) {
HXLINE( 934)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 940)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 944)														leading = ( (int)(currentFormat->leading) );
HXLINE( 946)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1471)														if ((heightValue > maxHeightValue)) {
HXLINE( 950)															maxHeightValue = heightValue;
            														}
HXLINE(1471)														if ((ascent > maxAscent)) {
HXLINE( 955)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_86:;
            											}
HXLINE(1107)											textIndex = endIndex2;
            										}
            									}
HXLINE(1477)									if ((breakIndex == endIndex2)) {
HXLINE(1477)										endIndex2 = (endIndex2 + 1);
            									}
HXLINE(1479)									textIndex = endIndex2;
            								}
            							}
            						}
HXLINE(1483)						int nextSpaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),textIndex);
HXLINE(1488)						if ((breakIndex == previousSpaceIndex)) {
HXLINE(1490)							layoutGroup->endIndex = breakIndex;
HXLINE(1492)							if ((((breakIndex - layoutGroup->startIndex) - layoutGroup->positions->length) < 0)) {
HXLINE(1495)								layoutGroup->positions->push(null());
            							}
HXLINE(1498)							textIndex = (breakIndex + 1);
            						}
HXLINE(1501)						previousSpaceIndex = spaceIndex;
HXLINE(1502)						spaceIndex = nextSpaceIndex;
HXLINE(1504)						bool _hx_tmp87;
HXDLIN(1504)						bool _hx_tmp88;
HXDLIN(1504)						bool _hx_tmp89;
HXDLIN(1504)						if ((breakIndex > -1)) {
HXLINE(1504)							_hx_tmp89 = (breakIndex <= textIndex);
            						}
            						else {
HXLINE(1504)							_hx_tmp89 = false;
            						}
HXDLIN(1504)						if (_hx_tmp89) {
HXLINE(1504)							if ((spaceIndex <= breakIndex)) {
HXLINE(1504)								_hx_tmp88 = (spaceIndex == -1);
            							}
            							else {
HXLINE(1504)								_hx_tmp88 = true;
            							}
            						}
            						else {
HXLINE(1504)							_hx_tmp88 = false;
            						}
HXDLIN(1504)						if (!(_hx_tmp88)) {
HXLINE(1504)							_hx_tmp87 = (textIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text));
            						}
            						else {
HXLINE(1504)							_hx_tmp87 = true;
            						}
HXDLIN(1504)						if (_hx_tmp87) {
HXLINE(1507)							goto _hx_goto_37;
            						}
            					}
            					_hx_goto_37:;
            				}
            				else {
HXLINE(1513)					if ((textIndex < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))) {
HXLINE(1517)						{
HXLINE(1517)							int endIndex7 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
HXDLIN(1517)							if ((endIndex7 <= formatRange->end)) {
HXLINE(1517)								::String text37 = _gthis->text;
HXDLIN(1517)								Float letterSpacing37 = ((Float)0.0);
HXDLIN(1517)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)									letterSpacing37 = ( (Float)(formatRange->format->letterSpacing) );
            								}
HXLINE(1517)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1517)								Float width77 = ((Float)0.0);
HXDLIN(1517)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)									_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            								}
HXDLIN(1517)								_gthis->_hx___textLayout->letterSpacing = letterSpacing37;
HXDLIN(1517)								bool positions27;
HXDLIN(1517)								if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1517)									positions27 = (_gthis->sharpness < 400);
            								}
            								else {
HXLINE(1517)									positions27 = true;
            								}
HXDLIN(1517)								_gthis->_hx___textLayout->autoHint = positions27;
HXDLIN(1517)								 ::openfl::_internal::text::TextLayout _gthis38 = _gthis->_hx___textLayout;
HXDLIN(1517)								_gthis38->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text37,textIndex,endIndex7));
HXDLIN(1517)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1517)								Float width78 = ((Float)0.0);
HXDLIN(1517)								int _g42 = 0;
HXDLIN(1517)								while((_g42 < positions->length)){
HXLINE(1517)									 ::openfl::_internal::text::GlyphPosition position40 = positions->__get(_g42).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)									_g42 = (_g42 + 1);
HXDLIN(1517)									width78 = (width78 + position40->advance->x);
            								}
HXDLIN(1517)								widthValue = width78;
            							}
            							else {
HXLINE(1517)								int tempIndex11 = textIndex;
HXDLIN(1517)								int tempRangeEnd19 = formatRange->end;
HXDLIN(1517)								int countRanges11 = 0;
HXLINE( 996)								positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)								widthValue = ( (Float)(0) );
HXLINE(1517)								while(true){
HXLINE(1517)									if ((tempIndex11 != tempRangeEnd19)) {
HXLINE(1517)										::String text38 = _gthis->text;
HXDLIN(1517)										Float letterSpacing38 = ((Float)0.0);
HXDLIN(1517)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)											letterSpacing38 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1517)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1517)										Float width79 = ((Float)0.0);
HXDLIN(1517)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1517)										_gthis->_hx___textLayout->letterSpacing = letterSpacing38;
HXDLIN(1517)										bool _hx_tmp90;
HXDLIN(1517)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1517)											_hx_tmp90 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1517)											_hx_tmp90 = true;
            										}
HXDLIN(1517)										_gthis->_hx___textLayout->autoHint = _hx_tmp90;
HXDLIN(1517)										 ::openfl::_internal::text::TextLayout _gthis39 = _gthis->_hx___textLayout;
HXDLIN(1517)										_gthis39->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text38,tempIndex11,tempRangeEnd19));
HXDLIN(1517)										::Array< ::Dynamic> tempPositions11 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)										positions = positions->concat(tempPositions11);
            									}
HXLINE(1517)									if ((tempRangeEnd19 != endIndex7)) {
HXLINE(1517)										bool _hx_tmp91;
HXDLIN(1517)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1517)											rangeIndex = (rangeIndex + 1);
HXDLIN(1517)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1517)											currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1517)											_hx_tmp91 = true;
            										}
            										else {
HXLINE(1517)											_hx_tmp91 = false;
            										}
HXDLIN(1517)										if (!(_hx_tmp91)) {
HXLINE(1517)											::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1517)											goto _hx_goto_89;
            										}
HXLINE(1015)										tempIndex11 = tempRangeEnd19;
HXLINE(1517)										if ((endIndex7 < formatRange->end)) {
HXLINE(1517)											tempRangeEnd19 = endIndex7;
            										}
            										else {
HXLINE(1517)											tempRangeEnd19 = formatRange->end;
            										}
HXDLIN(1517)										countRanges11 = (countRanges11 + 1);
            									}
            									else {
HXLINE(1517)										Float width80 = ((Float)0.0);
HXDLIN(1517)										int _g43 = 0;
HXDLIN(1517)										while((_g43 < positions->length)){
HXLINE(1517)											 ::openfl::_internal::text::GlyphPosition position41 = positions->__get(_g43).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)											_g43 = (_g43 + 1);
HXDLIN(1517)											width80 = (width80 + position41->advance->x);
            										}
HXDLIN(1517)										widthValue = width80;
HXDLIN(1517)										goto _hx_goto_89;
            									}
            								}
            								_hx_goto_89:;
HXDLIN(1517)								rangeIndex = (rangeIndex - (countRanges11 + 1));
HXDLIN(1517)								if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1517)									rangeIndex = (rangeIndex + 1);
HXDLIN(1517)									formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1517)									currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            								}
            							}
            						}
HXLINE(1518)						{
HXLINE(1518)							int endIndex8 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
HXDLIN(1518)							bool _hx_tmp92;
HXDLIN(1518)							if ((_gthis->width >= 4)) {
HXLINE(1518)								_hx_tmp92 = _gthis->wordWrap;
            							}
            							else {
HXLINE(1518)								_hx_tmp92 = false;
            							}
HXDLIN(1518)							if (_hx_tmp92) {
HXLINE(1518)								::Array< ::Dynamic> remainingPositions3 = positions;
HXDLIN(1518)								int i10;
HXDLIN(1518)								int bufferCount3;
HXDLIN(1518)								int placeIndex3;
HXDLIN(1518)								Float positionWidth3;
HXDLIN(1518)								 ::openfl::_internal::text::GlyphPosition currentPosition3;
HXDLIN(1518)								Float width81 = ((Float)0.0);
HXDLIN(1518)								{
HXLINE(1518)									int _g44 = 0;
HXDLIN(1518)									while((_g44 < remainingPositions3->length)){
HXLINE(1518)										 ::openfl::_internal::text::GlyphPosition position42 = remainingPositions3->__get(_g44).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1518)										_g44 = (_g44 + 1);
HXDLIN(1518)										width81 = (width81 + position42->advance->x);
            									}
            								}
HXDLIN(1518)								Float tempWidth3 = width81;
HXDLIN(1518)								while(((offsetX + tempWidth3) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1152)									bufferCount3 = 0;
HXDLIN(1152)									i10 = bufferCount3;
HXLINE(1153)									positionWidth3 = ((Float)0.0);
HXLINE(1518)									while(((offsetX + positionWidth3) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1157)										currentPosition3 = remainingPositions3->__get(i10).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1518)										if ((currentPosition3->advance->x == ((Float)0.0))) {
HXLINE(1518)											i10 = (i10 + 1);
HXDLIN(1518)											bufferCount3 = (bufferCount3 + 1);
            										}
            										else {
HXLINE(1518)											positionWidth3 = (positionWidth3 + currentPosition3->advance->x);
HXDLIN(1518)											i10 = (i10 + 1);
            										}
            									}
HXDLIN(1518)									bool _hx_tmp93;
HXDLIN(1518)									if ((i10 < 2)) {
HXLINE(1518)										_hx_tmp93 = ((positionWidth3 + offsetX) > (_gthis->width - ( (Float)(2) )));
            									}
            									else {
HXLINE(1518)										_hx_tmp93 = false;
            									}
HXDLIN(1518)									if (_hx_tmp93) {
HXLINE(1518)										if ((((textIndex + i10) - bufferCount3) == endIndex8)) {
HXLINE(1518)											goto _hx_goto_92;
            										}
            									}
            									else {
HXLINE(1518)										while(((offsetX + positionWidth3) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1518)											i10 = (i10 - 1);
HXDLIN(1518)											if (((i10 - bufferCount3) > 0)) {
HXLINE(1518)												{
HXLINE(1518)													int endIndex9 = ((textIndex + i10) - bufferCount3);
HXDLIN(1518)													if ((endIndex9 <= formatRange->end)) {
HXLINE(1518)														::String text39 = _gthis->text;
HXDLIN(1518)														Float letterSpacing39 = ((Float)0.0);
HXDLIN(1518)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)															letterSpacing39 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1518)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1518)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1518)														Float width82 = ((Float)0.0);
HXDLIN(1518)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1518)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1518)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1518)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1518)														_gthis->_hx___textLayout->letterSpacing = letterSpacing39;
HXDLIN(1518)														bool positions28;
HXDLIN(1518)														if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1518)															positions28 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1518)															positions28 = true;
            														}
HXDLIN(1518)														_gthis->_hx___textLayout->autoHint = positions28;
HXDLIN(1518)														 ::openfl::_internal::text::TextLayout _gthis40 = _gthis->_hx___textLayout;
HXDLIN(1518)														_gthis40->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text39,textIndex,endIndex9));
HXDLIN(1518)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1518)														Float width83 = ((Float)0.0);
HXDLIN(1518)														int _g45 = 0;
HXDLIN(1518)														while((_g45 < positions->length)){
HXLINE(1518)															 ::openfl::_internal::text::GlyphPosition position43 = positions->__get(_g45).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1518)															_g45 = (_g45 + 1);
HXDLIN(1518)															width83 = (width83 + position43->advance->x);
            														}
HXDLIN(1518)														widthValue = width83;
            													}
            													else {
HXLINE(1518)														int tempIndex12 = textIndex;
HXDLIN(1518)														int tempRangeEnd20 = formatRange->end;
HXDLIN(1518)														int countRanges12 = 0;
HXLINE( 996)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)														widthValue = ( (Float)(0) );
HXLINE(1518)														while(true){
HXLINE(1518)															if ((tempIndex12 != tempRangeEnd20)) {
HXLINE(1518)																::String text40 = _gthis->text;
HXDLIN(1518)																Float letterSpacing40 = ((Float)0.0);
HXDLIN(1518)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																	letterSpacing40 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1518)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1518)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1518)																Float width84 = ((Float)0.0);
HXDLIN(1518)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1518)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1518)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1518)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1518)																_gthis->_hx___textLayout->letterSpacing = letterSpacing40;
HXDLIN(1518)																bool _hx_tmp94;
HXDLIN(1518)																if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1518)																	_hx_tmp94 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1518)																	_hx_tmp94 = true;
            																}
HXDLIN(1518)																_gthis->_hx___textLayout->autoHint = _hx_tmp94;
HXDLIN(1518)																 ::openfl::_internal::text::TextLayout _gthis41 = _gthis->_hx___textLayout;
HXDLIN(1518)																_gthis41->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text40,tempIndex12,tempRangeEnd20));
HXDLIN(1518)																::Array< ::Dynamic> tempPositions12 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)																positions = positions->concat(tempPositions12);
            															}
HXLINE(1518)															if ((tempRangeEnd20 != endIndex9)) {
HXLINE(1518)																bool _hx_tmp95;
HXDLIN(1518)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1518)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1518)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1518)																	currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1518)																	_hx_tmp95 = true;
            																}
            																else {
HXLINE(1518)																	_hx_tmp95 = false;
            																}
HXDLIN(1518)																if (!(_hx_tmp95)) {
HXLINE(1518)																	::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1518)																	goto _hx_goto_96;
            																}
HXLINE(1015)																tempIndex12 = tempRangeEnd20;
HXLINE(1518)																if ((endIndex9 < formatRange->end)) {
HXLINE(1518)																	tempRangeEnd20 = endIndex9;
            																}
            																else {
HXLINE(1518)																	tempRangeEnd20 = formatRange->end;
            																}
HXDLIN(1518)																countRanges12 = (countRanges12 + 1);
            															}
            															else {
HXLINE(1518)																Float width85 = ((Float)0.0);
HXDLIN(1518)																int _g46 = 0;
HXDLIN(1518)																while((_g46 < positions->length)){
HXLINE(1518)																	 ::openfl::_internal::text::GlyphPosition position44 = positions->__get(_g46).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1518)																	_g46 = (_g46 + 1);
HXDLIN(1518)																	width85 = (width85 + position44->advance->x);
            																}
HXDLIN(1518)																widthValue = width85;
HXDLIN(1518)																goto _hx_goto_96;
            															}
            														}
            														_hx_goto_96:;
HXDLIN(1518)														rangeIndex = (rangeIndex - (countRanges12 + 1));
HXDLIN(1518)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1518)															rangeIndex = (rangeIndex + 1);
HXDLIN(1518)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1518)															currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
HXLINE(1195)												positionWidth3 = widthValue;
            											}
            											else {
HXLINE(1201)												i10 = 1;
HXLINE(1202)												bufferCount3 = 0;
HXLINE(1518)												{
HXLINE(1518)													int endIndex10 = (textIndex + 1);
HXDLIN(1518)													if ((endIndex10 <= formatRange->end)) {
HXLINE(1518)														::String text41 = _gthis->text;
HXDLIN(1518)														Float letterSpacing41 = ((Float)0.0);
HXDLIN(1518)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)															letterSpacing41 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1518)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1518)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1518)														Float width86 = ((Float)0.0);
HXDLIN(1518)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1518)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1518)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1518)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1518)														_gthis->_hx___textLayout->letterSpacing = letterSpacing41;
HXDLIN(1518)														bool positions29;
HXDLIN(1518)														if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1518)															positions29 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1518)															positions29 = true;
            														}
HXDLIN(1518)														_gthis->_hx___textLayout->autoHint = positions29;
HXDLIN(1518)														 ::openfl::_internal::text::TextLayout _gthis42 = _gthis->_hx___textLayout;
HXDLIN(1518)														_gthis42->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text41,textIndex,endIndex10));
HXDLIN(1518)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1518)														Float width87 = ((Float)0.0);
HXDLIN(1518)														int _g47 = 0;
HXDLIN(1518)														while((_g47 < positions->length)){
HXLINE(1518)															 ::openfl::_internal::text::GlyphPosition position45 = positions->__get(_g47).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1518)															_g47 = (_g47 + 1);
HXDLIN(1518)															width87 = (width87 + position45->advance->x);
            														}
HXDLIN(1518)														widthValue = width87;
            													}
            													else {
HXLINE(1518)														int tempIndex13 = textIndex;
HXDLIN(1518)														int tempRangeEnd21 = formatRange->end;
HXDLIN(1518)														int countRanges13 = 0;
HXLINE( 996)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)														widthValue = ( (Float)(0) );
HXLINE(1518)														while(true){
HXLINE(1518)															if ((tempIndex13 != tempRangeEnd21)) {
HXLINE(1518)																::String text42 = _gthis->text;
HXDLIN(1518)																Float letterSpacing42 = ((Float)0.0);
HXDLIN(1518)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)																	letterSpacing42 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1518)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1518)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1518)																Float width88 = ((Float)0.0);
HXDLIN(1518)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1518)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1518)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1518)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1518)																_gthis->_hx___textLayout->letterSpacing = letterSpacing42;
HXDLIN(1518)																bool _hx_tmp96;
HXDLIN(1518)																if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1518)																	_hx_tmp96 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1518)																	_hx_tmp96 = true;
            																}
HXDLIN(1518)																_gthis->_hx___textLayout->autoHint = _hx_tmp96;
HXDLIN(1518)																 ::openfl::_internal::text::TextLayout _gthis43 = _gthis->_hx___textLayout;
HXDLIN(1518)																_gthis43->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text42,tempIndex13,tempRangeEnd21));
HXDLIN(1518)																::Array< ::Dynamic> tempPositions13 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)																positions = positions->concat(tempPositions13);
            															}
HXLINE(1518)															if ((tempRangeEnd21 != endIndex10)) {
HXLINE(1518)																bool _hx_tmp97;
HXDLIN(1518)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1518)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1518)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1518)																	currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1518)																	_hx_tmp97 = true;
            																}
            																else {
HXLINE(1518)																	_hx_tmp97 = false;
            																}
HXDLIN(1518)																if (!(_hx_tmp97)) {
HXLINE(1518)																	::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1518)																	goto _hx_goto_99;
            																}
HXLINE(1015)																tempIndex13 = tempRangeEnd21;
HXLINE(1518)																if ((endIndex10 < formatRange->end)) {
HXLINE(1518)																	tempRangeEnd21 = endIndex10;
            																}
            																else {
HXLINE(1518)																	tempRangeEnd21 = formatRange->end;
            																}
HXDLIN(1518)																countRanges13 = (countRanges13 + 1);
            															}
            															else {
HXLINE(1518)																Float width89 = ((Float)0.0);
HXDLIN(1518)																int _g48 = 0;
HXDLIN(1518)																while((_g48 < positions->length)){
HXLINE(1518)																	 ::openfl::_internal::text::GlyphPosition position46 = positions->__get(_g48).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1518)																	_g48 = (_g48 + 1);
HXDLIN(1518)																	width89 = (width89 + position46->advance->x);
            																}
HXDLIN(1518)																widthValue = width89;
HXDLIN(1518)																goto _hx_goto_99;
            															}
            														}
            														_hx_goto_99:;
HXDLIN(1518)														rangeIndex = (rangeIndex - (countRanges13 + 1));
HXDLIN(1518)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1518)															rangeIndex = (rangeIndex + 1);
HXDLIN(1518)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1518)															currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
HXLINE(1205)												positionWidth3 = ( (Float)(0) );
            											}
            										}
            									}
HXLINE(1210)									placeIndex3 = ((textIndex + i10) - bufferCount3);
HXLINE(1518)									{
HXLINE(1518)										if ((placeIndex3 <= formatRange->end)) {
HXLINE(1518)											::String text43 = _gthis->text;
HXDLIN(1518)											Float letterSpacing43 = ((Float)0.0);
HXDLIN(1518)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)												letterSpacing43 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1518)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1518)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1518)											Float width90 = ((Float)0.0);
HXDLIN(1518)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1518)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1518)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1518)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1518)											_gthis->_hx___textLayout->letterSpacing = letterSpacing43;
HXDLIN(1518)											bool positions30;
HXDLIN(1518)											if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1518)												positions30 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1518)												positions30 = true;
            											}
HXDLIN(1518)											_gthis->_hx___textLayout->autoHint = positions30;
HXDLIN(1518)											 ::openfl::_internal::text::TextLayout _gthis44 = _gthis->_hx___textLayout;
HXDLIN(1518)											_gthis44->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text43,textIndex,placeIndex3));
HXDLIN(1518)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1518)											Float width91 = ((Float)0.0);
HXDLIN(1518)											int _g49 = 0;
HXDLIN(1518)											while((_g49 < positions->length)){
HXLINE(1518)												 ::openfl::_internal::text::GlyphPosition position47 = positions->__get(_g49).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1518)												_g49 = (_g49 + 1);
HXDLIN(1518)												width91 = (width91 + position47->advance->x);
            											}
HXDLIN(1518)											widthValue = width91;
HXDLIN(1518)											bool _hx_tmp98;
HXDLIN(1518)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1518)												_hx_tmp98 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1518)												_hx_tmp98 = true;
            											}
HXDLIN(1518)											if (_hx_tmp98) {
HXLINE( 912)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex3);
HXLINE(1518)												_gthis->layoutGroups->push(layoutGroup);
            											}
            											else {
HXLINE(1518)												layoutGroup->format = formatRange->format;
HXDLIN(1518)												layoutGroup->startIndex = textIndex;
HXDLIN(1518)												layoutGroup->endIndex = placeIndex3;
            											}
HXDLIN(1518)											layoutGroup->positions = positions;
HXDLIN(1518)											layoutGroup->offsetX = offsetX;
HXDLIN(1518)											layoutGroup->ascent = ascent;
HXDLIN(1518)											layoutGroup->descent = descent;
HXDLIN(1518)											layoutGroup->leading = leading;
HXDLIN(1518)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1518)											layoutGroup->offsetY = offsetY;
HXDLIN(1518)											layoutGroup->width = widthValue;
HXDLIN(1518)											layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1518)											offsetX = (offsetX + widthValue);
HXDLIN(1518)											if ((placeIndex3 == formatRange->end)) {
HXLINE(1058)												layoutGroup = null();
HXLINE(1518)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1518)													rangeIndex = (rangeIndex + 1);
HXDLIN(1518)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1518)													currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXLINE(1518)												{
HXLINE(1518)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1518)														bool _hx_tmp99;
HXDLIN(1518)														if (hx::IsNotNull( font )) {
HXLINE(1518)															_hx_tmp99 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1518)															_hx_tmp99 = false;
            														}
HXDLIN(1518)														if (_hx_tmp99) {
HXLINE( 934)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 940)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 944)													leading = ( (int)(currentFormat->leading) );
HXLINE( 946)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1518)													if ((heightValue > maxHeightValue)) {
HXLINE( 950)														maxHeightValue = heightValue;
            													}
HXLINE(1518)													if ((ascent > maxAscent)) {
HXLINE( 955)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1518)											while(true){
HXLINE(1518)												int tempRangeEnd22;
HXDLIN(1518)												if ((placeIndex3 < formatRange->end)) {
HXLINE(1518)													tempRangeEnd22 = placeIndex3;
            												}
            												else {
HXLINE(1518)													tempRangeEnd22 = formatRange->end;
            												}
HXDLIN(1518)												if ((textIndex != tempRangeEnd22)) {
HXLINE(1518)													::String text44 = _gthis->text;
HXDLIN(1518)													Float letterSpacing44 = ((Float)0.0);
HXDLIN(1518)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)														letterSpacing44 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1518)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1518)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1518)													Float width92 = ((Float)0.0);
HXDLIN(1518)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1518)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1518)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1518)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1518)													_gthis->_hx___textLayout->letterSpacing = letterSpacing44;
HXDLIN(1518)													bool positions31;
HXDLIN(1518)													if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1518)														positions31 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1518)														positions31 = true;
            													}
HXDLIN(1518)													_gthis->_hx___textLayout->autoHint = positions31;
HXDLIN(1518)													 ::openfl::_internal::text::TextLayout _gthis45 = _gthis->_hx___textLayout;
HXDLIN(1518)													_gthis45->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text44,textIndex,tempRangeEnd22));
HXDLIN(1518)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1518)													Float width93 = ((Float)0.0);
HXDLIN(1518)													int _g50 = 0;
HXDLIN(1518)													while((_g50 < positions->length)){
HXLINE(1518)														 ::openfl::_internal::text::GlyphPosition position48 = positions->__get(_g50).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1518)														_g50 = (_g50 + 1);
HXDLIN(1518)														width93 = (width93 + position48->advance->x);
            													}
HXDLIN(1518)													widthValue = width93;
HXDLIN(1518)													bool _hx_tmp100;
HXDLIN(1518)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1518)														_hx_tmp100 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1518)														_hx_tmp100 = true;
            													}
HXDLIN(1518)													if (_hx_tmp100) {
HXLINE( 912)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd22);
HXLINE(1518)														_gthis->layoutGroups->push(layoutGroup);
            													}
            													else {
HXLINE(1518)														layoutGroup->format = formatRange->format;
HXDLIN(1518)														layoutGroup->startIndex = textIndex;
HXDLIN(1518)														layoutGroup->endIndex = tempRangeEnd22;
            													}
HXDLIN(1518)													layoutGroup->positions = positions;
HXDLIN(1518)													layoutGroup->offsetX = offsetX;
HXDLIN(1518)													layoutGroup->ascent = ascent;
HXDLIN(1518)													layoutGroup->descent = descent;
HXDLIN(1518)													layoutGroup->leading = leading;
HXDLIN(1518)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1518)													layoutGroup->offsetY = offsetY;
HXDLIN(1518)													layoutGroup->width = widthValue;
HXDLIN(1518)													layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1518)													offsetX = (offsetX + widthValue);
HXLINE(1090)													textIndex = tempRangeEnd22;
            												}
HXLINE(1518)												if ((tempRangeEnd22 == formatRange->end)) {
HXLINE(1093)													layoutGroup = null();
            												}
HXLINE(1518)												if ((tempRangeEnd22 == placeIndex3)) {
HXLINE(1518)													goto _hx_goto_102;
            												}
HXDLIN(1518)												bool _hx_tmp101;
HXDLIN(1518)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1518)													rangeIndex = (rangeIndex + 1);
HXDLIN(1518)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1518)													currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1518)													_hx_tmp101 = true;
            												}
            												else {
HXLINE(1518)													_hx_tmp101 = false;
            												}
HXDLIN(1518)												if (!(_hx_tmp101)) {
HXLINE(1518)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1099,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1518)													goto _hx_goto_102;
            												}
HXDLIN(1518)												{
HXLINE(1518)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1518)														bool _hx_tmp102;
HXDLIN(1518)														if (hx::IsNotNull( font )) {
HXLINE(1518)															_hx_tmp102 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1518)															_hx_tmp102 = false;
            														}
HXDLIN(1518)														if (_hx_tmp102) {
HXLINE( 934)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 940)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 944)													leading = ( (int)(currentFormat->leading) );
HXLINE( 946)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1518)													if ((heightValue > maxHeightValue)) {
HXLINE( 950)														maxHeightValue = heightValue;
            													}
HXLINE(1518)													if ((ascent > maxAscent)) {
HXLINE( 955)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_102:;
            										}
HXLINE(1107)										textIndex = placeIndex3;
            									}
HXLINE(1518)									{
HXLINE(1518)										{
HXLINE(1518)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1518)												bool _hx_tmp103;
HXDLIN(1518)												if (hx::IsNotNull( font )) {
HXLINE(1518)													_hx_tmp103 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1518)													_hx_tmp103 = false;
            												}
HXDLIN(1518)												if (_hx_tmp103) {
HXLINE( 934)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 940)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 944)											leading = ( (int)(currentFormat->leading) );
HXLINE( 946)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1518)											if ((heightValue > maxHeightValue)) {
HXLINE( 950)												maxHeightValue = heightValue;
            											}
HXLINE(1518)											if ((ascent > maxAscent)) {
HXLINE( 955)												maxAscent = ascent;
            											}
            										}
HXLINE(1518)										int i11 = _gthis->layoutGroups->get_length();
HXDLIN(1518)										while(true){
HXLINE(1518)											i11 = (i11 - 1);
HXDLIN(1518)											if (!((i11 > -1))) {
HXLINE(1518)												goto _hx_goto_104;
            											}
HXDLIN(1518)											 ::openfl::_internal::text::TextLayoutGroup lg5 = _gthis->layoutGroups->get(i11).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1518)											if ((lg5->lineIndex < lineIndex)) {
HXLINE(1518)												goto _hx_goto_104;
            											}
HXDLIN(1518)											if ((lg5->lineIndex > lineIndex)) {
HXLINE(1518)												continue;
            											}
HXDLIN(1518)											lg5->ascent = maxAscent;
HXDLIN(1518)											lg5->height = ( (Float)(maxHeightValue) );
            										}
            										_hx_goto_104:;
HXDLIN(1518)										offsetY = (offsetY + maxHeightValue);
HXLINE(1132)										maxAscent = ((Float)0.0);
HXLINE(1133)										maxHeightValue = 0;
HXLINE(1518)										lineIndex = (lineIndex + 1);
HXLINE(1136)										offsetX = ( (Float)(2) );
            									}
HXLINE(1518)									if ((endIndex8 <= formatRange->end)) {
HXLINE(1518)										::String text45 = _gthis->text;
HXDLIN(1518)										Float letterSpacing45 = ((Float)0.0);
HXDLIN(1518)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)											letterSpacing45 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1518)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1518)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1518)										Float width94 = ((Float)0.0);
HXDLIN(1518)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1518)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1518)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1518)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1518)										_gthis->_hx___textLayout->letterSpacing = letterSpacing45;
HXDLIN(1518)										bool positions32;
HXDLIN(1518)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1518)											positions32 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1518)											positions32 = true;
            										}
HXDLIN(1518)										_gthis->_hx___textLayout->autoHint = positions32;
HXDLIN(1518)										 ::openfl::_internal::text::TextLayout _gthis46 = _gthis->_hx___textLayout;
HXDLIN(1518)										_gthis46->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text45,placeIndex3,endIndex8));
HXDLIN(1518)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1518)										Float width95 = ((Float)0.0);
HXDLIN(1518)										int _g51 = 0;
HXDLIN(1518)										while((_g51 < positions->length)){
HXLINE(1518)											 ::openfl::_internal::text::GlyphPosition position49 = positions->__get(_g51).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1518)											_g51 = (_g51 + 1);
HXDLIN(1518)											width95 = (width95 + position49->advance->x);
            										}
HXDLIN(1518)										widthValue = width95;
            									}
            									else {
HXLINE(1518)										int tempIndex14 = placeIndex3;
HXDLIN(1518)										int tempRangeEnd23 = formatRange->end;
HXDLIN(1518)										int countRanges14 = 0;
HXLINE( 996)										positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 997)										widthValue = ( (Float)(0) );
HXLINE(1518)										while(true){
HXLINE(1518)											if ((tempIndex14 != tempRangeEnd23)) {
HXLINE(1518)												::String text46 = _gthis->text;
HXDLIN(1518)												Float letterSpacing46 = ((Float)0.0);
HXDLIN(1518)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)													letterSpacing46 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1518)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1518)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1518)												Float width96 = ((Float)0.0);
HXDLIN(1518)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1518)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1518)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1518)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1518)												_gthis->_hx___textLayout->letterSpacing = letterSpacing46;
HXDLIN(1518)												bool _hx_tmp104;
HXDLIN(1518)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1518)													_hx_tmp104 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1518)													_hx_tmp104 = true;
            												}
HXDLIN(1518)												_gthis->_hx___textLayout->autoHint = _hx_tmp104;
HXDLIN(1518)												 ::openfl::_internal::text::TextLayout _gthis47 = _gthis->_hx___textLayout;
HXDLIN(1518)												_gthis47->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text46,tempIndex14,tempRangeEnd23));
HXDLIN(1518)												::Array< ::Dynamic> tempPositions14 = _gthis->_hx___textLayout->get_positions();
HXLINE(1004)												positions = positions->concat(tempPositions14);
            											}
HXLINE(1518)											if ((tempRangeEnd23 != endIndex8)) {
HXLINE(1518)												bool _hx_tmp105;
HXDLIN(1518)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1518)													rangeIndex = (rangeIndex + 1);
HXDLIN(1518)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1518)													currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1518)													_hx_tmp105 = true;
            												}
            												else {
HXLINE(1518)													_hx_tmp105 = false;
            												}
HXDLIN(1518)												if (!(_hx_tmp105)) {
HXLINE(1518)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1011,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1518)													goto _hx_goto_106;
            												}
HXLINE(1015)												tempIndex14 = tempRangeEnd23;
HXLINE(1518)												if ((endIndex8 < formatRange->end)) {
HXLINE(1518)													tempRangeEnd23 = endIndex8;
            												}
            												else {
HXLINE(1518)													tempRangeEnd23 = formatRange->end;
            												}
HXDLIN(1518)												countRanges14 = (countRanges14 + 1);
            											}
            											else {
HXLINE(1518)												Float width97 = ((Float)0.0);
HXDLIN(1518)												int _g52 = 0;
HXDLIN(1518)												while((_g52 < positions->length)){
HXLINE(1518)													 ::openfl::_internal::text::GlyphPosition position50 = positions->__get(_g52).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1518)													_g52 = (_g52 + 1);
HXDLIN(1518)													width97 = (width97 + position50->advance->x);
            												}
HXDLIN(1518)												widthValue = width97;
HXDLIN(1518)												goto _hx_goto_106;
            											}
            										}
            										_hx_goto_106:;
HXDLIN(1518)										rangeIndex = (rangeIndex - (countRanges14 + 1));
HXDLIN(1518)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1518)											rangeIndex = (rangeIndex + 1);
HXDLIN(1518)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1518)											currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
            									}
HXLINE(1216)									remainingPositions3 = positions;
HXLINE(1217)									tempWidth3 = widthValue;
            								}
            								_hx_goto_92:;
            							}
HXLINE(1518)							{
HXLINE(1518)								if ((endIndex8 <= formatRange->end)) {
HXLINE(1518)									::String text47 = _gthis->text;
HXDLIN(1518)									Float letterSpacing47 = ((Float)0.0);
HXDLIN(1518)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)										letterSpacing47 = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXLINE(1518)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1518)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1518)									Float width98 = ((Float)0.0);
HXDLIN(1518)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1518)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1518)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1518)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1518)									_gthis->_hx___textLayout->letterSpacing = letterSpacing47;
HXDLIN(1518)									bool positions33;
HXDLIN(1518)									if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1518)										positions33 = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1518)										positions33 = true;
            									}
HXDLIN(1518)									_gthis->_hx___textLayout->autoHint = positions33;
HXDLIN(1518)									 ::openfl::_internal::text::TextLayout _gthis48 = _gthis->_hx___textLayout;
HXDLIN(1518)									_gthis48->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text47,textIndex,endIndex8));
HXDLIN(1518)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1518)									Float width99 = ((Float)0.0);
HXDLIN(1518)									int _g53 = 0;
HXDLIN(1518)									while((_g53 < positions->length)){
HXLINE(1518)										 ::openfl::_internal::text::GlyphPosition position51 = positions->__get(_g53).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1518)										_g53 = (_g53 + 1);
HXDLIN(1518)										width99 = (width99 + position51->advance->x);
            									}
HXDLIN(1518)									widthValue = width99;
HXDLIN(1518)									bool _hx_tmp106;
HXDLIN(1518)									if (hx::IsNotNull( layoutGroup )) {
HXLINE(1518)										_hx_tmp106 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1518)										_hx_tmp106 = true;
            									}
HXDLIN(1518)									if (_hx_tmp106) {
HXLINE( 912)										layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex8);
HXLINE(1518)										_gthis->layoutGroups->push(layoutGroup);
            									}
            									else {
HXLINE(1518)										layoutGroup->format = formatRange->format;
HXDLIN(1518)										layoutGroup->startIndex = textIndex;
HXDLIN(1518)										layoutGroup->endIndex = endIndex8;
            									}
HXDLIN(1518)									layoutGroup->positions = positions;
HXDLIN(1518)									layoutGroup->offsetX = offsetX;
HXDLIN(1518)									layoutGroup->ascent = ascent;
HXDLIN(1518)									layoutGroup->descent = descent;
HXDLIN(1518)									layoutGroup->leading = leading;
HXDLIN(1518)									layoutGroup->lineIndex = lineIndex;
HXDLIN(1518)									layoutGroup->offsetY = offsetY;
HXDLIN(1518)									layoutGroup->width = widthValue;
HXDLIN(1518)									layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1518)									offsetX = (offsetX + widthValue);
HXDLIN(1518)									if ((endIndex8 == formatRange->end)) {
HXLINE(1058)										layoutGroup = null();
HXLINE(1518)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1518)											rangeIndex = (rangeIndex + 1);
HXDLIN(1518)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1518)											currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXLINE(1518)										{
HXLINE(1518)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1518)												bool _hx_tmp107;
HXDLIN(1518)												if (hx::IsNotNull( font )) {
HXLINE(1518)													_hx_tmp107 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1518)													_hx_tmp107 = false;
            												}
HXDLIN(1518)												if (_hx_tmp107) {
HXLINE( 934)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 940)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 944)											leading = ( (int)(currentFormat->leading) );
HXLINE( 946)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1518)											if ((heightValue > maxHeightValue)) {
HXLINE( 950)												maxHeightValue = heightValue;
            											}
HXLINE(1518)											if ((ascent > maxAscent)) {
HXLINE( 955)												maxAscent = ascent;
            											}
            										}
            									}
            								}
            								else {
HXLINE(1518)									while(true){
HXLINE(1518)										int tempRangeEnd24;
HXDLIN(1518)										if ((endIndex8 < formatRange->end)) {
HXLINE(1518)											tempRangeEnd24 = endIndex8;
            										}
            										else {
HXLINE(1518)											tempRangeEnd24 = formatRange->end;
            										}
HXDLIN(1518)										if ((textIndex != tempRangeEnd24)) {
HXLINE(1518)											::String text48 = _gthis->text;
HXDLIN(1518)											Float letterSpacing48 = ((Float)0.0);
HXDLIN(1518)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 777)												letterSpacing48 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1518)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1518)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1518)											Float width100 = ((Float)0.0);
HXDLIN(1518)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1518)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1518)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1518)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1518)											_gthis->_hx___textLayout->letterSpacing = letterSpacing48;
HXDLIN(1518)											bool positions34;
HXDLIN(1518)											if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1518)												positions34 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1518)												positions34 = true;
            											}
HXDLIN(1518)											_gthis->_hx___textLayout->autoHint = positions34;
HXDLIN(1518)											 ::openfl::_internal::text::TextLayout _gthis49 = _gthis->_hx___textLayout;
HXDLIN(1518)											_gthis49->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text48,textIndex,tempRangeEnd24));
HXDLIN(1518)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1518)											Float width101 = ((Float)0.0);
HXDLIN(1518)											int _g54 = 0;
HXDLIN(1518)											while((_g54 < positions->length)){
HXLINE(1518)												 ::openfl::_internal::text::GlyphPosition position52 = positions->__get(_g54).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1518)												_g54 = (_g54 + 1);
HXDLIN(1518)												width101 = (width101 + position52->advance->x);
            											}
HXDLIN(1518)											widthValue = width101;
HXDLIN(1518)											bool _hx_tmp108;
HXDLIN(1518)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1518)												_hx_tmp108 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1518)												_hx_tmp108 = true;
            											}
HXDLIN(1518)											if (_hx_tmp108) {
HXLINE( 912)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd24);
HXLINE(1518)												_gthis->layoutGroups->push(layoutGroup);
            											}
            											else {
HXLINE(1518)												layoutGroup->format = formatRange->format;
HXDLIN(1518)												layoutGroup->startIndex = textIndex;
HXDLIN(1518)												layoutGroup->endIndex = tempRangeEnd24;
            											}
HXDLIN(1518)											layoutGroup->positions = positions;
HXDLIN(1518)											layoutGroup->offsetX = offsetX;
HXDLIN(1518)											layoutGroup->ascent = ascent;
HXDLIN(1518)											layoutGroup->descent = descent;
HXDLIN(1518)											layoutGroup->leading = leading;
HXDLIN(1518)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1518)											layoutGroup->offsetY = offsetY;
HXDLIN(1518)											layoutGroup->width = widthValue;
HXDLIN(1518)											layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1518)											offsetX = (offsetX + widthValue);
HXLINE(1090)											textIndex = tempRangeEnd24;
            										}
HXLINE(1518)										if ((tempRangeEnd24 == formatRange->end)) {
HXLINE(1093)											layoutGroup = null();
            										}
HXLINE(1518)										if ((tempRangeEnd24 == endIndex8)) {
HXLINE(1518)											goto _hx_goto_109;
            										}
HXDLIN(1518)										bool _hx_tmp109;
HXDLIN(1518)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1518)											rangeIndex = (rangeIndex + 1);
HXDLIN(1518)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1518)											currentFormat->_hx___merge(formatRange->format);
HXLINE( 972)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1518)											_hx_tmp109 = true;
            										}
            										else {
HXLINE(1518)											_hx_tmp109 = false;
            										}
HXDLIN(1518)										if (!(_hx_tmp109)) {
HXLINE(1518)											::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/_internal/text/TextEngine.hx",7f,3b,f9,df),1099,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1518)											goto _hx_goto_109;
            										}
HXDLIN(1518)										{
HXLINE(1518)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1518)												bool _hx_tmp110;
HXDLIN(1518)												if (hx::IsNotNull( font )) {
HXLINE(1518)													_hx_tmp110 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1518)													_hx_tmp110 = false;
            												}
HXDLIN(1518)												if (_hx_tmp110) {
HXLINE( 934)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 940)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 944)											leading = ( (int)(currentFormat->leading) );
HXLINE( 946)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1518)											if ((heightValue > maxHeightValue)) {
HXLINE( 950)												maxHeightValue = heightValue;
            											}
HXLINE(1518)											if ((ascent > maxAscent)) {
HXLINE( 955)												maxAscent = ascent;
            											}
            										}
            									}
            									_hx_goto_109:;
            								}
HXLINE(1107)								textIndex = endIndex8;
            							}
            						}
HXLINE(1520)						{
HXLINE(1520)							{
HXLINE(1520)								if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 928)									ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 929)									descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            								}
            								else {
HXLINE(1520)									bool _hx_tmp111;
HXDLIN(1520)									if (hx::IsNotNull( font )) {
HXLINE(1520)										_hx_tmp111 = (font->unitsPerEM != 0);
            									}
            									else {
HXLINE(1520)										_hx_tmp111 = false;
            									}
HXDLIN(1520)									if (_hx_tmp111) {
HXLINE( 934)										ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 935)										descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            									}
            									else {
HXLINE( 940)										ascent = ( (Float)(currentFormat->size) );
HXLINE( 941)										descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            									}
            								}
HXLINE( 944)								leading = ( (int)(currentFormat->leading) );
HXLINE( 946)								heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1520)								if ((heightValue > maxHeightValue)) {
HXLINE( 950)									maxHeightValue = heightValue;
            								}
HXLINE(1520)								if ((ascent > maxAscent)) {
HXLINE( 955)									maxAscent = ascent;
            								}
            							}
HXLINE(1520)							int i12 = _gthis->layoutGroups->get_length();
HXDLIN(1520)							while(true){
HXLINE(1520)								i12 = (i12 - 1);
HXDLIN(1520)								if (!((i12 > -1))) {
HXLINE(1520)									goto _hx_goto_111;
            								}
HXDLIN(1520)								 ::openfl::_internal::text::TextLayoutGroup lg6 = _gthis->layoutGroups->get(i12).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1520)								if ((lg6->lineIndex < lineIndex)) {
HXLINE(1520)									goto _hx_goto_111;
            								}
HXDLIN(1520)								if ((lg6->lineIndex > lineIndex)) {
HXLINE(1520)									continue;
            								}
HXDLIN(1520)								lg6->ascent = maxAscent;
HXDLIN(1520)								lg6->height = ( (Float)(maxHeightValue) );
            							}
            							_hx_goto_111:;
HXDLIN(1520)							offsetY = (offsetY + maxHeightValue);
HXLINE(1132)							maxAscent = ((Float)0.0);
HXLINE(1133)							maxHeightValue = 0;
HXLINE(1520)							lineIndex = (lineIndex + 1);
HXLINE(1136)							offsetX = ( (Float)(2) );
            						}
            					}
HXLINE(1523)					textIndex = (textIndex + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

::String TextEngine_obj::restrictText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1537_restrictText)
HXLINE(1538)		if (hx::IsNull( value )) {
HXLINE(1540)			return value;
            		}
HXLINE(1543)		if (hx::IsNotNull( this->_hx___restrictRegexp )) {
HXLINE(1545)			value = this->_hx___restrictRegexp->split(value)->join(HX_("",00,00,00,00));
            		}
HXLINE(1554)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,restrictText,return )

void TextEngine_obj::setTextAlignment(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1558_setTextAlignment)
HXLINE(1559)		int lineIndex = -1;
HXLINE(1560)		Float offsetX = ((Float)0.0);
HXLINE(1561)		Float totalWidth = (this->width - ( (Float)(4) ));
HXLINE(1562)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1562)		int lineLength;
HXLINE(1563)		bool lineMeasurementsDirty = false;
HXLINE(1565)		{
HXLINE(1565)			int _g = 0;
HXDLIN(1565)			int _g1 = this->layoutGroups->get_length();
HXDLIN(1565)			while((_g < _g1)){
HXLINE(1565)				_g = (_g + 1);
HXDLIN(1565)				int i = (_g - 1);
HXLINE(1567)				group = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1569)				if ((group->lineIndex != lineIndex)) {
HXLINE(1571)					lineIndex = group->lineIndex;
HXLINE(1573)					 ::Dynamic _hx_switch_0 = group->format->align;
            					if (  (_hx_switch_0==0) ){
HXLINE(1576)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1578)							offsetX = ( (Float)(::Math_obj::round(((totalWidth - this->lineWidths->get(lineIndex)) / ( (Float)(2) )))) );
            						}
            						else {
HXLINE(1582)							offsetX = ( (Float)(0) );
            						}
HXLINE(1576)						goto _hx_goto_115;
            					}
            					if (  (_hx_switch_0==2) ){
HXLINE(1596)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1598)							lineLength = 1;
HXLINE(1600)							{
HXLINE(1600)								int _g2 = (i + 1);
HXDLIN(1600)								int _g11 = this->layoutGroups->get_length();
HXDLIN(1600)								while((_g2 < _g11)){
HXLINE(1600)									_g2 = (_g2 + 1);
HXDLIN(1600)									int j = (_g2 - 1);
HXLINE(1602)									if ((this->layoutGroups->get(j).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->lineIndex == lineIndex)) {
HXLINE(1604)										bool _hx_tmp;
HXDLIN(1604)										if ((j != 0)) {
HXLINE(1604)											::String _hx_tmp1 = this->text;
HXDLIN(1604)											_hx_tmp = hx::IsEq( ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(_hx_tmp1,(this->layoutGroups->get(j).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->startIndex - 1)),32 );
            										}
            										else {
HXLINE(1604)											_hx_tmp = true;
            										}
HXDLIN(1604)										if (_hx_tmp) {
HXLINE(1606)											lineLength = (lineLength + 1);
            										}
            									}
            									else {
HXLINE(1611)										goto _hx_goto_116;
            									}
            								}
            								_hx_goto_116:;
            							}
HXLINE(1615)							if ((lineLength > 1)) {
HXLINE(1617)								group = this->layoutGroups->get(((i + lineLength) - 1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1619)								 ::Dynamic endChar = ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(this->text,group->endIndex);
HXLINE(1620)								bool _hx_tmp2;
HXDLIN(1620)								bool _hx_tmp3;
HXDLIN(1620)								int group1 = group->endIndex;
HXDLIN(1620)								if ((group1 < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))) {
HXLINE(1620)									_hx_tmp3 = hx::IsNotEq( endChar,10 );
            								}
            								else {
HXLINE(1620)									_hx_tmp3 = false;
            								}
HXDLIN(1620)								if (_hx_tmp3) {
HXLINE(1620)									_hx_tmp2 = hx::IsNotEq( endChar,13 );
            								}
            								else {
HXLINE(1620)									_hx_tmp2 = false;
            								}
HXDLIN(1620)								if (_hx_tmp2) {
HXLINE(1622)									offsetX = ((totalWidth - this->lineWidths->get(lineIndex)) / ( (Float)((lineLength - 1)) ));
HXLINE(1623)									lineMeasurementsDirty = true;
HXLINE(1625)									int j1 = 1;
HXLINE(1626)									while(true){
HXLINE(1635)										 ::openfl::_internal::text::TextLayoutGroup _hx_tmp4 = this->layoutGroups->get((i + j1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN(1635)										_hx_tmp4->offsetX = (_hx_tmp4->offsetX + (offsetX * ( (Float)(j1) )));
HXLINE(1637)										j1 = (j1 + 1);
HXLINE(1626)										if (!((j1 < lineLength))) {
HXLINE(1626)											goto _hx_goto_117;
            										}
            									}
            									_hx_goto_117:;
            								}
            							}
            						}
HXLINE(1642)						offsetX = ( (Float)(0) );
HXLINE(1595)						goto _hx_goto_115;
            					}
            					if (  (_hx_switch_0==4) ){
HXLINE(1586)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1588)							offsetX = ( (Float)(::Math_obj::round((totalWidth - this->lineWidths->get(lineIndex)))) );
            						}
            						else {
HXLINE(1592)							offsetX = ( (Float)(0) );
            						}
HXLINE(1586)						goto _hx_goto_115;
            					}
            					/* default */{
HXLINE(1645)						offsetX = ( (Float)(0) );
            					}
            					_hx_goto_115:;
            				}
HXLINE(1649)				if ((offsetX > 0)) {
HXLINE(1651)					 ::openfl::_internal::text::TextLayoutGroup group2 = group;
HXDLIN(1651)					group2->offsetX = (group2->offsetX + offsetX);
            				}
            			}
            		}
HXLINE(1655)		if (lineMeasurementsDirty) {
HXLINE(1659)			this->getLineMeasurements();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

::String TextEngine_obj::trimText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1664_trimText)
HXLINE(1665)		if (hx::IsNull( value )) {
HXLINE(1667)			return value;
            		}
HXLINE(1670)		bool _hx_tmp;
HXDLIN(1670)		if ((this->maxChars > 0)) {
HXLINE(1670)			int _hx_tmp1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(value);
HXDLIN(1670)			_hx_tmp = (_hx_tmp1 > this->maxChars);
            		}
            		else {
HXLINE(1670)			_hx_tmp = false;
            		}
HXDLIN(1670)		if (_hx_tmp) {
HXLINE(1672)			value = ::lime::text::_UTF8String::UTF8String_Impl__obj::substr(value,0,this->maxChars);
            		}
HXLINE(1675)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,trimText,return )

void TextEngine_obj::update(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1679_update)
HXLINE(1680)		bool _hx_tmp;
HXDLIN(1680)		if (hx::IsNotNull( this->text )) {
HXLINE(1680)			_hx_tmp = (this->textFormatRanges->get_length() == 0);
            		}
            		else {
HXLINE(1680)			_hx_tmp = true;
            		}
HXDLIN(1680)		if (_hx_tmp) {
HXLINE(1682)			this->lineAscents->set_length(0);
HXLINE(1683)			this->lineBreaks->set_length(0);
HXLINE(1684)			this->lineDescents->set_length(0);
HXLINE(1685)			this->lineLeadings->set_length(0);
HXLINE(1686)			this->lineHeights->set_length(0);
HXLINE(1687)			this->lineWidths->set_length(0);
HXLINE(1688)			this->layoutGroups->set_length(0);
HXLINE(1690)			this->textWidth = ( (Float)(0) );
HXLINE(1691)			this->textHeight = ( (Float)(0) );
HXLINE(1692)			this->numLines = 1;
HXLINE(1693)			this->maxScrollH = 0;
HXLINE(1694)			this->maxScrollV = 1;
HXLINE(1695)			this->bottomScrollV = 1;
            		}
            		else {
HXLINE(1699)			this->getLayoutGroups();
HXLINE(1700)			this->getLineMeasurements();
HXLINE(1701)			this->setTextAlignment();
            		}
HXLINE(1704)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

::String TextEngine_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1709_set_restrict)
HXLINE(1710)		if (::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->restrict,value)) {
HXLINE(1712)			return this->restrict;
            		}
HXLINE(1715)		this->restrict = value;
HXLINE(1717)		bool _hx_tmp;
HXDLIN(1717)		if (hx::IsNotNull( this->restrict )) {
HXLINE(1717)			_hx_tmp = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->restrict) == 0);
            		}
            		else {
HXLINE(1717)			_hx_tmp = true;
            		}
HXDLIN(1717)		if (_hx_tmp) {
HXLINE(1719)			this->_hx___restrictRegexp = null();
            		}
            		else {
HXLINE(1723)			this->_hx___restrictRegexp = this->createRestrictRegexp(value);
            		}
HXLINE(1726)		return this->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_restrict,return )

::String TextEngine_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1731_set_text)
HXDLIN(1731)		return (this->text = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_text,return )

int TextEngine_obj::UTF8_TAB;

int TextEngine_obj::UTF8_ENDLINE;

int TextEngine_obj::UTF8_SPACE;

int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_172_findFont)
HXLINE( 176)		{
HXLINE( 176)			int _g = 0;
HXDLIN( 176)			::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 176)			while((_g < _g1->length)){
HXLINE( 176)				 ::openfl::text::Font registeredFont = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 176)				_g = (_g + 1);
HXLINE( 178)				if (hx::IsNull( registeredFont )) {
HXLINE( 178)					continue;
            				}
HXLINE( 180)				bool _hx_tmp;
HXDLIN( 180)				if ((registeredFont->name != name)) {
HXLINE( 181)					if (hx::IsNotNull( registeredFont->_hx___fontPath )) {
HXLINE( 182)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 180)							_hx_tmp = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 180)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 180)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 180)					_hx_tmp = true;
            				}
HXDLIN( 180)				if (_hx_tmp) {
HXLINE( 184)					if (registeredFont->_hx___initialize()) {
HXLINE( 186)						return registeredFont;
            					}
            				}
            			}
            		}
HXLINE( 195)		 ::openfl::text::Font font = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 197)		if (hx::IsNotNull( font )) {
HXLINE( 199)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 200)			return font;
            		}
HXLINE( 204)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

 ::openfl::text::Font TextEngine_obj::findFontVariant( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_208_findFontVariant)
HXLINE( 209)		::String fontName = format->font;
HXLINE( 210)		 ::Dynamic bold = format->bold;
HXLINE( 211)		 ::Dynamic italic = format->italic;
HXLINE( 213)		if (hx::IsNull( fontName )) {
HXLINE( 213)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 214)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 216)		bool _hx_tmp;
HXDLIN( 216)		bool _hx_tmp1;
HXDLIN( 216)		if (( (bool)(bold) )) {
HXLINE( 216)			_hx_tmp1 = ( (bool)(italic) );
            		}
            		else {
HXLINE( 216)			_hx_tmp1 = false;
            		}
HXDLIN( 216)		if (_hx_tmp1) {
HXLINE( 216)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 216)			_hx_tmp = false;
            		}
HXDLIN( 216)		if (_hx_tmp) {
HXLINE( 218)			return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 220)			bool _hx_tmp2;
HXDLIN( 220)			if (( (bool)(bold) )) {
HXLINE( 220)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 220)				_hx_tmp2 = false;
            			}
HXDLIN( 220)			if (_hx_tmp2) {
HXLINE( 222)				return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 224)				bool _hx_tmp3;
HXDLIN( 224)				if (( (bool)(italic) )) {
HXLINE( 224)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 224)					_hx_tmp3 = false;
            				}
HXDLIN( 224)				if (_hx_tmp3) {
HXLINE( 226)					return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            			}
            		}
HXLINE( 229)		return ::openfl::_internal::text::TextEngine_obj::findFont(fontName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFontVariant,return )

Float TextEngine_obj::getFormatHeight( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_258_getFormatHeight)
HXLINE( 259)		Float ascent;
HXDLIN( 259)		Float descent;
HXLINE( 265)		 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(format);
HXLINE( 267)		if (hx::IsNotNull( format->_hx___ascent )) {
HXLINE( 269)			ascent = (( (Float)(format->size) ) * ( (Float)(format->_hx___ascent) ));
HXLINE( 270)			descent = (( (Float)(format->size) ) * ( (Float)(format->_hx___descent) ));
            		}
            		else {
HXLINE( 272)			bool _hx_tmp;
HXDLIN( 272)			if (hx::IsNotNull( font )) {
HXLINE( 272)				_hx_tmp = (font->unitsPerEM != 0);
            			}
            			else {
HXLINE( 272)				_hx_tmp = false;
            			}
HXDLIN( 272)			if (_hx_tmp) {
HXLINE( 275)				ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(format->size) ));
HXLINE( 276)				descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(format->size) )));
            			}
            			else {
HXLINE( 284)				ascent = ( (Float)(format->size) );
HXLINE( 285)				descent = (( (Float)(format->size) ) * ((Float)0.185));
            			}
            		}
HXLINE( 259)		int leading = ( (int)(format->leading) );
HXLINE( 290)		return ((ascent + descent) + leading);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFormatHeight,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_294_getFont)
HXLINE( 295)		::String fontName = format->font;
HXLINE( 296)		 ::Dynamic bold = format->bold;
HXLINE( 297)		 ::Dynamic italic = format->italic;
HXLINE( 299)		if (hx::IsNull( fontName )) {
HXLINE( 299)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 300)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 302)		bool _hx_tmp;
HXDLIN( 302)		bool _hx_tmp1;
HXDLIN( 302)		if (( (bool)(bold) )) {
HXLINE( 302)			_hx_tmp1 = ( (bool)(italic) );
            		}
            		else {
HXLINE( 302)			_hx_tmp1 = false;
            		}
HXDLIN( 302)		if (_hx_tmp1) {
HXLINE( 302)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 302)			_hx_tmp = false;
            		}
HXDLIN( 302)		if (_hx_tmp) {
HXLINE( 304)			fontName = (fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94));
HXLINE( 305)			bold = false;
HXLINE( 306)			italic = false;
            		}
            		else {
HXLINE( 308)			bool _hx_tmp2;
HXDLIN( 308)			if (( (bool)(bold) )) {
HXLINE( 308)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 308)				_hx_tmp2 = false;
            			}
HXDLIN( 308)			if (_hx_tmp2) {
HXLINE( 310)				fontName = (fontNamePrefix + HX_(" Bold",c5,3d,c7,98));
HXLINE( 311)				bold = false;
            			}
            			else {
HXLINE( 313)				bool _hx_tmp3;
HXDLIN( 313)				if (( (bool)(italic) )) {
HXLINE( 313)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 313)					_hx_tmp3 = false;
            				}
HXDLIN( 313)				if (_hx_tmp3) {
HXLINE( 315)					fontName = (fontNamePrefix + HX_(" Italic",30,7b,a7,6d));
HXLINE( 316)					italic = false;
            				}
            				else {
HXLINE( 322)					bool _hx_tmp4;
HXDLIN( 322)					if (( (bool)(bold) )) {
HXLINE( 322)						if ((fontName.indexOf(HX_(" Bold ",bb,ce,8e,15),null()) <= -1)) {
HXLINE( 322)							_hx_tmp4 = ::StringTools_obj::endsWith(fontName,HX_(" Bold",c5,3d,c7,98));
            						}
            						else {
HXLINE( 322)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE( 322)						_hx_tmp4 = false;
            					}
HXDLIN( 322)					if (_hx_tmp4) {
HXLINE( 324)						bold = false;
            					}
HXLINE( 327)					bool _hx_tmp5;
HXDLIN( 327)					if (( (bool)(italic) )) {
HXLINE( 327)						if ((fontName.indexOf(HX_(" Italic ",f0,4e,e4,84),null()) <= -1)) {
HXLINE( 327)							_hx_tmp5 = ::StringTools_obj::endsWith(fontName,HX_(" Italic",30,7b,a7,6d));
            						}
            						else {
HXLINE( 327)							_hx_tmp5 = true;
            						}
            					}
            					else {
HXLINE( 327)						_hx_tmp5 = false;
            					}
HXDLIN( 327)					if (_hx_tmp5) {
HXLINE( 329)						italic = false;
            					}
            				}
            			}
            		}
HXLINE( 333)		::String font;
HXDLIN( 333)		if (( (bool)(italic) )) {
HXLINE( 333)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 333)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 334)		font = (font + HX_("normal ",19,70,da,2b));
HXLINE( 335)		::String font1;
HXDLIN( 335)		if (( (bool)(bold) )) {
HXLINE( 335)			font1 = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 335)			font1 = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 335)		font = (font + font1);
HXLINE( 336)		font = (font + (format->size + HX_("px",08,62,00,00)));
HXLINE( 337)		font = (font + ((HX_("/",2f,00,00,00) + ((format->leading + format->size) + 3)) + HX_("px ",18,65,55,00)));
HXLINE( 339)		::String font2;
HXDLIN( 339)		::String _hx_switch_0 = fontName;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 339)			font2 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 339)			goto _hx_goto_127;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 339)			font2 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 339)			goto _hx_goto_127;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 339)			font2 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 339)			goto _hx_goto_127;
            		}
            		/* default */{
HXLINE( 339)			font2 = ((HX_("'",27,00,00,00) +  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\\s'\"]+(.*)[\\s'\"]+$",eb,e4,eb,f5),HX_("",00,00,00,00))->replace(fontName,HX_("$1",8d,1f,00,00))) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_127:;
HXDLIN( 339)		font = (font + (HX_("",00,00,00,00) + font2));
HXLINE( 347)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_351_getFontInstance)
HXLINE( 355)		 ::openfl::text::Font instance = null();
HXLINE( 356)		::Array< ::String > fontList = null();
HXLINE( 358)		bool _hx_tmp;
HXDLIN( 358)		if (hx::IsNotNull( format )) {
HXLINE( 358)			_hx_tmp = hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 358)			_hx_tmp = false;
            		}
HXDLIN( 358)		if (_hx_tmp) {
HXLINE( 360)			if (::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->exists(format->font)) {
HXLINE( 362)				return ( ( ::openfl::text::Font)(::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->get(format->font)) );
            			}
HXLINE( 365)			instance = ::openfl::_internal::text::TextEngine_obj::findFontVariant(format);
HXLINE( 366)			if (hx::IsNotNull( instance )) {
HXLINE( 366)				return instance;
            			}
HXLINE( 368)			::String systemFontDirectory = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 370)			::String _hx_switch_0 = format->font;
            			if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 397)				fontList = ::Array_obj< ::String >::__new(8)->init(0,(systemFontDirectory + HX_("/Arial.ttf",0c,14,61,7a)))->init(1,(systemFontDirectory + HX_("/Helvetica.ttf",5a,6c,ff,0c)))->init(2,(systemFontDirectory + HX_("/Cache/Arial.ttf",5f,69,b5,54)))->init(3,(systemFontDirectory + HX_("/Cache/Helvetica.ttf",2d,67,e4,7a)))->init(4,(systemFontDirectory + HX_("/Core/Arial.ttf",ba,c6,65,25)))->init(5,(systemFontDirectory + HX_("/Core/Helvetica.ttf",08,0e,fe,0c)))->init(6,(systemFontDirectory + HX_("/CoreAddition/Arial.ttf",d6,48,2f,75)))->init(7,(systemFontDirectory + HX_("/CoreAddition/Helvetica.ttf",24,ce,e8,ab)));
HXDLIN( 397)				goto _hx_goto_129;
            			}
            			if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 415)				goto _hx_goto_129;
            			}
            			if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 444)				fontList = ::Array_obj< ::String >::__new(8)->init(0,(systemFontDirectory + HX_("/Courier New.ttf",d6,e1,80,a0)))->init(1,(systemFontDirectory + HX_("/Courier.ttf",b6,7e,38,40)))->init(2,(systemFontDirectory + HX_("/Cache/Courier New.ttf",69,77,b8,0d)))->init(3,(systemFontDirectory + HX_("/Cache/Courier.ttf",c9,0e,4b,98)))->init(4,(systemFontDirectory + HX_("/Core/Courier New.ttf",04,cb,ad,96)))->init(5,(systemFontDirectory + HX_("/Core/Courier.ttf",e4,b8,d1,3b)))->init(6,(systemFontDirectory + HX_("/CoreAddition/Courier New.ttf",20,ca,dd,d5)))->init(7,(systemFontDirectory + HX_("/CoreAddition/Courier.ttf",00,fa,94,32)));
HXDLIN( 444)				goto _hx_goto_129;
            			}
            			/* default */{
HXLINE( 463)				fontList = ::Array_obj< ::String >::__new(1)->init(0,((systemFontDirectory + HX_("/",2f,00,00,00)) + format->font));
            			}
            			_hx_goto_129:;
HXLINE( 466)			if (hx::IsNotNull( fontList )) {
HXLINE( 468)				int _g1 = 0;
HXDLIN( 468)				while((_g1 < fontList->length)){
HXLINE( 468)					::String font = fontList->__get(_g1);
HXDLIN( 468)					_g1 = (_g1 + 1);
HXLINE( 470)					instance = ::openfl::_internal::text::TextEngine_obj::findFont(font);
HXLINE( 472)					if (hx::IsNotNull( instance )) {
HXLINE( 474)						::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 475)						return instance;
            					}
            				}
            			}
HXLINE( 480)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(HX_("_serif",be,66,15,76));
HXLINE( 481)			if (hx::IsNotNull( instance )) {
HXLINE( 481)				return instance;
            			}
            		}
HXLINE( 484)		::String systemFontDirectory1 = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 510)		fontList = ::Array_obj< ::String >::__new(12)->init(0,(systemFontDirectory1 + HX_("/Georgia.ttf",67,ae,93,4b)))->init(1,(systemFontDirectory1 + HX_("/Times.ttf",0f,38,17,67)))->init(2,(systemFontDirectory1 + HX_("/Times New Roman.ttf",2c,b8,6d,0c)))->init(3,(systemFontDirectory1 + HX_("/Cache/Georgia.ttf",7a,3e,a6,a3)))->init(4,(systemFontDirectory1 + HX_("/Cache/Times.ttf",62,8d,6b,41)))->init(5,(systemFontDirectory1 + HX_("/Cache/Times New Roman.ttf",3f,13,7b,39)))->init(6,(systemFontDirectory1 + HX_("/Core/Georgia.ttf",95,e8,2c,47)))->init(7,(systemFontDirectory1 + HX_("/Core/Times.ttf",bd,ea,1b,12)))->init(8,(systemFontDirectory1 + HX_("/Core/Times New Roman.ttf",5a,d0,31,62)))->init(9,(systemFontDirectory1 + HX_("/CoreAddition/Georgia.ttf",b1,29,f0,3d)))->init(10,(systemFontDirectory1 + HX_("/CoreAddition/Times.ttf",d9,6c,e5,61)))->init(11,(systemFontDirectory1 + HX_("/CoreAddition/Times New Roman.ttf",76,8d,05,b2)));
HXLINE( 528)		{
HXLINE( 528)			int _g = 0;
HXDLIN( 528)			while((_g < fontList->length)){
HXLINE( 528)				::String font1 = fontList->__get(_g);
HXDLIN( 528)				_g = (_g + 1);
HXLINE( 530)				instance = ::openfl::_internal::text::TextEngine_obj::findFont(font1);
HXLINE( 532)				if (hx::IsNotNull( instance )) {
HXLINE( 534)					::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 535)					return instance;
            				}
            			}
            		}
HXLINE( 539)		::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,null());
HXLINE( 542)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField) {
	hx::ObjectPtr< TextEngine_obj > __this = new TextEngine_obj();
	__this->__construct(textField);
	return __this;
}

hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::text::TextField textField) {
	TextEngine_obj *__this = (TextEngine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextEngine_obj), true, "openfl._internal.text.TextEngine"));
	*(void **)__this = TextEngine_obj::_hx_vtable;
	__this->__construct(textField);
	return __this;
}

TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textBounds,"textBounds");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textBounds,"textBounds");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

hx::Val TextEngine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return hx::Val( scrollH ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return hx::Val( scrollV ); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return hx::Val( getLine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return hx::Val( autoSize ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return hx::Val( maxChars ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( numLines ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return hx::Val( restrict ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return hx::Val( wordWrap ); }
		if (HX_FIELD_EQ(inName,"trimText") ) { return hx::Val( trimText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return hx::Val( multiline ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return hx::Val( sharpness ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return hx::Val( textWidth ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( caretIndex ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return hx::Val( lineBreaks ); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return hx::Val( lineWidths ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return hx::Val( maxScrollH ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return hx::Val( maxScrollV ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"textBounds") ) { return hx::Val( textBounds ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( textHeight ); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return hx::Val( _hx___hasFocus ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return hx::Val( gridFitType ); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return hx::Val( lineAscents ); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return hx::Val( lineHeights ); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return hx::Val( _hx___isKeyDown ); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return hx::Val( _hx___cairoFont ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return hx::Val( layoutGroups ); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return hx::Val( lineDescents ); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return hx::Val( lineLeadings ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return hx::Val( _hx___textLayout ); }
		if (HX_FIELD_EQ(inName,"restrictText") ) { return hx::Val( restrictText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return hx::Val( antiAliasType ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return hx::Val( bottomScrollV ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return hx::Val( _hx___measuredWidth ); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return hx::Val( getLayoutGroups_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return hx::Val( textFormatRanges ); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return hx::Val( _hx___measuredHeight ); }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { return hx::Val( _hx___restrictRegexp ); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return hx::Val( _hx___selectionStart ); }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { return hx::Val( _hx___useIntAdvances ); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return hx::Val( setTextAlignment_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return hx::Val( getLineBreakIndex_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return hx::Val( getLineMeasurements_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createRestrictRegexp") ) { return hx::Val( createRestrictRegexp_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = ( _hx___defaultFonts ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"findFontVariant") ) { outValue = findFontVariant_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFormatHeight") ) { outValue = getFormatHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

hx::Val TextEngine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { scrollV=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) );restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textBounds") ) { textBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::openfl::_internal::text::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { _hx___restrictRegexp=inValue.Cast<  ::EReg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { _hx___useIntAdvances=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("antiAliasType",68,c4,fa,e7));
	outFields->push(HX_("autoSize",d0,8f,79,2f));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("backgroundColor",95,4e,47,0d));
	outFields->push(HX_("border",ec,4c,1a,64));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("bottomScrollV",fe,f7,87,8b));
	outFields->push(HX_("bounds",75,86,1d,66));
	outFields->push(HX_("caretIndex",8f,b6,5b,dd));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("gridFitType",05,f3,13,b4));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("layoutGroups",9e,a2,6c,37));
	outFields->push(HX_("lineAscents",45,0c,c2,3e));
	outFields->push(HX_("lineBreaks",e8,fd,5b,ea));
	outFields->push(HX_("lineDescents",0d,ad,64,49));
	outFields->push(HX_("lineLeadings",01,23,97,76));
	outFields->push(HX_("lineHeights",18,99,8e,3e));
	outFields->push(HX_("lineWidths",c1,8a,a4,20));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("maxScrollH",57,ad,fc,9a));
	outFields->push(HX_("maxScrollV",65,ad,fc,9a));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("numLines",d9,f1,11,32));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("scrollH",9b,33,d8,30));
	outFields->push(HX_("scrollV",a9,33,d8,30));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("sharpness",81,22,25,1b));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("textBounds",02,07,0e,9d));
	outFields->push(HX_("textHeight",74,88,3c,39));
	outFields->push(HX_("textFormatRanges",fa,0e,49,a2));
	outFields->push(HX_("textWidth",19,46,50,63));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("__cursorTimer",ef,59,8f,e1));
	outFields->push(HX_("__hasFocus",3e,1d,1a,34));
	outFields->push(HX_("__isKeyDown",b7,2f,72,ce));
	outFields->push(HX_("__measuredHeight",ed,b6,23,42));
	outFields->push(HX_("__measuredWidth",c0,49,ec,02));
	outFields->push(HX_("__restrictRegexp",45,9f,ae,a9));
	outFields->push(HX_("__selectionStart",96,e3,b9,43));
	outFields->push(HX_("__showCursor",d3,ae,f0,e0));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	outFields->push(HX_("__textLayout",57,aa,3c,c8));
	outFields->push(HX_("__texture",bb,19,2f,20));
	outFields->push(HX_("__useIntAdvances",d9,17,72,7d));
	outFields->push(HX_("__cairoFont",57,e7,b5,28));
	outFields->push(HX_("__font",ef,c0,b8,f2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_("antiAliasType",68,c4,fa,e7)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,autoSize),HX_("autoSize",d0,8f,79,2f)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_("background",ee,93,1d,26)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_("backgroundColor",95,4e,47,0d)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_("border",ec,4c,1a,64)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_("borderColor",d7,3c,d5,d6)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_("bottomScrollV",fe,f7,87,8b)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextEngine_obj,bounds),HX_("bounds",75,86,1d,66)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_("caretIndex",8f,b6,5b,dd)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_("embedFonts",2b,c7,e1,8e)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,gridFitType),HX_("gridFitType",05,f3,13,b4)},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_("layoutGroups",9e,a2,6c,37)},
	{hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineAscents),HX_("lineAscents",45,0c,c2,3e)},
	{hx::fsObject /*  ::openfl::_Vector::IntVector */ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_("lineBreaks",e8,fd,5b,ea)},
	{hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineDescents),HX_("lineDescents",0d,ad,64,49)},
	{hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_("lineLeadings",01,23,97,76)},
	{hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineHeights),HX_("lineHeights",18,99,8e,3e)},
	{hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineWidths),HX_("lineWidths",c1,8a,a4,20)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_("maxChars",99,ef,d0,ef)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_("maxScrollH",57,ad,fc,9a)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_("maxScrollV",65,ad,fc,9a)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_("multiline",ed,d2,11,9e)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_("numLines",d9,f1,11,32)},
	{hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_("restrict",3c,cb,9e,f1)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_("scrollH",9b,33,d8,30)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_("scrollV",a9,33,d8,30)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_("sharpness",81,22,25,1b)},
	{hx::fsString,(int)offsetof(TextEngine_obj,text),HX_("text",ad,cc,f9,4c)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextEngine_obj,textBounds),HX_("textBounds",02,07,0e,9d)},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_("textHeight",74,88,3c,39)},
	{hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_("textFormatRanges",fa,0e,49,a2)},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_("textWidth",19,46,50,63)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_("wordWrap",b4,14,db,00)},
	{hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(TextEngine_obj,textField),HX_("textField",cd,24,81,99)},
	{hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_("__cursorTimer",ef,59,8f,e1)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_("__hasFocus",3e,1d,1a,34)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_("__isKeyDown",b7,2f,72,ce)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_("__measuredHeight",ed,b6,23,42)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_("__measuredWidth",c0,49,ec,02)},
	{hx::fsObject /*  ::EReg */ ,(int)offsetof(TextEngine_obj,_hx___restrictRegexp),HX_("__restrictRegexp",45,9f,ae,a9)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_("__selectionStart",96,e3,b9,43)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_("__showCursor",d3,ae,f0,e0)},
	{hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{hx::fsObject /*  ::openfl::_internal::text::TextLayout */ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_("__textLayout",57,aa,3c,c8)},
	{hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_("__texture",bb,19,2f,20)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,_hx___useIntAdvances),HX_("__useIntAdvances",d9,17,72,7d)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_("__cairoFont",57,e7,b5,28)},
	{hx::fsObject /*  ::openfl::text::Font */ ,(int)offsetof(TextEngine_obj,_hx___font),HX_("__font",ef,c0,b8,f2)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_("UTF8_TAB",07,d5,41,1d)},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_("UTF8_ENDLINE",01,29,41,cf)},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_("UTF8_SPACE",f8,7b,a9,c7)},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_("UTF8_HYPHEN",60,3c,3f,bf)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_("__defaultFonts",63,76,ad,da)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_("antiAliasType",68,c4,fa,e7),
	HX_("autoSize",d0,8f,79,2f),
	HX_("background",ee,93,1d,26),
	HX_("backgroundColor",95,4e,47,0d),
	HX_("border",ec,4c,1a,64),
	HX_("borderColor",d7,3c,d5,d6),
	HX_("bottomScrollV",fe,f7,87,8b),
	HX_("bounds",75,86,1d,66),
	HX_("caretIndex",8f,b6,5b,dd),
	HX_("embedFonts",2b,c7,e1,8e),
	HX_("gridFitType",05,f3,13,b4),
	HX_("height",e7,07,4c,02),
	HX_("layoutGroups",9e,a2,6c,37),
	HX_("lineAscents",45,0c,c2,3e),
	HX_("lineBreaks",e8,fd,5b,ea),
	HX_("lineDescents",0d,ad,64,49),
	HX_("lineLeadings",01,23,97,76),
	HX_("lineHeights",18,99,8e,3e),
	HX_("lineWidths",c1,8a,a4,20),
	HX_("maxChars",99,ef,d0,ef),
	HX_("maxScrollH",57,ad,fc,9a),
	HX_("maxScrollV",65,ad,fc,9a),
	HX_("multiline",ed,d2,11,9e),
	HX_("numLines",d9,f1,11,32),
	HX_("restrict",3c,cb,9e,f1),
	HX_("scrollH",9b,33,d8,30),
	HX_("scrollV",a9,33,d8,30),
	HX_("selectable",96,b6,2a,c4),
	HX_("sharpness",81,22,25,1b),
	HX_("text",ad,cc,f9,4c),
	HX_("textBounds",02,07,0e,9d),
	HX_("textHeight",74,88,3c,39),
	HX_("textFormatRanges",fa,0e,49,a2),
	HX_("textWidth",19,46,50,63),
	HX_("type",ba,f2,08,4d),
	HX_("width",06,b6,62,ca),
	HX_("wordWrap",b4,14,db,00),
	HX_("textField",cd,24,81,99),
	HX_("__cursorTimer",ef,59,8f,e1),
	HX_("__hasFocus",3e,1d,1a,34),
	HX_("__isKeyDown",b7,2f,72,ce),
	HX_("__measuredHeight",ed,b6,23,42),
	HX_("__measuredWidth",c0,49,ec,02),
	HX_("__restrictRegexp",45,9f,ae,a9),
	HX_("__selectionStart",96,e3,b9,43),
	HX_("__showCursor",d3,ae,f0,e0),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("__textLayout",57,aa,3c,c8),
	HX_("__texture",bb,19,2f,20),
	HX_("__useIntAdvances",d9,17,72,7d),
	HX_("__cairoFont",57,e7,b5,28),
	HX_("__font",ef,c0,b8,f2),
	HX_("createRestrictRegexp",41,d0,6b,e1),
	HX_("getBounds",ab,0f,74,e2),
	HX_("getLine",aa,c7,35,1a),
	HX_("getLineBreakIndex",1d,16,36,36),
	HX_("getLineMeasurements",c1,9f,81,56),
	HX_("getLayoutGroups",54,f8,56,5a),
	HX_("restrictText",09,12,3e,34),
	HX_("setTextAlignment",74,0f,33,62),
	HX_("trimText",af,ae,63,65),
	HX_("update",09,86,05,87),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("set_text",aa,e1,11,7b),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_("UTF8_TAB",07,d5,41,1d),
	HX_("UTF8_ENDLINE",01,29,41,cf),
	HX_("UTF8_SPACE",f8,7b,a9,c7),
	HX_("UTF8_HYPHEN",60,3c,3f,bf),
	HX_("__defaultFonts",63,76,ad,da),
	HX_("findFont",a8,6a,54,96),
	HX_("findFontVariant",bd,22,bb,b2),
	HX_("getFormatHeight",34,24,4b,62),
	HX_("getFont",85,0d,43,16),
	HX_("getFontInstance",3a,76,96,9e),
	::String(null())
};

void TextEngine_obj::__register()
{
	TextEngine_obj _hx_dummy;
	TextEngine_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.text.TextEngine",60,7a,88,a0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_33_boot)
HXDLIN(  33)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("__cairoFont",57,e7,b5,28), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))))
            			->setFixed(1,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_35_boot)
HXDLIN(  35)		UTF8_TAB = 9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_36_boot)
HXDLIN(  36)		UTF8_ENDLINE = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_37_boot)
HXDLIN(  37)		UTF8_SPACE = 32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_38_boot)
HXDLIN(  38)		UTF8_HYPHEN = 45;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_39_boot)
HXDLIN(  39)		_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace text
