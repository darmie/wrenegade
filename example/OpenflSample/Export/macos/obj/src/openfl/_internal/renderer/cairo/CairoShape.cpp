// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoShape
#include <openfl/_internal/renderer/cairo/CairoShape.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_1741ef9bf1a9c806_23_render,"openfl._internal.renderer.cairo.CairoShape","render",0x363dce2a,"openfl._internal.renderer.cairo.CairoShape.render","openfl/_internal/renderer/cairo/CairoShape.hx",23,0xfc9b2624)
HX_LOCAL_STACK_FRAME(_hx_pos_1741ef9bf1a9c806_79_render,"openfl._internal.renderer.cairo.CairoShape","render",0x363dce2a,"openfl._internal.renderer.cairo.CairoShape.render","openfl/_internal/renderer/cairo/CairoShape.hx",79,0xfc9b2624)
HX_LOCAL_STACK_FRAME(_hx_pos_1741ef9bf1a9c806_18_boot,"openfl._internal.renderer.cairo.CairoShape","boot",0x8733ca06,"openfl._internal.renderer.cairo.CairoShape.boot","openfl/_internal/renderer/cairo/CairoShape.hx",18,0xfc9b2624)
HX_LOCAL_STACK_FRAME(_hx_pos_1741ef9bf1a9c806_20_boot,"openfl._internal.renderer.cairo.CairoShape","boot",0x8733ca06,"openfl._internal.renderer.cairo.CairoShape.boot","openfl/_internal/renderer/cairo/CairoShape.hx",20,0xfc9b2624)
namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{

void CairoShape_obj::__construct() { }

Dynamic CairoShape_obj::__CreateEmpty() { return new CairoShape_obj; }

void *CairoShape_obj::_hx_vtable = 0;

Dynamic CairoShape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoShape_obj > _hx_result = new CairoShape_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CairoShape_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x79fd40fa;
}

 ::lime::math::Matrix3 CairoShape_obj::sourceTransform;

void CairoShape_obj::render( ::openfl::display::DisplayObject shape, ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1741ef9bf1a9c806_23_render)
HXLINE(  25)		if (!(shape->_hx___renderable)) {
HXLINE(  25)			return;
            		}
HXLINE(  27)		Float alpha = renderer->_hx___getAlpha(shape->_hx___worldAlpha);
HXLINE(  28)		if ((alpha <= 0)) {
HXLINE(  28)			return;
            		}
HXLINE(  30)		 ::openfl::display::Graphics graphics = shape->_hx___graphics;
HXLINE(  32)		if (hx::IsNotNull( graphics )) {
HXLINE(  34)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(graphics,renderer);
HXLINE(  36)			int width = graphics->_hx___width;
HXLINE(  37)			int height = graphics->_hx___height;
HXLINE(  38)			 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXLINE(  40)			bool _hx_tmp;
HXDLIN(  40)			bool _hx_tmp1;
HXDLIN(  40)			bool _hx_tmp2;
HXDLIN(  40)			if (hx::IsNotNull( cairo )) {
HXLINE(  40)				_hx_tmp2 = graphics->_hx___visible;
            			}
            			else {
HXLINE(  40)				_hx_tmp2 = false;
            			}
HXDLIN(  40)			if (_hx_tmp2) {
HXLINE(  40)				_hx_tmp1 = (width >= 1);
            			}
            			else {
HXLINE(  40)				_hx_tmp1 = false;
            			}
HXDLIN(  40)			if (_hx_tmp1) {
HXLINE(  40)				_hx_tmp = (height >= 1);
            			}
            			else {
HXLINE(  40)				_hx_tmp = false;
            			}
HXDLIN(  40)			if (_hx_tmp) {
HXLINE(  42)				 ::openfl::geom::Matrix transform = graphics->_hx___worldTransform;
HXLINE(  43)				 ::openfl::geom::Rectangle scale9Grid = shape->_hx___worldScale9Grid;
HXLINE(  45)				renderer->_hx___setBlendMode(shape->_hx___worldBlendMode);
HXLINE(  46)				renderer->_hx___pushMaskObject(shape,null());
HXLINE(  48)				bool _hx_tmp3;
HXDLIN(  48)				bool _hx_tmp4;
HXDLIN(  48)				if (hx::IsNotNull( scale9Grid )) {
HXLINE(  48)					_hx_tmp4 = (transform->b == 0);
            				}
            				else {
HXLINE(  48)					_hx_tmp4 = false;
            				}
HXDLIN(  48)				if (_hx_tmp4) {
HXLINE(  48)					_hx_tmp3 = (transform->c == 0);
            				}
            				else {
HXLINE(  48)					_hx_tmp3 = false;
            				}
HXDLIN(  48)				if (_hx_tmp3) {
            					HX_BEGIN_LOCAL_FUNC_S6(hx::LocalFunc,_hx_Closure_0,Float,alpha, ::openfl::display::CairoRenderer,renderer, ::lime::graphics::cairo::Cairo,cairo, ::Dynamic,pattern, ::openfl::geom::Matrix,transform, ::openfl::geom::Matrix,renderTransform) HXARGC(8)
            					void _hx_run(Float sx,Float sy,Float sWidth,Float sHeight,Float dx,Float dy,Float dWidth,Float dHeight){
            						HX_STACKFRAME(&_hx_pos_1741ef9bf1a9c806_79_render)
HXLINE(  80)						renderTransform->a = (dWidth / sWidth);
HXLINE(  81)						renderTransform->d = (dHeight / sHeight);
HXLINE(  82)						renderTransform->tx = (transform->tx + dx);
HXLINE(  83)						renderTransform->ty = (transform->ty + dy);
HXLINE(  85)						renderer->applyMatrix(renderTransform,cairo);
HXLINE(  87)						::openfl::_internal::renderer::cairo::CairoShape_obj::sourceTransform->tx = sx;
HXLINE(  88)						::openfl::_internal::renderer::cairo::CairoShape_obj::sourceTransform->ty = sy;
HXLINE(  89)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(pattern,::openfl::_internal::renderer::cairo::CairoShape_obj::sourceTransform);
HXLINE(  90)						cairo->set_source(pattern);
HXLINE(  92)						cairo->save();
HXLINE(  94)						cairo->newPath();
HXLINE(  95)						cairo->rectangle(( (Float)(0) ),( (Float)(0) ),sWidth,sHeight);
HXLINE(  96)						cairo->clip();
HXLINE(  98)						if ((alpha == 1)) {
HXLINE( 100)							cairo->paint();
            						}
            						else {
HXLINE( 104)							cairo->paintWithAlpha(alpha);
            						}
HXLINE( 107)						cairo->restore();
            					}
            					HX_END_LOCAL_FUNC8((void))

HXLINE(  50)					 ::openfl::geom::Rectangle bounds = graphics->_hx___bounds;
HXLINE(  52)					 ::openfl::geom::Matrix renderTransform = ::openfl::geom::Matrix_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Matrix >();
HXLINE(  54)					Float scaleX = graphics->_hx___renderTransform->a;
HXLINE(  55)					Float scaleY = graphics->_hx___renderTransform->d;
HXLINE(  56)					Float renderScaleX = transform->a;
HXLINE(  57)					Float renderScaleY = transform->d;
HXLINE(  59)					int left = ::Math_obj::round((scale9Grid->x * scaleX));
HXLINE(  60)					int top = ::Math_obj::round((scale9Grid->y * scaleY));
HXLINE(  61)					Float right = bounds->get_right();
HXDLIN(  61)					int right1 = ::Math_obj::round(((right - scale9Grid->get_right()) * scaleX));
HXLINE(  62)					Float bottom = bounds->get_bottom();
HXDLIN(  62)					int bottom1 = ::Math_obj::round(((bottom - scale9Grid->get_bottom()) * scaleY));
HXLINE(  63)					int centerWidth = ::Math_obj::round((scale9Grid->width * scaleX));
HXLINE(  64)					int centerHeight = ::Math_obj::round((scale9Grid->height * scaleY));
HXLINE(  66)					int renderLeft = ::Math_obj::round((scale9Grid->x * renderScaleX));
HXLINE(  67)					int renderTop = ::Math_obj::round((scale9Grid->y * renderScaleY));
HXLINE(  68)					Float renderRight = bounds->get_right();
HXDLIN(  68)					int renderRight1 = ::Math_obj::round(((renderRight - scale9Grid->get_right()) * renderScaleX));
HXLINE(  69)					Float renderBottom = bounds->get_bottom();
HXDLIN(  69)					int renderBottom1 = ::Math_obj::round(((renderBottom - scale9Grid->get_bottom()) * renderScaleY));
HXLINE(  70)					int renderCenterWidth = ((::Math_obj::round((( (Float)(width) ) * renderScaleX)) - renderLeft) - renderRight1);
HXLINE(  71)					int renderCenterHeight = ((::Math_obj::round((( (Float)(height) ) * renderScaleY)) - renderTop) - renderBottom1);
HXLINE(  73)					 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(graphics->_hx___cairo->get_target());
HXLINE(  75)					::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,3);
HXLINE(  78)					 ::Dynamic drawImage =  ::Dynamic(new _hx_Closure_0(alpha,renderer,cairo,pattern,transform,renderTransform));
HXLINE( 110)					bool _hx_tmp5;
HXDLIN( 110)					if ((centerWidth != 0)) {
HXLINE( 110)						_hx_tmp5 = (centerHeight != 0);
            					}
            					else {
HXLINE( 110)						_hx_tmp5 = false;
            					}
HXDLIN( 110)					if (_hx_tmp5) {
HXLINE( 112)						drawImage(0,0,left,top,0,0,renderLeft,renderTop);
HXLINE( 113)						drawImage(left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
HXLINE( 114)						drawImage((left + centerWidth),0,right1,top,(renderLeft + renderCenterWidth),0,renderRight1,renderTop);
HXLINE( 116)						drawImage(0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
HXLINE( 117)						drawImage(left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
HXLINE( 118)						drawImage((left + centerWidth),top,right1,centerHeight,(renderLeft + renderCenterWidth),renderTop,renderRight1,renderCenterHeight);
HXLINE( 120)						drawImage(0,(top + centerHeight),left,bottom1,0,(renderTop + renderCenterHeight),renderLeft,renderBottom1);
HXLINE( 121)						drawImage(left,(top + centerHeight),centerWidth,bottom1,renderLeft,(renderTop + renderCenterHeight),renderCenterWidth,renderBottom1);
HXLINE( 122)						drawImage((left + centerWidth),(top + centerHeight),right1,bottom1,(renderLeft + renderCenterWidth),(renderTop + renderCenterHeight),renderRight1,renderBottom1);
            					}
            					else {
HXLINE( 125)						bool _hx_tmp6;
HXDLIN( 125)						if ((centerWidth == 0)) {
HXLINE( 125)							_hx_tmp6 = (centerHeight != 0);
            						}
            						else {
HXLINE( 125)							_hx_tmp6 = false;
            						}
HXDLIN( 125)						if (_hx_tmp6) {
HXLINE( 127)							int renderWidth = ((renderLeft + renderCenterWidth) + renderRight1);
HXLINE( 129)							drawImage(0,0,width,top,0,0,renderWidth,renderTop);
HXLINE( 130)							drawImage(0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
HXLINE( 131)							drawImage(0,(top + centerHeight),width,bottom1,0,(renderTop + renderCenterHeight),renderWidth,renderBottom1);
            						}
            						else {
HXLINE( 133)							bool _hx_tmp7;
HXDLIN( 133)							if ((centerHeight == 0)) {
HXLINE( 133)								_hx_tmp7 = (centerWidth != 0);
            							}
            							else {
HXLINE( 133)								_hx_tmp7 = false;
            							}
HXDLIN( 133)							if (_hx_tmp7) {
HXLINE( 135)								int renderHeight = ((renderTop + renderCenterHeight) + renderBottom1);
HXLINE( 137)								drawImage(0,0,left,height,0,0,renderLeft,renderHeight);
HXLINE( 138)								drawImage(left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
HXLINE( 139)								drawImage((left + centerWidth),0,right1,height,(renderLeft + renderCenterWidth),0,renderRight1,renderHeight);
            							}
            						}
            					}
HXLINE( 142)					::openfl::geom::Matrix_obj::_hx___pool->release(renderTransform);
            				}
            				else {
HXLINE( 146)					renderer->applyMatrix(transform,cairo);
HXLINE( 148)					 ::Dynamic _hx_tmp8 = graphics->_hx___cairo->get_target();
HXDLIN( 148)					cairo->setSourceSurface(_hx_tmp8,( (Float)(0) ),( (Float)(0) ));
HXLINE( 150)					if ((alpha >= 1)) {
HXLINE( 152)						cairo->paint();
            					}
            					else {
HXLINE( 156)						cairo->paintWithAlpha(alpha);
            					}
            				}
HXLINE( 160)				renderer->_hx___popMaskObject(shape,null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoShape_obj,render,(void))


CairoShape_obj::CairoShape_obj()
{
}

bool CairoShape_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sourceTransform") ) { outValue = ( sourceTransform ); return true; }
	}
	return false;
}

bool CairoShape_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"sourceTransform") ) { sourceTransform=ioValue.Cast<  ::lime::math::Matrix3 >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *CairoShape_obj_sMemberStorageInfo = 0;
static hx::StaticInfo CairoShape_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::lime::math::Matrix3 */ ,(void *) &CairoShape_obj::sourceTransform,HX_("sourceTransform",11,e9,32,19)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void CairoShape_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CairoShape_obj::sourceTransform,"sourceTransform");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CairoShape_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CairoShape_obj::sourceTransform,"sourceTransform");
};

#endif

hx::Class CairoShape_obj::__mClass;

static ::String CairoShape_obj_sStaticFields[] = {
	HX_("sourceTransform",11,e9,32,19),
	HX_("render",56,6b,29,05),
	::String(null())
};

void CairoShape_obj::__register()
{
	CairoShape_obj _hx_dummy;
	CairoShape_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl._internal.renderer.cairo.CairoShape",1a,eb,c9,00);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CairoShape_obj::__GetStatic;
	__mClass->mSetStaticField = &CairoShape_obj::__SetStatic;
	__mClass->mMarkFunc = CairoShape_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CairoShape_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CairoShape_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CairoShape_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoShape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CairoShape_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1741ef9bf1a9c806_18_boot)
HXDLIN(  18)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1741ef9bf1a9c806_20_boot)
HXDLIN(  20)		sourceTransform =  ::lime::math::Matrix3_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo
