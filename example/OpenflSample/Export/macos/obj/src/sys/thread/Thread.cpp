// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_sys_thread_Thread
#include <sys/thread/Thread.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_929523bef6c133ea_34_new,"sys.thread.Thread","new",0x1beab85f,"sys.thread.Thread.new","/usr/local/lib/haxe/std/cpp/_std/sys/thread/Thread.hx",34,0x29fdb453)
HX_LOCAL_STACK_FRAME(_hx_pos_929523bef6c133ea_54___compare,"sys.thread.Thread","__compare",0x3ed6dac4,"sys.thread.Thread.__compare","/usr/local/lib/haxe/std/cpp/_std/sys/thread/Thread.hx",54,0x29fdb453)
HX_LOCAL_STACK_FRAME(_hx_pos_929523bef6c133ea_46_create,"sys.thread.Thread","create",0x9b10485d,"sys.thread.Thread.create","/usr/local/lib/haxe/std/cpp/_std/sys/thread/Thread.hx",46,0x29fdb453)
namespace sys{
namespace thread{

void Thread_obj::__construct( ::Dynamic h){
            	HX_STACKFRAME(&_hx_pos_929523bef6c133ea_34_new)
HXDLIN(  34)		this->handle = h;
            	}

Dynamic Thread_obj::__CreateEmpty() { return new Thread_obj; }

void *Thread_obj::_hx_vtable = 0;

Dynamic Thread_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Thread_obj > _hx_result = new Thread_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Thread_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ff3a435;
}

int Thread_obj::__compare( ::sys::thread::Thread t){
            	HX_STACKFRAME(&_hx_pos_929523bef6c133ea_54___compare)
HXDLIN(  54)		if (hx::IsEq( this->handle,t->handle )) {
HXDLIN(  54)			return 0;
            		}
            		else {
HXDLIN(  54)			return 1;
            		}
HXDLIN(  54)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Thread_obj,__compare,return )

 ::sys::thread::Thread Thread_obj::create( ::Dynamic callb){
            	HX_GC_STACKFRAME(&_hx_pos_929523bef6c133ea_46_create)
HXDLIN(  46)		return  ::sys::thread::Thread_obj::__alloc( HX_CTX , ::__hxcpp_thread_create(callb));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Thread_obj,create,return )


Thread_obj::Thread_obj()
{
}

void Thread_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Thread);
	HX_MARK_MEMBER_NAME(handle,"handle");
	HX_MARK_END_CLASS();
}

void Thread_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(handle,"handle");
}

hx::Val Thread_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__compare") ) { return hx::Val( __compare_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Thread_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
	}
	return false;
}

hx::Val Thread_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Thread_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("handle",a8,83,fd,b7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Thread_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Thread_obj,handle),HX_("handle",a8,83,fd,b7)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Thread_obj_sStaticStorageInfo = 0;
#endif

static ::String Thread_obj_sMemberFields[] = {
	HX_("handle",a8,83,fd,b7),
	HX_("__compare",85,69,b7,04),
	::String(null()) };

hx::Class Thread_obj::__mClass;

static ::String Thread_obj_sStaticFields[] = {
	HX_("create",fc,66,0f,7c),
	::String(null())
};

void Thread_obj::__register()
{
	Thread_obj _hx_dummy;
	Thread_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("sys.thread.Thread",ed,9c,39,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Thread_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Thread_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Thread_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Thread_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Thread_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Thread_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace thread
