// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__Bytes_Bytes_Impl_
#include <lime/utils/_Bytes/Bytes_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_12__new,"lime.utils._BytePointer.BytePointer_Impl_","_new",0xc3bc293c,"lime.utils._BytePointer.BytePointer_Impl_._new","lime/utils/BytePointer.hx",12,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_18_set,"lime.utils._BytePointer.BytePointer_Impl_","set",0x582efc27,"lime.utils._BytePointer.BytePointer_Impl_.set","lime/utils/BytePointer.hx",18,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_47___arrayGet,"lime.utils._BytePointer.BytePointer_Impl_","__arrayGet",0x95acedb8,"lime.utils._BytePointer.BytePointer_Impl_.__arrayGet","lime/utils/BytePointer.hx",47,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_51___arraySet,"lime.utils._BytePointer.BytePointer_Impl_","__arraySet",0x95b608c4,"lime.utils._BytePointer.BytePointer_Impl_.__arraySet","lime/utils/BytePointer.hx",51,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_57_fromArrayBufferView,"lime.utils._BytePointer.BytePointer_Impl_","fromArrayBufferView",0xf5b7eab9,"lime.utils._BytePointer.BytePointer_Impl_.fromArrayBufferView","lime/utils/BytePointer.hx",57,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_68_fromArrayBuffer,"lime.utils._BytePointer.BytePointer_Impl_","fromArrayBuffer",0x96e06234,"lime.utils._BytePointer.BytePointer_Impl_.fromArrayBuffer","lime/utils/BytePointer.hx",68,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_80_fromBytes,"lime.utils._BytePointer.BytePointer_Impl_","fromBytes",0x6c6704e6,"lime.utils._BytePointer.BytePointer_Impl_.fromBytes","lime/utils/BytePointer.hx",80,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_85_fromBytesData,"lime.utils._BytePointer.BytePointer_Impl_","fromBytesData",0x619ef230,"lime.utils._BytePointer.BytePointer_Impl_.fromBytesData","lime/utils/BytePointer.hx",85,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_92_fromFile,"lime.utils._BytePointer.BytePointer_Impl_","fromFile",0xee6b3a61,"lime.utils._BytePointer.BytePointer_Impl_.fromFile","lime/utils/BytePointer.hx",92,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_97_fromLimeBytes,"lime.utils._BytePointer.BytePointer_Impl_","fromLimeBytes",0xd543eb11,"lime.utils._BytePointer.BytePointer_Impl_.fromLimeBytes","lime/utils/BytePointer.hx",97,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_105_toUInt8Array,"lime.utils._BytePointer.BytePointer_Impl_","toUInt8Array",0x7bcbbd71,"lime.utils._BytePointer.BytePointer_Impl_.toUInt8Array","lime/utils/BytePointer.hx",105,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_110_toUInt8ClampedArray,"lime.utils._BytePointer.BytePointer_Impl_","toUInt8ClampedArray",0x97605a47,"lime.utils._BytePointer.BytePointer_Impl_.toUInt8ClampedArray","lime/utils/BytePointer.hx",110,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_121_toInt8Array,"lime.utils._BytePointer.BytePointer_Impl_","toInt8Array",0x19ac5cfa,"lime.utils._BytePointer.BytePointer_Impl_.toInt8Array","lime/utils/BytePointer.hx",121,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_132_toUInt16Array,"lime.utils._BytePointer.BytePointer_Impl_","toUInt16Array",0x16e13344,"lime.utils._BytePointer.BytePointer_Impl_.toUInt16Array","lime/utils/BytePointer.hx",132,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_143_toInt16Array,"lime.utils._BytePointer.BytePointer_Impl_","toInt16Array",0x9d8c2b9b,"lime.utils._BytePointer.BytePointer_Impl_.toInt16Array","lime/utils/BytePointer.hx",143,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_154_toUInt32Array,"lime.utils._BytePointer.BytePointer_Impl_","toUInt32Array",0xd09eaf4a,"lime.utils._BytePointer.BytePointer_Impl_.toUInt32Array","lime/utils/BytePointer.hx",154,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_165_toInt32Array,"lime.utils._BytePointer.BytePointer_Impl_","toInt32Array",0x5749a7a1,"lime.utils._BytePointer.BytePointer_Impl_.toInt32Array","lime/utils/BytePointer.hx",165,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_176_toFloat32Array,"lime.utils._BytePointer.BytePointer_Impl_","toFloat32Array",0x10400814,"lime.utils._BytePointer.BytePointer_Impl_.toFloat32Array","lime/utils/BytePointer.hx",176,0x50fae541)
HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_187_toFloat64Array,"lime.utils._BytePointer.BytePointer_Impl_","toFloat64Array",0x59b72515,"lime.utils._BytePointer.BytePointer_Impl_.toFloat64Array","lime/utils/BytePointer.hx",187,0x50fae541)
namespace lime{
namespace utils{
namespace _BytePointer{

void BytePointer_Impl__obj::__construct() { }

Dynamic BytePointer_Impl__obj::__CreateEmpty() { return new BytePointer_Impl__obj; }

void *BytePointer_Impl__obj::_hx_vtable = 0;

Dynamic BytePointer_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BytePointer_Impl__obj > _hx_result = new BytePointer_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BytePointer_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a5eae87;
}

 ::lime::utils::BytePointerData BytePointer_Impl__obj::_new( ::haxe::io::Bytes bytes,hx::Null< int >  __o_offset){
            		int offset = __o_offset.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_12__new)
HXDLIN(  12)		 ::lime::utils::BytePointerData this1 =  ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,bytes,offset);
HXDLIN(  12)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BytePointer_Impl__obj,_new,return )

void BytePointer_Impl__obj::set( ::lime::utils::BytePointerData this1, ::haxe::io::Bytes bytes, ::lime::utils::ArrayBufferView bufferView, ::haxe::io::Bytes buffer, ::Dynamic offset){
            	HX_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_18_set)
HXLINE(  19)		if (hx::IsNotNull( buffer )) {
HXLINE(  24)			bytes = buffer;
            		}
HXLINE(  28)		bool _hx_tmp;
HXDLIN(  28)		if (hx::IsNull( bytes )) {
HXLINE(  28)			_hx_tmp = hx::IsNull( bufferView );
            		}
            		else {
HXLINE(  28)			_hx_tmp = true;
            		}
HXDLIN(  28)		if (_hx_tmp) {
HXLINE(  30)			this1->bytes = bytes;
HXLINE(  31)			int _hx_tmp1;
HXDLIN(  31)			if (hx::IsNotNull( offset )) {
HXLINE(  31)				_hx_tmp1 = ( (int)(offset) );
            			}
            			else {
HXLINE(  31)				_hx_tmp1 = 0;
            			}
HXDLIN(  31)			this1->offset = _hx_tmp1;
            		}
            		else {
HXLINE(  38)			this1->bytes = bufferView->buffer;
HXLINE(  41)			int _hx_tmp2;
HXDLIN(  41)			if (hx::IsNotNull( offset )) {
HXLINE(  41)				_hx_tmp2 = (bufferView->byteOffset + offset);
            			}
            			else {
HXLINE(  41)				_hx_tmp2 = bufferView->byteOffset;
            			}
HXDLIN(  41)			this1->offset = _hx_tmp2;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(BytePointer_Impl__obj,set,(void))

int BytePointer_Impl__obj::_hx___arrayGet( ::lime::utils::BytePointerData this1,int index){
            	HX_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_47___arrayGet)
HXDLIN(  47)		if (hx::IsNotNull( this1->bytes )) {
HXDLIN(  47)			return ( (int)(this1->bytes->b->__get((index + this1->offset))) );
            		}
            		else {
HXDLIN(  47)			return 0;
            		}
HXDLIN(  47)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BytePointer_Impl__obj,_hx___arrayGet,return )

int BytePointer_Impl__obj::_hx___arraySet( ::lime::utils::BytePointerData this1,int index,int value){
            	HX_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_51___arraySet)
HXLINE(  52)		if (hx::IsNull( this1->bytes )) {
HXLINE(  52)			this1->bytes->b[(index + this1->offset)] = ( (unsigned char)(value) );
            		}
HXLINE(  53)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BytePointer_Impl__obj,_hx___arraySet,return )

 ::lime::utils::BytePointerData BytePointer_Impl__obj::fromArrayBufferView( ::lime::utils::ArrayBufferView arrayBufferView){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_57_fromArrayBufferView)
HXLINE(  58)		if (hx::IsNull( arrayBufferView )) {
HXLINE(  58)			return null();
            		}
HXLINE(  63)		return  ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,arrayBufferView->buffer,arrayBufferView->byteOffset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,fromArrayBufferView,return )

 ::lime::utils::BytePointerData BytePointer_Impl__obj::fromArrayBuffer( ::haxe::io::Bytes buffer){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_68_fromArrayBuffer)
HXLINE(  69)		if (hx::IsNull( buffer )) {
HXLINE(  69)			return null();
            		}
HXLINE(  74)		return  ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,buffer,0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,fromArrayBuffer,return )

 ::lime::utils::BytePointerData BytePointer_Impl__obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_80_fromBytes)
HXDLIN(  80)		return  ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,bytes,0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,fromBytes,return )

 ::lime::utils::BytePointerData BytePointer_Impl__obj::fromBytesData(::Array< unsigned char > bytesData){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_85_fromBytesData)
HXDLIN(  85)		if (hx::IsNull( bytesData )) {
HXDLIN(  85)			return  ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,null(),0);
            		}
            		else {
HXLINE(  87)			return  ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::ofData(bytesData),0);
            		}
HXLINE(  85)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,fromBytesData,return )

 ::lime::utils::BytePointerData BytePointer_Impl__obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_92_fromFile)
HXDLIN(  92)		return  ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,::lime::utils::_Bytes::Bytes_Impl__obj::fromFile(path),0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,fromFile,return )

 ::lime::utils::BytePointerData BytePointer_Impl__obj::fromLimeBytes( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_97_fromLimeBytes)
HXDLIN(  97)		return  ::lime::utils::BytePointerData_obj::__alloc( HX_CTX ,bytes,0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,fromLimeBytes,return )

 ::lime::utils::ArrayBufferView BytePointer_Impl__obj::toUInt8Array( ::lime::utils::BytePointerData bytePointer){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_105_toUInt8Array)
HXDLIN( 105)		 ::haxe::io::Bytes buffer = bytePointer->bytes;
HXDLIN( 105)		 ::Dynamic byteoffset = ::Std_obj::_hx_int((( (Float)(bytePointer->offset) ) / ( (Float)(8) )));
HXDLIN( 105)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 105)		if (hx::IsNotNull( buffer )) {
HXDLIN( 105)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN( 105)			int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 105)			if ((in_byteOffset < 0)) {
HXDLIN( 105)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 105)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXDLIN( 105)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 105)			int bufferByteLength = buffer->length;
HXDLIN( 105)			int elementSize = _this->bytesPerElement;
HXDLIN( 105)			int newByteLength = bufferByteLength;
HXDLIN( 105)			{
HXDLIN( 105)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 105)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXDLIN( 105)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 105)				if ((newByteLength < 0)) {
HXDLIN( 105)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 105)			_this->buffer = buffer;
HXDLIN( 105)			_this->byteOffset = in_byteOffset;
HXDLIN( 105)			_this->byteLength = newByteLength;
HXDLIN( 105)			_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 105)			this1 = _this;
            		}
            		else {
HXDLIN( 105)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 105)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,toUInt8Array,return )

 ::lime::utils::ArrayBufferView BytePointer_Impl__obj::toUInt8ClampedArray( ::lime::utils::BytePointerData bytePointer){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_110_toUInt8ClampedArray)
HXLINE( 111)		bool _hx_tmp;
HXDLIN( 111)		if (hx::IsNotNull( bytePointer )) {
HXLINE( 111)			_hx_tmp = hx::IsNull( bytePointer->bytes );
            		}
            		else {
HXLINE( 111)			_hx_tmp = true;
            		}
HXDLIN( 111)		if (_hx_tmp) {
HXLINE( 111)			return null();
            		}
HXLINE( 116)		 ::haxe::io::Bytes buffer = bytePointer->bytes;
HXDLIN( 116)		 ::Dynamic byteoffset = ::Std_obj::_hx_int((( (Float)(bytePointer->offset) ) / ( (Float)(8) )));
HXDLIN( 116)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 116)		if (hx::IsNotNull( buffer )) {
HXLINE( 116)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,5);
HXDLIN( 116)			int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 116)			if ((in_byteOffset < 0)) {
HXLINE( 116)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 116)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 116)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 116)			int bufferByteLength = buffer->length;
HXDLIN( 116)			int elementSize = _this->bytesPerElement;
HXDLIN( 116)			int newByteLength = bufferByteLength;
HXDLIN( 116)			{
HXLINE( 116)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 116)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 116)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 116)				if ((newByteLength < 0)) {
HXLINE( 116)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 116)			_this->buffer = buffer;
HXDLIN( 116)			_this->byteOffset = in_byteOffset;
HXDLIN( 116)			_this->byteLength = newByteLength;
HXDLIN( 116)			_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 116)			this1 = _this;
            		}
            		else {
HXLINE( 116)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            		}
HXDLIN( 116)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,toUInt8ClampedArray,return )

 ::lime::utils::ArrayBufferView BytePointer_Impl__obj::toInt8Array( ::lime::utils::BytePointerData bytePointer){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_121_toInt8Array)
HXLINE( 122)		bool _hx_tmp;
HXDLIN( 122)		if (hx::IsNotNull( bytePointer )) {
HXLINE( 122)			_hx_tmp = hx::IsNull( bytePointer->bytes );
            		}
            		else {
HXLINE( 122)			_hx_tmp = true;
            		}
HXDLIN( 122)		if (_hx_tmp) {
HXLINE( 122)			return null();
            		}
HXLINE( 127)		 ::haxe::io::Bytes buffer = bytePointer->bytes;
HXDLIN( 127)		 ::Dynamic byteoffset = ::Std_obj::_hx_int((( (Float)(bytePointer->offset) ) / ( (Float)(8) )));
HXDLIN( 127)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 127)		if (hx::IsNotNull( buffer )) {
HXLINE( 127)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 127)			int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 127)			if ((in_byteOffset < 0)) {
HXLINE( 127)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 127)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 127)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 127)			int bufferByteLength = buffer->length;
HXDLIN( 127)			int elementSize = _this->bytesPerElement;
HXDLIN( 127)			int newByteLength = bufferByteLength;
HXDLIN( 127)			{
HXLINE( 127)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 127)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 127)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 127)				if ((newByteLength < 0)) {
HXLINE( 127)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 127)			_this->buffer = buffer;
HXDLIN( 127)			_this->byteOffset = in_byteOffset;
HXDLIN( 127)			_this->byteLength = newByteLength;
HXDLIN( 127)			_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 127)			this1 = _this;
            		}
            		else {
HXLINE( 127)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            		}
HXDLIN( 127)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,toInt8Array,return )

 ::lime::utils::ArrayBufferView BytePointer_Impl__obj::toUInt16Array( ::lime::utils::BytePointerData bytePointer){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_132_toUInt16Array)
HXLINE( 133)		bool _hx_tmp;
HXDLIN( 133)		if (hx::IsNotNull( bytePointer )) {
HXLINE( 133)			_hx_tmp = hx::IsNull( bytePointer->bytes );
            		}
            		else {
HXLINE( 133)			_hx_tmp = true;
            		}
HXDLIN( 133)		if (_hx_tmp) {
HXLINE( 133)			return null();
            		}
HXLINE( 138)		 ::haxe::io::Bytes buffer = bytePointer->bytes;
HXDLIN( 138)		 ::Dynamic byteoffset = ::Std_obj::_hx_int((( (Float)(bytePointer->offset) ) / ( (Float)(16) )));
HXDLIN( 138)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 138)		if (hx::IsNotNull( buffer )) {
HXLINE( 138)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,6);
HXDLIN( 138)			int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 138)			if ((in_byteOffset < 0)) {
HXLINE( 138)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 138)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 138)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 138)			int bufferByteLength = buffer->length;
HXDLIN( 138)			int elementSize = _this->bytesPerElement;
HXDLIN( 138)			int newByteLength = bufferByteLength;
HXDLIN( 138)			{
HXLINE( 138)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 138)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 138)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 138)				if ((newByteLength < 0)) {
HXLINE( 138)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 138)			_this->buffer = buffer;
HXDLIN( 138)			_this->byteOffset = in_byteOffset;
HXDLIN( 138)			_this->byteLength = newByteLength;
HXDLIN( 138)			_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 138)			this1 = _this;
            		}
            		else {
HXLINE( 138)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            		}
HXDLIN( 138)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,toUInt16Array,return )

 ::lime::utils::ArrayBufferView BytePointer_Impl__obj::toInt16Array( ::lime::utils::BytePointerData bytePointer){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_143_toInt16Array)
HXLINE( 144)		bool _hx_tmp;
HXDLIN( 144)		if (hx::IsNotNull( bytePointer )) {
HXLINE( 144)			_hx_tmp = hx::IsNull( bytePointer->bytes );
            		}
            		else {
HXLINE( 144)			_hx_tmp = true;
            		}
HXDLIN( 144)		if (_hx_tmp) {
HXLINE( 144)			return null();
            		}
HXLINE( 149)		 ::haxe::io::Bytes buffer = bytePointer->bytes;
HXDLIN( 149)		 ::Dynamic byteoffset = ::Std_obj::_hx_int((( (Float)(bytePointer->offset) ) / ( (Float)(16) )));
HXDLIN( 149)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 149)		if (hx::IsNotNull( buffer )) {
HXLINE( 149)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,2);
HXDLIN( 149)			int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 149)			if ((in_byteOffset < 0)) {
HXLINE( 149)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 149)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 149)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 149)			int bufferByteLength = buffer->length;
HXDLIN( 149)			int elementSize = _this->bytesPerElement;
HXDLIN( 149)			int newByteLength = bufferByteLength;
HXDLIN( 149)			{
HXLINE( 149)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 149)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 149)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 149)				if ((newByteLength < 0)) {
HXLINE( 149)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 149)			_this->buffer = buffer;
HXDLIN( 149)			_this->byteOffset = in_byteOffset;
HXDLIN( 149)			_this->byteLength = newByteLength;
HXDLIN( 149)			_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 149)			this1 = _this;
            		}
            		else {
HXLINE( 149)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            		}
HXDLIN( 149)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,toInt16Array,return )

 ::lime::utils::ArrayBufferView BytePointer_Impl__obj::toUInt32Array( ::lime::utils::BytePointerData bytePointer){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_154_toUInt32Array)
HXLINE( 155)		bool _hx_tmp;
HXDLIN( 155)		if (hx::IsNotNull( bytePointer )) {
HXLINE( 155)			_hx_tmp = hx::IsNull( bytePointer->bytes );
            		}
            		else {
HXLINE( 155)			_hx_tmp = true;
            		}
HXDLIN( 155)		if (_hx_tmp) {
HXLINE( 155)			return null();
            		}
HXLINE( 160)		 ::haxe::io::Bytes buffer = bytePointer->bytes;
HXDLIN( 160)		 ::Dynamic byteoffset = ::Std_obj::_hx_int((( (Float)(bytePointer->offset) ) / ( (Float)(32) )));
HXDLIN( 160)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 160)		if (hx::IsNotNull( buffer )) {
HXLINE( 160)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,7);
HXDLIN( 160)			int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 160)			if ((in_byteOffset < 0)) {
HXLINE( 160)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 160)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 160)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 160)			int bufferByteLength = buffer->length;
HXDLIN( 160)			int elementSize = _this->bytesPerElement;
HXDLIN( 160)			int newByteLength = bufferByteLength;
HXDLIN( 160)			{
HXLINE( 160)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 160)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 160)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 160)				if ((newByteLength < 0)) {
HXLINE( 160)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 160)			_this->buffer = buffer;
HXDLIN( 160)			_this->byteOffset = in_byteOffset;
HXDLIN( 160)			_this->byteLength = newByteLength;
HXDLIN( 160)			_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 160)			this1 = _this;
            		}
            		else {
HXLINE( 160)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            		}
HXDLIN( 160)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,toUInt32Array,return )

 ::lime::utils::ArrayBufferView BytePointer_Impl__obj::toInt32Array( ::lime::utils::BytePointerData bytePointer){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_165_toInt32Array)
HXLINE( 166)		bool _hx_tmp;
HXDLIN( 166)		if (hx::IsNotNull( bytePointer )) {
HXLINE( 166)			_hx_tmp = hx::IsNull( bytePointer->bytes );
            		}
            		else {
HXLINE( 166)			_hx_tmp = true;
            		}
HXDLIN( 166)		if (_hx_tmp) {
HXLINE( 166)			return null();
            		}
HXLINE( 171)		 ::haxe::io::Bytes buffer = bytePointer->bytes;
HXDLIN( 171)		 ::Dynamic byteoffset = ::Std_obj::_hx_int((( (Float)(bytePointer->offset) ) / ( (Float)(32) )));
HXDLIN( 171)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 171)		if (hx::IsNotNull( buffer )) {
HXLINE( 171)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,3);
HXDLIN( 171)			int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 171)			if ((in_byteOffset < 0)) {
HXLINE( 171)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 171)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 171)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 171)			int bufferByteLength = buffer->length;
HXDLIN( 171)			int elementSize = _this->bytesPerElement;
HXDLIN( 171)			int newByteLength = bufferByteLength;
HXDLIN( 171)			{
HXLINE( 171)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 171)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 171)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 171)				if ((newByteLength < 0)) {
HXLINE( 171)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 171)			_this->buffer = buffer;
HXDLIN( 171)			_this->byteOffset = in_byteOffset;
HXDLIN( 171)			_this->byteLength = newByteLength;
HXDLIN( 171)			_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 171)			this1 = _this;
            		}
            		else {
HXLINE( 171)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            		}
HXDLIN( 171)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,toInt32Array,return )

 ::lime::utils::ArrayBufferView BytePointer_Impl__obj::toFloat32Array( ::lime::utils::BytePointerData bytePointer){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_176_toFloat32Array)
HXLINE( 177)		bool _hx_tmp;
HXDLIN( 177)		if (hx::IsNotNull( bytePointer )) {
HXLINE( 177)			_hx_tmp = hx::IsNull( bytePointer->bytes );
            		}
            		else {
HXLINE( 177)			_hx_tmp = true;
            		}
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 177)			return null();
            		}
HXLINE( 182)		 ::haxe::io::Bytes buffer = bytePointer->bytes;
HXDLIN( 182)		 ::Dynamic byteoffset = ::Std_obj::_hx_int((( (Float)(bytePointer->offset) ) / ( (Float)(32) )));
HXDLIN( 182)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 182)		if (hx::IsNotNull( buffer )) {
HXLINE( 182)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 182)			int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 182)			if ((in_byteOffset < 0)) {
HXLINE( 182)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 182)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 182)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 182)			int bufferByteLength = buffer->length;
HXDLIN( 182)			int elementSize = _this->bytesPerElement;
HXDLIN( 182)			int newByteLength = bufferByteLength;
HXDLIN( 182)			{
HXLINE( 182)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 182)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 182)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 182)				if ((newByteLength < 0)) {
HXLINE( 182)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 182)			_this->buffer = buffer;
HXDLIN( 182)			_this->byteOffset = in_byteOffset;
HXDLIN( 182)			_this->byteLength = newByteLength;
HXDLIN( 182)			_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 182)			this1 = _this;
            		}
            		else {
HXLINE( 182)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 182)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,toFloat32Array,return )

 ::lime::utils::ArrayBufferView BytePointer_Impl__obj::toFloat64Array( ::lime::utils::BytePointerData bytePointer){
            	HX_GC_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_187_toFloat64Array)
HXLINE( 188)		bool _hx_tmp;
HXDLIN( 188)		if (hx::IsNotNull( bytePointer )) {
HXLINE( 188)			_hx_tmp = hx::IsNull( bytePointer->bytes );
            		}
            		else {
HXLINE( 188)			_hx_tmp = true;
            		}
HXDLIN( 188)		if (_hx_tmp) {
HXLINE( 188)			return null();
            		}
HXLINE( 193)		 ::haxe::io::Bytes buffer = bytePointer->bytes;
HXDLIN( 193)		 ::Dynamic byteoffset = ::Std_obj::_hx_int((( (Float)(bytePointer->offset) ) / ( (Float)(64) )));
HXDLIN( 193)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 193)		if (hx::IsNotNull( buffer )) {
HXLINE( 193)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,9);
HXDLIN( 193)			int in_byteOffset = ( (int)(byteoffset) );
HXDLIN( 193)			if ((in_byteOffset < 0)) {
HXLINE( 193)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 193)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != 0)) {
HXLINE( 193)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 193)			int bufferByteLength = buffer->length;
HXDLIN( 193)			int elementSize = _this->bytesPerElement;
HXDLIN( 193)			int newByteLength = bufferByteLength;
HXDLIN( 193)			{
HXLINE( 193)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 193)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != 0)) {
HXLINE( 193)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 193)				if ((newByteLength < 0)) {
HXLINE( 193)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 193)			_this->buffer = buffer;
HXDLIN( 193)			_this->byteOffset = in_byteOffset;
HXDLIN( 193)			_this->byteLength = newByteLength;
HXDLIN( 193)			_this->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this->bytesPerElement) )));
HXDLIN( 193)			this1 = _this;
            		}
            		else {
HXLINE( 193)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            		}
HXDLIN( 193)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BytePointer_Impl__obj,toFloat64Array,return )


BytePointer_Impl__obj::BytePointer_Impl__obj()
{
}

bool BytePointer_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__arrayGet") ) { outValue = _hx___arrayGet_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__arraySet") ) { outValue = _hx___arraySet_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toInt8Array") ) { outValue = toInt8Array_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"toUInt8Array") ) { outValue = toUInt8Array_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt16Array") ) { outValue = toInt16Array_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt32Array") ) { outValue = toInt32Array_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromBytesData") ) { outValue = fromBytesData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromLimeBytes") ) { outValue = fromLimeBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toUInt16Array") ) { outValue = toUInt16Array_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toUInt32Array") ) { outValue = toUInt32Array_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"toFloat32Array") ) { outValue = toFloat32Array_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFloat64Array") ) { outValue = toFloat64Array_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fromArrayBuffer") ) { outValue = fromArrayBuffer_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"fromArrayBufferView") ) { outValue = fromArrayBufferView_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toUInt8ClampedArray") ) { outValue = toUInt8ClampedArray_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *BytePointer_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BytePointer_Impl__obj_sStaticStorageInfo = 0;
#endif

hx::Class BytePointer_Impl__obj::__mClass;

static ::String BytePointer_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("set",a2,9b,57,00),
	HX_("__arrayGet",9d,03,a3,92),
	HX_("__arraySet",a9,1e,ac,92),
	HX_("fromArrayBufferView",34,70,74,c8),
	HX_("fromArrayBuffer",2f,ce,77,ec),
	HX_("fromBytes",a1,f2,20,72),
	HX_("fromBytesData",6b,d9,41,db),
	HX_("fromFile",06,9d,87,a1),
	HX_("fromLimeBytes",4c,d2,e6,4e),
	HX_("toUInt8Array",96,d6,de,32),
	HX_("toUInt8ClampedArray",c2,df,1c,6a),
	HX_("toInt8Array",75,6f,09,74),
	HX_("toUInt16Array",7f,1a,84,90),
	HX_("toInt16Array",c0,44,9f,54),
	HX_("toUInt32Array",85,96,41,4a),
	HX_("toInt32Array",c6,c0,5c,0e),
	HX_("toFloat32Array",79,74,27,05),
	HX_("toFloat64Array",7a,91,9e,4e),
	::String(null())
};

void BytePointer_Impl__obj::__register()
{
	BytePointer_Impl__obj _hx_dummy;
	BytePointer_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("lime.utils._BytePointer.BytePointer_Impl_",73,da,65,91);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BytePointer_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BytePointer_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< BytePointer_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BytePointer_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BytePointer_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace utils
} // end namespace _BytePointer
