// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_math__ARGB_ARGB_Impl_
#include <lime/math/_ARGB/ARGB_Impl_.h>
#endif
#ifndef INCLUDED_lime_math__RGBA_RGBA_Impl_
#include <lime/math/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_50__new,"lime.math._ARGB.ARGB_Impl_","_new",0xa527b873,"lime.math._ARGB.ARGB_Impl_._new","lime/math/ARGB.hx",50,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_64_create,"lime.math._ARGB.ARGB_Impl_","create",0xefd4728e,"lime.math._ARGB.ARGB_Impl_.create","lime/math/ARGB.hx",64,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_75_multiplyAlpha,"lime.math._ARGB.ARGB_Impl_","multiplyAlpha",0xf3a45d48,"lime.math._ARGB.ARGB_Impl_.multiplyAlpha","lime/math/ARGB.hx",75,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_94_readUInt8,"lime.math._ARGB.ARGB_Impl_","readUInt8",0x7a9297f6,"lime.math._ARGB.ARGB_Impl_.readUInt8","lime/math/ARGB.hx",94,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_122_set,"lime.math._ARGB.ARGB_Impl_","set",0xbe3780d0,"lime.math._ARGB.ARGB_Impl_.set","lime/math/ARGB.hx",122,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_130_unmultiplyAlpha,"lime.math._ARGB.ARGB_Impl_","unmultiplyAlpha",0x71d0bacf,"lime.math._ARGB.ARGB_Impl_.unmultiplyAlpha","lime/math/ARGB.hx",130,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_145_writeUInt8,"lime.math._ARGB.ARGB_Impl_","writeUInt8",0xd65f86b1,"lime.math._ARGB.ARGB_Impl_.writeUInt8","lime/math/ARGB.hx",145,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_175___fromBGRA,"lime.math._ARGB.ARGB_Impl_","__fromBGRA",0xf5288ed0,"lime.math._ARGB.ARGB_Impl_.__fromBGRA","lime/math/ARGB.hx",175,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_180___fromRGBA,"lime.math._ARGB.ARGB_Impl_","__fromRGBA",0xffbbead0,"lime.math._ARGB.ARGB_Impl_.__fromRGBA","lime/math/ARGB.hx",180,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_186_get_a,"lime.math._ARGB.ARGB_Impl_","get_a",0x72e6b1e6,"lime.math._ARGB.ARGB_Impl_.get_a","lime/math/ARGB.hx",186,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_190_set_a,"lime.math._ARGB.ARGB_Impl_","set_a",0x5bb5a7f2,"lime.math._ARGB.ARGB_Impl_.set_a","lime/math/ARGB.hx",190,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_197_get_b,"lime.math._ARGB.ARGB_Impl_","get_b",0x72e6b1e7,"lime.math._ARGB.ARGB_Impl_.get_b","lime/math/ARGB.hx",197,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_201_set_b,"lime.math._ARGB.ARGB_Impl_","set_b",0x5bb5a7f3,"lime.math._ARGB.ARGB_Impl_.set_b","lime/math/ARGB.hx",201,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_208_get_g,"lime.math._ARGB.ARGB_Impl_","get_g",0x72e6b1ec,"lime.math._ARGB.ARGB_Impl_.get_g","lime/math/ARGB.hx",208,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_212_set_g,"lime.math._ARGB.ARGB_Impl_","set_g",0x5bb5a7f8,"lime.math._ARGB.ARGB_Impl_.set_g","lime/math/ARGB.hx",212,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_219_get_r,"lime.math._ARGB.ARGB_Impl_","get_r",0x72e6b1f7,"lime.math._ARGB.ARGB_Impl_.get_r","lime/math/ARGB.hx",219,0x89c2ece5)
HX_LOCAL_STACK_FRAME(_hx_pos_36de0038cbbfa715_223_set_r,"lime.math._ARGB.ARGB_Impl_","set_r",0x5bb5a803,"lime.math._ARGB.ARGB_Impl_.set_r","lime/math/ARGB.hx",223,0x89c2ece5)
namespace lime{
namespace math{
namespace _ARGB{

void ARGB_Impl__obj::__construct() { }

Dynamic ARGB_Impl__obj::__CreateEmpty() { return new ARGB_Impl__obj; }

void *ARGB_Impl__obj::_hx_vtable = 0;

Dynamic ARGB_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ARGB_Impl__obj > _hx_result = new ARGB_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ARGB_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4747f55a;
}

int ARGB_Impl__obj::a16;

Float ARGB_Impl__obj::unmult;

int ARGB_Impl__obj::_new(hx::Null< int >  __o_argb){
            		int argb = __o_argb.Default(0);
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_50__new)
HXDLIN(  50)		int this1 = argb;
HXDLIN(  50)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,_new,return )

int ARGB_Impl__obj::create(int a,int r,int g,int b){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_64_create)
HXLINE(  65)		int this1 = 0;
HXDLIN(  65)		int argb = this1;
HXLINE(  66)		argb = (((((a & 255) << 24) | ((r & 255) << 16)) | ((g & 255) << 8)) | (b & 255));
HXLINE(  67)		return argb;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ARGB_Impl__obj,create,return )

void ARGB_Impl__obj::multiplyAlpha(int this1){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_75_multiplyAlpha)
HXDLIN(  75)		if (((hx::UShr(this1,24) & 255) == 0)) {
HXLINE(  77)			this1 = 0;
            		}
            		else {
HXLINE(  79)			if (((hx::UShr(this1,24) & 255) != 255)) {
HXLINE(  81)				 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(  81)				::lime::math::_ARGB::ARGB_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this2->buffer->b,(this2->byteOffset + ((hx::UShr(this1,24) & 255) * 4)))) );
HXLINE(  82)				this1 = ((((((hx::UShr(this1,24) & 255) & 255) << 24) | (((((hx::UShr(this1,16) & 255) * ::lime::math::_ARGB::ARGB_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(this1,8) & 255) * ::lime::math::_ARGB::ARGB_Impl__obj::a16) >> 16) & 255) << 8)) | ((((this1 & 255) * ::lime::math::_ARGB::ARGB_Impl__obj::a16) >> 16) & 255));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,multiplyAlpha,(void))

void ARGB_Impl__obj::readUInt8(int this1, ::lime::utils::ArrayBufferView data,int offset,hx::Null< int >  __o_format,hx::Null< bool >  __o_premultiplied){
            		int format = __o_format.Default(0);
            		bool premultiplied = __o_premultiplied.Default(false);
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_94_readUInt8)
HXLINE(  95)		switch((int)(format)){
            			case (int)0: {
HXLINE( 101)				int a = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 101)				int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 101)				int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 101)				this1 = (((((a & 255) << 24) | ((r & 255) << 16)) | ((g & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            			}
            			break;
            			case (int)1: {
HXLINE( 104)				int a1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 104)				int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 104)				int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 104)				this1 = (((((a1 & 255) << 24) | ((r1 & 255) << 16)) | ((g1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) ) & 255));
            			}
            			break;
            			case (int)2: {
HXLINE(  98)				int a2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(  98)				int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(  98)				int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN(  98)				this1 = (((((a2 & 255) << 24) | ((r2 & 255) << 16)) | ((g2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) ) & 255));
            			}
            			break;
            		}
HXLINE( 107)		if (premultiplied) {
HXLINE( 109)			bool _hx_tmp;
HXDLIN( 109)			if (((hx::UShr(this1,24) & 255) != 0)) {
HXLINE( 109)				_hx_tmp = ((hx::UShr(this1,24) & 255) != 255);
            			}
            			else {
HXLINE( 109)				_hx_tmp = false;
            			}
HXDLIN( 109)			if (_hx_tmp) {
HXLINE( 109)				::lime::math::_ARGB::ARGB_Impl__obj::unmult = (((Float)255.0) / ( (Float)((hx::UShr(this1,24) & 255)) ));
HXDLIN( 109)				{
HXLINE( 109)					 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 109)					int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::floor((( (Float)((hx::UShr(this1,16) & 255)) ) * ::lime::math::_ARGB::ARGB_Impl__obj::unmult)))) & 255)) );
HXDLIN( 109)					 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 109)					int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::floor((( (Float)((hx::UShr(this1,8) & 255)) ) * ::lime::math::_ARGB::ARGB_Impl__obj::unmult)))) & 255)) );
HXDLIN( 109)					 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 109)					this1 = ((((((hx::UShr(this1,24) & 255) & 255) << 24) | ((r3 & 255) << 16)) | ((g3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::floor((( (Float)((this1 & 255)) ) * ::lime::math::_ARGB::ARGB_Impl__obj::unmult)))) & 255)) ) & 255));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ARGB_Impl__obj,readUInt8,(void))

void ARGB_Impl__obj::set(int this1,int a,int r,int g,int b){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_122_set)
HXDLIN( 122)		this1 = (((((a & 255) << 24) | ((r & 255) << 16)) | ((g & 255) << 8)) | (b & 255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ARGB_Impl__obj,set,(void))

void ARGB_Impl__obj::unmultiplyAlpha(int this1){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_130_unmultiplyAlpha)
HXDLIN( 130)		bool _hx_tmp;
HXDLIN( 130)		if (((hx::UShr(this1,24) & 255) != 0)) {
HXDLIN( 130)			_hx_tmp = ((hx::UShr(this1,24) & 255) != 255);
            		}
            		else {
HXDLIN( 130)			_hx_tmp = false;
            		}
HXDLIN( 130)		if (_hx_tmp) {
HXLINE( 132)			::lime::math::_ARGB::ARGB_Impl__obj::unmult = (((Float)255.0) / ( (Float)((hx::UShr(this1,24) & 255)) ));
HXLINE( 133)			{
HXLINE( 133)				 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 133)				int r = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::floor((( (Float)((hx::UShr(this1,16) & 255)) ) * ::lime::math::_ARGB::ARGB_Impl__obj::unmult)))) & 255)) );
HXDLIN( 133)				 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 133)				int g = ( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::floor((( (Float)((hx::UShr(this1,8) & 255)) ) * ::lime::math::_ARGB::ARGB_Impl__obj::unmult)))) & 255)) );
HXDLIN( 133)				 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 133)				this1 = ((((((hx::UShr(this1,24) & 255) & 255) << 24) | ((r & 255) << 16)) | ((g & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::floor((( (Float)((this1 & 255)) ) * ::lime::math::_ARGB::ARGB_Impl__obj::unmult)))) & 255)) ) & 255));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,unmultiplyAlpha,(void))

void ARGB_Impl__obj::writeUInt8(int this1, ::lime::utils::ArrayBufferView data,int offset,hx::Null< int >  __o_format,hx::Null< bool >  __o_premultiplied){
            		int format = __o_format.Default(0);
            		bool premultiplied = __o_premultiplied.Default(false);
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_145_writeUInt8)
HXLINE( 146)		if (premultiplied) {
HXLINE( 148)			if (((hx::UShr(this1,24) & 255) == 0)) {
HXLINE( 148)				this1 = 0;
            			}
            			else {
HXLINE( 148)				if (((hx::UShr(this1,24) & 255) != 255)) {
HXLINE( 148)					 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 148)					::lime::math::_ARGB::ARGB_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this2->buffer->b,(this2->byteOffset + ((hx::UShr(this1,24) & 255) * 4)))) );
HXDLIN( 148)					this1 = ((((((hx::UShr(this1,24) & 255) & 255) << 24) | (((((hx::UShr(this1,16) & 255) * ::lime::math::_ARGB::ARGB_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(this1,8) & 255) * ::lime::math::_ARGB::ARGB_Impl__obj::a16) >> 16) & 255) << 8)) | ((((this1 & 255) * ::lime::math::_ARGB::ARGB_Impl__obj::a16) >> 16) & 255));
            				}
            			}
            		}
HXLINE( 151)		switch((int)(format)){
            			case (int)0: {
HXLINE( 160)				{
HXLINE( 160)					int val = (hx::UShr(this1,16) & 255);
HXDLIN( 160)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            				}
HXLINE( 161)				{
HXLINE( 161)					int val1 = (hx::UShr(this1,8) & 255);
HXDLIN( 161)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            				}
HXLINE( 162)				{
HXLINE( 162)					int val2 = (this1 & 255);
HXDLIN( 162)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            				}
HXLINE( 163)				{
HXLINE( 163)					int val3 = (hx::UShr(this1,24) & 255);
HXDLIN( 163)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 166)				{
HXLINE( 166)					int val4 = (hx::UShr(this1,24) & 255);
HXDLIN( 166)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            				}
HXLINE( 167)				{
HXLINE( 167)					int val5 = (hx::UShr(this1,16) & 255);
HXDLIN( 167)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val5);
            				}
HXLINE( 168)				{
HXLINE( 168)					int val6 = (hx::UShr(this1,8) & 255);
HXDLIN( 168)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val6);
            				}
HXLINE( 169)				{
HXLINE( 169)					int val7 = (this1 & 255);
HXDLIN( 169)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val7);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 154)				{
HXLINE( 154)					int val8 = (this1 & 255);
HXDLIN( 154)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            				}
HXLINE( 155)				{
HXLINE( 155)					int val9 = (hx::UShr(this1,8) & 255);
HXDLIN( 155)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val9);
            				}
HXLINE( 156)				{
HXLINE( 156)					int val10 = (hx::UShr(this1,16) & 255);
HXDLIN( 156)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val10);
            				}
HXLINE( 157)				{
HXLINE( 157)					int val11 = (hx::UShr(this1,24) & 255);
HXDLIN( 157)					 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val11);
            				}
            			}
            			break;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ARGB_Impl__obj,writeUInt8,(void))

int ARGB_Impl__obj::_hx___fromBGRA(int bgra){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_175___fromBGRA)
HXDLIN( 175)		int this1 = 0;
HXDLIN( 175)		int argb = this1;
HXDLIN( 175)		argb = ((((((bgra & 255) & 255) << 24) | (((hx::UShr(bgra,8) & 255) & 255) << 16)) | (((hx::UShr(bgra,16) & 255) & 255) << 8)) | ((hx::UShr(bgra,24) & 255) & 255));
HXDLIN( 175)		return argb;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,_hx___fromBGRA,return )

int ARGB_Impl__obj::_hx___fromRGBA(int rgba){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_180___fromRGBA)
HXDLIN( 180)		int this1 = 0;
HXDLIN( 180)		int argb = this1;
HXDLIN( 180)		argb = ((((((rgba & 255) & 255) << 24) | (((hx::UShr(rgba,24) & 255) & 255) << 16)) | (((hx::UShr(rgba,16) & 255) & 255) << 8)) | ((hx::UShr(rgba,8) & 255) & 255));
HXDLIN( 180)		return argb;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,_hx___fromRGBA,return )

int ARGB_Impl__obj::get_a(int this1){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_186_get_a)
HXDLIN( 186)		return (hx::UShr(this1,24) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,get_a,return )

int ARGB_Impl__obj::set_a(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_190_set_a)
HXLINE( 191)		this1 = (((((value & 255) << 24) | (((hx::UShr(this1,16) & 255) & 255) << 16)) | (((hx::UShr(this1,8) & 255) & 255) << 8)) | ((this1 & 255) & 255));
HXLINE( 192)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ARGB_Impl__obj,set_a,return )

int ARGB_Impl__obj::get_b(int this1){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_197_get_b)
HXDLIN( 197)		return (this1 & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,get_b,return )

int ARGB_Impl__obj::set_b(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_201_set_b)
HXLINE( 202)		this1 = ((((((hx::UShr(this1,24) & 255) & 255) << 24) | (((hx::UShr(this1,16) & 255) & 255) << 16)) | (((hx::UShr(this1,8) & 255) & 255) << 8)) | (value & 255));
HXLINE( 203)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ARGB_Impl__obj,set_b,return )

int ARGB_Impl__obj::get_g(int this1){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_208_get_g)
HXDLIN( 208)		return (hx::UShr(this1,8) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,get_g,return )

int ARGB_Impl__obj::set_g(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_212_set_g)
HXLINE( 213)		this1 = ((((((hx::UShr(this1,24) & 255) & 255) << 24) | (((hx::UShr(this1,16) & 255) & 255) << 16)) | ((value & 255) << 8)) | ((this1 & 255) & 255));
HXLINE( 214)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ARGB_Impl__obj,set_g,return )

int ARGB_Impl__obj::get_r(int this1){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_219_get_r)
HXDLIN( 219)		return (hx::UShr(this1,16) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,get_r,return )

int ARGB_Impl__obj::set_r(int this1,int value){
            	HX_STACKFRAME(&_hx_pos_36de0038cbbfa715_223_set_r)
HXLINE( 224)		this1 = ((((((hx::UShr(this1,24) & 255) & 255) << 24) | ((value & 255) << 16)) | (((hx::UShr(this1,8) & 255) & 255) << 8)) | ((this1 & 255) & 255));
HXLINE( 225)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ARGB_Impl__obj,set_r,return )


ARGB_Impl__obj::ARGB_Impl__obj()
{
}

bool ARGB_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_a") ) { outValue = get_a_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_a") ) { outValue = set_a_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_b") ) { outValue = get_b_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_b") ) { outValue = set_b_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_g") ) { outValue = get_g_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_g") ) { outValue = set_g_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_r") ) { outValue = get_r_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_r") ) { outValue = set_r_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readUInt8") ) { outValue = readUInt8_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeUInt8") ) { outValue = writeUInt8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__fromBGRA") ) { outValue = _hx___fromBGRA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__fromRGBA") ) { outValue = _hx___fromRGBA_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ARGB_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo ARGB_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ARGB_Impl__obj::a16,HX_("a16",86,c5,49,00)},
	{hx::fsFloat,(void *) &ARGB_Impl__obj::unmult,HX_("unmult",c9,6e,3a,66)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ARGB_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ARGB_Impl__obj::a16,"a16");
	HX_MARK_MEMBER_NAME(ARGB_Impl__obj::unmult,"unmult");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ARGB_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ARGB_Impl__obj::a16,"a16");
	HX_VISIT_MEMBER_NAME(ARGB_Impl__obj::unmult,"unmult");
};

#endif

hx::Class ARGB_Impl__obj::__mClass;

static ::String ARGB_Impl__obj_sStaticFields[] = {
	HX_("a16",86,c5,49,00),
	HX_("unmult",c9,6e,3a,66),
	HX_("_new",61,15,1f,3f),
	HX_("create",fc,66,0f,7c),
	HX_("multiplyAlpha",9a,f2,1c,6b),
	HX_("readUInt8",48,9c,5d,5f),
	HX_("set",a2,9b,57,00),
	HX_("unmultiplyAlpha",a1,c8,96,28),
	HX_("writeUInt8",1f,4a,38,23),
	HX_("__fromBGRA",3e,52,01,42),
	HX_("__fromRGBA",3e,ae,94,4c),
	HX_("get_a",38,a5,60,91),
	HX_("set_a",44,9b,2f,7a),
	HX_("get_b",39,a5,60,91),
	HX_("set_b",45,9b,2f,7a),
	HX_("get_g",3e,a5,60,91),
	HX_("set_g",4a,9b,2f,7a),
	HX_("get_r",49,a5,60,91),
	HX_("set_r",55,9b,2f,7a),
	::String(null())
};

void ARGB_Impl__obj::__register()
{
	ARGB_Impl__obj _hx_dummy;
	ARGB_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("lime.math._ARGB.ARGB_Impl_",9c,96,f2,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ARGB_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ARGB_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ARGB_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ARGB_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ARGB_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ARGB_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ARGB_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace math
} // end namespace _ARGB
