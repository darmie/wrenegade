// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_83_new,"lime.math.Rectangle","new",0xb4aa4114,"lime.math.Rectangle.new","lime/math/Rectangle.hx",83,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_96_clone,"lime.math.Rectangle","clone",0x93be1911,"lime.math.Rectangle.clone","lime/math/Rectangle.hx",96,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_107_contains,"lime.math.Rectangle","contains",0xf10bdceb,"lime.math.Rectangle.contains","lime/math/Rectangle.hx",107,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_112_containsPoint,"lime.math.Rectangle","containsPoint",0x3a119365,"lime.math.Rectangle.containsPoint","lime/math/Rectangle.hx",112,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_124_containsRect,"lime.math.Rectangle","containsRect",0x7fd4a7af,"lime.math.Rectangle.containsRect","lime/math/Rectangle.hx",124,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_141_containsVector,"lime.math.Rectangle","containsVector",0x357f040e,"lime.math.Rectangle.containsVector","lime/math/Rectangle.hx",141,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_149_copyFrom,"lime.math.Rectangle","copyFrom",0x8cf18e8b,"lime.math.Rectangle.copyFrom","lime/math/Rectangle.hx",149,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_164_equals,"lime.math.Rectangle","equals",0x643ce60b,"lime.math.Rectangle.equals","lime/math/Rectangle.hx",164,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_174_inflate,"lime.math.Rectangle","inflate",0x288a773b,"lime.math.Rectangle.inflate","lime/math/Rectangle.hx",174,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_188_inflateVector,"lime.math.Rectangle","inflateVector",0x07a23a5e,"lime.math.Rectangle.inflateVector","lime/math/Rectangle.hx",188,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_201_intersection,"lime.math.Rectangle","intersection",0x62197b15,"lime.math.Rectangle.intersection","lime/math/Rectangle.hx",201,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_235_intersects,"lime.math.Rectangle","intersects",0x4fbb9080,"lime.math.Rectangle.intersects","lime/math/Rectangle.hx",235,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_256_isEmpty,"lime.math.Rectangle","isEmpty",0x28ceb8f7,"lime.math.Rectangle.isEmpty","lime/math/Rectangle.hx",256,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_265_offset,"lime.math.Rectangle","offset",0x04898f5f,"lime.math.Rectangle.offset","lime/math/Rectangle.hx",265,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_275_offsetVector,"lime.math.Rectangle","offsetVector",0x49080582,"lime.math.Rectangle.offsetVector","lime/math/Rectangle.hx",275,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_285_setEmpty,"lime.math.Rectangle","setEmpty",0x429f2657,"lime.math.Rectangle.setEmpty","lime/math/Rectangle.hx",285,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_296_setTo,"lime.math.Rectangle","setTo",0xc58a9771,"lime.math.Rectangle.setTo","lime/math/Rectangle.hx",296,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_311_union,"lime.math.Rectangle","union",0xf2426ac3,"lime.math.Rectangle.union","lime/math/Rectangle.hx",311,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_340___toFlashRectangle,"lime.math.Rectangle","__toFlashRectangle",0x525ed026,"lime.math.Rectangle.__toFlashRectangle","lime/math/Rectangle.hx",340,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_347_get_bottom,"lime.math.Rectangle","get_bottom",0xc1d02480,"lime.math.Rectangle.get_bottom","lime/math/Rectangle.hx",347,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_351_set_bottom,"lime.math.Rectangle","set_bottom",0xc54dc2f4,"lime.math.Rectangle.set_bottom","lime/math/Rectangle.hx",351,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_358_get_bottomRight,"lime.math.Rectangle","get_bottomRight",0x2f6d073c,"lime.math.Rectangle.get_bottomRight","lime/math/Rectangle.hx",358,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_362_set_bottomRight,"lime.math.Rectangle","set_bottomRight",0x2b388448,"lime.math.Rectangle.set_bottomRight","lime/math/Rectangle.hx",362,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_370_get_left,"lime.math.Rectangle","get_left",0x8bfb465c,"lime.math.Rectangle.get_left","lime/math/Rectangle.hx",370,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_374_set_left,"lime.math.Rectangle","set_left",0x3a589fd0,"lime.math.Rectangle.set_left","lime/math/Rectangle.hx",374,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_382_get_right,"lime.math.Rectangle","get_right",0x66ef57e7,"lime.math.Rectangle.get_right","lime/math/Rectangle.hx",382,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_386_set_right,"lime.math.Rectangle","set_right",0x4a4043f3,"lime.math.Rectangle.set_right","lime/math/Rectangle.hx",386,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_393_get_size,"lime.math.Rectangle","get_size",0x909edf16,"lime.math.Rectangle.get_size","lime/math/Rectangle.hx",393,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_397_set_size,"lime.math.Rectangle","set_size",0x3efc388a,"lime.math.Rectangle.set_size","lime/math/Rectangle.hx",397,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_405_get_top,"lime.math.Rectangle","get_top",0x433c09e0,"lime.math.Rectangle.get_top","lime/math/Rectangle.hx",405,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_409_set_top,"lime.math.Rectangle","set_top",0x363d9aec,"lime.math.Rectangle.set_top","lime/math/Rectangle.hx",409,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_417_get_topLeft,"lime.math.Rectangle","get_topLeft",0x58bfae07,"lime.math.Rectangle.get_topLeft","lime/math/Rectangle.hx",417,0xce0be93c)
HX_LOCAL_STACK_FRAME(_hx_pos_1237f756a3e4c0a2_421_set_topLeft,"lime.math.Rectangle","set_topLeft",0x632cb513,"lime.math.Rectangle.set_topLeft","lime/math/Rectangle.hx",421,0xce0be93c)
namespace lime{
namespace math{

void Rectangle_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		Float width = __o_width.Default(0);
            		Float height = __o_height.Default(0);
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_83_new)
HXLINE(  84)		this->x = x;
HXLINE(  85)		this->y = y;
HXLINE(  86)		this->width = width;
HXLINE(  87)		this->height = height;
            	}

Dynamic Rectangle_obj::__CreateEmpty() { return new Rectangle_obj; }

void *Rectangle_obj::_hx_vtable = 0;

Dynamic Rectangle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rectangle_obj > _hx_result = new Rectangle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Rectangle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a1cb312;
}

 ::lime::math::Rectangle Rectangle_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_96_clone)
HXDLIN(  96)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,this->x,this->y,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,clone,return )

bool Rectangle_obj::contains(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_107_contains)
HXDLIN( 107)		bool _hx_tmp;
HXDLIN( 107)		bool _hx_tmp1;
HXDLIN( 107)		if ((x >= this->x)) {
HXDLIN( 107)			_hx_tmp1 = (y >= this->y);
            		}
            		else {
HXDLIN( 107)			_hx_tmp1 = false;
            		}
HXDLIN( 107)		if (_hx_tmp1) {
HXDLIN( 107)			_hx_tmp = (x < this->get_right());
            		}
            		else {
HXDLIN( 107)			_hx_tmp = false;
            		}
HXDLIN( 107)		if (_hx_tmp) {
HXDLIN( 107)			return (y < this->get_bottom());
            		}
            		else {
HXDLIN( 107)			return false;
            		}
HXDLIN( 107)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,contains,return )

bool Rectangle_obj::containsPoint( ::lime::math::Vector2 point){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_112_containsPoint)
HXDLIN( 112)		return this->containsVector(point);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsPoint,return )

bool Rectangle_obj::containsRect( ::lime::math::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_124_containsRect)
HXDLIN( 124)		bool _hx_tmp;
HXDLIN( 124)		if (!((rect->width <= 0))) {
HXDLIN( 124)			_hx_tmp = (rect->height <= 0);
            		}
            		else {
HXDLIN( 124)			_hx_tmp = true;
            		}
HXDLIN( 124)		if (_hx_tmp) {
HXLINE( 126)			bool _hx_tmp1;
HXDLIN( 126)			bool _hx_tmp2;
HXDLIN( 126)			if ((rect->x > this->x)) {
HXLINE( 126)				_hx_tmp2 = (rect->y > this->y);
            			}
            			else {
HXLINE( 126)				_hx_tmp2 = false;
            			}
HXDLIN( 126)			if (_hx_tmp2) {
HXLINE( 126)				Float _hx_tmp3 = rect->get_right();
HXDLIN( 126)				_hx_tmp1 = (_hx_tmp3 < this->get_right());
            			}
            			else {
HXLINE( 126)				_hx_tmp1 = false;
            			}
HXDLIN( 126)			if (_hx_tmp1) {
HXLINE( 126)				Float _hx_tmp4 = rect->get_bottom();
HXDLIN( 126)				return (_hx_tmp4 < this->get_bottom());
            			}
            			else {
HXLINE( 126)				return false;
            			}
            		}
            		else {
HXLINE( 130)			bool _hx_tmp5;
HXDLIN( 130)			bool _hx_tmp6;
HXDLIN( 130)			if ((rect->x >= this->x)) {
HXLINE( 130)				_hx_tmp6 = (rect->y >= this->y);
            			}
            			else {
HXLINE( 130)				_hx_tmp6 = false;
            			}
HXDLIN( 130)			if (_hx_tmp6) {
HXLINE( 130)				Float _hx_tmp7 = rect->get_right();
HXDLIN( 130)				_hx_tmp5 = (_hx_tmp7 <= this->get_right());
            			}
            			else {
HXLINE( 130)				_hx_tmp5 = false;
            			}
HXDLIN( 130)			if (_hx_tmp5) {
HXLINE( 130)				Float _hx_tmp8 = rect->get_bottom();
HXDLIN( 130)				return (_hx_tmp8 <= this->get_bottom());
            			}
            			else {
HXLINE( 130)				return false;
            			}
            		}
HXLINE( 124)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsRect,return )

bool Rectangle_obj::containsVector( ::lime::math::Vector2 vector){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_141_containsVector)
HXDLIN( 141)		return this->contains(vector->x,vector->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsVector,return )

void Rectangle_obj::copyFrom( ::lime::math::Rectangle sourceRect){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_149_copyFrom)
HXLINE( 150)		this->x = sourceRect->x;
HXLINE( 151)		this->y = sourceRect->y;
HXLINE( 152)		this->width = sourceRect->width;
HXLINE( 153)		this->height = sourceRect->height;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,copyFrom,(void))

bool Rectangle_obj::equals( ::lime::math::Rectangle toCompare){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_164_equals)
HXDLIN( 164)		bool _hx_tmp;
HXDLIN( 164)		bool _hx_tmp1;
HXDLIN( 164)		bool _hx_tmp2;
HXDLIN( 164)		if (hx::IsNotNull( toCompare )) {
HXDLIN( 164)			_hx_tmp2 = (this->x == toCompare->x);
            		}
            		else {
HXDLIN( 164)			_hx_tmp2 = false;
            		}
HXDLIN( 164)		if (_hx_tmp2) {
HXDLIN( 164)			_hx_tmp1 = (this->y == toCompare->y);
            		}
            		else {
HXDLIN( 164)			_hx_tmp1 = false;
            		}
HXDLIN( 164)		if (_hx_tmp1) {
HXDLIN( 164)			_hx_tmp = (this->width == toCompare->width);
            		}
            		else {
HXDLIN( 164)			_hx_tmp = false;
            		}
HXDLIN( 164)		if (_hx_tmp) {
HXDLIN( 164)			return (this->height == toCompare->height);
            		}
            		else {
HXDLIN( 164)			return false;
            		}
HXDLIN( 164)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,equals,return )

void Rectangle_obj::inflate(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_174_inflate)
HXLINE( 175)		 ::lime::math::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 175)		_hx_tmp->x = (_hx_tmp->x - dx);
HXLINE( 176)		 ::lime::math::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 176)		_hx_tmp1->width = (_hx_tmp1->width + (dx * ( (Float)(2) )));
HXLINE( 177)		 ::lime::math::Rectangle _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 177)		_hx_tmp2->y = (_hx_tmp2->y - dy);
HXLINE( 178)		 ::lime::math::Rectangle _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 178)		_hx_tmp3->height = (_hx_tmp3->height + (dy * ( (Float)(2) )));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,inflate,(void))

void Rectangle_obj::inflateVector( ::lime::math::Vector2 vector){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_188_inflateVector)
HXDLIN( 188)		this->inflate(vector->x,vector->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,inflateVector,(void))

 ::lime::math::Rectangle Rectangle_obj::intersection( ::lime::math::Rectangle toIntersect, ::lime::math::Rectangle result){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_201_intersection)
HXLINE( 202)		if (hx::IsNull( result )) {
HXLINE( 202)			result =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 204)		Float x0;
HXDLIN( 204)		if ((this->x < toIntersect->x)) {
HXLINE( 204)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 204)			x0 = this->x;
            		}
HXLINE( 205)		Float x1;
HXDLIN( 205)		Float x11 = this->get_right();
HXDLIN( 205)		if ((x11 > toIntersect->get_right())) {
HXLINE( 205)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 205)			x1 = this->get_right();
            		}
HXLINE( 207)		if ((x1 <= x0)) {
HXLINE( 209)			result->setEmpty();
HXLINE( 210)			return result;
            		}
HXLINE( 213)		Float y0;
HXDLIN( 213)		if ((this->y < toIntersect->y)) {
HXLINE( 213)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 213)			y0 = this->y;
            		}
HXLINE( 214)		Float y1;
HXDLIN( 214)		Float y11 = this->get_bottom();
HXDLIN( 214)		if ((y11 > toIntersect->get_bottom())) {
HXLINE( 214)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 214)			y1 = this->get_bottom();
            		}
HXLINE( 216)		if ((y1 <= y0)) {
HXLINE( 218)			result->setEmpty();
HXLINE( 219)			return result;
            		}
HXLINE( 222)		result->x = x0;
HXLINE( 223)		result->y = y0;
HXLINE( 224)		result->width = (x1 - x0);
HXLINE( 225)		result->height = (y1 - y0);
HXLINE( 226)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,intersection,return )

bool Rectangle_obj::intersects( ::lime::math::Rectangle toIntersect){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_235_intersects)
HXLINE( 236)		Float x0;
HXDLIN( 236)		if ((this->x < toIntersect->x)) {
HXLINE( 236)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 236)			x0 = this->x;
            		}
HXLINE( 237)		Float x1;
HXDLIN( 237)		Float x11 = this->get_right();
HXDLIN( 237)		if ((x11 > toIntersect->get_right())) {
HXLINE( 237)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 237)			x1 = this->get_right();
            		}
HXLINE( 239)		if ((x1 <= x0)) {
HXLINE( 241)			return false;
            		}
HXLINE( 244)		Float y0;
HXDLIN( 244)		if ((this->y < toIntersect->y)) {
HXLINE( 244)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 244)			y0 = this->y;
            		}
HXLINE( 245)		Float y1;
HXDLIN( 245)		Float y11 = this->get_bottom();
HXDLIN( 245)		if ((y11 > toIntersect->get_bottom())) {
HXLINE( 245)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 245)			y1 = this->get_bottom();
            		}
HXLINE( 247)		return (y1 > y0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersects,return )

bool Rectangle_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_256_isEmpty)
HXDLIN( 256)		if (!((this->width <= 0))) {
HXDLIN( 256)			return (this->height <= 0);
            		}
            		else {
HXDLIN( 256)			return true;
            		}
HXDLIN( 256)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,isEmpty,return )

void Rectangle_obj::offset(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_265_offset)
HXLINE( 266)		 ::lime::math::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 266)		_hx_tmp->x = (_hx_tmp->x + dx);
HXLINE( 267)		 ::lime::math::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 267)		_hx_tmp1->y = (_hx_tmp1->y + dy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,offset,(void))

void Rectangle_obj::offsetVector( ::lime::math::Vector2 vector){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_275_offsetVector)
HXLINE( 276)		 ::lime::math::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 276)		_hx_tmp->x = (_hx_tmp->x + vector->x);
HXLINE( 277)		 ::lime::math::Rectangle _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 277)		_hx_tmp1->y = (_hx_tmp1->y + vector->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,offsetVector,(void))

void Rectangle_obj::setEmpty(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_285_setEmpty)
HXDLIN( 285)		this->x = (this->y = (this->width = (this->height = ( (Float)(0) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,setEmpty,(void))

void Rectangle_obj::setTo(Float xa,Float ya,Float widtha,Float heighta){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_296_setTo)
HXLINE( 297)		this->x = xa;
HXLINE( 298)		this->y = ya;
HXLINE( 299)		this->width = widtha;
HXLINE( 300)		this->height = heighta;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,setTo,(void))

 ::lime::math::Rectangle Rectangle_obj::_hx_union( ::lime::math::Rectangle toUnion, ::lime::math::Rectangle result){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_311_union)
HXLINE( 312)		if (hx::IsNull( result )) {
HXLINE( 312)			result =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 314)		bool _hx_tmp;
HXDLIN( 314)		if ((this->width != 0)) {
HXLINE( 314)			_hx_tmp = (this->height == 0);
            		}
            		else {
HXLINE( 314)			_hx_tmp = true;
            		}
HXDLIN( 314)		if (_hx_tmp) {
HXLINE( 316)			result->copyFrom(toUnion);
            		}
            		else {
HXLINE( 318)			bool _hx_tmp1;
HXDLIN( 318)			if ((toUnion->width != 0)) {
HXLINE( 318)				_hx_tmp1 = (toUnion->height == 0);
            			}
            			else {
HXLINE( 318)				_hx_tmp1 = true;
            			}
HXDLIN( 318)			if (_hx_tmp1) {
HXLINE( 320)				result->copyFrom(hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE( 324)				Float x0;
HXDLIN( 324)				if ((this->x > toUnion->x)) {
HXLINE( 324)					x0 = toUnion->x;
            				}
            				else {
HXLINE( 324)					x0 = this->x;
            				}
HXLINE( 325)				Float x1;
HXDLIN( 325)				Float x11 = this->get_right();
HXDLIN( 325)				if ((x11 < toUnion->get_right())) {
HXLINE( 325)					x1 = toUnion->get_right();
            				}
            				else {
HXLINE( 325)					x1 = this->get_right();
            				}
HXLINE( 326)				Float y0;
HXDLIN( 326)				if ((this->y > toUnion->y)) {
HXLINE( 326)					y0 = toUnion->y;
            				}
            				else {
HXLINE( 326)					y0 = this->y;
            				}
HXLINE( 327)				Float y1;
HXDLIN( 327)				Float y11 = this->get_bottom();
HXDLIN( 327)				if ((y11 < toUnion->get_bottom())) {
HXLINE( 327)					y1 = toUnion->get_bottom();
            				}
            				else {
HXLINE( 327)					y1 = this->get_bottom();
            				}
HXLINE( 329)				result->setTo(x0,y0,(x1 - x0),(y1 - y0));
            			}
            		}
HXLINE( 332)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,_hx_union,return )

 ::Dynamic Rectangle_obj::_hx___toFlashRectangle(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_340___toFlashRectangle)
HXDLIN( 340)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,_hx___toFlashRectangle,return )

Float Rectangle_obj::get_bottom(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_347_get_bottom)
HXDLIN( 347)		return (this->y + this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottom,return )

Float Rectangle_obj::set_bottom(Float b){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_351_set_bottom)
HXLINE( 352)		this->height = (b - this->y);
HXLINE( 353)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottom,return )

 ::lime::math::Vector2 Rectangle_obj::get_bottomRight(){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_358_get_bottomRight)
HXDLIN( 358)		return  ::lime::math::Vector2_obj::__alloc( HX_CTX ,(this->x + this->width),(this->y + this->height));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottomRight,return )

 ::lime::math::Vector2 Rectangle_obj::set_bottomRight( ::lime::math::Vector2 p){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_362_set_bottomRight)
HXLINE( 363)		this->width = (p->x - this->x);
HXLINE( 364)		this->height = (p->y - this->y);
HXLINE( 365)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottomRight,return )

Float Rectangle_obj::get_left(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_370_get_left)
HXDLIN( 370)		return this->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_left,return )

Float Rectangle_obj::set_left(Float l){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_374_set_left)
HXLINE( 375)		 ::lime::math::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 375)		_hx_tmp->width = (_hx_tmp->width - (l - this->x));
HXLINE( 376)		this->x = l;
HXLINE( 377)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_left,return )

Float Rectangle_obj::get_right(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_382_get_right)
HXDLIN( 382)		return (this->x + this->width);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_right,return )

Float Rectangle_obj::set_right(Float r){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_386_set_right)
HXLINE( 387)		this->width = (r - this->x);
HXLINE( 388)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_right,return )

 ::lime::math::Vector2 Rectangle_obj::get_size(){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_393_get_size)
HXDLIN( 393)		return  ::lime::math::Vector2_obj::__alloc( HX_CTX ,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_size,return )

 ::lime::math::Vector2 Rectangle_obj::set_size( ::lime::math::Vector2 p){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_397_set_size)
HXLINE( 398)		this->width = p->x;
HXLINE( 399)		this->height = p->y;
HXLINE( 400)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_size,return )

Float Rectangle_obj::get_top(){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_405_get_top)
HXDLIN( 405)		return this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_top,return )

Float Rectangle_obj::set_top(Float t){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_409_set_top)
HXLINE( 410)		 ::lime::math::Rectangle _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 410)		_hx_tmp->height = (_hx_tmp->height - (t - this->y));
HXLINE( 411)		this->y = t;
HXLINE( 412)		return t;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_top,return )

 ::lime::math::Vector2 Rectangle_obj::get_topLeft(){
            	HX_GC_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_417_get_topLeft)
HXDLIN( 417)		return  ::lime::math::Vector2_obj::__alloc( HX_CTX ,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_topLeft,return )

 ::lime::math::Vector2 Rectangle_obj::set_topLeft( ::lime::math::Vector2 p){
            	HX_STACKFRAME(&_hx_pos_1237f756a3e4c0a2_421_set_topLeft)
HXLINE( 422)		this->x = p->x;
HXLINE( 423)		this->y = p->y;
HXLINE( 424)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_topLeft,return )


hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	hx::ObjectPtr< Rectangle_obj > __this = new Rectangle_obj();
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height) {
	Rectangle_obj *__this = (Rectangle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Rectangle_obj), false, "lime.math.Rectangle"));
	*(void **)__this = Rectangle_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_width,__o_height);
	return __this;
}

Rectangle_obj::Rectangle_obj()
{
}

hx::Val Rectangle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_top() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_left() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_right() ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"union") ) { return hx::Val( _hx_union_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottom() ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_topLeft() ); }
		if (HX_FIELD_EQ(inName,"inflate") ) { return hx::Val( inflate_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_top") ) { return hx::Val( get_top_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_top") ) { return hx::Val( set_top_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"setEmpty") ) { return hx::Val( setEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_left") ) { return hx::Val( get_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_left") ) { return hx::Val( set_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_right") ) { return hx::Val( get_right_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_right") ) { return hx::Val( set_right_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"intersects") ) { return hx::Val( intersects_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottom") ) { return hx::Val( get_bottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottom") ) { return hx::Val( set_bottom_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottomRight() ); }
		if (HX_FIELD_EQ(inName,"get_topLeft") ) { return hx::Val( get_topLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_topLeft") ) { return hx::Val( set_topLeft_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"containsRect") ) { return hx::Val( containsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"intersection") ) { return hx::Val( intersection_dyn() ); }
		if (HX_FIELD_EQ(inName,"offsetVector") ) { return hx::Val( offsetVector_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return hx::Val( containsPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"inflateVector") ) { return hx::Val( inflateVector_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"containsVector") ) { return hx::Val( containsVector_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_bottomRight") ) { return hx::Val( get_bottomRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottomRight") ) { return hx::Val( set_bottomRight_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__toFlashRectangle") ) { return hx::Val( _hx___toFlashRectangle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Rectangle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_top(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_left(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue.Cast<  ::lime::math::Vector2 >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_right(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_topLeft(inValue.Cast<  ::lime::math::Vector2 >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottomRight(inValue.Cast<  ::lime::math::Vector2 >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Rectangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bottom",eb,e6,78,65));
	outFields->push(HX_("bottomRight",f1,a0,f4,4e));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("topLeft",3c,09,c1,e8));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Rectangle_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Rectangle_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,x),HX_("x",78,00,00,00)},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,y),HX_("y",79,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Rectangle_obj_sStaticStorageInfo = 0;
#endif

static ::String Rectangle_obj_sMemberFields[] = {
	HX_("height",e7,07,4c,02),
	HX_("width",06,b6,62,ca),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("clone",5d,13,63,48),
	HX_("contains",1f,5a,7b,2c),
	HX_("containsPoint",b1,b9,eb,92),
	HX_("containsRect",e3,ce,1c,a6),
	HX_("containsVector",42,60,86,9b),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("equals",3f,ee,f2,bf),
	HX_("inflate",87,9c,1b,0c),
	HX_("inflateVector",aa,60,7c,60),
	HX_("intersection",49,a2,61,88),
	HX_("intersects",b4,c2,eb,e3),
	HX_("isEmpty",43,de,5f,0c),
	HX_("offset",93,97,3f,60),
	HX_("offsetVector",b6,2c,50,6f),
	HX_("setEmpty",8b,a3,0e,7e),
	HX_("setTo",bd,91,2f,7a),
	HX_("union",0f,65,e7,a6),
	HX_("__toFlashRectangle",5a,56,1a,96),
	HX_("get_bottom",b4,56,00,56),
	HX_("set_bottom",28,f5,7d,59),
	HX_("get_bottomRight",88,58,d6,0f),
	HX_("set_bottomRight",94,d5,a1,0b),
	HX_("get_left",90,c3,6a,c7),
	HX_("set_left",04,1d,c8,75),
	HX_("get_right",33,68,0d,2d),
	HX_("set_right",3f,54,5e,10),
	HX_("get_size",4a,5c,0e,cc),
	HX_("set_size",be,b5,6b,7a),
	HX_("get_top",2c,2f,cd,26),
	HX_("set_top",38,c0,ce,19),
	HX_("get_topLeft",53,69,bb,6e),
	HX_("set_topLeft",5f,70,28,79),
	::String(null()) };

hx::Class Rectangle_obj::__mClass;

void Rectangle_obj::__register()
{
	Rectangle_obj _hx_dummy;
	Rectangle_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("lime.math.Rectangle",22,67,0f,89);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Rectangle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Rectangle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rectangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rectangle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace math
