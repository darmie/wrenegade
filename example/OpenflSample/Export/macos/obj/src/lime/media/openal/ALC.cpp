// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_media_openal_ALC
#include <lime/media/openal/ALC.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_39_closeDevice,"lime.media.openal.ALC","closeDevice",0x299f7402,"lime.media.openal.ALC.closeDevice","lime/media/openal/ALC.hx",39,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_46_createContext,"lime.media.openal.ALC","createContext",0xb9806ce7,"lime.media.openal.ALC.createContext","lime/media/openal/ALC.hx",46,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_72_destroyContext,"lime.media.openal.ALC","destroyContext",0x9b5c4701,"lime.media.openal.ALC.destroyContext","lime/media/openal/ALC.hx",72,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_77_getContextsDevice,"lime.media.openal.ALC","getContextsDevice",0x197cc724,"lime.media.openal.ALC.getContextsDevice","lime/media/openal/ALC.hx",77,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_90_getCurrentContext,"lime.media.openal.ALC","getCurrentContext",0x166a9280,"lime.media.openal.ALC.getCurrentContext","lime/media/openal/ALC.hx",90,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_106_getError,"lime.media.openal.ALC","getError",0xb0a3653e,"lime.media.openal.ALC.getError","lime/media/openal/ALC.hx",106,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_114_getErrorString,"lime.media.openal.ALC","getErrorString",0x9cb484af,"lime.media.openal.ALC.getErrorString","lime/media/openal/ALC.hx",114,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_126_getIntegerv,"lime.media.openal.ALC","getIntegerv",0x44f57d42,"lime.media.openal.ALC.getIntegerv","lime/media/openal/ALC.hx",126,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_144_getString,"lime.media.openal.ALC","getString",0x9e1cd69b,"lime.media.openal.ALC.getString","lime/media/openal/ALC.hx",144,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_159_makeContextCurrent,"lime.media.openal.ALC","makeContextCurrent",0x65611584,"lime.media.openal.ALC.makeContextCurrent","lime/media/openal/ALC.hx",159,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_166_openDevice,"lime.media.openal.ALC","openDevice",0x31de24ec,"lime.media.openal.ALC.openDevice","lime/media/openal/ALC.hx",166,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_182_pauseDevice,"lime.media.openal.ALC","pauseDevice",0x636035c0,"lime.media.openal.ALC.pauseDevice","lime/media/openal/ALC.hx",182,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_189_processContext,"lime.media.openal.ALC","processContext",0xe14e9a2c,"lime.media.openal.ALC.processContext","lime/media/openal/ALC.hx",189,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_196_resumeDevice,"lime.media.openal.ALC","resumeDevice",0x6ff2aa0f,"lime.media.openal.ALC.resumeDevice","lime/media/openal/ALC.hx",196,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_203_suspendContext,"lime.media.openal.ALC","suspendContext",0x143578bf,"lime.media.openal.ALC.suspendContext","lime/media/openal/ALC.hx",203,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_14_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",14,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_15_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",15,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_16_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",16,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_17_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",17,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_18_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",18,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_19_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",19,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_20_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",20,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_21_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",21,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_22_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",22,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_23_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",23,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_24_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",24,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_25_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",25,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_26_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",26,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_27_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",27,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_28_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",28,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_29_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",29,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_30_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",30,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_31_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",31,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_32_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",32,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_33_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",33,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_34_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",34,0x4354dabb)
namespace lime{
namespace media{
namespace openal{

void ALC_obj::__construct() { }

Dynamic ALC_obj::__CreateEmpty() { return new ALC_obj; }

void *ALC_obj::_hx_vtable = 0;

Dynamic ALC_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ALC_obj > _hx_result = new ALC_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ALC_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6d89df14;
}

int ALC_obj::FALSE;

int ALC_obj::TRUE;

int ALC_obj::FREQUENCY;

int ALC_obj::REFRESH;

int ALC_obj::SYNC;

int ALC_obj::MONO_SOURCES;

int ALC_obj::STEREO_SOURCES;

int ALC_obj::NO_ERROR;

int ALC_obj::INVALID_DEVICE;

int ALC_obj::INVALID_CONTEXT;

int ALC_obj::INVALID_ENUM;

int ALC_obj::INVALID_VALUE;

int ALC_obj::OUT_OF_MEMORY;

int ALC_obj::ATTRIBUTES_SIZE;

int ALC_obj::ALL_ATTRIBUTES;

int ALC_obj::DEFAULT_DEVICE_SPECIFIER;

int ALC_obj::DEVICE_SPECIFIER;

int ALC_obj::EXTENSIONS;

int ALC_obj::ENUMERATE_ALL_EXT;

int ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER;

int ALC_obj::ALL_DEVICES_SPECIFIER;

bool ALC_obj::closeDevice( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_39_closeDevice)
HXDLIN(  39)		return ::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_close_device(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,closeDevice,return )

 ::Dynamic ALC_obj::createContext( ::Dynamic device,::Array< int > attrlist){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_46_createContext)
HXLINE(  58)		 ::hx::Object * handle = ::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_create_context(hx::DynamicPtr(device),hx::DynamicPtr(attrlist));
HXLINE(  60)		if (hx::IsNotNull( handle )) {
HXLINE(  62)			 ::Dynamic this1 = ( ( ::Dynamic)(handle) );
HXDLIN(  62)			return this1;
            		}
HXLINE(  66)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ALC_obj,createContext,return )

void ALC_obj::destroyContext( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_72_destroyContext)
HXDLIN(  72)		::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_destroy_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,destroyContext,(void))

 ::Dynamic ALC_obj::getContextsDevice( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_77_getContextsDevice)
HXLINE(  78)		 ::Dynamic handle = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_get_contexts_device(hx::DynamicPtr(context))) );
HXLINE(  80)		if (hx::IsNotNull( handle )) {
HXLINE(  82)			 ::Dynamic this1 = handle;
HXDLIN(  82)			return this1;
            		}
HXLINE(  86)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getContextsDevice,return )

 ::Dynamic ALC_obj::getCurrentContext(){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_90_getCurrentContext)
HXLINE(  92)		 ::Dynamic handle = ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_get_current_context()) );
HXLINE(  94)		if (hx::IsNotNull( handle )) {
HXLINE(  96)			 ::Dynamic this1 = handle;
HXDLIN(  96)			return this1;
            		}
HXLINE( 100)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ALC_obj,getCurrentContext,return )

int ALC_obj::getError( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_106_getError)
HXDLIN( 106)		return ::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_get_error(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getError,return )

::String ALC_obj::getErrorString( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_114_getErrorString)
HXDLIN( 114)		switch((int)(::lime::media::openal::ALC_obj::getError(device))){
            			case (int)40961: {
HXLINE( 116)				return HX_("INVALID_DEVICE: Invalid device (or no device?)",8d,16,8a,9d);
            			}
            			break;
            			case (int)40962: {
HXLINE( 117)				return HX_("INVALID_CONTEXT: Invalid context (or no context?)",56,39,91,8b);
            			}
            			break;
            			case (int)40963: {
HXLINE( 118)				return HX_("INVALID_ENUM: Invalid enum value",0a,d7,df,59);
            			}
            			break;
            			case (int)40964: {
HXLINE( 119)				return HX_("INVALID_VALUE: Invalid param value",a6,0e,30,55);
            			}
            			break;
            			case (int)40965: {
HXLINE( 120)				return HX_("OUT_OF_MEMORY: OpenAL has run out of memory",b0,dd,fb,0a);
            			}
            			break;
            			default:{
HXLINE( 121)				return HX_("",00,00,00,00);
            			}
            		}
HXLINE( 114)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getErrorString,return )

::Array< int > ALC_obj::getIntegerv( ::Dynamic device,int param,int size){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_126_getIntegerv)
HXLINE( 128)		 ::hx::Object * result = ::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_get_integerv(hx::DynamicPtr(device),param,size);
HXLINE( 136)		return ( ( ::Dynamic)(result) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ALC_obj,getIntegerv,return )

::String ALC_obj::getString( ::Dynamic device,int param){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_144_getString)
HXLINE( 146)		 ::hx::Object * result = ::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_get_string(hx::DynamicPtr(device),param);
HXLINE( 150)		return ( ( ::Dynamic)(result) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ALC_obj,getString,return )

bool ALC_obj::makeContextCurrent( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_159_makeContextCurrent)
HXDLIN( 159)		return ::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_make_context_current(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,makeContextCurrent,return )

 ::Dynamic ALC_obj::openDevice(::String deviceName){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_166_openDevice)
HXLINE( 168)		 ::hx::Object * handle = ::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_open_device(deviceName);
HXLINE( 170)		if (hx::IsNotNull( handle )) {
HXLINE( 172)			 ::Dynamic this1 = ( ( ::Dynamic)(handle) );
HXDLIN( 172)			return this1;
            		}
HXLINE( 176)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,openDevice,return )

void ALC_obj::pauseDevice( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_182_pauseDevice)
HXDLIN( 182)		::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_pause_device(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,pauseDevice,(void))

void ALC_obj::processContext( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_189_processContext)
HXDLIN( 189)		::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_process_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,processContext,(void))

void ALC_obj::resumeDevice( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_196_resumeDevice)
HXDLIN( 196)		::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_resume_device(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,resumeDevice,(void))

void ALC_obj::suspendContext( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_203_suspendContext)
HXDLIN( 203)		::lime::_internal::backend::native::NativeCFFI_obj::lime_alc_suspend_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,suspendContext,(void))


ALC_obj::ALC_obj()
{
}

bool ALC_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"getError") ) { outValue = getError_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getString") ) { outValue = getString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"openDevice") ) { outValue = openDevice_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"closeDevice") ) { outValue = closeDevice_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getIntegerv") ) { outValue = getIntegerv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pauseDevice") ) { outValue = pauseDevice_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resumeDevice") ) { outValue = resumeDevice_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createContext") ) { outValue = createContext_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"destroyContext") ) { outValue = destroyContext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getErrorString") ) { outValue = getErrorString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"processContext") ) { outValue = processContext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"suspendContext") ) { outValue = suspendContext_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getContextsDevice") ) { outValue = getContextsDevice_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getCurrentContext") ) { outValue = getCurrentContext_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"makeContextCurrent") ) { outValue = makeContextCurrent_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ALC_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ALC_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ALC_obj::FALSE,HX_("FALSE",83,6d,3d,79)},
	{hx::fsInt,(void *) &ALC_obj::TRUE,HX_("TRUE",4e,6f,c4,37)},
	{hx::fsInt,(void *) &ALC_obj::FREQUENCY,HX_("FREQUENCY",7c,f2,42,b7)},
	{hx::fsInt,(void *) &ALC_obj::REFRESH,HX_("REFRESH",bb,ad,f4,6c)},
	{hx::fsInt,(void *) &ALC_obj::SYNC,HX_("SYNC",5b,82,20,37)},
	{hx::fsInt,(void *) &ALC_obj::MONO_SOURCES,HX_("MONO_SOURCES",bc,3b,3c,ad)},
	{hx::fsInt,(void *) &ALC_obj::STEREO_SOURCES,HX_("STEREO_SOURCES",d1,0f,99,60)},
	{hx::fsInt,(void *) &ALC_obj::NO_ERROR,HX_("NO_ERROR",ea,b5,7d,2f)},
	{hx::fsInt,(void *) &ALC_obj::INVALID_DEVICE,HX_("INVALID_DEVICE",3e,84,a5,93)},
	{hx::fsInt,(void *) &ALC_obj::INVALID_CONTEXT,HX_("INVALID_CONTEXT",27,a1,3c,df)},
	{hx::fsInt,(void *) &ALC_obj::INVALID_ENUM,HX_("INVALID_ENUM",a9,74,70,13)},
	{hx::fsInt,(void *) &ALC_obj::INVALID_VALUE,HX_("INVALID_VALUE",a9,e8,26,b0)},
	{hx::fsInt,(void *) &ALC_obj::OUT_OF_MEMORY,HX_("OUT_OF_MEMORY",18,f2,97,e1)},
	{hx::fsInt,(void *) &ALC_obj::ATTRIBUTES_SIZE,HX_("ATTRIBUTES_SIZE",69,7c,9f,17)},
	{hx::fsInt,(void *) &ALC_obj::ALL_ATTRIBUTES,HX_("ALL_ATTRIBUTES",95,e2,00,04)},
	{hx::fsInt,(void *) &ALC_obj::DEFAULT_DEVICE_SPECIFIER,HX_("DEFAULT_DEVICE_SPECIFIER",93,a5,bc,d9)},
	{hx::fsInt,(void *) &ALC_obj::DEVICE_SPECIFIER,HX_("DEVICE_SPECIFIER",f5,a8,61,21)},
	{hx::fsInt,(void *) &ALC_obj::EXTENSIONS,HX_("EXTENSIONS",14,f0,79,7b)},
	{hx::fsInt,(void *) &ALC_obj::ENUMERATE_ALL_EXT,HX_("ENUMERATE_ALL_EXT",88,ff,7d,b7)},
	{hx::fsInt,(void *) &ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,HX_("DEFAULT_ALL_DEVICES_SPECIFIER",c0,d6,77,d2)},
	{hx::fsInt,(void *) &ALC_obj::ALL_DEVICES_SPECIFIER,HX_("ALL_DEVICES_SPECIFIER",1e,50,c1,f5)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ALC_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ALC_obj::FALSE,"FALSE");
	HX_MARK_MEMBER_NAME(ALC_obj::TRUE,"TRUE");
	HX_MARK_MEMBER_NAME(ALC_obj::FREQUENCY,"FREQUENCY");
	HX_MARK_MEMBER_NAME(ALC_obj::REFRESH,"REFRESH");
	HX_MARK_MEMBER_NAME(ALC_obj::SYNC,"SYNC");
	HX_MARK_MEMBER_NAME(ALC_obj::MONO_SOURCES,"MONO_SOURCES");
	HX_MARK_MEMBER_NAME(ALC_obj::STEREO_SOURCES,"STEREO_SOURCES");
	HX_MARK_MEMBER_NAME(ALC_obj::NO_ERROR,"NO_ERROR");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_DEVICE,"INVALID_DEVICE");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_CONTEXT,"INVALID_CONTEXT");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_MARK_MEMBER_NAME(ALC_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_MARK_MEMBER_NAME(ALC_obj::ATTRIBUTES_SIZE,"ATTRIBUTES_SIZE");
	HX_MARK_MEMBER_NAME(ALC_obj::ALL_ATTRIBUTES,"ALL_ATTRIBUTES");
	HX_MARK_MEMBER_NAME(ALC_obj::DEFAULT_DEVICE_SPECIFIER,"DEFAULT_DEVICE_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::DEVICE_SPECIFIER,"DEVICE_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::EXTENSIONS,"EXTENSIONS");
	HX_MARK_MEMBER_NAME(ALC_obj::ENUMERATE_ALL_EXT,"ENUMERATE_ALL_EXT");
	HX_MARK_MEMBER_NAME(ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,"DEFAULT_ALL_DEVICES_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::ALL_DEVICES_SPECIFIER,"ALL_DEVICES_SPECIFIER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ALC_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ALC_obj::FALSE,"FALSE");
	HX_VISIT_MEMBER_NAME(ALC_obj::TRUE,"TRUE");
	HX_VISIT_MEMBER_NAME(ALC_obj::FREQUENCY,"FREQUENCY");
	HX_VISIT_MEMBER_NAME(ALC_obj::REFRESH,"REFRESH");
	HX_VISIT_MEMBER_NAME(ALC_obj::SYNC,"SYNC");
	HX_VISIT_MEMBER_NAME(ALC_obj::MONO_SOURCES,"MONO_SOURCES");
	HX_VISIT_MEMBER_NAME(ALC_obj::STEREO_SOURCES,"STEREO_SOURCES");
	HX_VISIT_MEMBER_NAME(ALC_obj::NO_ERROR,"NO_ERROR");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_DEVICE,"INVALID_DEVICE");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_CONTEXT,"INVALID_CONTEXT");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_VISIT_MEMBER_NAME(ALC_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_VISIT_MEMBER_NAME(ALC_obj::ATTRIBUTES_SIZE,"ATTRIBUTES_SIZE");
	HX_VISIT_MEMBER_NAME(ALC_obj::ALL_ATTRIBUTES,"ALL_ATTRIBUTES");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEFAULT_DEVICE_SPECIFIER,"DEFAULT_DEVICE_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEVICE_SPECIFIER,"DEVICE_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::EXTENSIONS,"EXTENSIONS");
	HX_VISIT_MEMBER_NAME(ALC_obj::ENUMERATE_ALL_EXT,"ENUMERATE_ALL_EXT");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,"DEFAULT_ALL_DEVICES_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::ALL_DEVICES_SPECIFIER,"ALL_DEVICES_SPECIFIER");
};

#endif

hx::Class ALC_obj::__mClass;

static ::String ALC_obj_sStaticFields[] = {
	HX_("FALSE",83,6d,3d,79),
	HX_("TRUE",4e,6f,c4,37),
	HX_("FREQUENCY",7c,f2,42,b7),
	HX_("REFRESH",bb,ad,f4,6c),
	HX_("SYNC",5b,82,20,37),
	HX_("MONO_SOURCES",bc,3b,3c,ad),
	HX_("STEREO_SOURCES",d1,0f,99,60),
	HX_("NO_ERROR",ea,b5,7d,2f),
	HX_("INVALID_DEVICE",3e,84,a5,93),
	HX_("INVALID_CONTEXT",27,a1,3c,df),
	HX_("INVALID_ENUM",a9,74,70,13),
	HX_("INVALID_VALUE",a9,e8,26,b0),
	HX_("OUT_OF_MEMORY",18,f2,97,e1),
	HX_("ATTRIBUTES_SIZE",69,7c,9f,17),
	HX_("ALL_ATTRIBUTES",95,e2,00,04),
	HX_("DEFAULT_DEVICE_SPECIFIER",93,a5,bc,d9),
	HX_("DEVICE_SPECIFIER",f5,a8,61,21),
	HX_("EXTENSIONS",14,f0,79,7b),
	HX_("ENUMERATE_ALL_EXT",88,ff,7d,b7),
	HX_("DEFAULT_ALL_DEVICES_SPECIFIER",c0,d6,77,d2),
	HX_("ALL_DEVICES_SPECIFIER",1e,50,c1,f5),
	HX_("closeDevice",6e,02,c8,2b),
	HX_("createContext",53,6e,ba,01),
	HX_("destroyContext",15,84,e3,85),
	HX_("getContextsDevice",90,ee,91,9c),
	HX_("getCurrentContext",ec,b9,7f,99),
	HX_("getError",52,db,00,d3),
	HX_("getErrorString",c3,c1,3b,87),
	HX_("getIntegerv",ae,0b,1e,47),
	HX_("getString",07,b2,86,8d),
	HX_("makeContextCurrent",98,6c,ce,94),
	HX_("openDevice",00,48,14,bf),
	HX_("pauseDevice",2c,c4,88,65),
	HX_("processContext",40,d7,d5,cb),
	HX_("resumeDevice",23,ba,46,51),
	HX_("suspendContext",d3,b5,bc,fe),
	::String(null())
};

void ALC_obj::__register()
{
	ALC_obj _hx_dummy;
	ALC_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("lime.media.openal.ALC",02,c4,da,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ALC_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ALC_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ALC_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ALC_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ALC_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ALC_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ALC_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ALC_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_14_boot)
HXDLIN(  14)		FALSE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_15_boot)
HXDLIN(  15)		TRUE = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_16_boot)
HXDLIN(  16)		FREQUENCY = 4103;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_17_boot)
HXDLIN(  17)		REFRESH = 4104;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_18_boot)
HXDLIN(  18)		SYNC = 4105;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_19_boot)
HXDLIN(  19)		MONO_SOURCES = 4112;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_20_boot)
HXDLIN(  20)		STEREO_SOURCES = 4113;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_21_boot)
HXDLIN(  21)		NO_ERROR = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_22_boot)
HXDLIN(  22)		INVALID_DEVICE = 40961;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_23_boot)
HXDLIN(  23)		INVALID_CONTEXT = 40962;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_24_boot)
HXDLIN(  24)		INVALID_ENUM = 40963;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_25_boot)
HXDLIN(  25)		INVALID_VALUE = 40964;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_26_boot)
HXDLIN(  26)		OUT_OF_MEMORY = 40965;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_27_boot)
HXDLIN(  27)		ATTRIBUTES_SIZE = 4098;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_28_boot)
HXDLIN(  28)		ALL_ATTRIBUTES = 4099;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_29_boot)
HXDLIN(  29)		DEFAULT_DEVICE_SPECIFIER = 4100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_30_boot)
HXDLIN(  30)		DEVICE_SPECIFIER = 4101;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_31_boot)
HXDLIN(  31)		EXTENSIONS = 4102;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_32_boot)
HXDLIN(  32)		ENUMERATE_ALL_EXT = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_33_boot)
HXDLIN(  33)		DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_34_boot)
HXDLIN(  34)		ALL_DEVICES_SPECIFIER = 4115;
            	}
}

} // end namespace lime
} // end namespace media
} // end namespace openal
