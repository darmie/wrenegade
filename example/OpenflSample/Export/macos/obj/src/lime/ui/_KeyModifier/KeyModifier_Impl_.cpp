// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_31_get_altKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_altKey",0x98ede94d,"lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey","lime/ui/KeyModifier.hx",31,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_35_set_altKey,"lime.ui._KeyModifier.KeyModifier_Impl_","set_altKey",0x9c6b87c1,"lime.ui._KeyModifier.KeyModifier_Impl_.set_altKey","lime/ui/KeyModifier.hx",35,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_50_get_capsLock,"lime.ui._KeyModifier.KeyModifier_Impl_","get_capsLock",0x26398dc3,"lime.ui._KeyModifier.KeyModifier_Impl_.get_capsLock","lime/ui/KeyModifier.hx",50,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_54_set_capsLock,"lime.ui._KeyModifier.KeyModifier_Impl_","set_capsLock",0x3b32b137,"lime.ui._KeyModifier.KeyModifier_Impl_.set_capsLock","lime/ui/KeyModifier.hx",54,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_69_get_ctrlKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_ctrlKey",0xac33207d,"lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey","lime/ui/KeyModifier.hx",69,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_73_set_ctrlKey,"lime.ui._KeyModifier.KeyModifier_Impl_","set_ctrlKey",0xb6a02789,"lime.ui._KeyModifier.KeyModifier_Impl_.set_ctrlKey","lime/ui/KeyModifier.hx",73,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_88_get_metaKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_metaKey",0x6c372aa3,"lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey","lime/ui/KeyModifier.hx",88,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_92_set_metaKey,"lime.ui._KeyModifier.KeyModifier_Impl_","set_metaKey",0x76a431af,"lime.ui._KeyModifier.KeyModifier_Impl_.set_metaKey","lime/ui/KeyModifier.hx",92,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_107_get_numLock,"lime.ui._KeyModifier.KeyModifier_Impl_","get_numLock",0xe5ee2c1a,"lime.ui._KeyModifier.KeyModifier_Impl_.get_numLock","lime/ui/KeyModifier.hx",107,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_111_set_numLock,"lime.ui._KeyModifier.KeyModifier_Impl_","set_numLock",0xf05b3326,"lime.ui._KeyModifier.KeyModifier_Impl_.set_numLock","lime/ui/KeyModifier.hx",111,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_126_get_shiftKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_shiftKey",0xae171754,"lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey","lime/ui/KeyModifier.hx",126,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_130_set_shiftKey,"lime.ui._KeyModifier.KeyModifier_Impl_","set_shiftKey",0xc3103ac8,"lime.ui._KeyModifier.KeyModifier_Impl_.set_shiftKey","lime/ui/KeyModifier.hx",130,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_5_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",5,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_6_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",6,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_7_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",7,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_8_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",8,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_9_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",9,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_10_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",10,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_11_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",11,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_12_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",12,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_13_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",13,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_14_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",14,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_15_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",15,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_16_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",16,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_17_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",17,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_18_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",18,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_19_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",19,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_20_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",20,0xae70b869)
namespace lime{
namespace ui{
namespace _KeyModifier{

void KeyModifier_Impl__obj::__construct() { }

Dynamic KeyModifier_Impl__obj::__CreateEmpty() { return new KeyModifier_Impl__obj; }

void *KeyModifier_Impl__obj::_hx_vtable = 0;

Dynamic KeyModifier_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< KeyModifier_Impl__obj > _hx_result = new KeyModifier_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool KeyModifier_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55d77d36;
}

int KeyModifier_Impl__obj::NONE;

int KeyModifier_Impl__obj::LEFT_SHIFT;

int KeyModifier_Impl__obj::RIGHT_SHIFT;

int KeyModifier_Impl__obj::LEFT_CTRL;

int KeyModifier_Impl__obj::RIGHT_CTRL;

int KeyModifier_Impl__obj::LEFT_ALT;

int KeyModifier_Impl__obj::RIGHT_ALT;

int KeyModifier_Impl__obj::LEFT_META;

int KeyModifier_Impl__obj::RIGHT_META;

int KeyModifier_Impl__obj::NUM_LOCK;

int KeyModifier_Impl__obj::CAPS_LOCK;

int KeyModifier_Impl__obj::MODE;

int KeyModifier_Impl__obj::CTRL;

int KeyModifier_Impl__obj::SHIFT;

int KeyModifier_Impl__obj::ALT;

int KeyModifier_Impl__obj::META;

bool KeyModifier_Impl__obj::get_altKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_31_get_altKey)
HXDLIN(  31)		if (((this1 & 256) <= 0)) {
HXDLIN(  31)			return ((this1 & 512) > 0);
            		}
            		else {
HXDLIN(  31)			return true;
            		}
HXDLIN(  31)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_altKey,return )

bool KeyModifier_Impl__obj::set_altKey(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_35_set_altKey)
HXLINE(  36)		if (value) {
HXLINE(  38)			this1 = (this1 | 768);
            		}
            		else {
HXLINE(  42)			this1 = (this1 & (268435455 - 768));
            		}
HXLINE(  45)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_altKey,return )

bool KeyModifier_Impl__obj::get_capsLock(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_50_get_capsLock)
HXDLIN(  50)		if (((this1 & 8192) <= 0)) {
HXDLIN(  50)			return ((this1 & 8192) > 0);
            		}
            		else {
HXDLIN(  50)			return true;
            		}
HXDLIN(  50)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_capsLock,return )

bool KeyModifier_Impl__obj::set_capsLock(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_54_set_capsLock)
HXLINE(  55)		if (value) {
HXLINE(  57)			this1 = (this1 | 8192);
            		}
            		else {
HXLINE(  61)			this1 = (this1 & (268435455 - 8192));
            		}
HXLINE(  64)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_capsLock,return )

bool KeyModifier_Impl__obj::get_ctrlKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_69_get_ctrlKey)
HXDLIN(  69)		if (((this1 & 64) <= 0)) {
HXDLIN(  69)			return ((this1 & 128) > 0);
            		}
            		else {
HXDLIN(  69)			return true;
            		}
HXDLIN(  69)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_ctrlKey,return )

bool KeyModifier_Impl__obj::set_ctrlKey(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_73_set_ctrlKey)
HXLINE(  74)		if (value) {
HXLINE(  76)			this1 = (this1 | 192);
            		}
            		else {
HXLINE(  80)			this1 = (this1 & (268435455 - 192));
            		}
HXLINE(  83)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_ctrlKey,return )

bool KeyModifier_Impl__obj::get_metaKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_88_get_metaKey)
HXDLIN(  88)		if (((this1 & 1024) <= 0)) {
HXDLIN(  88)			return ((this1 & 2048) > 0);
            		}
            		else {
HXDLIN(  88)			return true;
            		}
HXDLIN(  88)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_metaKey,return )

bool KeyModifier_Impl__obj::set_metaKey(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_92_set_metaKey)
HXLINE(  93)		if (value) {
HXLINE(  95)			this1 = (this1 | 3072);
            		}
            		else {
HXLINE(  99)			this1 = (this1 & (268435455 - 3072));
            		}
HXLINE( 102)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_metaKey,return )

bool KeyModifier_Impl__obj::get_numLock(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_107_get_numLock)
HXDLIN( 107)		if (((this1 & 4096) <= 0)) {
HXDLIN( 107)			return ((this1 & 4096) > 0);
            		}
            		else {
HXDLIN( 107)			return true;
            		}
HXDLIN( 107)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_numLock,return )

bool KeyModifier_Impl__obj::set_numLock(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_111_set_numLock)
HXLINE( 112)		if (value) {
HXLINE( 114)			this1 = (this1 | 4096);
            		}
            		else {
HXLINE( 118)			this1 = (this1 & (268435455 - 4096));
            		}
HXLINE( 121)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_numLock,return )

bool KeyModifier_Impl__obj::get_shiftKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_126_get_shiftKey)
HXDLIN( 126)		if (((this1 & 1) <= 0)) {
HXDLIN( 126)			return ((this1 & 2) > 0);
            		}
            		else {
HXDLIN( 126)			return true;
            		}
HXDLIN( 126)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_shiftKey,return )

bool KeyModifier_Impl__obj::set_shiftKey(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_130_set_shiftKey)
HXLINE( 131)		if (value) {
HXLINE( 133)			this1 = (this1 | 3);
            		}
            		else {
HXLINE( 137)			this1 = (this1 & (268435455 - 3));
            		}
HXLINE( 140)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_shiftKey,return )


KeyModifier_Impl__obj::KeyModifier_Impl__obj()
{
}

bool KeyModifier_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"get_altKey") ) { outValue = get_altKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_altKey") ) { outValue = set_altKey_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_ctrlKey") ) { outValue = get_ctrlKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_ctrlKey") ) { outValue = set_ctrlKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_metaKey") ) { outValue = get_metaKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_metaKey") ) { outValue = set_metaKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_numLock") ) { outValue = get_numLock_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_numLock") ) { outValue = set_numLock_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_capsLock") ) { outValue = get_capsLock_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_capsLock") ) { outValue = set_capsLock_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_shiftKey") ) { outValue = get_shiftKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_shiftKey") ) { outValue = set_shiftKey_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *KeyModifier_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo KeyModifier_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::NONE,HX_("NONE",b8,da,ca,33)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::LEFT_SHIFT,HX_("LEFT_SHIFT",ea,7a,fb,2f)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::RIGHT_SHIFT,HX_("RIGHT_SHIFT",5f,24,a2,4e)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::LEFT_CTRL,HX_("LEFT_CTRL",23,23,b7,de)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::RIGHT_CTRL,HX_("RIGHT_CTRL",4e,1f,4d,c3)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::LEFT_ALT,HX_("LEFT_ALT",91,b9,e3,c9)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::RIGHT_ALT,HX_("RIGHT_ALT",c6,ab,81,cf)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::LEFT_META,HX_("LEFT_META",3d,e5,47,e5)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::RIGHT_META,HX_("RIGHT_META",68,e1,dd,c9)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::NUM_LOCK,HX_("NUM_LOCK",e4,7b,03,eb)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::CAPS_LOCK,HX_("CAPS_LOCK",09,04,db,ce)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::MODE,HX_("MODE",63,9b,21,33)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::CTRL,HX_("CTRL",ab,50,89,2c)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::SHIFT,HX_("SHIFT",62,24,11,fa)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::ALT,HX_("ALT",09,95,31,00)},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::META,HX_("META",c5,12,1a,33)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void KeyModifier_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::NONE,"NONE");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_SHIFT,"LEFT_SHIFT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_SHIFT,"RIGHT_SHIFT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_CTRL,"LEFT_CTRL");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_CTRL,"RIGHT_CTRL");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_ALT,"LEFT_ALT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_ALT,"RIGHT_ALT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_META,"LEFT_META");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_META,"RIGHT_META");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::NUM_LOCK,"NUM_LOCK");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::CAPS_LOCK,"CAPS_LOCK");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::MODE,"MODE");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::CTRL,"CTRL");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::SHIFT,"SHIFT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::ALT,"ALT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::META,"META");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KeyModifier_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::NONE,"NONE");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_SHIFT,"LEFT_SHIFT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_SHIFT,"RIGHT_SHIFT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_CTRL,"LEFT_CTRL");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_CTRL,"RIGHT_CTRL");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_ALT,"LEFT_ALT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_ALT,"RIGHT_ALT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_META,"LEFT_META");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_META,"RIGHT_META");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::NUM_LOCK,"NUM_LOCK");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::CAPS_LOCK,"CAPS_LOCK");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::MODE,"MODE");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::CTRL,"CTRL");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::SHIFT,"SHIFT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::ALT,"ALT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::META,"META");
};

#endif

hx::Class KeyModifier_Impl__obj::__mClass;

static ::String KeyModifier_Impl__obj_sStaticFields[] = {
	HX_("NONE",b8,da,ca,33),
	HX_("LEFT_SHIFT",ea,7a,fb,2f),
	HX_("RIGHT_SHIFT",5f,24,a2,4e),
	HX_("LEFT_CTRL",23,23,b7,de),
	HX_("RIGHT_CTRL",4e,1f,4d,c3),
	HX_("LEFT_ALT",91,b9,e3,c9),
	HX_("RIGHT_ALT",c6,ab,81,cf),
	HX_("LEFT_META",3d,e5,47,e5),
	HX_("RIGHT_META",68,e1,dd,c9),
	HX_("NUM_LOCK",e4,7b,03,eb),
	HX_("CAPS_LOCK",09,04,db,ce),
	HX_("MODE",63,9b,21,33),
	HX_("CTRL",ab,50,89,2c),
	HX_("SHIFT",62,24,11,fa),
	HX_("ALT",09,95,31,00),
	HX_("META",c5,12,1a,33),
	HX_("get_altKey",bf,17,52,35),
	HX_("set_altKey",33,b6,cf,38),
	HX_("get_capsLock",b5,bc,db,c6),
	HX_("set_capsLock",29,e0,d4,db),
	HX_("get_ctrlKey",cb,95,77,e7),
	HX_("set_ctrlKey",d7,9c,e4,f1),
	HX_("get_metaKey",f1,9f,7b,a7),
	HX_("set_metaKey",fd,a6,e8,b1),
	HX_("get_numLock",68,a1,32,21),
	HX_("set_numLock",74,a8,9f,2b),
	HX_("get_shiftKey",46,46,b9,4e),
	HX_("set_shiftKey",ba,69,b2,63),
	::String(null())
};

void KeyModifier_Impl__obj::__register()
{
	KeyModifier_Impl__obj _hx_dummy;
	KeyModifier_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("lime.ui._KeyModifier.KeyModifier_Impl_",20,28,aa,51);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &KeyModifier_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = KeyModifier_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(KeyModifier_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< KeyModifier_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KeyModifier_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyModifier_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyModifier_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void KeyModifier_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_5_boot)
HXDLIN(   5)		NONE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_6_boot)
HXDLIN(   6)		LEFT_SHIFT = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_7_boot)
HXDLIN(   7)		RIGHT_SHIFT = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_8_boot)
HXDLIN(   8)		LEFT_CTRL = 64;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_9_boot)
HXDLIN(   9)		RIGHT_CTRL = 128;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_10_boot)
HXDLIN(  10)		LEFT_ALT = 256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_11_boot)
HXDLIN(  11)		RIGHT_ALT = 512;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_12_boot)
HXDLIN(  12)		LEFT_META = 1024;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_13_boot)
HXDLIN(  13)		RIGHT_META = 2048;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_14_boot)
HXDLIN(  14)		NUM_LOCK = 4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_15_boot)
HXDLIN(  15)		CAPS_LOCK = 8192;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_16_boot)
HXDLIN(  16)		MODE = 16384;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_17_boot)
HXDLIN(  17)		CTRL = 192;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_18_boot)
HXDLIN(  18)		SHIFT = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_19_boot)
HXDLIN(  19)		ALT = 768;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_20_boot)
HXDLIN(  20)		META = 3072;
            	}
}

} // end namespace lime
} // end namespace ui
} // end namespace _KeyModifier
