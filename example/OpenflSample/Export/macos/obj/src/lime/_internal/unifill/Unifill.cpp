// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_lime__internal_unifill_CodePointIter
#include <lime/_internal/unifill/CodePointIter.h>
#endif
#ifndef INCLUDED_lime__internal_unifill_Exception
#include <lime/_internal/unifill/Exception.h>
#endif
#ifndef INCLUDED_lime__internal_unifill_InvalidCodePoint
#include <lime/_internal/unifill/InvalidCodePoint.h>
#endif
#ifndef INCLUDED_lime__internal_unifill_Unifill
#include <lime/_internal/unifill/Unifill.h>
#endif
#ifndef INCLUDED_lime__internal_unifill__Utf8_Utf8_Impl_
#include <lime/_internal/unifill/_Utf8/Utf8_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_19_uLength,"lime._internal.unifill.Unifill","uLength",0x440e9cba,"lime._internal.unifill.Unifill.uLength","lime/_internal/unifill/Unifill.hx",19,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_27_uCharAt,"lime._internal.unifill.Unifill","uCharAt",0x5c7c813d,"lime._internal.unifill.Unifill.uCharAt","lime/_internal/unifill/Unifill.hx",27,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_40_uCharCodeAt,"lime._internal.unifill.Unifill","uCharCodeAt",0x48de68ca,"lime._internal.unifill.Unifill.uCharCodeAt","lime/_internal/unifill/Unifill.hx",40,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_52_uCodePointAt,"lime._internal.unifill.Unifill","uCodePointAt",0x50bc5f62,"lime._internal.unifill.Unifill.uCodePointAt","lime/_internal/unifill/Unifill.hx",52,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_61_uIndexOf,"lime._internal.unifill.Unifill","uIndexOf",0xa1df1a75,"lime._internal.unifill.Unifill.uIndexOf","lime/_internal/unifill/Unifill.hx",61,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_72_uLastIndexOf,"lime._internal.unifill.Unifill","uLastIndexOf",0x9a3314bf,"lime._internal.unifill.Unifill.uLastIndexOf","lime/_internal/unifill/Unifill.hx",72,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_83_uSplit,"lime._internal.unifill.Unifill","uSplit",0x087cb986,"lime._internal.unifill.Unifill.uSplit","lime/_internal/unifill/Unifill.hx",83,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_99_uSubstr,"lime._internal.unifill.Unifill","uSubstr",0x3f11f705,"lime._internal.unifill.Unifill.uSubstr","lime/_internal/unifill/Unifill.hx",99,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_111_uSubstring,"lime._internal.unifill.Unifill","uSubstring",0x08e086fd,"lime._internal.unifill.Unifill.uSubstring","lime/_internal/unifill/Unifill.hx",111,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_122_uIterator,"lime._internal.unifill.Unifill","uIterator",0xce51eec2,"lime._internal.unifill.Unifill.uIterator","lime/_internal/unifill/Unifill.hx",122,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_129_uCompare,"lime._internal.unifill.Unifill","uCompare",0x4488ea51,"lime._internal.unifill.Unifill.uCompare","lime/_internal/unifill/Unifill.hx",129,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_148_uToString,"lime._internal.unifill.Unifill","uToString",0x73267580,"lime._internal.unifill.Unifill.uToString","lime/_internal/unifill/Unifill.hx",148,0x8890ccf4)
HX_LOCAL_STACK_FRAME(_hx_pos_7885333c35d7080e_156_uAddChar,"lime._internal.unifill.Unifill","uAddChar",0x3f1c7343,"lime._internal.unifill.Unifill.uAddChar","lime/_internal/unifill/Unifill.hx",156,0x8890ccf4)
namespace lime{
namespace _internal{
namespace unifill{

void Unifill_obj::__construct() { }

Dynamic Unifill_obj::__CreateEmpty() { return new Unifill_obj; }

void *Unifill_obj::_hx_vtable = 0;

Dynamic Unifill_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Unifill_obj > _hx_result = new Unifill_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Unifill_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1748c143;
}

int Unifill_obj::uLength(::String s){
            	HX_STACKFRAME(&_hx_pos_7885333c35d7080e_19_uLength)
HXDLIN(  19)		::String this1 = s;
HXDLIN(  19)		::String this2 = this1;
HXDLIN(  19)		return ::lime::_internal::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this2,0,s.length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Unifill_obj,uLength,return )

::String Unifill_obj::uCharAt(::String s,int index){
            	HX_GC_STACKFRAME(&_hx_pos_7885333c35d7080e_27_uCharAt)
HXDLIN(  27)		int codePoint = ::haxe::Utf8_obj::charCodeAt(s,index);
HXDLIN(  27)		 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN(  27)		if ((codePoint <= 127)) {
HXDLIN(  27)			buf->b->push(codePoint);
            		}
            		else {
HXDLIN(  27)			if ((codePoint <= 2047)) {
HXDLIN(  27)				buf->b->push((192 | (codePoint >> 6)));
HXDLIN(  27)				buf->b->push((128 | (codePoint & 63)));
            			}
            			else {
HXDLIN(  27)				if ((codePoint <= 65535)) {
HXDLIN(  27)					buf->b->push((224 | (codePoint >> 12)));
HXDLIN(  27)					buf->b->push((128 | ((codePoint >> 6) & 63)));
HXDLIN(  27)					buf->b->push((128 | (codePoint & 63)));
            				}
            				else {
HXDLIN(  27)					if ((codePoint <= 1114111)) {
HXDLIN(  27)						buf->b->push((240 | (codePoint >> 18)));
HXDLIN(  27)						buf->b->push((128 | ((codePoint >> 12) & 63)));
HXDLIN(  27)						buf->b->push((128 | ((codePoint >> 6) & 63)));
HXDLIN(  27)						buf->b->push((128 | (codePoint & 63)));
            					}
            					else {
HXDLIN(  27)						HX_STACK_DO_THROW( ::lime::_internal::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,codePoint));
            					}
            				}
            			}
            		}
HXDLIN(  27)		::String this1 = buf->getBytes()->toString();
HXDLIN(  27)		::String this2 = this1;
HXDLIN(  27)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Unifill_obj,uCharAt,return )

int Unifill_obj::uCharCodeAt(::String s,int index){
            	HX_STACKFRAME(&_hx_pos_7885333c35d7080e_40_uCharCodeAt)
HXDLIN(  40)		return ::haxe::Utf8_obj::charCodeAt(s,index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Unifill_obj,uCharCodeAt,return )

int Unifill_obj::uCodePointAt(::String s,int index){
            	HX_STACKFRAME(&_hx_pos_7885333c35d7080e_52_uCodePointAt)
HXDLIN(  52)		return ::haxe::Utf8_obj::charCodeAt(s,index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Unifill_obj,uCodePointAt,return )

int Unifill_obj::uIndexOf(::String s,::String value,hx::Null< int >  __o_startIndex){
            		int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_7885333c35d7080e_61_uIndexOf)
HXLINE(  62)		::String this1 = s;
HXDLIN(  62)		::String this2 = this1;
HXDLIN(  62)		::String this3 = this2;
HXDLIN(  62)		int index;
HXDLIN(  62)		if ((startIndex >= 0)) {
HXLINE(  62)			int index1 = 0;
HXDLIN(  62)			int len = this3.length;
HXDLIN(  62)			int i = 0;
HXDLIN(  62)			while(true){
HXLINE(  62)				bool index2;
HXDLIN(  62)				if ((i < startIndex)) {
HXLINE(  62)					index2 = (index1 < len);
            				}
            				else {
HXLINE(  62)					index2 = false;
            				}
HXDLIN(  62)				if (!(index2)) {
HXLINE(  62)					goto _hx_goto_4;
            				}
HXDLIN(  62)				int c = this3.cca(index1);
HXDLIN(  62)				int index3;
HXDLIN(  62)				if ((c < 192)) {
HXLINE(  62)					index3 = 1;
            				}
            				else {
HXLINE(  62)					if ((c < 224)) {
HXLINE(  62)						index3 = 2;
            					}
            					else {
HXLINE(  62)						if ((c < 240)) {
HXLINE(  62)							index3 = 3;
            						}
            						else {
HXLINE(  62)							if ((c < 248)) {
HXLINE(  62)								index3 = 4;
            							}
            							else {
HXLINE(  62)								index3 = 1;
            							}
            						}
            					}
            				}
HXDLIN(  62)				index1 = (index1 + index3);
HXDLIN(  62)				i = (i + 1);
            			}
            			_hx_goto_4:;
HXDLIN(  62)			index = index1;
            		}
            		else {
HXLINE(  62)			int index4 = 0;
HXDLIN(  62)			int count = 0;
HXDLIN(  62)			while(true){
HXLINE(  62)				bool index5;
HXDLIN(  62)				if ((count < -(startIndex))) {
HXLINE(  62)					index5 = (0 < index4);
            				}
            				else {
HXLINE(  62)					index5 = false;
            				}
HXDLIN(  62)				if (!(index5)) {
HXLINE(  62)					goto _hx_goto_5;
            				}
HXDLIN(  62)				::String this4 = this3;
HXDLIN(  62)				int c1 = this4.cca((index4 - 1));
HXDLIN(  62)				int index6;
HXDLIN(  62)				bool index7;
HXDLIN(  62)				if ((c1 >= 128)) {
HXLINE(  62)					index7 = (c1 >= 192);
            				}
            				else {
HXLINE(  62)					index7 = true;
            				}
HXDLIN(  62)				if (index7) {
HXLINE(  62)					index6 = 1;
            				}
            				else {
HXLINE(  62)					if (((this4.cca((index4 - 2)) & 224) == 192)) {
HXLINE(  62)						index6 = 2;
            					}
            					else {
HXLINE(  62)						if (((this4.cca((index4 - 3)) & 240) == 224)) {
HXLINE(  62)							index6 = 3;
            						}
            						else {
HXLINE(  62)							if (((this4.cca((index4 - 4)) & 248) == 240)) {
HXLINE(  62)								index6 = 4;
            							}
            							else {
HXLINE(  62)								index6 = 1;
            							}
            						}
            					}
            				}
HXDLIN(  62)				index4 = (index4 - index6);
HXDLIN(  62)				count = (count + 1);
            			}
            			_hx_goto_5:;
HXDLIN(  62)			index = index4;
            		}
HXDLIN(  62)		int index8 = s.indexOf(value,index);
HXLINE(  63)		if ((index8 >= 0)) {
HXLINE(  63)			::String this5 = s;
HXDLIN(  63)			::String this6 = this5;
HXDLIN(  63)			return ::lime::_internal::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this6,0,index8);
            		}
            		else {
HXLINE(  63)			return -1;
            		}
HXDLIN(  63)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Unifill_obj,uIndexOf,return )

int Unifill_obj::uLastIndexOf(::String s,::String value, ::Dynamic startIndex){
            	HX_STACKFRAME(&_hx_pos_7885333c35d7080e_72_uLastIndexOf)
HXLINE(  73)		if (hx::IsNull( startIndex )) {
HXLINE(  73)			startIndex = (s.length - 1);
            		}
HXLINE(  74)		int codePointOffset = ( (int)(startIndex) );
HXDLIN(  74)		::String this1 = s;
HXDLIN(  74)		::String this2 = this1;
HXDLIN(  74)		::String this3 = this2;
HXDLIN(  74)		int index;
HXDLIN(  74)		if ((codePointOffset >= 0)) {
HXLINE(  74)			int index1 = 0;
HXDLIN(  74)			int len = this3.length;
HXDLIN(  74)			int i = 0;
HXDLIN(  74)			while(true){
HXLINE(  74)				bool index2;
HXDLIN(  74)				if ((i < codePointOffset)) {
HXLINE(  74)					index2 = (index1 < len);
            				}
            				else {
HXLINE(  74)					index2 = false;
            				}
HXDLIN(  74)				if (!(index2)) {
HXLINE(  74)					goto _hx_goto_7;
            				}
HXDLIN(  74)				int c = this3.cca(index1);
HXDLIN(  74)				int index3;
HXDLIN(  74)				if ((c < 192)) {
HXLINE(  74)					index3 = 1;
            				}
            				else {
HXLINE(  74)					if ((c < 224)) {
HXLINE(  74)						index3 = 2;
            					}
            					else {
HXLINE(  74)						if ((c < 240)) {
HXLINE(  74)							index3 = 3;
            						}
            						else {
HXLINE(  74)							if ((c < 248)) {
HXLINE(  74)								index3 = 4;
            							}
            							else {
HXLINE(  74)								index3 = 1;
            							}
            						}
            					}
            				}
HXDLIN(  74)				index1 = (index1 + index3);
HXDLIN(  74)				i = (i + 1);
            			}
            			_hx_goto_7:;
HXDLIN(  74)			index = index1;
            		}
            		else {
HXLINE(  74)			int index4 = 0;
HXDLIN(  74)			int count = 0;
HXDLIN(  74)			while(true){
HXLINE(  74)				bool index5;
HXDLIN(  74)				if ((count < -(codePointOffset))) {
HXLINE(  74)					index5 = (0 < index4);
            				}
            				else {
HXLINE(  74)					index5 = false;
            				}
HXDLIN(  74)				if (!(index5)) {
HXLINE(  74)					goto _hx_goto_8;
            				}
HXDLIN(  74)				::String this4 = this3;
HXDLIN(  74)				int c1 = this4.cca((index4 - 1));
HXDLIN(  74)				int index6;
HXDLIN(  74)				bool index7;
HXDLIN(  74)				if ((c1 >= 128)) {
HXLINE(  74)					index7 = (c1 >= 192);
            				}
            				else {
HXLINE(  74)					index7 = true;
            				}
HXDLIN(  74)				if (index7) {
HXLINE(  74)					index6 = 1;
            				}
            				else {
HXLINE(  74)					if (((this4.cca((index4 - 2)) & 224) == 192)) {
HXLINE(  74)						index6 = 2;
            					}
            					else {
HXLINE(  74)						if (((this4.cca((index4 - 3)) & 240) == 224)) {
HXLINE(  74)							index6 = 3;
            						}
            						else {
HXLINE(  74)							if (((this4.cca((index4 - 4)) & 248) == 240)) {
HXLINE(  74)								index6 = 4;
            							}
            							else {
HXLINE(  74)								index6 = 1;
            							}
            						}
            					}
            				}
HXDLIN(  74)				index4 = (index4 - index6);
HXDLIN(  74)				count = (count + 1);
            			}
            			_hx_goto_8:;
HXDLIN(  74)			index = index4;
            		}
HXDLIN(  74)		int index8 = s.lastIndexOf(value,index);
HXLINE(  75)		if ((index8 >= 0)) {
HXLINE(  75)			::String this5 = s;
HXDLIN(  75)			::String this6 = this5;
HXDLIN(  75)			return ::lime::_internal::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this6,0,index8);
            		}
            		else {
HXLINE(  75)			return -1;
            		}
HXDLIN(  75)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Unifill_obj,uLastIndexOf,return )

::Array< ::String > Unifill_obj::uSplit(::String s,::String delimiter){
            	HX_STACKFRAME(&_hx_pos_7885333c35d7080e_83_uSplit)
HXDLIN(  83)		if ((delimiter.length == 0)) {
HXLINE(  85)			::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN(  85)			{
HXLINE(  85)				int _g1_i = 0;
HXDLIN(  85)				::String _g1_string = s;
HXDLIN(  85)				int _g1_index = 0;
HXDLIN(  85)				int _g1_endIndex = s.length;
HXDLIN(  85)				while((_g1_index < _g1_endIndex)){
HXLINE(  85)					_g1_i = _g1_index;
HXDLIN(  85)					::String this1 = _g1_string;
HXDLIN(  85)					::String this2 = this1;
HXDLIN(  85)					int c = this2.cca(_g1_index);
HXDLIN(  85)					int _g1_index1;
HXDLIN(  85)					if ((c < 192)) {
HXLINE(  85)						_g1_index1 = 1;
            					}
            					else {
HXLINE(  85)						if ((c < 224)) {
HXLINE(  85)							_g1_index1 = 2;
            						}
            						else {
HXLINE(  85)							if ((c < 240)) {
HXLINE(  85)								_g1_index1 = 3;
            							}
            							else {
HXLINE(  85)								if ((c < 248)) {
HXLINE(  85)									_g1_index1 = 4;
            								}
            								else {
HXLINE(  85)									_g1_index1 = 1;
            								}
            							}
            						}
            					}
HXDLIN(  85)					_g1_index = (_g1_index + _g1_index1);
HXDLIN(  85)					int i = _g1_i;
HXDLIN(  85)					::String this3 = s;
HXDLIN(  85)					::String this4 = this3;
HXDLIN(  85)					::String this5 = this4;
HXDLIN(  85)					int c1 = this5.cca(i);
HXDLIN(  85)					 ::Dynamic len;
HXDLIN(  85)					if ((c1 < 192)) {
HXLINE(  85)						len = 1;
            					}
            					else {
HXLINE(  85)						if ((c1 < 224)) {
HXLINE(  85)							len = 2;
            						}
            						else {
HXLINE(  85)							if ((c1 < 240)) {
HXLINE(  85)								len = 3;
            							}
            							else {
HXLINE(  85)								if ((c1 < 248)) {
HXLINE(  85)									len = 4;
            								}
            								else {
HXLINE(  85)									len = 1;
            								}
            							}
            						}
            					}
HXDLIN(  85)					::String this6 = this5.substr(i,len);
HXDLIN(  85)					::String this7 = this6;
HXDLIN(  85)					_g->push(this7);
            				}
            			}
HXDLIN(  85)			return _g;
            		}
            		else {
HXLINE(  89)			return s.split(delimiter);
            		}
HXLINE(  83)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Unifill_obj,uSplit,return )

::String Unifill_obj::uSubstr(::String s,int startIndex, ::Dynamic length){
            	HX_STACKFRAME(&_hx_pos_7885333c35d7080e_99_uSubstr)
HXLINE( 100)		int index;
HXDLIN( 100)		if ((startIndex >= 0)) {
HXLINE( 100)			index = 0;
            		}
            		else {
HXLINE( 100)			index = s.length;
            		}
HXDLIN( 100)		::String this1 = s;
HXDLIN( 100)		::String this2 = this1;
HXDLIN( 100)		::String this3 = this2;
HXDLIN( 100)		int si;
HXDLIN( 100)		if ((startIndex >= 0)) {
HXLINE( 100)			int index1 = index;
HXDLIN( 100)			int len = this3.length;
HXDLIN( 100)			int i = 0;
HXDLIN( 100)			while(true){
HXLINE( 100)				bool si1;
HXDLIN( 100)				if ((i < startIndex)) {
HXLINE( 100)					si1 = (index1 < len);
            				}
            				else {
HXLINE( 100)					si1 = false;
            				}
HXDLIN( 100)				if (!(si1)) {
HXLINE( 100)					goto _hx_goto_12;
            				}
HXDLIN( 100)				int c = this3.cca(index1);
HXDLIN( 100)				int index2;
HXDLIN( 100)				if ((c < 192)) {
HXLINE( 100)					index2 = 1;
            				}
            				else {
HXLINE( 100)					if ((c < 224)) {
HXLINE( 100)						index2 = 2;
            					}
            					else {
HXLINE( 100)						if ((c < 240)) {
HXLINE( 100)							index2 = 3;
            						}
            						else {
HXLINE( 100)							if ((c < 248)) {
HXLINE( 100)								index2 = 4;
            							}
            							else {
HXLINE( 100)								index2 = 1;
            							}
            						}
            					}
            				}
HXDLIN( 100)				index1 = (index1 + index2);
HXDLIN( 100)				i = (i + 1);
            			}
            			_hx_goto_12:;
HXDLIN( 100)			si = index1;
            		}
            		else {
HXLINE( 100)			int index3 = index;
HXDLIN( 100)			int count = 0;
HXDLIN( 100)			while(true){
HXLINE( 100)				bool si2;
HXDLIN( 100)				if ((count < -(startIndex))) {
HXLINE( 100)					si2 = (0 < index3);
            				}
            				else {
HXLINE( 100)					si2 = false;
            				}
HXDLIN( 100)				if (!(si2)) {
HXLINE( 100)					goto _hx_goto_13;
            				}
HXDLIN( 100)				::String this4 = this3;
HXDLIN( 100)				int c1 = this4.cca((index3 - 1));
HXDLIN( 100)				int index4;
HXDLIN( 100)				bool index5;
HXDLIN( 100)				if ((c1 >= 128)) {
HXLINE( 100)					index5 = (c1 >= 192);
            				}
            				else {
HXLINE( 100)					index5 = true;
            				}
HXDLIN( 100)				if (index5) {
HXLINE( 100)					index4 = 1;
            				}
            				else {
HXLINE( 100)					if (((this4.cca((index3 - 2)) & 224) == 192)) {
HXLINE( 100)						index4 = 2;
            					}
            					else {
HXLINE( 100)						if (((this4.cca((index3 - 3)) & 240) == 224)) {
HXLINE( 100)							index4 = 3;
            						}
            						else {
HXLINE( 100)							if (((this4.cca((index3 - 4)) & 248) == 240)) {
HXLINE( 100)								index4 = 4;
            							}
            							else {
HXLINE( 100)								index4 = 1;
            							}
            						}
            					}
            				}
HXDLIN( 100)				index3 = (index3 - index4);
HXDLIN( 100)				count = (count + 1);
            			}
            			_hx_goto_13:;
HXDLIN( 100)			si = index3;
            		}
HXLINE( 101)		int ei;
HXDLIN( 101)		if (hx::IsNull( length )) {
HXLINE( 101)			ei = s.length;
            		}
            		else {
HXLINE( 101)			if (hx::IsLess( length,0 )) {
HXLINE( 101)				ei = si;
            			}
            			else {
HXLINE( 101)				int codePointOffset = ( (int)(length) );
HXDLIN( 101)				::String this5 = s;
HXDLIN( 101)				::String this6 = this5;
HXDLIN( 101)				::String this7 = this6;
HXDLIN( 101)				if ((codePointOffset >= 0)) {
HXLINE( 101)					int index6 = si;
HXDLIN( 101)					int len1 = this7.length;
HXDLIN( 101)					int i1 = 0;
HXDLIN( 101)					while(true){
HXLINE( 101)						bool ei1;
HXDLIN( 101)						if ((i1 < codePointOffset)) {
HXLINE( 101)							ei1 = (index6 < len1);
            						}
            						else {
HXLINE( 101)							ei1 = false;
            						}
HXDLIN( 101)						if (!(ei1)) {
HXLINE( 101)							goto _hx_goto_14;
            						}
HXDLIN( 101)						int c2 = this7.cca(index6);
HXDLIN( 101)						int index7;
HXDLIN( 101)						if ((c2 < 192)) {
HXLINE( 101)							index7 = 1;
            						}
            						else {
HXLINE( 101)							if ((c2 < 224)) {
HXLINE( 101)								index7 = 2;
            							}
            							else {
HXLINE( 101)								if ((c2 < 240)) {
HXLINE( 101)									index7 = 3;
            								}
            								else {
HXLINE( 101)									if ((c2 < 248)) {
HXLINE( 101)										index7 = 4;
            									}
            									else {
HXLINE( 101)										index7 = 1;
            									}
            								}
            							}
            						}
HXDLIN( 101)						index6 = (index6 + index7);
HXDLIN( 101)						i1 = (i1 + 1);
            					}
            					_hx_goto_14:;
HXDLIN( 101)					ei = index6;
            				}
            				else {
HXLINE( 101)					int index8 = si;
HXDLIN( 101)					int count1 = 0;
HXDLIN( 101)					while(true){
HXLINE( 101)						bool ei2;
HXDLIN( 101)						if ((count1 < -(codePointOffset))) {
HXLINE( 101)							ei2 = (0 < index8);
            						}
            						else {
HXLINE( 101)							ei2 = false;
            						}
HXDLIN( 101)						if (!(ei2)) {
HXLINE( 101)							goto _hx_goto_15;
            						}
HXDLIN( 101)						::String this8 = this7;
HXDLIN( 101)						int c11 = this8.cca((index8 - 1));
HXDLIN( 101)						int index9;
HXDLIN( 101)						bool index10;
HXDLIN( 101)						if ((c11 >= 128)) {
HXLINE( 101)							index10 = (c11 >= 192);
            						}
            						else {
HXLINE( 101)							index10 = true;
            						}
HXDLIN( 101)						if (index10) {
HXLINE( 101)							index9 = 1;
            						}
            						else {
HXLINE( 101)							if (((this8.cca((index8 - 2)) & 224) == 192)) {
HXLINE( 101)								index9 = 2;
            							}
            							else {
HXLINE( 101)								if (((this8.cca((index8 - 3)) & 240) == 224)) {
HXLINE( 101)									index9 = 3;
            								}
            								else {
HXLINE( 101)									if (((this8.cca((index8 - 4)) & 248) == 240)) {
HXLINE( 101)										index9 = 4;
            									}
            									else {
HXLINE( 101)										index9 = 1;
            									}
            								}
            							}
            						}
HXDLIN( 101)						index8 = (index8 - index9);
HXDLIN( 101)						count1 = (count1 + 1);
            					}
            					_hx_goto_15:;
HXDLIN( 101)					ei = index8;
            				}
            			}
            		}
HXLINE( 102)		return s.substring(si,ei);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Unifill_obj,uSubstr,return )

::String Unifill_obj::uSubstring(::String s,int startIndex, ::Dynamic endIndex){
            	HX_STACKFRAME(&_hx_pos_7885333c35d7080e_111_uSubstring)
HXLINE( 112)		int si;
HXDLIN( 112)		if ((startIndex < 0)) {
HXLINE( 112)			si = 0;
            		}
            		else {
HXLINE( 112)			::String this1 = s;
HXDLIN( 112)			::String this2 = this1;
HXDLIN( 112)			::String this3 = this2;
HXDLIN( 112)			if ((startIndex >= 0)) {
HXLINE( 112)				int index = 0;
HXDLIN( 112)				int len = this3.length;
HXDLIN( 112)				int i = 0;
HXDLIN( 112)				while(true){
HXLINE( 112)					bool si1;
HXDLIN( 112)					if ((i < startIndex)) {
HXLINE( 112)						si1 = (index < len);
            					}
            					else {
HXLINE( 112)						si1 = false;
            					}
HXDLIN( 112)					if (!(si1)) {
HXLINE( 112)						goto _hx_goto_17;
            					}
HXDLIN( 112)					int c = this3.cca(index);
HXDLIN( 112)					int index1;
HXDLIN( 112)					if ((c < 192)) {
HXLINE( 112)						index1 = 1;
            					}
            					else {
HXLINE( 112)						if ((c < 224)) {
HXLINE( 112)							index1 = 2;
            						}
            						else {
HXLINE( 112)							if ((c < 240)) {
HXLINE( 112)								index1 = 3;
            							}
            							else {
HXLINE( 112)								if ((c < 248)) {
HXLINE( 112)									index1 = 4;
            								}
            								else {
HXLINE( 112)									index1 = 1;
            								}
            							}
            						}
            					}
HXDLIN( 112)					index = (index + index1);
HXDLIN( 112)					i = (i + 1);
            				}
            				_hx_goto_17:;
HXDLIN( 112)				si = index;
            			}
            			else {
HXLINE( 112)				int index2 = 0;
HXDLIN( 112)				int count = 0;
HXDLIN( 112)				while(true){
HXLINE( 112)					bool si2;
HXDLIN( 112)					if ((count < -(startIndex))) {
HXLINE( 112)						si2 = (0 < index2);
            					}
            					else {
HXLINE( 112)						si2 = false;
            					}
HXDLIN( 112)					if (!(si2)) {
HXLINE( 112)						goto _hx_goto_18;
            					}
HXDLIN( 112)					::String this4 = this3;
HXDLIN( 112)					int c1 = this4.cca((index2 - 1));
HXDLIN( 112)					int index3;
HXDLIN( 112)					bool index4;
HXDLIN( 112)					if ((c1 >= 128)) {
HXLINE( 112)						index4 = (c1 >= 192);
            					}
            					else {
HXLINE( 112)						index4 = true;
            					}
HXDLIN( 112)					if (index4) {
HXLINE( 112)						index3 = 1;
            					}
            					else {
HXLINE( 112)						if (((this4.cca((index2 - 2)) & 224) == 192)) {
HXLINE( 112)							index3 = 2;
            						}
            						else {
HXLINE( 112)							if (((this4.cca((index2 - 3)) & 240) == 224)) {
HXLINE( 112)								index3 = 3;
            							}
            							else {
HXLINE( 112)								if (((this4.cca((index2 - 4)) & 248) == 240)) {
HXLINE( 112)									index3 = 4;
            								}
            								else {
HXLINE( 112)									index3 = 1;
            								}
            							}
            						}
            					}
HXDLIN( 112)					index2 = (index2 - index3);
HXDLIN( 112)					count = (count + 1);
            				}
            				_hx_goto_18:;
HXDLIN( 112)				si = index2;
            			}
            		}
HXLINE( 113)		int ei;
HXDLIN( 113)		if (hx::IsNull( endIndex )) {
HXLINE( 113)			ei = s.length;
            		}
            		else {
HXLINE( 113)			if (hx::IsLess( endIndex,0 )) {
HXLINE( 113)				ei = 0;
            			}
            			else {
HXLINE( 113)				int codePointOffset = ( (int)(endIndex) );
HXDLIN( 113)				::String this5 = s;
HXDLIN( 113)				::String this6 = this5;
HXDLIN( 113)				::String this7 = this6;
HXDLIN( 113)				if ((codePointOffset >= 0)) {
HXLINE( 113)					int index5 = 0;
HXDLIN( 113)					int len1 = this7.length;
HXDLIN( 113)					int i1 = 0;
HXDLIN( 113)					while(true){
HXLINE( 113)						bool ei1;
HXDLIN( 113)						if ((i1 < codePointOffset)) {
HXLINE( 113)							ei1 = (index5 < len1);
            						}
            						else {
HXLINE( 113)							ei1 = false;
            						}
HXDLIN( 113)						if (!(ei1)) {
HXLINE( 113)							goto _hx_goto_19;
            						}
HXDLIN( 113)						int c2 = this7.cca(index5);
HXDLIN( 113)						int index6;
HXDLIN( 113)						if ((c2 < 192)) {
HXLINE( 113)							index6 = 1;
            						}
            						else {
HXLINE( 113)							if ((c2 < 224)) {
HXLINE( 113)								index6 = 2;
            							}
            							else {
HXLINE( 113)								if ((c2 < 240)) {
HXLINE( 113)									index6 = 3;
            								}
            								else {
HXLINE( 113)									if ((c2 < 248)) {
HXLINE( 113)										index6 = 4;
            									}
            									else {
HXLINE( 113)										index6 = 1;
            									}
            								}
            							}
            						}
HXDLIN( 113)						index5 = (index5 + index6);
HXDLIN( 113)						i1 = (i1 + 1);
            					}
            					_hx_goto_19:;
HXDLIN( 113)					ei = index5;
            				}
            				else {
HXLINE( 113)					int index7 = 0;
HXDLIN( 113)					int count1 = 0;
HXDLIN( 113)					while(true){
HXLINE( 113)						bool ei2;
HXDLIN( 113)						if ((count1 < -(codePointOffset))) {
HXLINE( 113)							ei2 = (0 < index7);
            						}
            						else {
HXLINE( 113)							ei2 = false;
            						}
HXDLIN( 113)						if (!(ei2)) {
HXLINE( 113)							goto _hx_goto_20;
            						}
HXDLIN( 113)						::String this8 = this7;
HXDLIN( 113)						int c11 = this8.cca((index7 - 1));
HXDLIN( 113)						int index8;
HXDLIN( 113)						bool index9;
HXDLIN( 113)						if ((c11 >= 128)) {
HXLINE( 113)							index9 = (c11 >= 192);
            						}
            						else {
HXLINE( 113)							index9 = true;
            						}
HXDLIN( 113)						if (index9) {
HXLINE( 113)							index8 = 1;
            						}
            						else {
HXLINE( 113)							if (((this8.cca((index7 - 2)) & 224) == 192)) {
HXLINE( 113)								index8 = 2;
            							}
            							else {
HXLINE( 113)								if (((this8.cca((index7 - 3)) & 240) == 224)) {
HXLINE( 113)									index8 = 3;
            								}
            								else {
HXLINE( 113)									if (((this8.cca((index7 - 4)) & 248) == 240)) {
HXLINE( 113)										index8 = 4;
            									}
            									else {
HXLINE( 113)										index8 = 1;
            									}
            								}
            							}
            						}
HXDLIN( 113)						index7 = (index7 - index8);
HXDLIN( 113)						count1 = (count1 + 1);
            					}
            					_hx_goto_20:;
HXDLIN( 113)					ei = index7;
            				}
            			}
            		}
HXLINE( 114)		return s.substring(si,ei);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Unifill_obj,uSubstring,return )

 ::lime::_internal::unifill::CodePointIter Unifill_obj::uIterator(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_7885333c35d7080e_122_uIterator)
HXDLIN( 122)		return  ::lime::_internal::unifill::CodePointIter_obj::__alloc( HX_CTX ,s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Unifill_obj,uIterator,return )

int Unifill_obj::uCompare(::String a,::String b){
            	HX_STACKFRAME(&_hx_pos_7885333c35d7080e_129_uCompare)
HXLINE( 130)		int aiter_i = 0;
HXDLIN( 130)		::String aiter_string = a;
HXDLIN( 130)		int aiter_index = 0;
HXDLIN( 130)		int aiter_endIndex = a.length;
HXLINE( 131)		int biter_i = 0;
HXDLIN( 131)		::String biter_string = b;
HXDLIN( 131)		int biter_index = 0;
HXDLIN( 131)		int biter_endIndex = b.length;
HXLINE( 132)		while(true){
HXLINE( 132)			bool _hx_tmp;
HXDLIN( 132)			if ((aiter_index < aiter_endIndex)) {
HXLINE( 132)				_hx_tmp = (biter_index < biter_endIndex);
            			}
            			else {
HXLINE( 132)				_hx_tmp = false;
            			}
HXDLIN( 132)			if (!(_hx_tmp)) {
HXLINE( 132)				goto _hx_goto_23;
            			}
HXLINE( 134)			aiter_i = aiter_index;
HXDLIN( 134)			::String this1 = aiter_string;
HXDLIN( 134)			::String this2 = this1;
HXDLIN( 134)			int c = this2.cca(aiter_index);
HXDLIN( 134)			int aiter_index1;
HXDLIN( 134)			if ((c < 192)) {
HXLINE( 134)				aiter_index1 = 1;
            			}
            			else {
HXLINE( 134)				if ((c < 224)) {
HXLINE( 134)					aiter_index1 = 2;
            				}
            				else {
HXLINE( 134)					if ((c < 240)) {
HXLINE( 134)						aiter_index1 = 3;
            					}
            					else {
HXLINE( 134)						if ((c < 248)) {
HXLINE( 134)							aiter_index1 = 4;
            						}
            						else {
HXLINE( 134)							aiter_index1 = 1;
            						}
            					}
            				}
            			}
HXDLIN( 134)			aiter_index = (aiter_index + aiter_index1);
HXDLIN( 134)			::String this3 = a;
HXDLIN( 134)			::String this4 = this3;
HXDLIN( 134)			int acode = ::lime::_internal::unifill::_Utf8::Utf8_Impl__obj::codePointAt(this4,aiter_i);
HXLINE( 135)			biter_i = biter_index;
HXDLIN( 135)			::String this5 = biter_string;
HXDLIN( 135)			::String this6 = this5;
HXDLIN( 135)			int c1 = this6.cca(biter_index);
HXDLIN( 135)			int biter_index1;
HXDLIN( 135)			if ((c1 < 192)) {
HXLINE( 135)				biter_index1 = 1;
            			}
            			else {
HXLINE( 135)				if ((c1 < 224)) {
HXLINE( 135)					biter_index1 = 2;
            				}
            				else {
HXLINE( 135)					if ((c1 < 240)) {
HXLINE( 135)						biter_index1 = 3;
            					}
            					else {
HXLINE( 135)						if ((c1 < 248)) {
HXLINE( 135)							biter_index1 = 4;
            						}
            						else {
HXLINE( 135)							biter_index1 = 1;
            						}
            					}
            				}
            			}
HXDLIN( 135)			biter_index = (biter_index + biter_index1);
HXDLIN( 135)			::String this7 = b;
HXDLIN( 135)			::String this8 = this7;
HXDLIN( 135)			int bcode = ::lime::_internal::unifill::_Utf8::Utf8_Impl__obj::codePointAt(this8,biter_i);
HXLINE( 136)			if ((acode < bcode)) {
HXLINE( 136)				return -1;
            			}
HXLINE( 137)			if ((acode > bcode)) {
HXLINE( 137)				return 1;
            			}
            		}
            		_hx_goto_23:;
HXLINE( 139)		if ((biter_index < biter_endIndex)) {
HXLINE( 139)			return -1;
            		}
HXLINE( 140)		if ((aiter_index < aiter_endIndex)) {
HXLINE( 140)			return 1;
            		}
HXLINE( 141)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Unifill_obj,uCompare,return )

::String Unifill_obj::uToString( ::Dynamic codePoints){
            	HX_GC_STACKFRAME(&_hx_pos_7885333c35d7080e_148_uToString)
HXDLIN( 148)		 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN( 148)		{
HXDLIN( 148)			 ::Dynamic c = codePoints->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic)();
HXDLIN( 148)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 148)				int c1 = ( (int)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 148)				if ((c1 <= 127)) {
HXDLIN( 148)					buf->b->push(c1);
            				}
            				else {
HXDLIN( 148)					if ((c1 <= 2047)) {
HXDLIN( 148)						buf->b->push((192 | (c1 >> 6)));
HXDLIN( 148)						buf->b->push((128 | (c1 & 63)));
            					}
            					else {
HXDLIN( 148)						if ((c1 <= 65535)) {
HXDLIN( 148)							buf->b->push((224 | (c1 >> 12)));
HXDLIN( 148)							buf->b->push((128 | ((c1 >> 6) & 63)));
HXDLIN( 148)							buf->b->push((128 | (c1 & 63)));
            						}
            						else {
HXDLIN( 148)							if ((c1 <= 1114111)) {
HXDLIN( 148)								buf->b->push((240 | (c1 >> 18)));
HXDLIN( 148)								buf->b->push((128 | ((c1 >> 12) & 63)));
HXDLIN( 148)								buf->b->push((128 | ((c1 >> 6) & 63)));
HXDLIN( 148)								buf->b->push((128 | (c1 & 63)));
            							}
            							else {
HXDLIN( 148)								HX_STACK_DO_THROW( ::lime::_internal::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,c1));
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 148)		::String this1 = buf->getBytes()->toString();
HXDLIN( 148)		::String this2 = this1;
HXDLIN( 148)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Unifill_obj,uToString,return )

void Unifill_obj::uAddChar( ::StringBuf sb,int c){
            	HX_GC_STACKFRAME(&_hx_pos_7885333c35d7080e_156_uAddChar)
HXDLIN( 156)		int c1 = c;
HXDLIN( 156)		if ((c1 <= 127)) {
HXDLIN( 156)			if (hx::IsNull( sb->charBuf )) {
HXDLIN( 156)				sb->charBuf = ::Array_obj< char >::__new();
            			}
HXDLIN( 156)			sb->charBuf->push(c1);
            		}
            		else {
HXDLIN( 156)			if ((c1 <= 2047)) {
HXDLIN( 156)				{
HXDLIN( 156)					if (hx::IsNull( sb->charBuf )) {
HXDLIN( 156)						sb->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN( 156)					sb->charBuf->push((192 | (c1 >> 6)));
            				}
HXDLIN( 156)				{
HXDLIN( 156)					if (hx::IsNull( sb->charBuf )) {
HXDLIN( 156)						sb->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN( 156)					sb->charBuf->push((128 | (c1 & 63)));
            				}
            			}
            			else {
HXDLIN( 156)				if ((c1 <= 65535)) {
HXDLIN( 156)					{
HXDLIN( 156)						if (hx::IsNull( sb->charBuf )) {
HXDLIN( 156)							sb->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN( 156)						sb->charBuf->push((224 | (c1 >> 12)));
            					}
HXDLIN( 156)					{
HXDLIN( 156)						if (hx::IsNull( sb->charBuf )) {
HXDLIN( 156)							sb->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN( 156)						sb->charBuf->push((128 | ((c1 >> 6) & 63)));
            					}
HXDLIN( 156)					{
HXDLIN( 156)						if (hx::IsNull( sb->charBuf )) {
HXDLIN( 156)							sb->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN( 156)						sb->charBuf->push((128 | (c1 & 63)));
            					}
            				}
            				else {
HXDLIN( 156)					if ((c1 <= 1114111)) {
HXDLIN( 156)						{
HXDLIN( 156)							if (hx::IsNull( sb->charBuf )) {
HXDLIN( 156)								sb->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN( 156)							sb->charBuf->push((240 | (c1 >> 18)));
            						}
HXDLIN( 156)						{
HXDLIN( 156)							if (hx::IsNull( sb->charBuf )) {
HXDLIN( 156)								sb->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN( 156)							sb->charBuf->push((128 | ((c1 >> 12) & 63)));
            						}
HXDLIN( 156)						{
HXDLIN( 156)							if (hx::IsNull( sb->charBuf )) {
HXDLIN( 156)								sb->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN( 156)							sb->charBuf->push((128 | ((c1 >> 6) & 63)));
            						}
HXDLIN( 156)						{
HXDLIN( 156)							if (hx::IsNull( sb->charBuf )) {
HXDLIN( 156)								sb->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN( 156)							sb->charBuf->push((128 | (c1 & 63)));
            						}
            					}
            					else {
HXDLIN( 156)						HX_STACK_DO_THROW( ::lime::_internal::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,c1));
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Unifill_obj,uAddChar,(void))


Unifill_obj::Unifill_obj()
{
}

bool Unifill_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"uSplit") ) { outValue = uSplit_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"uLength") ) { outValue = uLength_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uCharAt") ) { outValue = uCharAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uSubstr") ) { outValue = uSubstr_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uIndexOf") ) { outValue = uIndexOf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uCompare") ) { outValue = uCompare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uAddChar") ) { outValue = uAddChar_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"uIterator") ) { outValue = uIterator_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uToString") ) { outValue = uToString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uSubstring") ) { outValue = uSubstring_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"uCharCodeAt") ) { outValue = uCharCodeAt_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"uCodePointAt") ) { outValue = uCodePointAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uLastIndexOf") ) { outValue = uLastIndexOf_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Unifill_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Unifill_obj_sStaticStorageInfo = 0;
#endif

hx::Class Unifill_obj::__mClass;

static ::String Unifill_obj_sStaticFields[] = {
	HX_("uLength",3b,4f,eb,d4),
	HX_("uCharAt",be,33,59,ed),
	HX_("uCharCodeAt",cb,ef,ac,11),
	HX_("uCodePointAt",41,f9,a3,3c),
	HX_("uIndexOf",d4,98,1e,d2),
	HX_("uLastIndexOf",9e,ae,1a,86),
	HX_("uSplit",25,92,5d,dc),
	HX_("uSubstr",86,a9,ee,cf),
	HX_("uSubstring",1c,9b,c3,66),
	HX_("uIterator",83,03,a1,d5),
	HX_("uCompare",b0,68,c8,74),
	HX_("uToString",41,8a,75,7a),
	HX_("uAddChar",a2,f1,5b,6f),
	::String(null())
};

void Unifill_obj::__register()
{
	Unifill_obj _hx_dummy;
	Unifill_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("lime._internal.unifill.Unifill",ed,96,0e,ad);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Unifill_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Unifill_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Unifill_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Unifill_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Unifill_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace unifill
