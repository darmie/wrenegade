// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_lime__internal_unifill_Exception
#include <lime/_internal/unifill/Exception.h>
#endif
#ifndef INCLUDED_lime__internal_unifill_InternalEncoding
#include <lime/_internal/unifill/InternalEncoding.h>
#endif
#ifndef INCLUDED_lime__internal_unifill_InvalidCodePoint
#include <lime/_internal/unifill/InvalidCodePoint.h>
#endif
#ifndef INCLUDED_lime__internal_unifill_InvalidCodeUnitSequence
#include <lime/_internal/unifill/InvalidCodeUnitSequence.h>
#endif
#ifndef INCLUDED_lime__internal_unifill__Utf8_Utf8_Impl_
#include <lime/_internal/unifill/_Utf8/Utf8_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_28_get_internalEncoding,"lime._internal.unifill.InternalEncoding","get_internalEncoding",0x57b6c031,"lime._internal.unifill.InternalEncoding.get_internalEncoding","lime/_internal/unifill/InternalEncoding.hx",28,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_36_codeUnitAt,"lime._internal.unifill.InternalEncoding","codeUnitAt",0xd1c8719c,"lime._internal.unifill.InternalEncoding.codeUnitAt","lime/_internal/unifill/InternalEncoding.hx",36,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_45_codePointAt,"lime._internal.unifill.InternalEncoding","codePointAt",0x503a40be,"lime._internal.unifill.InternalEncoding.codePointAt","lime/_internal/unifill/InternalEncoding.hx",45,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_54_charAt,"lime._internal.unifill.InternalEncoding","charAt",0x0c021d61,"lime._internal.unifill.InternalEncoding.charAt","lime/_internal/unifill/InternalEncoding.hx",54,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_63_codePointCount,"lime._internal.unifill.InternalEncoding","codePointCount",0xff1c89e4,"lime._internal.unifill.InternalEncoding.codePointCount","lime/_internal/unifill/InternalEncoding.hx",63,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_72_codePointWidthAt,"lime._internal.unifill.InternalEncoding","codePointWidthAt",0x7a6570ee,"lime._internal.unifill.InternalEncoding.codePointWidthAt","lime/_internal/unifill/InternalEncoding.hx",72,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_81_codePointWidthBefore,"lime._internal.unifill.InternalEncoding","codePointWidthBefore",0x025489fa,"lime._internal.unifill.InternalEncoding.codePointWidthBefore","lime/_internal/unifill/InternalEncoding.hx",81,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_90_offsetByCodePoints,"lime._internal.unifill.InternalEncoding","offsetByCodePoints",0x8550b012,"lime._internal.unifill.InternalEncoding.offsetByCodePoints","lime/_internal/unifill/InternalEncoding.hx",90,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_100_backwardOffsetByCodePoints,"lime._internal.unifill.InternalEncoding","backwardOffsetByCodePoints",0x3ac41cd5,"lime._internal.unifill.InternalEncoding.backwardOffsetByCodePoints","lime/_internal/unifill/InternalEncoding.hx",100,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_108_fromCodePoint,"lime._internal.unifill.InternalEncoding","fromCodePoint",0xeacb9821,"lime._internal.unifill.InternalEncoding.fromCodePoint","lime/_internal/unifill/InternalEncoding.hx",108,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_116_fromCodePoints,"lime._internal.unifill.InternalEncoding","fromCodePoints",0x87598532,"lime._internal.unifill.InternalEncoding.fromCodePoints","lime/_internal/unifill/InternalEncoding.hx",116,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_127_validate,"lime._internal.unifill.InternalEncoding","validate",0x10db628e,"lime._internal.unifill.InternalEncoding.validate","lime/_internal/unifill/InternalEncoding.hx",127,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_135_isValidString,"lime._internal.unifill.InternalEncoding","isValidString",0x600d922b,"lime._internal.unifill.InternalEncoding.isValidString","lime/_internal/unifill/InternalEncoding.hx",135,0xe2f85ba5)
HX_LOCAL_STACK_FRAME(_hx_pos_78c95348db24522c_148_encodeWith,"lime._internal.unifill.InternalEncoding","encodeWith",0xaae15734,"lime._internal.unifill.InternalEncoding.encodeWith","lime/_internal/unifill/InternalEncoding.hx",148,0xe2f85ba5)
namespace lime{
namespace _internal{
namespace unifill{

void InternalEncoding_obj::__construct() { }

Dynamic InternalEncoding_obj::__CreateEmpty() { return new InternalEncoding_obj; }

void *InternalEncoding_obj::_hx_vtable = 0;

Dynamic InternalEncoding_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InternalEncoding_obj > _hx_result = new InternalEncoding_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool InternalEncoding_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0f2bc860;
}

::String InternalEncoding_obj::get_internalEncoding(){
            	HX_STACKFRAME(&_hx_pos_78c95348db24522c_28_get_internalEncoding)
HXDLIN(  28)		return HX_("UTF-8",32,80,ca,28);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(InternalEncoding_obj,get_internalEncoding,return )

int InternalEncoding_obj::codeUnitAt(::String s,int index){
            	HX_STACKFRAME(&_hx_pos_78c95348db24522c_36_codeUnitAt)
HXDLIN(  36)		::String this1 = s;
HXDLIN(  36)		::String this2 = this1;
HXDLIN(  36)		return this2.cca(index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(InternalEncoding_obj,codeUnitAt,return )

int InternalEncoding_obj::codePointAt(::String s,int index){
            	HX_STACKFRAME(&_hx_pos_78c95348db24522c_45_codePointAt)
HXDLIN(  45)		::String this1 = s;
HXDLIN(  45)		::String this2 = this1;
HXDLIN(  45)		return ::lime::_internal::unifill::_Utf8::Utf8_Impl__obj::codePointAt(this2,index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(InternalEncoding_obj,codePointAt,return )

::String InternalEncoding_obj::charAt(::String s,int index){
            	HX_STACKFRAME(&_hx_pos_78c95348db24522c_54_charAt)
HXDLIN(  54)		::String this1 = s;
HXDLIN(  54)		::String this2 = this1;
HXDLIN(  54)		::String this3 = this2;
HXDLIN(  54)		int c = this3.cca(index);
HXDLIN(  54)		 ::Dynamic len;
HXDLIN(  54)		if ((c < 192)) {
HXDLIN(  54)			len = 1;
            		}
            		else {
HXDLIN(  54)			if ((c < 224)) {
HXDLIN(  54)				len = 2;
            			}
            			else {
HXDLIN(  54)				if ((c < 240)) {
HXDLIN(  54)					len = 3;
            				}
            				else {
HXDLIN(  54)					if ((c < 248)) {
HXDLIN(  54)						len = 4;
            					}
            					else {
HXDLIN(  54)						len = 1;
            					}
            				}
            			}
            		}
HXDLIN(  54)		::String this4 = this3.substr(index,len);
HXDLIN(  54)		::String this5 = this4;
HXDLIN(  54)		return this5;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(InternalEncoding_obj,charAt,return )

int InternalEncoding_obj::codePointCount(::String s,int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_78c95348db24522c_63_codePointCount)
HXDLIN(  63)		::String this1 = s;
HXDLIN(  63)		::String this2 = this1;
HXDLIN(  63)		return ::lime::_internal::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this2,beginIndex,endIndex);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(InternalEncoding_obj,codePointCount,return )

int InternalEncoding_obj::codePointWidthAt(::String s,int index){
            	HX_STACKFRAME(&_hx_pos_78c95348db24522c_72_codePointWidthAt)
HXDLIN(  72)		::String this1 = s;
HXDLIN(  72)		::String this2 = this1;
HXDLIN(  72)		int c = this2.cca(index);
HXDLIN(  72)		if ((c < 192)) {
HXDLIN(  72)			return 1;
            		}
            		else {
HXDLIN(  72)			if ((c < 224)) {
HXDLIN(  72)				return 2;
            			}
            			else {
HXDLIN(  72)				if ((c < 240)) {
HXDLIN(  72)					return 3;
            				}
            				else {
HXDLIN(  72)					if ((c < 248)) {
HXDLIN(  72)						return 4;
            					}
            					else {
HXDLIN(  72)						return 1;
            					}
            				}
            			}
            		}
HXDLIN(  72)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(InternalEncoding_obj,codePointWidthAt,return )

int InternalEncoding_obj::codePointWidthBefore(::String s,int index){
            	HX_STACKFRAME(&_hx_pos_78c95348db24522c_81_codePointWidthBefore)
HXDLIN(  81)		::String this1 = s;
HXDLIN(  81)		::String this2 = this1;
HXDLIN(  81)		::String this3 = this2;
HXDLIN(  81)		int c1 = this3.cca((index - 1));
HXDLIN(  81)		bool _hx_tmp;
HXDLIN(  81)		if ((c1 >= 128)) {
HXDLIN(  81)			_hx_tmp = (c1 >= 192);
            		}
            		else {
HXDLIN(  81)			_hx_tmp = true;
            		}
HXDLIN(  81)		if (_hx_tmp) {
HXDLIN(  81)			return 1;
            		}
            		else {
HXDLIN(  81)			if (((this3.cca((index - 2)) & 224) == 192)) {
HXDLIN(  81)				return 2;
            			}
            			else {
HXDLIN(  81)				if (((this3.cca((index - 3)) & 240) == 224)) {
HXDLIN(  81)					return 3;
            				}
            				else {
HXDLIN(  81)					if (((this3.cca((index - 4)) & 248) == 240)) {
HXDLIN(  81)						return 4;
            					}
            					else {
HXDLIN(  81)						return 1;
            					}
            				}
            			}
            		}
HXDLIN(  81)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(InternalEncoding_obj,codePointWidthBefore,return )

int InternalEncoding_obj::offsetByCodePoints(::String s,int index,int codePointOffset){
            	HX_STACKFRAME(&_hx_pos_78c95348db24522c_90_offsetByCodePoints)
HXDLIN(  90)		::String this1 = s;
HXDLIN(  90)		::String this2 = this1;
HXDLIN(  90)		::String this3 = this2;
HXDLIN(  90)		if ((codePointOffset >= 0)) {
HXDLIN(  90)			int index1 = index;
HXDLIN(  90)			int len = this3.length;
HXDLIN(  90)			int i = 0;
HXDLIN(  90)			while(true){
HXDLIN(  90)				bool _hx_tmp;
HXDLIN(  90)				if ((i < codePointOffset)) {
HXDLIN(  90)					_hx_tmp = (index1 < len);
            				}
            				else {
HXDLIN(  90)					_hx_tmp = false;
            				}
HXDLIN(  90)				if (!(_hx_tmp)) {
HXDLIN(  90)					goto _hx_goto_7;
            				}
HXDLIN(  90)				int c = this3.cca(index1);
HXDLIN(  90)				int index2;
HXDLIN(  90)				if ((c < 192)) {
HXDLIN(  90)					index2 = 1;
            				}
            				else {
HXDLIN(  90)					if ((c < 224)) {
HXDLIN(  90)						index2 = 2;
            					}
            					else {
HXDLIN(  90)						if ((c < 240)) {
HXDLIN(  90)							index2 = 3;
            						}
            						else {
HXDLIN(  90)							if ((c < 248)) {
HXDLIN(  90)								index2 = 4;
            							}
            							else {
HXDLIN(  90)								index2 = 1;
            							}
            						}
            					}
            				}
HXDLIN(  90)				index1 = (index1 + index2);
HXDLIN(  90)				i = (i + 1);
            			}
            			_hx_goto_7:;
HXDLIN(  90)			return index1;
            		}
            		else {
HXDLIN(  90)			int index3 = index;
HXDLIN(  90)			int count = 0;
HXDLIN(  90)			while(true){
HXDLIN(  90)				bool _hx_tmp1;
HXDLIN(  90)				if ((count < -(codePointOffset))) {
HXDLIN(  90)					_hx_tmp1 = (0 < index3);
            				}
            				else {
HXDLIN(  90)					_hx_tmp1 = false;
            				}
HXDLIN(  90)				if (!(_hx_tmp1)) {
HXDLIN(  90)					goto _hx_goto_8;
            				}
HXDLIN(  90)				::String this4 = this3;
HXDLIN(  90)				int c1 = this4.cca((index3 - 1));
HXDLIN(  90)				int index4;
HXDLIN(  90)				bool index5;
HXDLIN(  90)				if ((c1 >= 128)) {
HXDLIN(  90)					index5 = (c1 >= 192);
            				}
            				else {
HXDLIN(  90)					index5 = true;
            				}
HXDLIN(  90)				if (index5) {
HXDLIN(  90)					index4 = 1;
            				}
            				else {
HXDLIN(  90)					if (((this4.cca((index3 - 2)) & 224) == 192)) {
HXDLIN(  90)						index4 = 2;
            					}
            					else {
HXDLIN(  90)						if (((this4.cca((index3 - 3)) & 240) == 224)) {
HXDLIN(  90)							index4 = 3;
            						}
            						else {
HXDLIN(  90)							if (((this4.cca((index3 - 4)) & 248) == 240)) {
HXDLIN(  90)								index4 = 4;
            							}
            							else {
HXDLIN(  90)								index4 = 1;
            							}
            						}
            					}
            				}
HXDLIN(  90)				index3 = (index3 - index4);
HXDLIN(  90)				count = (count + 1);
            			}
            			_hx_goto_8:;
HXDLIN(  90)			return index3;
            		}
HXDLIN(  90)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(InternalEncoding_obj,offsetByCodePoints,return )

int InternalEncoding_obj::backwardOffsetByCodePoints(::String s,int index,int codePointOffset){
            	HX_STACKFRAME(&_hx_pos_78c95348db24522c_100_backwardOffsetByCodePoints)
HXDLIN( 100)		::String this1 = s;
HXDLIN( 100)		::String this2 = this1;
HXDLIN( 100)		::String this3 = this2;
HXDLIN( 100)		int codePointOffset1 = -(codePointOffset);
HXDLIN( 100)		if ((codePointOffset1 >= 0)) {
HXDLIN( 100)			int index1 = index;
HXDLIN( 100)			int len = this3.length;
HXDLIN( 100)			int i = 0;
HXDLIN( 100)			while(true){
HXDLIN( 100)				bool _hx_tmp;
HXDLIN( 100)				if ((i < codePointOffset1)) {
HXDLIN( 100)					_hx_tmp = (index1 < len);
            				}
            				else {
HXDLIN( 100)					_hx_tmp = false;
            				}
HXDLIN( 100)				if (!(_hx_tmp)) {
HXDLIN( 100)					goto _hx_goto_10;
            				}
HXDLIN( 100)				int c = this3.cca(index1);
HXDLIN( 100)				int index2;
HXDLIN( 100)				if ((c < 192)) {
HXDLIN( 100)					index2 = 1;
            				}
            				else {
HXDLIN( 100)					if ((c < 224)) {
HXDLIN( 100)						index2 = 2;
            					}
            					else {
HXDLIN( 100)						if ((c < 240)) {
HXDLIN( 100)							index2 = 3;
            						}
            						else {
HXDLIN( 100)							if ((c < 248)) {
HXDLIN( 100)								index2 = 4;
            							}
            							else {
HXDLIN( 100)								index2 = 1;
            							}
            						}
            					}
            				}
HXDLIN( 100)				index1 = (index1 + index2);
HXDLIN( 100)				i = (i + 1);
            			}
            			_hx_goto_10:;
HXDLIN( 100)			return index1;
            		}
            		else {
HXDLIN( 100)			int index3 = index;
HXDLIN( 100)			int count = 0;
HXDLIN( 100)			while(true){
HXDLIN( 100)				bool _hx_tmp1;
HXDLIN( 100)				if ((count < -(codePointOffset1))) {
HXDLIN( 100)					_hx_tmp1 = (0 < index3);
            				}
            				else {
HXDLIN( 100)					_hx_tmp1 = false;
            				}
HXDLIN( 100)				if (!(_hx_tmp1)) {
HXDLIN( 100)					goto _hx_goto_11;
            				}
HXDLIN( 100)				::String this4 = this3;
HXDLIN( 100)				int c1 = this4.cca((index3 - 1));
HXDLIN( 100)				int index4;
HXDLIN( 100)				bool index5;
HXDLIN( 100)				if ((c1 >= 128)) {
HXDLIN( 100)					index5 = (c1 >= 192);
            				}
            				else {
HXDLIN( 100)					index5 = true;
            				}
HXDLIN( 100)				if (index5) {
HXDLIN( 100)					index4 = 1;
            				}
            				else {
HXDLIN( 100)					if (((this4.cca((index3 - 2)) & 224) == 192)) {
HXDLIN( 100)						index4 = 2;
            					}
            					else {
HXDLIN( 100)						if (((this4.cca((index3 - 3)) & 240) == 224)) {
HXDLIN( 100)							index4 = 3;
            						}
            						else {
HXDLIN( 100)							if (((this4.cca((index3 - 4)) & 248) == 240)) {
HXDLIN( 100)								index4 = 4;
            							}
            							else {
HXDLIN( 100)								index4 = 1;
            							}
            						}
            					}
            				}
HXDLIN( 100)				index3 = (index3 - index4);
HXDLIN( 100)				count = (count + 1);
            			}
            			_hx_goto_11:;
HXDLIN( 100)			return index3;
            		}
HXDLIN( 100)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(InternalEncoding_obj,backwardOffsetByCodePoints,return )

::String InternalEncoding_obj::fromCodePoint(int codePoint){
            	HX_GC_STACKFRAME(&_hx_pos_78c95348db24522c_108_fromCodePoint)
HXDLIN( 108)		 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN( 108)		if ((codePoint <= 127)) {
HXDLIN( 108)			buf->b->push(codePoint);
            		}
            		else {
HXDLIN( 108)			if ((codePoint <= 2047)) {
HXDLIN( 108)				buf->b->push((192 | (codePoint >> 6)));
HXDLIN( 108)				buf->b->push((128 | (codePoint & 63)));
            			}
            			else {
HXDLIN( 108)				if ((codePoint <= 65535)) {
HXDLIN( 108)					buf->b->push((224 | (codePoint >> 12)));
HXDLIN( 108)					buf->b->push((128 | ((codePoint >> 6) & 63)));
HXDLIN( 108)					buf->b->push((128 | (codePoint & 63)));
            				}
            				else {
HXDLIN( 108)					if ((codePoint <= 1114111)) {
HXDLIN( 108)						buf->b->push((240 | (codePoint >> 18)));
HXDLIN( 108)						buf->b->push((128 | ((codePoint >> 12) & 63)));
HXDLIN( 108)						buf->b->push((128 | ((codePoint >> 6) & 63)));
HXDLIN( 108)						buf->b->push((128 | (codePoint & 63)));
            					}
            					else {
HXDLIN( 108)						HX_STACK_DO_THROW( ::lime::_internal::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,codePoint));
            					}
            				}
            			}
            		}
HXDLIN( 108)		::String this1 = buf->getBytes()->toString();
HXDLIN( 108)		::String this2 = this1;
HXDLIN( 108)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(InternalEncoding_obj,fromCodePoint,return )

::String InternalEncoding_obj::fromCodePoints( ::Dynamic codePoints){
            	HX_GC_STACKFRAME(&_hx_pos_78c95348db24522c_116_fromCodePoints)
HXDLIN( 116)		 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN( 116)		{
HXDLIN( 116)			 ::Dynamic c = codePoints->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic)();
HXDLIN( 116)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 116)				int c1 = ( (int)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 116)				if ((c1 <= 127)) {
HXDLIN( 116)					buf->b->push(c1);
            				}
            				else {
HXDLIN( 116)					if ((c1 <= 2047)) {
HXDLIN( 116)						buf->b->push((192 | (c1 >> 6)));
HXDLIN( 116)						buf->b->push((128 | (c1 & 63)));
            					}
            					else {
HXDLIN( 116)						if ((c1 <= 65535)) {
HXDLIN( 116)							buf->b->push((224 | (c1 >> 12)));
HXDLIN( 116)							buf->b->push((128 | ((c1 >> 6) & 63)));
HXDLIN( 116)							buf->b->push((128 | (c1 & 63)));
            						}
            						else {
HXDLIN( 116)							if ((c1 <= 1114111)) {
HXDLIN( 116)								buf->b->push((240 | (c1 >> 18)));
HXDLIN( 116)								buf->b->push((128 | ((c1 >> 12) & 63)));
HXDLIN( 116)								buf->b->push((128 | ((c1 >> 6) & 63)));
HXDLIN( 116)								buf->b->push((128 | (c1 & 63)));
            							}
            							else {
HXDLIN( 116)								HX_STACK_DO_THROW( ::lime::_internal::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,c1));
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 116)		::String this1 = buf->getBytes()->toString();
HXDLIN( 116)		::String this2 = this1;
HXDLIN( 116)		return this2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(InternalEncoding_obj,fromCodePoints,return )

void InternalEncoding_obj::validate(::String s){
            	HX_STACKFRAME(&_hx_pos_78c95348db24522c_127_validate)
HXDLIN( 127)		::String this1 = s;
HXDLIN( 127)		::String this2 = this1;
HXDLIN( 127)		::lime::_internal::unifill::_Utf8::Utf8_Impl__obj::validate(this2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(InternalEncoding_obj,validate,(void))

bool InternalEncoding_obj::isValidString(::String s){
            	HX_STACKFRAME(&_hx_pos_78c95348db24522c_135_isValidString)
HXDLIN( 135)		try {
            			HX_STACK_CATCHABLE( ::lime::_internal::unifill::InvalidCodeUnitSequence, 0);
HXLINE( 137)			::String this1 = s;
HXDLIN( 137)			::String this2 = this1;
HXDLIN( 137)			::lime::_internal::unifill::_Utf8::Utf8_Impl__obj::validate(this2);
HXLINE( 138)			return true;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::lime::_internal::unifill::InvalidCodeUnitSequence >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::lime::_internal::unifill::InvalidCodeUnitSequence e = _hx_e;
HXLINE( 142)				return false;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 135)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(InternalEncoding_obj,isValidString,return )

void InternalEncoding_obj::encodeWith( ::Dynamic f,int c){
            	HX_GC_STACKFRAME(&_hx_pos_78c95348db24522c_148_encodeWith)
HXDLIN( 148)		if ((c <= 127)) {
HXDLIN( 148)			f(c);
            		}
            		else {
HXDLIN( 148)			if ((c <= 2047)) {
HXDLIN( 148)				f((192 | (c >> 6)));
HXDLIN( 148)				f((128 | (c & 63)));
            			}
            			else {
HXDLIN( 148)				if ((c <= 65535)) {
HXDLIN( 148)					f((224 | (c >> 12)));
HXDLIN( 148)					f((128 | ((c >> 6) & 63)));
HXDLIN( 148)					f((128 | (c & 63)));
            				}
            				else {
HXDLIN( 148)					if ((c <= 1114111)) {
HXDLIN( 148)						f((240 | (c >> 18)));
HXDLIN( 148)						f((128 | ((c >> 12) & 63)));
HXDLIN( 148)						f((128 | ((c >> 6) & 63)));
HXDLIN( 148)						f((128 | (c & 63)));
            					}
            					else {
HXDLIN( 148)						HX_STACK_DO_THROW( ::lime::_internal::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,c));
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(InternalEncoding_obj,encodeWith,(void))


InternalEncoding_obj::InternalEncoding_obj()
{
}

bool InternalEncoding_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"charAt") ) { outValue = charAt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"validate") ) { outValue = validate_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"codeUnitAt") ) { outValue = codeUnitAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"encodeWith") ) { outValue = encodeWith_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"codePointAt") ) { outValue = codePointAt_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromCodePoint") ) { outValue = fromCodePoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isValidString") ) { outValue = isValidString_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"codePointCount") ) { outValue = codePointCount_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromCodePoints") ) { outValue = fromCodePoints_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"internalEncoding") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_internalEncoding() ); return true; } }
		if (HX_FIELD_EQ(inName,"codePointWidthAt") ) { outValue = codePointWidthAt_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"offsetByCodePoints") ) { outValue = offsetByCodePoints_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_internalEncoding") ) { outValue = get_internalEncoding_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"codePointWidthBefore") ) { outValue = codePointWidthBefore_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"backwardOffsetByCodePoints") ) { outValue = backwardOffsetByCodePoints_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *InternalEncoding_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *InternalEncoding_obj_sStaticStorageInfo = 0;
#endif

hx::Class InternalEncoding_obj::__mClass;

static ::String InternalEncoding_obj_sStaticFields[] = {
	HX_("get_internalEncoding",39,1a,b0,1b),
	HX_("codeUnitAt",a4,71,4e,2b),
	HX_("codePointAt",b6,47,f4,4b),
	HX_("charAt",69,79,75,b7),
	HX_("codePointCount",ec,2d,d7,2e),
	HX_("codePointWidthAt",f6,26,17,09),
	HX_("codePointWidthBefore",02,e4,4d,c6),
	HX_("offsetByCodePoints",1a,f8,61,6c),
	HX_("backwardOffsetByCodePoints",dd,ac,e8,97),
	HX_("fromCodePoint",19,4d,4f,ce),
	HX_("fromCodePoints",3a,29,14,b7),
	HX_("validate",96,d0,e3,04),
	HX_("isValidString",23,47,91,43),
	HX_("encodeWith",3c,57,67,04),
	::String(null())
};

void InternalEncoding_obj::__register()
{
	InternalEncoding_obj _hx_dummy;
	InternalEncoding_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("lime._internal.unifill.InternalEncoding",76,ed,f6,bf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &InternalEncoding_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(InternalEncoding_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< InternalEncoding_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InternalEncoding_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InternalEncoding_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace unifill
