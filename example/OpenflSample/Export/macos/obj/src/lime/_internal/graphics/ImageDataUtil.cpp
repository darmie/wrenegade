// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__internal_graphics_ImageDataUtil
#include <lime/_internal/graphics/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime__internal_graphics__ImageDataUtil_ImageDataView
#include <lime/_internal/graphics/_ImageDataUtil/ImageDataView.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_math__RGBA_RGBA_Impl_
#include <lime/math/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_33_displaceMap,"lime._internal.graphics.ImageDataUtil","displaceMap",0x5f09aa44,"lime._internal.graphics.ImageDataUtil.displaceMap","lime/_internal/graphics/ImageDataUtil.hx",33,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_139_bilinear,"lime._internal.graphics.ImageDataUtil","bilinear",0x779ce56b,"lime._internal.graphics.ImageDataUtil.bilinear","lime/_internal/graphics/ImageDataUtil.hx",139,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_143_lerpRGBA,"lime._internal.graphics.ImageDataUtil","lerpRGBA",0x6898e12a,"lime._internal.graphics.ImageDataUtil.lerpRGBA","lime/_internal/graphics/ImageDataUtil.hx",143,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_155_lerp4f,"lime._internal.graphics.ImageDataUtil","lerp4f",0x5c714ca8,"lime._internal.graphics.ImageDataUtil.lerp4f","lime/_internal/graphics/ImageDataUtil.hx",155,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_160_lerp,"lime._internal.graphics.ImageDataUtil","lerp",0x85985576,"lime._internal.graphics.ImageDataUtil.lerp","lime/_internal/graphics/ImageDataUtil.hx",160,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_164_colorTransform,"lime._internal.graphics.ImageDataUtil","colorTransform",0x125b6f48,"lime._internal.graphics.ImageDataUtil.colorTransform","lime/_internal/graphics/ImageDataUtil.hx",164,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_206_copyChannel,"lime._internal.graphics.ImageDataUtil","copyChannel",0xecaa286f,"lime._internal.graphics.ImageDataUtil.copyChannel","lime/_internal/graphics/ImageDataUtil.hx",206,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_291_copyPixels,"lime._internal.graphics.ImageDataUtil","copyPixels",0xd2d56101,"lime._internal.graphics.ImageDataUtil.copyPixels","lime/_internal/graphics/ImageDataUtil.hx",291,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_502_fillRect,"lime._internal.graphics.ImageDataUtil","fillRect",0x041873c6,"lime._internal.graphics.ImageDataUtil.fillRect","lime/_internal/graphics/ImageDataUtil.hx",502,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_552_floodFill,"lime._internal.graphics.ImageDataUtil","floodFill",0x35740402,"lime._internal.graphics.ImageDataUtil.floodFill","lime/_internal/graphics/ImageDataUtil.hx",552,0x59dddace)
static const int _hx_array_data_0eb0fdcf_29[] = {
	(int)0,(int)-1,(int)1,(int)0,
};
static const int _hx_array_data_0eb0fdcf_30[] = {
	(int)-1,(int)0,(int)0,(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_631_gaussianBlur,"lime._internal.graphics.ImageDataUtil","gaussianBlur",0xb8d3c441,"lime._internal.graphics.ImageDataUtil.gaussianBlur","lime/_internal/graphics/ImageDataUtil.hx",631,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_722_getColorBoundsRect,"lime._internal.graphics.ImageDataUtil","getColorBoundsRect",0x8aa490c5,"lime._internal.graphics.ImageDataUtil.getColorBoundsRect","lime/_internal/graphics/ImageDataUtil.hx",722,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_866_getPixel,"lime._internal.graphics.ImageDataUtil","getPixel",0xb9da048f,"lime._internal.graphics.ImageDataUtil.getPixel","lime/_internal/graphics/ImageDataUtil.hx",866,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_885_getPixel32,"lime._internal.graphics.ImageDataUtil","getPixel32",0x67cfb2ee,"lime._internal.graphics.ImageDataUtil.getPixel32","lime/_internal/graphics/ImageDataUtil.hx",885,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_903_getPixels,"lime._internal.graphics.ImageDataUtil","getPixels",0xe4e9f904,"lime._internal.graphics.ImageDataUtil.getPixels","lime/_internal/graphics/ImageDataUtil.hx",903,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_956_merge,"lime._internal.graphics.ImageDataUtil","merge",0xf318fed9,"lime._internal.graphics.ImageDataUtil.merge","lime/_internal/graphics/ImageDataUtil.hx",956,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1005_multiplyAlpha,"lime._internal.graphics.ImageDataUtil","multiplyAlpha",0xed49d7bb,"lime._internal.graphics.ImageDataUtil.multiplyAlpha","lime/_internal/graphics/ImageDataUtil.hx",1005,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1031_resize,"lime._internal.graphics.ImageDataUtil","resize",0xc3399ab3,"lime._internal.graphics.ImageDataUtil.resize","lime/_internal/graphics/ImageDataUtil.hx",1031,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1111_resizeBuffer,"lime._internal.graphics.ImageDataUtil","resizeBuffer",0x76145413,"lime._internal.graphics.ImageDataUtil.resizeBuffer","lime/_internal/graphics/ImageDataUtil.hx",1111,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1147_setFormat,"lime._internal.graphics.ImageDataUtil","setFormat",0x391f851a,"lime._internal.graphics.ImageDataUtil.setFormat","lime/_internal/graphics/ImageDataUtil.hx",1147,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1225_setPixel,"lime._internal.graphics.ImageDataUtil","setPixel",0x68375e03,"lime._internal.graphics.ImageDataUtil.setPixel","lime/_internal/graphics/ImageDataUtil.hx",1225,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1253_setPixel32,"lime._internal.graphics.ImageDataUtil","setPixel32",0x6b4d5162,"lime._internal.graphics.ImageDataUtil.setPixel32","lime/_internal/graphics/ImageDataUtil.hx",1253,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1275_setPixels,"lime._internal.graphics.ImageDataUtil","setPixels",0xc83ae510,"lime._internal.graphics.ImageDataUtil.setPixels","lime/_internal/graphics/ImageDataUtil.hx",1275,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1333_threshold,"lime._internal.graphics.ImageDataUtil","threshold",0x108d444c,"lime._internal.graphics.ImageDataUtil.threshold","lime/_internal/graphics/ImageDataUtil.hx",1333,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1440_unmultiplyAlpha,"lime._internal.graphics.ImageDataUtil","unmultiplyAlpha",0x3b9ff802,"lime._internal.graphics.ImageDataUtil.unmultiplyAlpha","lime/_internal/graphics/ImageDataUtil.hx",1440,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1466___boxBlur,"lime._internal.graphics.ImageDataUtil","__boxBlur",0xee145fd3,"lime._internal.graphics.ImageDataUtil.__boxBlur","lime/_internal/graphics/ImageDataUtil.hx",1466,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1486___boxBlurH,"lime._internal.graphics.ImageDataUtil","__boxBlurH",0x63bf7915,"lime._internal.graphics.ImageDataUtil.__boxBlurH","lime/_internal/graphics/ImageDataUtil.hx",1486,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1533___boxBlurT,"lime._internal.graphics.ImageDataUtil","__boxBlurT",0x63bf7921,"lime._internal.graphics.ImageDataUtil.__boxBlurT","lime/_internal/graphics/ImageDataUtil.hx",1533,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1585___calculateSourceOffset,"lime._internal.graphics.ImageDataUtil","__calculateSourceOffset",0x5e2fc695,"lime._internal.graphics.ImageDataUtil.__calculateSourceOffset","lime/_internal/graphics/ImageDataUtil.hx",1585,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1604___getBoxesForGaussianBlur,"lime._internal.graphics.ImageDataUtil","__getBoxesForGaussianBlur",0xdeeea6e9,"lime._internal.graphics.ImageDataUtil.__getBoxesForGaussianBlur","lime/_internal/graphics/ImageDataUtil.hx",1604,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1623___pixelCompare,"lime._internal.graphics.ImageDataUtil","__pixelCompare",0xf2ff119e,"lime._internal.graphics.ImageDataUtil.__pixelCompare","lime/_internal/graphics/ImageDataUtil.hx",1623,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1672___translatePixel,"lime._internal.graphics.ImageDataUtil","__translatePixel",0xf39bf4f7,"lime._internal.graphics.ImageDataUtil.__translatePixel","lime/_internal/graphics/ImageDataUtil.hx",1672,0x59dddace)
namespace lime{
namespace _internal{
namespace graphics{

void ImageDataUtil_obj::__construct() { }

Dynamic ImageDataUtil_obj::__CreateEmpty() { return new ImageDataUtil_obj; }

void *ImageDataUtil_obj::_hx_vtable = 0;

Dynamic ImageDataUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageDataUtil_obj > _hx_result = new ImageDataUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageDataUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2fa36321;
}

void ImageDataUtil_obj::displaceMap( ::lime::graphics::Image target, ::lime::graphics::Image source, ::lime::graphics::Image map, ::lime::math::Vector2 mapPoint, ::lime::math::Vector4 componentX, ::lime::math::Vector4 componentY,bool smooth){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_33_displaceMap)
HXLINE(  34)		 ::lime::utils::ArrayBufferView targetData = target->buffer->data;
HXLINE(  35)		 ::lime::utils::ArrayBufferView sourceData = source->buffer->data;
HXLINE(  36)		 ::lime::utils::ArrayBufferView mapData = map->buffer->data;
HXLINE(  38)		int targetFormat = target->buffer->format;
HXLINE(  39)		int sourceFormat = source->buffer->format;
HXLINE(  40)		int mapFormat = map->buffer->format;
HXLINE(  42)		bool targetPremultiplied = target->get_premultiplied();
HXLINE(  43)		bool sourcePremultiplied = source->get_premultiplied();
HXLINE(  44)		bool mapPremultiplied = map->get_premultiplied();
HXLINE(  46)		 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,source,null());
HXLINE(  47)		 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView mapView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,map,null());
HXLINE(  49)		int row;
HXLINE(  51)		int sourceOffset;
HXLINE(  53)		int sourcePixel;
HXLINE(  54)		int mapPixel;
HXLINE(  55)		int targetPixel;
HXLINE(  57)		Float mapPixelX;
HXLINE(  58)		Float mapPixelY;
HXLINE(  59)		Float mapPixelA;
HXLINE(  62)		int s1;
HXLINE(  63)		int s2;
HXLINE(  64)		int s3;
HXLINE(  65)		int s4;
HXLINE(  67)		int mPointXFloor;
HXLINE(  68)		int mPointYFloor;
HXLINE(  70)		int disOffsetXFloor;
HXLINE(  71)		int disOffsetYFloor;
HXLINE(  73)		Float disX;
HXLINE(  74)		Float disY;
HXLINE(  76)		{
HXLINE(  76)			int _g = 0;
HXDLIN(  76)			int _g1 = sourceView->height;
HXDLIN(  76)			while((_g < _g1)){
HXLINE(  76)				_g = (_g + 1);
HXDLIN(  76)				int y = (_g - 1);
HXLINE(  78)				row = (sourceView->byteOffset + (sourceView->stride * y));
HXLINE(  80)				{
HXLINE(  80)					int _g2 = 0;
HXDLIN(  80)					int _g11 = sourceView->width;
HXDLIN(  80)					while((_g2 < _g11)){
HXLINE(  80)						_g2 = (_g2 + 1);
HXDLIN(  80)						int x = (_g2 - 1);
HXLINE(  82)						sourceOffset = (row + (x * 4));
HXLINE(  84)						mPointXFloor = ::Std_obj::_hx_int(mapPoint->x);
HXLINE(  85)						mPointYFloor = ::Std_obj::_hx_int(mapPoint->y);
HXLINE(  87)						if (smooth) {
HXLINE(  89)							{
HXLINE(  89)								int offset = ((sourceView->byteOffset + (sourceView->stride * ((y - mPointYFloor) + 1))) + ((x - mPointXFloor) * 4));
HXDLIN(  89)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  89)										int r = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset)) & 255)) );
HXDLIN(  89)										int g = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 1))) & 255)) );
HXDLIN(  89)										int b = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 2))) & 255)) );
HXDLIN(  89)										s1 = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE(  89)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 1))) & 255)) );
HXDLIN(  89)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 2))) & 255)) );
HXDLIN(  89)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 3))) & 255)) );
HXDLIN(  89)										s1 = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE(  89)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 2))) & 255)) );
HXDLIN(  89)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 1))) & 255)) );
HXDLIN(  89)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset)) & 255)) );
HXDLIN(  89)										s1 = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN(  89)								if (mapPremultiplied) {
HXLINE(  89)									bool _hx_tmp;
HXDLIN(  89)									if (((s1 & 255) != 0)) {
HXLINE(  89)										_hx_tmp = ((s1 & 255) != 255);
            									}
            									else {
HXLINE(  89)										_hx_tmp = false;
            									}
HXDLIN(  89)									if (_hx_tmp) {
HXLINE(  89)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s1 & 255)) ));
HXDLIN(  89)										{
HXLINE(  89)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  89)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  89)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  89)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  89)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  89)											s1 = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s1 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE(  90)							{
HXLINE(  90)								int offset1 = ((sourceView->byteOffset + (sourceView->stride * (y - mPointYFloor))) + (((x - mPointXFloor) + 1) * 4));
HXDLIN(  90)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  90)										int r4 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & 255)) );
HXDLIN(  90)										int g4 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 1))) & 255)) );
HXDLIN(  90)										int b3 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 2))) & 255)) );
HXDLIN(  90)										s2 = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE(  90)										int r5 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 1))) & 255)) );
HXDLIN(  90)										int g5 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 2))) & 255)) );
HXDLIN(  90)										int b4 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 3))) & 255)) );
HXDLIN(  90)										s2 = (((((r5 & 255) << 24) | ((g5 & 255) << 16)) | ((b4 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE(  90)										int r6 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 2))) & 255)) );
HXDLIN(  90)										int g6 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 1))) & 255)) );
HXDLIN(  90)										int b5 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & 255)) );
HXDLIN(  90)										s2 = (((((r6 & 255) << 24) | ((g6 & 255) << 16)) | ((b5 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset1 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN(  90)								if (mapPremultiplied) {
HXLINE(  90)									bool _hx_tmp1;
HXDLIN(  90)									if (((s2 & 255) != 0)) {
HXLINE(  90)										_hx_tmp1 = ((s2 & 255) != 255);
            									}
            									else {
HXLINE(  90)										_hx_tmp1 = false;
            									}
HXDLIN(  90)									if (_hx_tmp1) {
HXLINE(  90)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s2 & 255)) ));
HXDLIN(  90)										{
HXLINE(  90)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  90)											int r7 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  90)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  90)											int g7 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  90)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  90)											s2 = (((((r7 & 255) << 24) | ((g7 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s2 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE(  91)							{
HXLINE(  91)								int offset2 = ((sourceView->byteOffset + (sourceView->stride * ((y - mPointYFloor) + 1))) + (((x - mPointXFloor) + 1) * 4));
HXDLIN(  91)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  91)										int r8 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset2)) & 255)) );
HXDLIN(  91)										int g8 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 1))) & 255)) );
HXDLIN(  91)										int b6 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 2))) & 255)) );
HXDLIN(  91)										s3 = (((((r8 & 255) << 24) | ((g8 & 255) << 16)) | ((b6 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE(  91)										int r9 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 1))) & 255)) );
HXDLIN(  91)										int g9 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 2))) & 255)) );
HXDLIN(  91)										int b7 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 3))) & 255)) );
HXDLIN(  91)										s3 = (((((r9 & 255) << 24) | ((g9 & 255) << 16)) | ((b7 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset2)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE(  91)										int r10 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 2))) & 255)) );
HXDLIN(  91)										int g10 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 1))) & 255)) );
HXDLIN(  91)										int b8 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset2)) & 255)) );
HXDLIN(  91)										s3 = (((((r10 & 255) << 24) | ((g10 & 255) << 16)) | ((b8 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset2 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN(  91)								if (mapPremultiplied) {
HXLINE(  91)									bool _hx_tmp2;
HXDLIN(  91)									if (((s3 & 255) != 0)) {
HXLINE(  91)										_hx_tmp2 = ((s3 & 255) != 255);
            									}
            									else {
HXLINE(  91)										_hx_tmp2 = false;
            									}
HXDLIN(  91)									if (_hx_tmp2) {
HXLINE(  91)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s3 & 255)) ));
HXDLIN(  91)										{
HXLINE(  91)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  91)											int r11 = ( (int)(( ::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  91)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  91)											int g11 = ( (int)(( ::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  91)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  91)											s3 = (((((r11 & 255) << 24) | ((g11 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s3 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE(  92)							{
HXLINE(  92)								int offset3 = ((sourceView->byteOffset + (sourceView->stride * (y - mPointYFloor))) + ((x - mPointXFloor) * 4));
HXDLIN(  92)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  92)										int r12 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & 255)) );
HXDLIN(  92)										int g12 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 1))) & 255)) );
HXDLIN(  92)										int b9 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 2))) & 255)) );
HXDLIN(  92)										s4 = (((((r12 & 255) << 24) | ((g12 & 255) << 16)) | ((b9 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE(  92)										int r13 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 1))) & 255)) );
HXDLIN(  92)										int g13 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 2))) & 255)) );
HXDLIN(  92)										int b10 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 3))) & 255)) );
HXDLIN(  92)										s4 = (((((r13 & 255) << 24) | ((g13 & 255) << 16)) | ((b10 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE(  92)										int r14 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 2))) & 255)) );
HXDLIN(  92)										int g14 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 1))) & 255)) );
HXDLIN(  92)										int b11 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & 255)) );
HXDLIN(  92)										s4 = (((((r14 & 255) << 24) | ((g14 & 255) << 16)) | ((b11 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset3 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN(  92)								if (mapPremultiplied) {
HXLINE(  92)									bool _hx_tmp3;
HXDLIN(  92)									if (((s4 & 255) != 0)) {
HXLINE(  92)										_hx_tmp3 = ((s4 & 255) != 255);
            									}
            									else {
HXLINE(  92)										_hx_tmp3 = false;
            									}
HXDLIN(  92)									if (_hx_tmp3) {
HXLINE(  92)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s4 & 255)) ));
HXDLIN(  92)										{
HXLINE(  92)											 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											int r15 = ( (int)(( ::__hxcpp_memory_get_byte(this10->buffer->b,(this10->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  92)											 ::lime::utils::ArrayBufferView this11 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											int g15 = ( (int)(( ::__hxcpp_memory_get_byte(this11->buffer->b,(this11->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  92)											 ::lime::utils::ArrayBufferView this12 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											s4 = (((((r15 & 255) << 24) | ((g15 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this12->buffer->b,(this12->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s4 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE(  94)							mapPixel = ::lime::_internal::graphics::ImageDataUtil_obj::bilinear(s1,s2,s3,s4,(mapPoint->x - ( (Float)(mPointXFloor) )),(mapPoint->y - ( (Float)(mPointYFloor) )));
            						}
            						else {
HXLINE(  98)							int offset4 = ((mapView->byteOffset + (mapView->stride * (y - mPointYFloor))) + ((x - mPointXFloor) * 4));
HXDLIN(  98)							switch((int)(mapFormat)){
            								case (int)0: {
HXLINE(  98)									int r16 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset4)) & 255)) );
HXDLIN(  98)									int g16 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 1))) & 255)) );
HXDLIN(  98)									int b12 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 2))) & 255)) );
HXDLIN(  98)									mapPixel = (((((r16 & 255) << 24) | ((g16 & 255) << 16)) | ((b12 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 3))) & 255)) ) & 255));
            								}
            								break;
            								case (int)1: {
HXLINE(  98)									int r17 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 1))) & 255)) );
HXDLIN(  98)									int g17 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 2))) & 255)) );
HXDLIN(  98)									int b13 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 3))) & 255)) );
HXDLIN(  98)									mapPixel = (((((r17 & 255) << 24) | ((g17 & 255) << 16)) | ((b13 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset4)) & 255)) ) & 255));
            								}
            								break;
            								case (int)2: {
HXLINE(  98)									int r18 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 2))) & 255)) );
HXDLIN(  98)									int g18 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 1))) & 255)) );
HXDLIN(  98)									int b14 = ( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset4)) & 255)) );
HXDLIN(  98)									mapPixel = (((((r18 & 255) << 24) | ((g18 & 255) << 16)) | ((b14 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + (offset4 + 3))) & 255)) ) & 255));
            								}
            								break;
            							}
HXDLIN(  98)							if (mapPremultiplied) {
HXLINE(  98)								bool _hx_tmp4;
HXDLIN(  98)								if (((mapPixel & 255) != 0)) {
HXLINE(  98)									_hx_tmp4 = ((mapPixel & 255) != 255);
            								}
            								else {
HXLINE(  98)									_hx_tmp4 = false;
            								}
HXDLIN(  98)								if (_hx_tmp4) {
HXLINE(  98)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((mapPixel & 255)) ));
HXDLIN(  98)									{
HXLINE(  98)										 ::lime::utils::ArrayBufferView this13 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  98)										int r19 = ( (int)(( ::__hxcpp_memory_get_byte(this13->buffer->b,(this13->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(mapPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  98)										 ::lime::utils::ArrayBufferView this14 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  98)										int g19 = ( (int)(( ::__hxcpp_memory_get_byte(this14->buffer->b,(this14->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(mapPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(  98)										 ::lime::utils::ArrayBufferView this15 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  98)										mapPixel = (((((r19 & 255) << 24) | ((g19 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this15->buffer->b,(this15->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(mapPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((mapPixel & 255) & 255));
            									}
            								}
            							}
            						}
HXLINE( 101)						mapPixelA = (( (Float)((mapPixel & 255)) ) / ((Float)255.0));
HXLINE( 102)						mapPixelX = ((( (Float)(((hx::UShr(mapPixel,24) & 255) - 128)) ) / ((Float)255.0)) * mapPixelA);
HXLINE( 103)						mapPixelY = ((( (Float)(((hx::UShr(mapPixel,16) & 255) - 128)) ) / ((Float)255.0)) * mapPixelA);
HXLINE( 105)						disX = ((mapPixelX * componentX->x) + (mapPixelY * componentY->x));
HXLINE( 106)						disY = ((mapPixelX * componentX->y) + (mapPixelY * componentY->y));
HXLINE( 108)						disOffsetXFloor = ::Math_obj::floor((disX * ( (Float)(sourceView->width) )));
HXLINE( 109)						disOffsetYFloor = ::Math_obj::floor((disY * ( (Float)(sourceView->height) )));
HXLINE( 111)						if (smooth) {
HXLINE( 113)							{
HXLINE( 113)								int offset5 = ((sourceView->byteOffset + (sourceView->stride * ((y + disOffsetYFloor) + 1))) + ((x + disOffsetXFloor) * 4));
HXDLIN( 113)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 113)										int r20 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset5)) & 255)) );
HXDLIN( 113)										int g20 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 1))) & 255)) );
HXDLIN( 113)										int b15 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 2))) & 255)) );
HXDLIN( 113)										s1 = (((((r20 & 255) << 24) | ((g20 & 255) << 16)) | ((b15 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 113)										int r21 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 1))) & 255)) );
HXDLIN( 113)										int g21 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 2))) & 255)) );
HXDLIN( 113)										int b16 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 3))) & 255)) );
HXDLIN( 113)										s1 = (((((r21 & 255) << 24) | ((g21 & 255) << 16)) | ((b16 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset5)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 113)										int r22 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 2))) & 255)) );
HXDLIN( 113)										int g22 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 1))) & 255)) );
HXDLIN( 113)										int b17 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset5)) & 255)) );
HXDLIN( 113)										s1 = (((((r22 & 255) << 24) | ((g22 & 255) << 16)) | ((b17 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset5 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 113)								if (sourcePremultiplied) {
HXLINE( 113)									bool _hx_tmp5;
HXDLIN( 113)									if (((s1 & 255) != 0)) {
HXLINE( 113)										_hx_tmp5 = ((s1 & 255) != 255);
            									}
            									else {
HXLINE( 113)										_hx_tmp5 = false;
            									}
HXDLIN( 113)									if (_hx_tmp5) {
HXLINE( 113)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s1 & 255)) ));
HXDLIN( 113)										{
HXLINE( 113)											 ::lime::utils::ArrayBufferView this16 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 113)											int r23 = ( (int)(( ::__hxcpp_memory_get_byte(this16->buffer->b,(this16->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 113)											 ::lime::utils::ArrayBufferView this17 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 113)											int g23 = ( (int)(( ::__hxcpp_memory_get_byte(this17->buffer->b,(this17->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 113)											 ::lime::utils::ArrayBufferView this18 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 113)											s1 = (((((r23 & 255) << 24) | ((g23 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this18->buffer->b,(this18->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s1,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s1 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 114)							{
HXLINE( 114)								int offset6 = ((sourceView->byteOffset + (sourceView->stride * (y + disOffsetYFloor))) + (((x + disOffsetXFloor) + 1) * 4));
HXDLIN( 114)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 114)										int r24 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset6)) & 255)) );
HXDLIN( 114)										int g24 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 1))) & 255)) );
HXDLIN( 114)										int b18 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 2))) & 255)) );
HXDLIN( 114)										s2 = (((((r24 & 255) << 24) | ((g24 & 255) << 16)) | ((b18 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 114)										int r25 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 1))) & 255)) );
HXDLIN( 114)										int g25 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 2))) & 255)) );
HXDLIN( 114)										int b19 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 3))) & 255)) );
HXDLIN( 114)										s2 = (((((r25 & 255) << 24) | ((g25 & 255) << 16)) | ((b19 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset6)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 114)										int r26 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 2))) & 255)) );
HXDLIN( 114)										int g26 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 1))) & 255)) );
HXDLIN( 114)										int b20 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset6)) & 255)) );
HXDLIN( 114)										s2 = (((((r26 & 255) << 24) | ((g26 & 255) << 16)) | ((b20 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset6 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 114)								if (sourcePremultiplied) {
HXLINE( 114)									bool _hx_tmp6;
HXDLIN( 114)									if (((s2 & 255) != 0)) {
HXLINE( 114)										_hx_tmp6 = ((s2 & 255) != 255);
            									}
            									else {
HXLINE( 114)										_hx_tmp6 = false;
            									}
HXDLIN( 114)									if (_hx_tmp6) {
HXLINE( 114)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s2 & 255)) ));
HXDLIN( 114)										{
HXLINE( 114)											 ::lime::utils::ArrayBufferView this19 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 114)											int r27 = ( (int)(( ::__hxcpp_memory_get_byte(this19->buffer->b,(this19->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 114)											 ::lime::utils::ArrayBufferView this20 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 114)											int g27 = ( (int)(( ::__hxcpp_memory_get_byte(this20->buffer->b,(this20->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 114)											 ::lime::utils::ArrayBufferView this21 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 114)											s2 = (((((r27 & 255) << 24) | ((g27 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this21->buffer->b,(this21->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s2,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s2 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 115)							{
HXLINE( 115)								int offset7 = ((sourceView->byteOffset + (sourceView->stride * ((y + disOffsetYFloor) + 1))) + (((x + disOffsetXFloor) + 1) * 4));
HXDLIN( 115)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 115)										int r28 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset7)) & 255)) );
HXDLIN( 115)										int g28 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 1))) & 255)) );
HXDLIN( 115)										int b21 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 2))) & 255)) );
HXDLIN( 115)										s3 = (((((r28 & 255) << 24) | ((g28 & 255) << 16)) | ((b21 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 115)										int r29 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 1))) & 255)) );
HXDLIN( 115)										int g29 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 2))) & 255)) );
HXDLIN( 115)										int b22 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 3))) & 255)) );
HXDLIN( 115)										s3 = (((((r29 & 255) << 24) | ((g29 & 255) << 16)) | ((b22 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset7)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 115)										int r30 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 2))) & 255)) );
HXDLIN( 115)										int g30 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 1))) & 255)) );
HXDLIN( 115)										int b23 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset7)) & 255)) );
HXDLIN( 115)										s3 = (((((r30 & 255) << 24) | ((g30 & 255) << 16)) | ((b23 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset7 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 115)								if (sourcePremultiplied) {
HXLINE( 115)									bool _hx_tmp7;
HXDLIN( 115)									if (((s3 & 255) != 0)) {
HXLINE( 115)										_hx_tmp7 = ((s3 & 255) != 255);
            									}
            									else {
HXLINE( 115)										_hx_tmp7 = false;
            									}
HXDLIN( 115)									if (_hx_tmp7) {
HXLINE( 115)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s3 & 255)) ));
HXDLIN( 115)										{
HXLINE( 115)											 ::lime::utils::ArrayBufferView this22 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 115)											int r31 = ( (int)(( ::__hxcpp_memory_get_byte(this22->buffer->b,(this22->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 115)											 ::lime::utils::ArrayBufferView this23 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 115)											int g31 = ( (int)(( ::__hxcpp_memory_get_byte(this23->buffer->b,(this23->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 115)											 ::lime::utils::ArrayBufferView this24 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 115)											s3 = (((((r31 & 255) << 24) | ((g31 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this24->buffer->b,(this24->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s3,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s3 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 116)							{
HXLINE( 116)								int offset8 = ((sourceView->byteOffset + (sourceView->stride * (y + disOffsetYFloor))) + ((x + disOffsetXFloor) * 4));
HXDLIN( 116)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 116)										int r32 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset8)) & 255)) );
HXDLIN( 116)										int g32 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 1))) & 255)) );
HXDLIN( 116)										int b24 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 2))) & 255)) );
HXDLIN( 116)										s4 = (((((r32 & 255) << 24) | ((g32 & 255) << 16)) | ((b24 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 116)										int r33 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 1))) & 255)) );
HXDLIN( 116)										int g33 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 2))) & 255)) );
HXDLIN( 116)										int b25 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 3))) & 255)) );
HXDLIN( 116)										s4 = (((((r33 & 255) << 24) | ((g33 & 255) << 16)) | ((b25 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset8)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 116)										int r34 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 2))) & 255)) );
HXDLIN( 116)										int g34 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 1))) & 255)) );
HXDLIN( 116)										int b26 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset8)) & 255)) );
HXDLIN( 116)										s4 = (((((r34 & 255) << 24) | ((g34 & 255) << 16)) | ((b26 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset8 + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 116)								if (sourcePremultiplied) {
HXLINE( 116)									bool _hx_tmp8;
HXDLIN( 116)									if (((s4 & 255) != 0)) {
HXLINE( 116)										_hx_tmp8 = ((s4 & 255) != 255);
            									}
            									else {
HXLINE( 116)										_hx_tmp8 = false;
            									}
HXDLIN( 116)									if (_hx_tmp8) {
HXLINE( 116)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((s4 & 255)) ));
HXDLIN( 116)										{
HXLINE( 116)											 ::lime::utils::ArrayBufferView this25 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 116)											int r35 = ( (int)(( ::__hxcpp_memory_get_byte(this25->buffer->b,(this25->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 116)											 ::lime::utils::ArrayBufferView this26 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 116)											int g35 = ( (int)(( ::__hxcpp_memory_get_byte(this26->buffer->b,(this26->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 116)											 ::lime::utils::ArrayBufferView this27 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 116)											s4 = (((((r35 & 255) << 24) | ((g35 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this27->buffer->b,(this27->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(s4,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((s4 & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 118)							sourcePixel = ::lime::_internal::graphics::ImageDataUtil_obj::bilinear(s1,s2,s3,s4,((disX * ( (Float)(sourceView->width) )) - ( (Float)(disOffsetXFloor) )),((disY * ( (Float)(sourceView->height) )) - ( (Float)(disOffsetYFloor) )));
            						}
            						else {
HXLINE( 122)							int offset9 = ((sourceView->byteOffset + (sourceView->stride * (y + disOffsetYFloor))) + ((x + disOffsetXFloor) * 4));
HXDLIN( 122)							switch((int)(sourceFormat)){
            								case (int)0: {
HXLINE( 122)									int r36 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset9)) & 255)) );
HXDLIN( 122)									int g36 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 1))) & 255)) );
HXDLIN( 122)									int b27 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 2))) & 255)) );
HXDLIN( 122)									sourcePixel = (((((r36 & 255) << 24) | ((g36 & 255) << 16)) | ((b27 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 3))) & 255)) ) & 255));
            								}
            								break;
            								case (int)1: {
HXLINE( 122)									int r37 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 1))) & 255)) );
HXDLIN( 122)									int g37 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 2))) & 255)) );
HXDLIN( 122)									int b28 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 3))) & 255)) );
HXDLIN( 122)									sourcePixel = (((((r37 & 255) << 24) | ((g37 & 255) << 16)) | ((b28 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset9)) & 255)) ) & 255));
            								}
            								break;
            								case (int)2: {
HXLINE( 122)									int r38 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 2))) & 255)) );
HXDLIN( 122)									int g38 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 1))) & 255)) );
HXDLIN( 122)									int b29 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset9)) & 255)) );
HXDLIN( 122)									sourcePixel = (((((r38 & 255) << 24) | ((g38 & 255) << 16)) | ((b29 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (offset9 + 3))) & 255)) ) & 255));
            								}
            								break;
            							}
HXDLIN( 122)							if (sourcePremultiplied) {
HXLINE( 122)								bool _hx_tmp9;
HXDLIN( 122)								if (((sourcePixel & 255) != 0)) {
HXLINE( 122)									_hx_tmp9 = ((sourcePixel & 255) != 255);
            								}
            								else {
HXLINE( 122)									_hx_tmp9 = false;
            								}
HXDLIN( 122)								if (_hx_tmp9) {
HXLINE( 122)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 122)									{
HXLINE( 122)										 ::lime::utils::ArrayBufferView this28 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)										int r39 = ( (int)(( ::__hxcpp_memory_get_byte(this28->buffer->b,(this28->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 122)										 ::lime::utils::ArrayBufferView this29 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)										int g39 = ( (int)(( ::__hxcpp_memory_get_byte(this29->buffer->b,(this29->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 122)										 ::lime::utils::ArrayBufferView this30 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)										sourcePixel = (((((r39 & 255) << 24) | ((g39 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this30->buffer->b,(this30->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            									}
            								}
            							}
            						}
HXLINE( 125)						{
HXLINE( 125)							if (targetPremultiplied) {
HXLINE( 125)								if (((sourcePixel & 255) == 0)) {
HXLINE( 125)									if ((sourcePixel != 0)) {
HXLINE( 125)										sourcePixel = 0;
            									}
            								}
            								else {
HXLINE( 125)									if (((sourcePixel & 255) != 255)) {
HXLINE( 125)										 ::lime::utils::ArrayBufferView this31 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 125)										::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this31->buffer->b,(this31->byteOffset + ((sourcePixel & 255) * 4)))) );
HXDLIN( 125)										sourcePixel = ((((((((hx::UShr(sourcePixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(sourcePixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(sourcePixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((sourcePixel & 255) & 255));
            									}
            								}
            							}
HXDLIN( 125)							switch((int)(targetFormat)){
            								case (int)0: {
HXLINE( 125)									{
HXLINE( 125)										int val = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val1 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 1)),val1);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val2 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 2)),val2);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val3 = (sourcePixel & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 3)),val3);
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 125)									{
HXLINE( 125)										int val4 = (sourcePixel & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val4);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val5 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 1)),val5);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val6 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 2)),val6);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val7 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 3)),val7);
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 125)									{
HXLINE( 125)										int val8 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val8);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val9 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 1)),val9);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val10 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 2)),val10);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val11 = (sourcePixel & 255);
HXDLIN( 125)										 ::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + (sourceOffset + 3)),val11);
            									}
            								}
            								break;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 129)		target->dirty = true;
HXLINE( 130)		target->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,displaceMap,(void))

int ImageDataUtil_obj::bilinear(int s1,int s2,int s3,int s4,Float su,Float sv){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_139_bilinear)
HXDLIN( 139)		int _hx_tmp = ::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(s4,s2,su);
HXDLIN( 139)		return ::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(_hx_tmp,::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(s1,s3,su),sv);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,bilinear,return )

int ImageDataUtil_obj::lerpRGBA(int v0,int v1,Float x){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_143_lerpRGBA)
HXLINE( 144)		int this1 = 0;
HXDLIN( 144)		int result = this1;
HXLINE( 145)		{
HXLINE( 145)			int value = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(( (Float)((hx::UShr(v0,24) & 255)) ),( (Float)((hx::UShr(v1,24) & 255)) ),x));
HXDLIN( 145)			result = (((((value & 255) << 24) | (((hx::UShr(result,16) & 255) & 255) << 16)) | (((hx::UShr(result,8) & 255) & 255) << 8)) | ((result & 255) & 255));
            		}
HXLINE( 146)		{
HXLINE( 146)			int value1 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(( (Float)((hx::UShr(v0,16) & 255)) ),( (Float)((hx::UShr(v1,16) & 255)) ),x));
HXDLIN( 146)			result = ((((((hx::UShr(result,24) & 255) & 255) << 24) | ((value1 & 255) << 16)) | (((hx::UShr(result,8) & 255) & 255) << 8)) | ((result & 255) & 255));
            		}
HXLINE( 147)		{
HXLINE( 147)			int value2 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(( (Float)((hx::UShr(v0,8) & 255)) ),( (Float)((hx::UShr(v1,8) & 255)) ),x));
HXDLIN( 147)			result = ((((((hx::UShr(result,24) & 255) & 255) << 24) | (((hx::UShr(result,16) & 255) & 255) << 16)) | ((value2 & 255) << 8)) | ((result & 255) & 255));
            		}
HXLINE( 148)		{
HXLINE( 148)			int value3 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(( (Float)((v0 & 255)) ),( (Float)((v1 & 255)) ),x));
HXDLIN( 148)			result = ((((((hx::UShr(result,24) & 255) & 255) << 24) | (((hx::UShr(result,16) & 255) & 255) << 16)) | (((hx::UShr(result,8) & 255) & 255) << 8)) | (value3 & 255));
            		}
HXLINE( 150)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerpRGBA,return )

 ::lime::math::Vector4 ImageDataUtil_obj::lerp4f( ::lime::math::Vector4 v0, ::lime::math::Vector4 v1,Float x){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_155_lerp4f)
HXDLIN( 155)		Float _hx_tmp = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->x,v1->x,x);
HXDLIN( 155)		Float _hx_tmp1 = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->y,v1->y,x);
HXDLIN( 155)		Float _hx_tmp2 = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->z,v1->z,x);
HXDLIN( 155)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->w,v1->w,x));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerp4f,return )

Float ImageDataUtil_obj::lerp(Float v0,Float v1,Float x){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_160_lerp)
HXDLIN( 160)		return (((((Float)1.0) - x) * v0) + (x * v1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerp,return )

void ImageDataUtil_obj::colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_164_colorTransform)
HXLINE( 165)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 166)		if (hx::IsNull( data )) {
HXLINE( 166)			return;
            		}
HXLINE( 169)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 169)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_color_transform(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(colorMatrix));
            		}
            		else {
HXLINE( 173)			int format = image->buffer->format;
HXLINE( 174)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 176)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 178)			 ::lime::utils::ArrayBufferView alphaTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getAlphaTable(colorMatrix);
HXLINE( 179)			 ::lime::utils::ArrayBufferView redTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getRedTable(colorMatrix);
HXLINE( 180)			 ::lime::utils::ArrayBufferView greenTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getGreenTable(colorMatrix);
HXLINE( 181)			 ::lime::utils::ArrayBufferView blueTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getBlueTable(colorMatrix);
HXLINE( 183)			int row;
HXDLIN( 183)			int offset;
HXDLIN( 183)			int pixel;
HXLINE( 185)			{
HXLINE( 185)				int _g = 0;
HXDLIN( 185)				int _g1 = dataView->height;
HXDLIN( 185)				while((_g < _g1)){
HXLINE( 185)					_g = (_g + 1);
HXDLIN( 185)					int y = (_g - 1);
HXLINE( 187)					row = (dataView->byteOffset + (dataView->stride * y));
HXLINE( 189)					{
HXLINE( 189)						int _g2 = 0;
HXDLIN( 189)						int _g11 = dataView->width;
HXDLIN( 189)						while((_g2 < _g11)){
HXLINE( 189)							_g2 = (_g2 + 1);
HXDLIN( 189)							int x = (_g2 - 1);
HXLINE( 191)							offset = (row + (x * 4));
HXLINE( 193)							{
HXLINE( 193)								switch((int)(format)){
            									case (int)0: {
HXLINE( 193)										int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 193)										int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 193)										int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 193)										pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 193)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 193)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 193)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 193)										pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 193)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 193)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 193)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 193)										pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 193)								if (premultiplied) {
HXLINE( 193)									bool _hx_tmp;
HXDLIN( 193)									if (((pixel & 255) != 0)) {
HXLINE( 193)										_hx_tmp = ((pixel & 255) != 255);
            									}
            									else {
HXLINE( 193)										_hx_tmp = false;
            									}
HXDLIN( 193)									if (_hx_tmp) {
HXLINE( 193)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN( 193)										{
HXLINE( 193)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 193)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 193)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											pixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 194)							{
HXLINE( 194)								int r4 = ( (int)(( ::__hxcpp_memory_get_byte(redTable->buffer->b,(redTable->byteOffset + (hx::UShr(pixel,24) & 255))) & 255)) );
HXDLIN( 194)								int g4 = ( (int)(( ::__hxcpp_memory_get_byte(greenTable->buffer->b,(greenTable->byteOffset + (hx::UShr(pixel,16) & 255))) & 255)) );
HXDLIN( 194)								int b3 = ( (int)(( ::__hxcpp_memory_get_byte(blueTable->buffer->b,(blueTable->byteOffset + (hx::UShr(pixel,8) & 255))) & 255)) );
HXDLIN( 194)								pixel = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaTable->buffer->b,(alphaTable->byteOffset + (pixel & 255))) & 255)) ) & 255));
            							}
HXLINE( 195)							{
HXLINE( 195)								if (premultiplied) {
HXLINE( 195)									if (((pixel & 255) == 0)) {
HXLINE( 195)										if ((pixel != 0)) {
HXLINE( 195)											pixel = 0;
            										}
            									}
            									else {
HXLINE( 195)										if (((pixel & 255) != 255)) {
HXLINE( 195)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 195)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this4->buffer->b,(this4->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN( 195)											pixel = ((((((((hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            										}
            									}
            								}
HXDLIN( 195)								switch((int)(format)){
            									case (int)0: {
HXLINE( 195)										{
HXLINE( 195)											int val = (hx::UShr(pixel,24) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val3 = (pixel & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 195)										{
HXLINE( 195)											int val4 = (pixel & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val5);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val6);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val7);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 195)										{
HXLINE( 195)											int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val9);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val10);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val11 = (pixel & 255);
HXDLIN( 195)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val11);
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 200)		image->dirty = true;
HXLINE( 201)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,colorTransform,(void))

void ImageDataUtil_obj::copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_206_copyChannel)
HXLINE( 207)		int destIdx;
HXDLIN( 207)		switch((int)(destChannel->_hx_getIndex())){
            			case (int)0: {
HXLINE( 207)				destIdx = 0;
            			}
            			break;
            			case (int)1: {
HXLINE( 207)				destIdx = 1;
            			}
            			break;
            			case (int)2: {
HXLINE( 207)				destIdx = 2;
            			}
            			break;
            			case (int)3: {
HXLINE( 207)				destIdx = 3;
            			}
            			break;
            		}
HXLINE( 215)		int srcIdx;
HXDLIN( 215)		switch((int)(sourceChannel->_hx_getIndex())){
            			case (int)0: {
HXLINE( 215)				srcIdx = 0;
            			}
            			break;
            			case (int)1: {
HXLINE( 215)				srcIdx = 1;
            			}
            			break;
            			case (int)2: {
HXLINE( 215)				srcIdx = 2;
            			}
            			break;
            			case (int)3: {
HXLINE( 215)				srcIdx = 3;
            			}
            			break;
            		}
HXLINE( 223)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE( 224)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 226)		bool _hx_tmp;
HXDLIN( 226)		if (hx::IsNotNull( srcData )) {
HXLINE( 226)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE( 226)			_hx_tmp = true;
            		}
HXDLIN( 226)		if (_hx_tmp) {
HXLINE( 226)			return;
            		}
HXLINE( 229)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 229)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_copy_channel(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),srcIdx,destIdx);
            		}
            		else {
HXLINE( 233)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView srcView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 234)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE( 236)			int srcFormat = sourceImage->buffer->format;
HXLINE( 237)			int destFormat = image->buffer->format;
HXLINE( 238)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 239)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 241)			int srcPosition;
HXDLIN( 241)			int destPosition;
HXDLIN( 241)			int srcPixel;
HXDLIN( 241)			int destPixel;
HXDLIN( 241)			int value = 0;
HXLINE( 243)			{
HXLINE( 243)				int _g = 0;
HXDLIN( 243)				int _g1 = destView->height;
HXDLIN( 243)				while((_g < _g1)){
HXLINE( 243)					_g = (_g + 1);
HXDLIN( 243)					int y = (_g - 1);
HXLINE( 245)					srcPosition = (srcView->byteOffset + (srcView->stride * y));
HXLINE( 246)					destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 248)					{
HXLINE( 248)						int _g2 = 0;
HXDLIN( 248)						int _g11 = destView->width;
HXDLIN( 248)						while((_g2 < _g11)){
HXLINE( 248)							_g2 = (_g2 + 1);
HXDLIN( 248)							int x = (_g2 - 1);
HXLINE( 250)							{
HXLINE( 250)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE( 250)										int r = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) );
HXDLIN( 250)										int g = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN( 250)										int b = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN( 250)										srcPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 250)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN( 250)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN( 250)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) );
HXDLIN( 250)										srcPixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 250)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN( 250)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN( 250)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) );
HXDLIN( 250)										srcPixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 250)								if (srcPremultiplied) {
HXLINE( 250)									bool _hx_tmp1;
HXDLIN( 250)									if (((srcPixel & 255) != 0)) {
HXLINE( 250)										_hx_tmp1 = ((srcPixel & 255) != 255);
            									}
            									else {
HXLINE( 250)										_hx_tmp1 = false;
            									}
HXDLIN( 250)									if (_hx_tmp1) {
HXLINE( 250)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((srcPixel & 255)) ));
HXDLIN( 250)										{
HXLINE( 250)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 250)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 250)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 250)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 250)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 250)											srcPixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((srcPixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 251)							{
HXLINE( 251)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 251)										int r4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 251)										int g4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 251)										int b3 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 251)										destPixel = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 251)										int r5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 251)										int g5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 251)										int b4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) );
HXDLIN( 251)										destPixel = (((((r5 & 255) << 24) | ((g5 & 255) << 16)) | ((b4 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 251)										int r6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 251)										int g6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 251)										int b5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 251)										destPixel = (((((r6 & 255) << 24) | ((g6 & 255) << 16)) | ((b5 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 251)								if (destPremultiplied) {
HXLINE( 251)									bool _hx_tmp2;
HXDLIN( 251)									if (((destPixel & 255) != 0)) {
HXLINE( 251)										_hx_tmp2 = ((destPixel & 255) != 255);
            									}
            									else {
HXLINE( 251)										_hx_tmp2 = false;
            									}
HXDLIN( 251)									if (_hx_tmp2) {
HXLINE( 251)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((destPixel & 255)) ));
HXDLIN( 251)										{
HXLINE( 251)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 251)											int r7 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 251)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 251)											int g7 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 251)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 251)											destPixel = (((((r7 & 255) << 24) | ((g7 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 253)							switch((int)(srcIdx)){
            								case (int)0: {
HXLINE( 256)									value = (hx::UShr(srcPixel,24) & 255);
            								}
            								break;
            								case (int)1: {
HXLINE( 258)									value = (hx::UShr(srcPixel,16) & 255);
            								}
            								break;
            								case (int)2: {
HXLINE( 260)									value = (hx::UShr(srcPixel,8) & 255);
            								}
            								break;
            								case (int)3: {
HXLINE( 262)									value = (srcPixel & 255);
            								}
            								break;
            							}
HXLINE( 265)							switch((int)(destIdx)){
            								case (int)0: {
HXLINE( 268)									destPixel = (((((value & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            								}
            								break;
            								case (int)1: {
HXLINE( 270)									destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | ((value & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            								}
            								break;
            								case (int)2: {
HXLINE( 272)									destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | ((value & 255) << 8)) | ((destPixel & 255) & 255));
            								}
            								break;
            								case (int)3: {
HXLINE( 274)									destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | (value & 255));
            								}
            								break;
            							}
HXLINE( 277)							{
HXLINE( 277)								if (destPremultiplied) {
HXLINE( 277)									if (((destPixel & 255) == 0)) {
HXLINE( 277)										if ((destPixel != 0)) {
HXLINE( 277)											destPixel = 0;
            										}
            									}
            									else {
HXLINE( 277)										if (((destPixel & 255) != 255)) {
HXLINE( 277)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 277)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this7->buffer->b,(this7->byteOffset + ((destPixel & 255) * 4)))) );
HXDLIN( 277)											destPixel = ((((((((hx::UShr(destPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(destPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(destPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
            									}
            								}
HXDLIN( 277)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 277)										{
HXLINE( 277)											int val = (hx::UShr(destPixel,24) & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val1 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val2 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val3 = (destPixel & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 277)										{
HXLINE( 277)											int val4 = (destPixel & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val5 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val5);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val6 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val6);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val7 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val7);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 277)										{
HXLINE( 277)											int val8 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val9 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val9);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val10 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val10);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val11 = (destPixel & 255);
HXDLIN( 277)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val11);
            										}
            									}
            									break;
            								}
            							}
HXLINE( 279)							srcPosition = (srcPosition + 4);
HXLINE( 280)							destPosition = (destPosition + 4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 285)		image->dirty = true;
HXLINE( 286)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,copyChannel,(void))

void ImageDataUtil_obj::copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
            		bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_291_copyPixels)
HXLINE( 292)		bool _hx_tmp;
HXDLIN( 292)		bool _hx_tmp1;
HXDLIN( 292)		bool _hx_tmp2;
HXDLIN( 292)		bool _hx_tmp3;
HXDLIN( 292)		bool _hx_tmp4;
HXDLIN( 292)		bool _hx_tmp5;
HXDLIN( 292)		bool _hx_tmp6;
HXDLIN( 292)		bool _hx_tmp7;
HXDLIN( 292)		bool _hx_tmp8;
HXDLIN( 292)		bool _hx_tmp9;
HXDLIN( 292)		bool _hx_tmp10;
HXDLIN( 292)		if ((image->width == sourceImage->width)) {
HXLINE( 292)			_hx_tmp10 = (image->height == sourceImage->height);
            		}
            		else {
HXLINE( 292)			_hx_tmp10 = false;
            		}
HXDLIN( 292)		if (_hx_tmp10) {
HXLINE( 292)			_hx_tmp9 = (sourceRect->width == sourceImage->width);
            		}
            		else {
HXLINE( 292)			_hx_tmp9 = false;
            		}
HXDLIN( 292)		if (_hx_tmp9) {
HXLINE( 292)			_hx_tmp8 = (sourceRect->height == sourceImage->height);
            		}
            		else {
HXLINE( 292)			_hx_tmp8 = false;
            		}
HXDLIN( 292)		if (_hx_tmp8) {
HXLINE( 292)			_hx_tmp7 = (sourceRect->x == 0);
            		}
            		else {
HXLINE( 292)			_hx_tmp7 = false;
            		}
HXDLIN( 292)		if (_hx_tmp7) {
HXLINE( 292)			_hx_tmp6 = (sourceRect->y == 0);
            		}
            		else {
HXLINE( 292)			_hx_tmp6 = false;
            		}
HXDLIN( 292)		if (_hx_tmp6) {
HXLINE( 292)			_hx_tmp5 = (destPoint->x == 0);
            		}
            		else {
HXLINE( 292)			_hx_tmp5 = false;
            		}
HXDLIN( 292)		if (_hx_tmp5) {
HXLINE( 292)			_hx_tmp4 = (destPoint->y == 0);
            		}
            		else {
HXLINE( 292)			_hx_tmp4 = false;
            		}
HXDLIN( 292)		if (_hx_tmp4) {
HXLINE( 292)			_hx_tmp3 = hx::IsNull( alphaImage );
            		}
            		else {
HXLINE( 292)			_hx_tmp3 = false;
            		}
HXDLIN( 292)		if (_hx_tmp3) {
HXLINE( 292)			_hx_tmp2 = hx::IsNull( alphaPoint );
            		}
            		else {
HXLINE( 292)			_hx_tmp2 = false;
            		}
HXDLIN( 292)		if (_hx_tmp2) {
HXLINE( 292)			_hx_tmp1 = (mergeAlpha == false);
            		}
            		else {
HXLINE( 292)			_hx_tmp1 = false;
            		}
HXDLIN( 292)		if (_hx_tmp1) {
HXLINE( 303)			int _hx_tmp11 = image->get_format();
HXLINE( 292)			_hx_tmp = (_hx_tmp11 == sourceImage->get_format());
            		}
            		else {
HXLINE( 292)			_hx_tmp = false;
            		}
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 305)			 ::lime::utils::ArrayBufferView _this = image->buffer->data;
HXDLIN( 305)			 ::lime::utils::ArrayBufferView view = sourceImage->buffer->data;
HXDLIN( 305)			int offset = 0;
HXDLIN( 305)			if (hx::IsNotNull( view )) {
HXLINE( 305)				_this->buffer->blit((offset * _this->bytesPerElement),view->buffer,view->byteOffset,view->byteLength);
            			}
            			else {
HXLINE( 305)				HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            			}
            		}
            		else {
HXLINE( 310)			if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 310)				::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_copy_pixels(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),hx::DynamicPtr(alphaImage),hx::DynamicPtr(alphaPoint),mergeAlpha);
            			}
            			else {
HXLINE( 314)				 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 315)				 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 317)				bool _hx_tmp12;
HXDLIN( 317)				if (hx::IsNotNull( sourceData )) {
HXLINE( 317)					_hx_tmp12 = hx::IsNull( destData );
            				}
            				else {
HXLINE( 317)					_hx_tmp12 = true;
            				}
HXDLIN( 317)				if (_hx_tmp12) {
HXLINE( 317)					return;
            				}
HXLINE( 319)				 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 320)				 ::lime::math::Rectangle destRect =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height);
HXLINE( 321)				 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,destRect);
HXLINE( 323)				int sourceFormat = sourceImage->buffer->format;
HXLINE( 324)				int destFormat = image->buffer->format;
HXLINE( 326)				int sourcePosition;
HXDLIN( 326)				int destPosition;
HXLINE( 327)				Float sourceAlpha;
HXDLIN( 327)				Float destAlpha;
HXDLIN( 327)				Float oneMinusSourceAlpha;
HXDLIN( 327)				Float blendAlpha;
HXLINE( 328)				int sourcePixel;
HXDLIN( 328)				int destPixel;
HXLINE( 330)				bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 331)				bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 332)				int sourceBytesPerPixel = ::Std_obj::_hx_int((( (Float)(sourceImage->buffer->bitsPerPixel) ) / ( (Float)(8) )));
HXLINE( 333)				int destBytesPerPixel = ::Std_obj::_hx_int((( (Float)(image->buffer->bitsPerPixel) ) / ( (Float)(8) )));
HXLINE( 335)				bool useAlphaImage;
HXDLIN( 335)				if (hx::IsNotNull( alphaImage )) {
HXLINE( 335)					useAlphaImage = alphaImage->get_transparent();
            				}
            				else {
HXLINE( 335)					useAlphaImage = false;
            				}
HXLINE( 336)				bool blend;
HXDLIN( 336)				if (!(mergeAlpha)) {
HXLINE( 336)					if (useAlphaImage) {
HXLINE( 336)						blend = !(image->get_transparent());
            					}
            					else {
HXLINE( 336)						blend = false;
            					}
            				}
            				else {
HXLINE( 336)					blend = true;
            				}
HXLINE( 338)				if (!(useAlphaImage)) {
HXLINE( 340)					if (blend) {
HXLINE( 342)						int _g = 0;
HXDLIN( 342)						int _g1 = destView->height;
HXDLIN( 342)						while((_g < _g1)){
HXLINE( 342)							_g = (_g + 1);
HXDLIN( 342)							int y = (_g - 1);
HXLINE( 344)							sourcePosition = (sourceView->byteOffset + (sourceView->stride * y));
HXLINE( 345)							destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 347)							{
HXLINE( 347)								int _g2 = 0;
HXDLIN( 347)								int _g11 = destView->width;
HXDLIN( 347)								while((_g2 < _g11)){
HXLINE( 347)									_g2 = (_g2 + 1);
HXDLIN( 347)									int x = (_g2 - 1);
HXLINE( 349)									{
HXLINE( 349)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 349)												int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 349)												int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 349)												int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 349)												sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 349)												int r1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 349)												int g1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 349)												int b1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 349)												sourcePixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 349)												int r2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 349)												int g2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 349)												int b2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 349)												sourcePixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 349)										if (sourcePremultiplied) {
HXLINE( 349)											bool _hx_tmp13;
HXDLIN( 349)											if (((sourcePixel & 255) != 0)) {
HXLINE( 349)												_hx_tmp13 = ((sourcePixel & 255) != 255);
            											}
            											else {
HXLINE( 349)												_hx_tmp13 = false;
            											}
HXDLIN( 349)											if (_hx_tmp13) {
HXLINE( 349)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 349)												{
HXLINE( 349)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 349)													int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 349)													 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 349)													int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 349)													 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 349)													sourcePixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 350)									{
HXLINE( 350)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 350)												int r4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 350)												int g4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 350)												int b3 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 350)												destPixel = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 350)												int r5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 350)												int g5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 350)												int b4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) );
HXDLIN( 350)												destPixel = (((((r5 & 255) << 24) | ((g5 & 255) << 16)) | ((b4 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 350)												int r6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 350)												int g6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 350)												int b5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 350)												destPixel = (((((r6 & 255) << 24) | ((g6 & 255) << 16)) | ((b5 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 350)										if (destPremultiplied) {
HXLINE( 350)											bool _hx_tmp14;
HXDLIN( 350)											if (((destPixel & 255) != 0)) {
HXLINE( 350)												_hx_tmp14 = ((destPixel & 255) != 255);
            											}
            											else {
HXLINE( 350)												_hx_tmp14 = false;
            											}
HXDLIN( 350)											if (_hx_tmp14) {
HXLINE( 350)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((destPixel & 255)) ));
HXDLIN( 350)												{
HXLINE( 350)													 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 350)													int r7 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 350)													 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 350)													int g7 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 350)													 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 350)													destPixel = (((((r7 & 255) << 24) | ((g7 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((destPixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 352)									sourceAlpha = (( (Float)((sourcePixel & 255)) ) / ((Float)255.0));
HXLINE( 353)									destAlpha = (( (Float)((destPixel & 255)) ) / ((Float)255.0));
HXLINE( 354)									oneMinusSourceAlpha = (( (Float)(1) ) - sourceAlpha);
HXLINE( 355)									blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 357)									if ((blendAlpha == 0)) {
HXLINE( 359)										destPixel = 0;
            									}
            									else {
HXLINE( 363)										{
HXLINE( 363)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 363)											int value = ( (int)(( ::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,24) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 363)											destPixel = (((((value & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 366)										{
HXLINE( 366)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 366)											int value1 = ( (int)(( ::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,16) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 366)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | ((value1 & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 369)										{
HXLINE( 369)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 369)											int value2 = ( (int)(( ::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,8) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 369)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | ((value2 & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 372)										{
HXLINE( 372)											 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 372)											int value3 = ( (int)(( ::__hxcpp_memory_get_byte(this10->buffer->b,(this10->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & 255)) );
HXDLIN( 372)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | (value3 & 255));
            										}
            									}
HXLINE( 375)									{
HXLINE( 375)										if (destPremultiplied) {
HXLINE( 375)											if (((destPixel & 255) == 0)) {
HXLINE( 375)												if ((destPixel != 0)) {
HXLINE( 375)													destPixel = 0;
            												}
            											}
            											else {
HXLINE( 375)												if (((destPixel & 255) != 255)) {
HXLINE( 375)													 ::lime::utils::ArrayBufferView this11 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 375)													::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this11->buffer->b,(this11->byteOffset + ((destPixel & 255) * 4)))) );
HXDLIN( 375)													destPixel = ((((((((hx::UShr(destPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(destPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(destPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((destPixel & 255) & 255));
            												}
            											}
            										}
HXDLIN( 375)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 375)												{
HXLINE( 375)													int val = (hx::UShr(destPixel,24) & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val1 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val2 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val3 = (destPixel & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 375)												{
HXLINE( 375)													int val4 = (destPixel & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val5 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val5);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val6 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val6);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val7 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val7);
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 375)												{
HXLINE( 375)													int val8 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val9 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val9);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val10 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val10);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val11 = (destPixel & 255);
HXDLIN( 375)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val11);
            												}
            											}
            											break;
            										}
            									}
HXLINE( 377)									sourcePosition = (sourcePosition + 4);
HXLINE( 378)									destPosition = (destPosition + 4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 382)						bool _hx_tmp15;
HXDLIN( 382)						bool _hx_tmp16;
HXDLIN( 382)						if ((sourceFormat == destFormat)) {
HXLINE( 382)							_hx_tmp16 = (sourcePremultiplied == destPremultiplied);
            						}
            						else {
HXLINE( 382)							_hx_tmp16 = false;
            						}
HXDLIN( 382)						if (_hx_tmp16) {
HXLINE( 382)							_hx_tmp15 = (sourceBytesPerPixel == destBytesPerPixel);
            						}
            						else {
HXLINE( 382)							_hx_tmp15 = false;
            						}
HXDLIN( 382)						if (_hx_tmp15) {
HXLINE( 386)							int _g3 = 0;
HXDLIN( 386)							int _g12 = destView->height;
HXDLIN( 386)							while((_g3 < _g12)){
HXLINE( 386)								_g3 = (_g3 + 1);
HXDLIN( 386)								int y1 = (_g3 - 1);
HXLINE( 388)								sourcePosition = (sourceView->byteOffset + (sourceView->stride * y1));
HXLINE( 389)								destPosition = (destView->byteOffset + (destView->stride * y1));
HXLINE( 395)								destData->buffer->blit(destPosition,sourceData->buffer,sourcePosition,(destView->width * destBytesPerPixel));
            							}
            						}
            						else {
HXLINE( 401)							int _g4 = 0;
HXDLIN( 401)							int _g13 = destView->height;
HXDLIN( 401)							while((_g4 < _g13)){
HXLINE( 401)								_g4 = (_g4 + 1);
HXDLIN( 401)								int y2 = (_g4 - 1);
HXLINE( 403)								sourcePosition = (sourceView->byteOffset + (sourceView->stride * y2));
HXLINE( 404)								destPosition = (destView->byteOffset + (destView->stride * y2));
HXLINE( 406)								{
HXLINE( 406)									int _g5 = 0;
HXDLIN( 406)									int _g14 = destView->width;
HXDLIN( 406)									while((_g5 < _g14)){
HXLINE( 406)										_g5 = (_g5 + 1);
HXDLIN( 406)										int x1 = (_g5 - 1);
HXLINE( 408)										{
HXLINE( 408)											switch((int)(sourceFormat)){
            												case (int)0: {
HXLINE( 408)													int r8 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 408)													int g8 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 408)													int b6 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 408)													sourcePixel = (((((r8 & 255) << 24) | ((g8 & 255) << 16)) | ((b6 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            												}
            												break;
            												case (int)1: {
HXLINE( 408)													int r9 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 408)													int g9 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 408)													int b7 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 408)													sourcePixel = (((((r9 & 255) << 24) | ((g9 & 255) << 16)) | ((b7 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            												}
            												break;
            												case (int)2: {
HXLINE( 408)													int r10 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 408)													int g10 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 408)													int b8 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 408)													sourcePixel = (((((r10 & 255) << 24) | ((g10 & 255) << 16)) | ((b8 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            												}
            												break;
            											}
HXDLIN( 408)											if (sourcePremultiplied) {
HXLINE( 408)												bool _hx_tmp17;
HXDLIN( 408)												if (((sourcePixel & 255) != 0)) {
HXLINE( 408)													_hx_tmp17 = ((sourcePixel & 255) != 255);
            												}
            												else {
HXLINE( 408)													_hx_tmp17 = false;
            												}
HXDLIN( 408)												if (_hx_tmp17) {
HXLINE( 408)													::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 408)													{
HXLINE( 408)														 ::lime::utils::ArrayBufferView this12 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 408)														int r11 = ( (int)(( ::__hxcpp_memory_get_byte(this12->buffer->b,(this12->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 408)														 ::lime::utils::ArrayBufferView this13 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 408)														int g11 = ( (int)(( ::__hxcpp_memory_get_byte(this13->buffer->b,(this13->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 408)														 ::lime::utils::ArrayBufferView this14 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 408)														sourcePixel = (((((r11 & 255) << 24) | ((g11 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this14->buffer->b,(this14->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            													}
            												}
            											}
            										}
HXLINE( 409)										{
HXLINE( 409)											if (destPremultiplied) {
HXLINE( 409)												if (((sourcePixel & 255) == 0)) {
HXLINE( 409)													if ((sourcePixel != 0)) {
HXLINE( 409)														sourcePixel = 0;
            													}
            												}
            												else {
HXLINE( 409)													if (((sourcePixel & 255) != 255)) {
HXLINE( 409)														 ::lime::utils::ArrayBufferView this15 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 409)														::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this15->buffer->b,(this15->byteOffset + ((sourcePixel & 255) * 4)))) );
HXDLIN( 409)														sourcePixel = ((((((((hx::UShr(sourcePixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(sourcePixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(sourcePixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((sourcePixel & 255) & 255));
            													}
            												}
            											}
HXDLIN( 409)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 409)													{
HXLINE( 409)														int val12 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val13 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val13);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val14 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val14);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val15 = (sourcePixel & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val15);
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 409)													{
HXLINE( 409)														int val16 = (sourcePixel & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val17 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val17);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val18 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val18);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val19 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val19);
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 409)													{
HXLINE( 409)														int val20 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val21 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val21);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val22 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val22);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val23 = (sourcePixel & 255);
HXDLIN( 409)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val23);
            													}
            												}
            												break;
            											}
            										}
HXLINE( 411)										sourcePosition = (sourcePosition + 4);
HXLINE( 412)										destPosition = (destPosition + 4);
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 419)					if (hx::IsNull( alphaPoint )) {
HXLINE( 419)						alphaPoint =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            					}
HXLINE( 421)					 ::lime::utils::ArrayBufferView alphaData = alphaImage->buffer->data;
HXLINE( 422)					int alphaFormat = alphaImage->buffer->format;
HXLINE( 423)					int alphaPosition;
HXDLIN( 423)					int alphaPixel;
HXLINE( 425)					 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView alphaView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,alphaImage, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,alphaPoint->x,alphaPoint->y,alphaImage->width,alphaImage->height));
HXLINE( 427)					int _hx_tmp18 = ::Std_obj::_hx_int(destPoint->x);
HXDLIN( 427)					int _hx_tmp19 = ::Std_obj::_hx_int(destPoint->y);
HXDLIN( 427)					destView->clip(_hx_tmp18,_hx_tmp19,alphaView->width,alphaView->height);
HXLINE( 429)					if (blend) {
HXLINE( 431)						int _g6 = 0;
HXDLIN( 431)						int _g15 = destView->height;
HXDLIN( 431)						while((_g6 < _g15)){
HXLINE( 431)							_g6 = (_g6 + 1);
HXDLIN( 431)							int y3 = (_g6 - 1);
HXLINE( 433)							sourcePosition = (sourceView->byteOffset + (sourceView->stride * y3));
HXLINE( 434)							destPosition = (destView->byteOffset + (destView->stride * y3));
HXLINE( 435)							alphaPosition = (alphaView->byteOffset + (alphaView->stride * y3));
HXLINE( 437)							{
HXLINE( 437)								int _g7 = 0;
HXDLIN( 437)								int _g16 = destView->width;
HXDLIN( 437)								while((_g7 < _g16)){
HXLINE( 437)									_g7 = (_g7 + 1);
HXDLIN( 437)									int x2 = (_g7 - 1);
HXLINE( 439)									{
HXLINE( 439)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 439)												int r12 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 439)												int g12 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 439)												int b9 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 439)												sourcePixel = (((((r12 & 255) << 24) | ((g12 & 255) << 16)) | ((b9 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 439)												int r13 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 439)												int g13 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 439)												int b10 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 439)												sourcePixel = (((((r13 & 255) << 24) | ((g13 & 255) << 16)) | ((b10 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 439)												int r14 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 439)												int g14 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 439)												int b11 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 439)												sourcePixel = (((((r14 & 255) << 24) | ((g14 & 255) << 16)) | ((b11 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 439)										if (sourcePremultiplied) {
HXLINE( 439)											bool _hx_tmp20;
HXDLIN( 439)											if (((sourcePixel & 255) != 0)) {
HXLINE( 439)												_hx_tmp20 = ((sourcePixel & 255) != 255);
            											}
            											else {
HXLINE( 439)												_hx_tmp20 = false;
            											}
HXDLIN( 439)											if (_hx_tmp20) {
HXLINE( 439)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 439)												{
HXLINE( 439)													 ::lime::utils::ArrayBufferView this16 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 439)													int r15 = ( (int)(( ::__hxcpp_memory_get_byte(this16->buffer->b,(this16->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 439)													 ::lime::utils::ArrayBufferView this17 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 439)													int g15 = ( (int)(( ::__hxcpp_memory_get_byte(this17->buffer->b,(this17->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 439)													 ::lime::utils::ArrayBufferView this18 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 439)													sourcePixel = (((((r15 & 255) << 24) | ((g15 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this18->buffer->b,(this18->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 440)									{
HXLINE( 440)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 440)												int r16 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 440)												int g16 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 440)												int b12 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 440)												destPixel = (((((r16 & 255) << 24) | ((g16 & 255) << 16)) | ((b12 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 440)												int r17 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 440)												int g17 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 440)												int b13 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) );
HXDLIN( 440)												destPixel = (((((r17 & 255) << 24) | ((g17 & 255) << 16)) | ((b13 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 440)												int r18 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 440)												int g18 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 440)												int b14 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 440)												destPixel = (((((r18 & 255) << 24) | ((g18 & 255) << 16)) | ((b14 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 440)										if (destPremultiplied) {
HXLINE( 440)											bool _hx_tmp21;
HXDLIN( 440)											if (((destPixel & 255) != 0)) {
HXLINE( 440)												_hx_tmp21 = ((destPixel & 255) != 255);
            											}
            											else {
HXLINE( 440)												_hx_tmp21 = false;
            											}
HXDLIN( 440)											if (_hx_tmp21) {
HXLINE( 440)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((destPixel & 255)) ));
HXDLIN( 440)												{
HXLINE( 440)													 ::lime::utils::ArrayBufferView this19 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 440)													int r19 = ( (int)(( ::__hxcpp_memory_get_byte(this19->buffer->b,(this19->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 440)													 ::lime::utils::ArrayBufferView this20 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 440)													int g19 = ( (int)(( ::__hxcpp_memory_get_byte(this20->buffer->b,(this20->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 440)													 ::lime::utils::ArrayBufferView this21 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 440)													destPixel = (((((r19 & 255) << 24) | ((g19 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this21->buffer->b,(this21->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((destPixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 441)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 441)											int r20 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 441)											int g20 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 441)											int b15 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 441)											alphaPixel = (((((r20 & 255) << 24) | ((g20 & 255) << 16)) | ((b15 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            										case (int)1: {
HXLINE( 441)											int r21 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 441)											int g21 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 441)											int b16 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) );
HXDLIN( 441)											alphaPixel = (((((r21 & 255) << 24) | ((g21 & 255) << 16)) | ((b16 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) ) & 255));
            										}
            										break;
            										case (int)2: {
HXLINE( 441)											int r22 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 441)											int g22 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 441)											int b17 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 441)											alphaPixel = (((((r22 & 255) << 24) | ((g22 & 255) << 16)) | ((b17 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            									}
HXLINE( 443)									sourceAlpha = ((( (Float)((alphaPixel & 255)) ) / ((Float)255.0)) * (( (Float)((sourcePixel & 255)) ) / ((Float)255.0)));
HXLINE( 445)									if ((sourceAlpha > 0)) {
HXLINE( 447)										destAlpha = (( (Float)((destPixel & 255)) ) / ((Float)255.0));
HXLINE( 448)										oneMinusSourceAlpha = (( (Float)(1) ) - sourceAlpha);
HXLINE( 449)										blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 451)										{
HXLINE( 451)											 ::lime::utils::ArrayBufferView this22 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 451)											int value4 = ( (int)(( ::__hxcpp_memory_get_byte(this22->buffer->b,(this22->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,24) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 451)											destPixel = (((((value4 & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 454)										{
HXLINE( 454)											 ::lime::utils::ArrayBufferView this23 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 454)											int value5 = ( (int)(( ::__hxcpp_memory_get_byte(this23->buffer->b,(this23->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,16) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 454)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | ((value5 & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 457)										{
HXLINE( 457)											 ::lime::utils::ArrayBufferView this24 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 457)											int value6 = ( (int)(( ::__hxcpp_memory_get_byte(this24->buffer->b,(this24->byteOffset + ::Math_obj::round((((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * sourceAlpha) + ((( (Float)((hx::UShr(destPixel,8) & 255)) ) * destAlpha) * oneMinusSourceAlpha)) / blendAlpha)))) & 255)) );
HXDLIN( 457)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | ((value6 & 255) << 8)) | ((destPixel & 255) & 255));
            										}
HXLINE( 460)										{
HXLINE( 460)											 ::lime::utils::ArrayBufferView this25 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 460)											int value7 = ( (int)(( ::__hxcpp_memory_get_byte(this25->buffer->b,(this25->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & 255)) );
HXDLIN( 460)											destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | (value7 & 255));
            										}
HXLINE( 462)										{
HXLINE( 462)											if (destPremultiplied) {
HXLINE( 462)												if (((destPixel & 255) == 0)) {
HXLINE( 462)													if ((destPixel != 0)) {
HXLINE( 462)														destPixel = 0;
            													}
            												}
            												else {
HXLINE( 462)													if (((destPixel & 255) != 255)) {
HXLINE( 462)														 ::lime::utils::ArrayBufferView this26 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 462)														::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this26->buffer->b,(this26->byteOffset + ((destPixel & 255) * 4)))) );
HXDLIN( 462)														destPixel = ((((((((hx::UShr(destPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(destPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(destPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((destPixel & 255) & 255));
            													}
            												}
            											}
HXDLIN( 462)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 462)													{
HXLINE( 462)														int val24 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val24);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val25 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val25);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val26 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val26);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val27 = (destPixel & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val27);
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 462)													{
HXLINE( 462)														int val28 = (destPixel & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val28);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val29 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val29);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val30 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val30);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val31 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val31);
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 462)													{
HXLINE( 462)														int val32 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val32);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val33 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val33);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val34 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val34);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val35 = (destPixel & 255);
HXDLIN( 462)														 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val35);
            													}
            												}
            												break;
            											}
            										}
            									}
HXLINE( 465)									sourcePosition = (sourcePosition + 4);
HXLINE( 466)									destPosition = (destPosition + 4);
HXLINE( 467)									alphaPosition = (alphaPosition + 4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 473)						int _g8 = 0;
HXDLIN( 473)						int _g17 = destView->height;
HXDLIN( 473)						while((_g8 < _g17)){
HXLINE( 473)							_g8 = (_g8 + 1);
HXDLIN( 473)							int y4 = (_g8 - 1);
HXLINE( 475)							sourcePosition = (sourceView->byteOffset + (sourceView->stride * y4));
HXLINE( 476)							destPosition = (destView->byteOffset + (destView->stride * y4));
HXLINE( 477)							alphaPosition = (alphaView->byteOffset + (alphaView->stride * y4));
HXLINE( 479)							{
HXLINE( 479)								int _g9 = 0;
HXDLIN( 479)								int _g18 = destView->width;
HXDLIN( 479)								while((_g9 < _g18)){
HXLINE( 479)									_g9 = (_g9 + 1);
HXDLIN( 479)									int x3 = (_g9 - 1);
HXLINE( 481)									{
HXLINE( 481)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 481)												int r23 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 481)												int g23 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 481)												int b18 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 481)												sourcePixel = (((((r23 & 255) << 24) | ((g23 & 255) << 16)) | ((b18 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            											case (int)1: {
HXLINE( 481)												int r24 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 481)												int g24 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 481)												int b19 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 481)												sourcePixel = (((((r24 & 255) << 24) | ((g24 & 255) << 16)) | ((b19 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            											}
            											break;
            											case (int)2: {
HXLINE( 481)												int r25 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 481)												int g25 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 481)												int b20 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 481)												sourcePixel = (((((r25 & 255) << 24) | ((g25 & 255) << 16)) | ((b20 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            											}
            											break;
            										}
HXDLIN( 481)										if (sourcePremultiplied) {
HXLINE( 481)											bool _hx_tmp22;
HXDLIN( 481)											if (((sourcePixel & 255) != 0)) {
HXLINE( 481)												_hx_tmp22 = ((sourcePixel & 255) != 255);
            											}
            											else {
HXLINE( 481)												_hx_tmp22 = false;
            											}
HXDLIN( 481)											if (_hx_tmp22) {
HXLINE( 481)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 481)												{
HXLINE( 481)													 ::lime::utils::ArrayBufferView this27 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 481)													int r26 = ( (int)(( ::__hxcpp_memory_get_byte(this27->buffer->b,(this27->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 481)													 ::lime::utils::ArrayBufferView this28 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 481)													int g26 = ( (int)(( ::__hxcpp_memory_get_byte(this28->buffer->b,(this28->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 481)													 ::lime::utils::ArrayBufferView this29 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 481)													sourcePixel = (((((r26 & 255) << 24) | ((g26 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this29->buffer->b,(this29->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
            									}
HXLINE( 482)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 482)											int r27 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 482)											int g27 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 482)											int b21 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 482)											alphaPixel = (((((r27 & 255) << 24) | ((g27 & 255) << 16)) | ((b21 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            										case (int)1: {
HXLINE( 482)											int r28 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 482)											int g28 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 482)											int b22 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) );
HXDLIN( 482)											alphaPixel = (((((r28 & 255) << 24) | ((g28 & 255) << 16)) | ((b22 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) ) & 255));
            										}
            										break;
            										case (int)2: {
HXLINE( 482)											int r29 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 2))) & 255)) );
HXDLIN( 482)											int g29 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 1))) & 255)) );
HXDLIN( 482)											int b23 = ( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & 255)) );
HXDLIN( 482)											alphaPixel = (((((r29 & 255) << 24) | ((g29 & 255) << 16)) | ((b23 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + (alphaPosition + 3))) & 255)) ) & 255));
            										}
            										break;
            									}
HXLINE( 484)									{
HXLINE( 484)										int value8 = ::Math_obj::round((( (Float)((sourcePixel & 255)) ) * (( (Float)((alphaPixel & 255)) ) / ( (Float)(255) ))));
HXDLIN( 484)										sourcePixel = ((((((hx::UShr(sourcePixel,24) & 255) & 255) << 24) | (((hx::UShr(sourcePixel,16) & 255) & 255) << 16)) | (((hx::UShr(sourcePixel,8) & 255) & 255) << 8)) | (value8 & 255));
            									}
HXLINE( 485)									{
HXLINE( 485)										if (destPremultiplied) {
HXLINE( 485)											if (((sourcePixel & 255) == 0)) {
HXLINE( 485)												if ((sourcePixel != 0)) {
HXLINE( 485)													sourcePixel = 0;
            												}
            											}
            											else {
HXLINE( 485)												if (((sourcePixel & 255) != 255)) {
HXLINE( 485)													 ::lime::utils::ArrayBufferView this30 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 485)													::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this30->buffer->b,(this30->byteOffset + ((sourcePixel & 255) * 4)))) );
HXDLIN( 485)													sourcePixel = ((((((((hx::UShr(sourcePixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(sourcePixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(sourcePixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((sourcePixel & 255) & 255));
            												}
            											}
            										}
HXDLIN( 485)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 485)												{
HXLINE( 485)													int val36 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val36);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val37 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val37);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val38 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val38);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val39 = (sourcePixel & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val39);
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 485)												{
HXLINE( 485)													int val40 = (sourcePixel & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val40);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val41 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val41);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val42 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val42);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val43 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val43);
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 485)												{
HXLINE( 485)													int val44 = (hx::UShr(sourcePixel,8) & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val44);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val45 = (hx::UShr(sourcePixel,16) & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val45);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val46 = (hx::UShr(sourcePixel,24) & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val46);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val47 = (sourcePixel & 255);
HXDLIN( 485)													 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val47);
            												}
            											}
            											break;
            										}
            									}
HXLINE( 487)									sourcePosition = (sourcePosition + 4);
HXLINE( 488)									destPosition = (destPosition + 4);
HXLINE( 489)									alphaPosition = (alphaPosition + 4);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 497)		image->dirty = true;
HXLINE( 498)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,copyPixels,(void))

void ImageDataUtil_obj::fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int color,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_502_fillRect)
HXLINE( 503)		int fillColor;
HXLINE( 505)		switch((int)(format)){
            			case (int)1: {
HXLINE( 508)				int argb = color;
HXDLIN( 508)				int this1 = 0;
HXDLIN( 508)				int rgba = this1;
HXDLIN( 508)				rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN( 508)				fillColor = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 510)				int bgra = color;
HXDLIN( 510)				int this2 = 0;
HXDLIN( 510)				int rgba1 = this2;
HXDLIN( 510)				rgba1 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN( 510)				fillColor = rgba1;
            			}
            			break;
            			default:{
HXLINE( 512)				fillColor = color;
            			}
            		}
HXLINE( 515)		if (!(image->get_transparent())) {
HXLINE( 517)			fillColor = ((((((hx::UShr(fillColor,24) & 255) & 255) << 24) | (((hx::UShr(fillColor,16) & 255) & 255) << 16)) | (((hx::UShr(fillColor,8) & 255) & 255) << 8)) | 255);
            		}
HXLINE( 520)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 521)		if (hx::IsNull( data )) {
HXLINE( 521)			return;
            		}
HXLINE( 524)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 524)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_fill_rect(hx::DynamicPtr(image),hx::DynamicPtr(rect),((fillColor >> 16) & 65535),(fillColor & 65535));
            		}
            		else {
HXLINE( 529)			int format1 = image->buffer->format;
HXLINE( 530)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 531)			if (premultiplied) {
HXLINE( 531)				if (((fillColor & 255) == 0)) {
HXLINE( 531)					if ((fillColor != 0)) {
HXLINE( 531)						fillColor = 0;
            					}
            				}
            				else {
HXLINE( 531)					if (((fillColor & 255) != 255)) {
HXLINE( 531)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 531)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this3->buffer->b,(this3->byteOffset + ((fillColor & 255) * 4)))) );
HXDLIN( 531)						fillColor = ((((((((hx::UShr(fillColor,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(fillColor,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(fillColor,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((fillColor & 255) & 255));
            					}
            				}
            			}
HXLINE( 533)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 534)			int row;
HXLINE( 536)			{
HXLINE( 536)				int _g = 0;
HXDLIN( 536)				int _g1 = dataView->height;
HXDLIN( 536)				while((_g < _g1)){
HXLINE( 536)					_g = (_g + 1);
HXDLIN( 536)					int y = (_g - 1);
HXLINE( 538)					row = (dataView->byteOffset + (dataView->stride * y));
HXLINE( 540)					{
HXLINE( 540)						int _g2 = 0;
HXDLIN( 540)						int _g11 = dataView->width;
HXDLIN( 540)						while((_g2 < _g11)){
HXLINE( 540)							_g2 = (_g2 + 1);
HXDLIN( 540)							int x = (_g2 - 1);
HXLINE( 542)							{
HXLINE( 542)								int offset = (row + (x * 4));
HXDLIN( 542)								switch((int)(format1)){
            									case (int)0: {
HXLINE( 542)										{
HXLINE( 542)											int val = (hx::UShr(fillColor,24) & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val1 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val2 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val3 = (fillColor & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 542)										{
HXLINE( 542)											int val4 = (fillColor & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val5 = (hx::UShr(fillColor,24) & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val5);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val6 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val6);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val7 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val7);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 542)										{
HXLINE( 542)											int val8 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val9 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val9);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val10 = (hx::UShr(fillColor,24) & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val10);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val11 = (fillColor & 255);
HXDLIN( 542)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val11);
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 547)		image->dirty = true;
HXLINE( 548)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,fillRect,(void))

void ImageDataUtil_obj::floodFill( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_552_floodFill)
HXLINE( 553)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 554)		if (hx::IsNull( data )) {
HXLINE( 554)			return;
            		}
HXLINE( 556)		if ((format == 1)) {
HXLINE( 556)			color = (((color & 16777215) << 8) | ((color >> 24) & 255));
            		}
HXLINE( 559)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 559)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_flood_fill(hx::DynamicPtr(image),x,y,((color >> 16) & 65535),(color & 65535));
            		}
            		else {
HXLINE( 564)			int format1 = image->buffer->format;
HXLINE( 565)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 567)			int fillColor = color;
HXLINE( 569)			int hitColor;
HXLINE( 570)			{
HXLINE( 570)				int offset = (((y + image->offsetY) * (image->buffer->width * 4)) + ((x + image->offsetX) * 4));
HXDLIN( 570)				switch((int)(format1)){
            					case (int)0: {
HXLINE( 570)						int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 570)						int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 570)						int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 570)						hitColor = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            					}
            					break;
            					case (int)1: {
HXLINE( 570)						int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 570)						int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 570)						int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 570)						hitColor = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            					}
            					break;
            					case (int)2: {
HXLINE( 570)						int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 570)						int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 570)						int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 570)						hitColor = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            					}
            					break;
            				}
HXDLIN( 570)				if (premultiplied) {
HXLINE( 570)					bool _hx_tmp;
HXDLIN( 570)					if (((hitColor & 255) != 0)) {
HXLINE( 570)						_hx_tmp = ((hitColor & 255) != 255);
            					}
            					else {
HXLINE( 570)						_hx_tmp = false;
            					}
HXDLIN( 570)					if (_hx_tmp) {
HXLINE( 570)						::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((hitColor & 255)) ));
HXDLIN( 570)						{
HXLINE( 570)							 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 570)							int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(hitColor,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 570)							 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 570)							int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(hitColor,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 570)							 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 570)							hitColor = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(hitColor,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((hitColor & 255) & 255));
            						}
            					}
            				}
            			}
HXLINE( 572)			if (!(image->get_transparent())) {
HXLINE( 574)				fillColor = ((((((hx::UShr(fillColor,24) & 255) & 255) << 24) | (((hx::UShr(fillColor,16) & 255) & 255) << 16)) | (((hx::UShr(fillColor,8) & 255) & 255) << 8)) | 255);
HXLINE( 575)				hitColor = ((((((hx::UShr(hitColor,24) & 255) & 255) << 24) | (((hx::UShr(hitColor,16) & 255) & 255) << 16)) | (((hx::UShr(hitColor,8) & 255) & 255) << 8)) | 255);
            			}
HXLINE( 578)			if ((fillColor == hitColor)) {
HXLINE( 578)				return;
            			}
HXLINE( 580)			if (premultiplied) {
HXLINE( 580)				if (((fillColor & 255) == 0)) {
HXLINE( 580)					if ((fillColor != 0)) {
HXLINE( 580)						fillColor = 0;
            					}
            				}
            				else {
HXLINE( 580)					if (((fillColor & 255) != 255)) {
HXLINE( 580)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 580)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this4->buffer->b,(this4->byteOffset + ((fillColor & 255) * 4)))) );
HXDLIN( 580)						fillColor = ((((((((hx::UShr(fillColor,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(fillColor,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(fillColor,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((fillColor & 255) & 255));
            					}
            				}
            			}
HXLINE( 582)			::Array< int > dx = ::Array_obj< int >::fromData( _hx_array_data_0eb0fdcf_29,4);
HXLINE( 583)			::Array< int > dy = ::Array_obj< int >::fromData( _hx_array_data_0eb0fdcf_30,4);
HXLINE( 585)			int minX = -(image->offsetX);
HXLINE( 586)			int minY = -(image->offsetY);
HXLINE( 587)			int maxX = (minX + image->width);
HXLINE( 588)			int maxY = (minY + image->height);
HXLINE( 590)			::Array< int > queue = ::Array_obj< int >::__new();
HXLINE( 591)			queue->push(x);
HXLINE( 592)			queue->push(y);
HXLINE( 594)			 ::Dynamic curPointX;
HXDLIN( 594)			 ::Dynamic curPointY;
HXDLIN( 594)			int nextPointX;
HXDLIN( 594)			int nextPointY;
HXDLIN( 594)			int nextPointOffset;
HXDLIN( 594)			int readColor;
HXLINE( 596)			while((queue->length > 0)){
HXLINE( 598)				curPointY = queue->pop();
HXLINE( 599)				curPointX = queue->pop();
HXLINE( 601)				{
HXLINE( 601)					int _g = 0;
HXDLIN( 601)					while((_g < 4)){
HXLINE( 601)						_g = (_g + 1);
HXDLIN( 601)						int i = (_g - 1);
HXLINE( 603)						nextPointX = (curPointX + dx->__get(i));
HXLINE( 604)						nextPointY = (curPointY + dy->__get(i));
HXLINE( 606)						bool _hx_tmp1;
HXDLIN( 606)						bool _hx_tmp2;
HXDLIN( 606)						bool _hx_tmp3;
HXDLIN( 606)						if ((nextPointX >= minX)) {
HXLINE( 606)							_hx_tmp3 = (nextPointY < minY);
            						}
            						else {
HXLINE( 606)							_hx_tmp3 = true;
            						}
HXDLIN( 606)						if (!(_hx_tmp3)) {
HXLINE( 606)							_hx_tmp2 = (nextPointX >= maxX);
            						}
            						else {
HXLINE( 606)							_hx_tmp2 = true;
            						}
HXDLIN( 606)						if (!(_hx_tmp2)) {
HXLINE( 606)							_hx_tmp1 = (nextPointY >= maxY);
            						}
            						else {
HXLINE( 606)							_hx_tmp1 = true;
            						}
HXDLIN( 606)						if (_hx_tmp1) {
HXLINE( 608)							continue;
            						}
HXLINE( 611)						nextPointOffset = (((nextPointY * image->width) + nextPointX) * 4);
HXLINE( 612)						{
HXLINE( 612)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 612)									int r4 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & 255)) );
HXDLIN( 612)									int g4 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1))) & 255)) );
HXDLIN( 612)									int b3 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2))) & 255)) );
HXDLIN( 612)									readColor = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3))) & 255)) ) & 255));
            								}
            								break;
            								case (int)1: {
HXLINE( 612)									int r5 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1))) & 255)) );
HXDLIN( 612)									int g5 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2))) & 255)) );
HXDLIN( 612)									int b4 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3))) & 255)) );
HXDLIN( 612)									readColor = (((((r5 & 255) << 24) | ((g5 & 255) << 16)) | ((b4 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & 255)) ) & 255));
            								}
            								break;
            								case (int)2: {
HXLINE( 612)									int r6 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2))) & 255)) );
HXDLIN( 612)									int g6 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1))) & 255)) );
HXDLIN( 612)									int b5 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & 255)) );
HXDLIN( 612)									readColor = (((((r6 & 255) << 24) | ((g6 & 255) << 16)) | ((b5 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3))) & 255)) ) & 255));
            								}
            								break;
            							}
HXDLIN( 612)							if (premultiplied) {
HXLINE( 612)								bool _hx_tmp4;
HXDLIN( 612)								if (((readColor & 255) != 0)) {
HXLINE( 612)									_hx_tmp4 = ((readColor & 255) != 255);
            								}
            								else {
HXLINE( 612)									_hx_tmp4 = false;
            								}
HXDLIN( 612)								if (_hx_tmp4) {
HXLINE( 612)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((readColor & 255)) ));
HXDLIN( 612)									{
HXLINE( 612)										 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 612)										int r7 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(readColor,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 612)										 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 612)										int g7 = ( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(readColor,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 612)										 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 612)										readColor = (((((r7 & 255) << 24) | ((g7 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(readColor,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((readColor & 255) & 255));
            									}
            								}
            							}
            						}
HXLINE( 614)						if ((readColor == hitColor)) {
HXLINE( 616)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 616)									{
HXLINE( 616)										int val = (hx::UShr(fillColor,24) & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val1 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1)),val1);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val2 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2)),val2);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val3 = (fillColor & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3)),val3);
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 616)									{
HXLINE( 616)										int val4 = (fillColor & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val4);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val5 = (hx::UShr(fillColor,24) & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1)),val5);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val6 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2)),val6);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val7 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3)),val7);
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 616)									{
HXLINE( 616)										int val8 = (hx::UShr(fillColor,8) & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val8);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val9 = (hx::UShr(fillColor,16) & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 1)),val9);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val10 = (hx::UShr(fillColor,24) & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 2)),val10);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val11 = (fillColor & 255);
HXDLIN( 616)										 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (nextPointOffset + 3)),val11);
            									}
            								}
            								break;
            							}
HXLINE( 618)							queue->push(nextPointX);
HXLINE( 619)							queue->push(nextPointY);
            						}
            					}
            				}
            			}
            		}
HXLINE( 625)		image->dirty = true;
HXLINE( 626)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,floodFill,(void))

 ::lime::graphics::Image ImageDataUtil_obj::gaussianBlur( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality,hx::Null< Float >  __o_strength, ::Dynamic color){
            		Float blurX = __o_blurX.Default(4);
            		Float blurY = __o_blurY.Default(4);
            		int quality = __o_quality.Default(1);
            		Float strength = __o_strength.Default(1);
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_631_gaussianBlur)
HXLINE( 635)		bool imagePremultiplied = image->get_premultiplied();
HXLINE( 636)		bool sourceImagePremultiplied = sourceImage->get_premultiplied();
HXLINE( 637)		if (imagePremultiplied) {
HXLINE( 637)			image->set_premultiplied(false);
            		}
HXLINE( 638)		if (sourceImagePremultiplied) {
HXLINE( 638)			sourceImage->set_premultiplied(false);
            		}
HXLINE( 648)		 ::lime::utils::ArrayBufferView imgB = image->get_data();
HXLINE( 649)		 ::lime::utils::ArrayBufferView imgA = sourceImage->get_data();
HXLINE( 650)		int w = ::Std_obj::_hx_int(sourceRect->width);
HXLINE( 651)		int h = ::Std_obj::_hx_int(sourceRect->height);
HXLINE( 652)		int bx = ::Std_obj::_hx_int(blurX);
HXLINE( 653)		int by = ::Std_obj::_hx_int(blurY);
HXLINE( 654)		int oX = ::Std_obj::_hx_int(destPoint->x);
HXLINE( 655)		int oY = ::Std_obj::_hx_int(destPoint->y);
HXLINE( 657)		int n = ((quality * 2) - 1);
HXLINE( 658)		Float rng = (::Math_obj::pow(( (Float)(2) ),( (Float)(quality) )) * ((Float)0.125));
HXLINE( 660)		::Array< Float > bxs = ::lime::_internal::graphics::ImageDataUtil_obj::_hx___getBoxesForGaussianBlur((( (Float)(bx) ) * rng),n);
HXLINE( 661)		::Array< Float > bys = ::lime::_internal::graphics::ImageDataUtil_obj::_hx___getBoxesForGaussianBlur((( (Float)(by) ) * rng),n);
HXLINE( 662)		int offset = ::Std_obj::_hx_int(( (Float)((((w * oY) + oX) * 4)) ));
HXLINE( 664)		::lime::_internal::graphics::ImageDataUtil_obj::_hx___boxBlur(imgA,imgB,w,h,((bxs->__get(0) - ( (Float)(1) )) / ( (Float)(2) )),((bys->__get(0) - ( (Float)(1) )) / ( (Float)(2) )));
HXLINE( 665)		int bIndex = 1;
HXLINE( 667)		{
HXLINE( 667)			int _g = 0;
HXDLIN( 667)			int _g1 = ::Std_obj::_hx_int((( (Float)(n) ) / ( (Float)(2) )));
HXDLIN( 667)			while((_g < _g1)){
HXLINE( 667)				_g = (_g + 1);
HXDLIN( 667)				int i = (_g - 1);
HXLINE( 669)				::lime::_internal::graphics::ImageDataUtil_obj::_hx___boxBlur(imgB,imgA,w,h,((bxs->__get(bIndex) - ( (Float)(1) )) / ( (Float)(2) )),((bys->__get(bIndex) - ( (Float)(1) )) / ( (Float)(2) )));
HXLINE( 670)				::lime::_internal::graphics::ImageDataUtil_obj::_hx___boxBlur(imgA,imgB,w,h,((bxs->__get((bIndex + 1)) - ( (Float)(1) )) / ( (Float)(2) )),((bys->__get((bIndex + 1)) - ( (Float)(1) )) / ( (Float)(2) )));
HXLINE( 671)				bIndex = (bIndex + 2);
            			}
            		}
HXLINE( 674)		int x;
HXLINE( 675)		int y;
HXLINE( 677)		bool _hx_tmp;
HXDLIN( 677)		if ((offset == 0)) {
HXLINE( 677)			_hx_tmp = (strength != 1);
            		}
            		else {
HXLINE( 677)			_hx_tmp = true;
            		}
HXDLIN( 677)		if (_hx_tmp) {
HXLINE( 679)			if ((offset <= 0)) {
HXLINE( 681)				y = 0;
HXLINE( 682)				while((y < h)){
HXLINE( 684)					x = 0;
HXLINE( 685)					while((x < w)){
HXLINE( 687)						{
HXLINE( 687)							 ::lime::math::Rectangle sourceRect1 = sourceImage->get_rect();
HXDLIN( 687)							int d = (4 * ((y * ::Std_obj::_hx_int(image->get_rect()->width)) + x));
HXDLIN( 687)							int sourceX = (x - ::Std_obj::_hx_int(destPoint->x));
HXDLIN( 687)							int sourceY = (y - ::Std_obj::_hx_int(destPoint->y));
HXDLIN( 687)							int offset1 = 0;
HXDLIN( 687)							bool _hx_tmp1;
HXDLIN( 687)							bool _hx_tmp2;
HXDLIN( 687)							bool _hx_tmp3;
HXDLIN( 687)							if ((sourceX >= 0)) {
HXLINE( 687)								_hx_tmp3 = (sourceY < 0);
            							}
            							else {
HXLINE( 687)								_hx_tmp3 = true;
            							}
HXDLIN( 687)							if (!(_hx_tmp3)) {
HXLINE( 687)								_hx_tmp2 = (sourceX >= sourceRect1->width);
            							}
            							else {
HXLINE( 687)								_hx_tmp2 = true;
            							}
HXDLIN( 687)							if (!(_hx_tmp2)) {
HXLINE( 687)								_hx_tmp1 = (sourceY >= sourceRect1->height);
            							}
            							else {
HXLINE( 687)								_hx_tmp1 = true;
            							}
HXDLIN( 687)							if (_hx_tmp1) {
HXLINE( 687)								offset1 = -1;
            							}
            							else {
HXLINE( 687)								offset1 = (4 * ((sourceY * ::Std_obj::_hx_int(sourceRect1->width)) + sourceX));
            							}
HXDLIN( 687)							int s = offset1;
HXDLIN( 687)							if ((s < 0)) {
HXLINE( 687)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 3)),0);
HXDLIN( 687)								int val = 0;
HXDLIN( 687)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 2)),val);
HXDLIN( 687)								int val1 = val;
HXDLIN( 687)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 1)),val1);
HXDLIN( 687)								int val2 = val1;
HXDLIN( 687)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val2);
            							}
            							else {
HXLINE( 687)								{
HXLINE( 687)									int val3 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + s)) & 255)) );
HXDLIN( 687)									 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val3);
            								}
HXDLIN( 687)								{
HXLINE( 687)									int val4 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s + 1))) & 255)) );
HXDLIN( 687)									 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 1)),val4);
            								}
HXDLIN( 687)								{
HXLINE( 687)									int val5 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s + 2))) & 255)) );
HXDLIN( 687)									 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 2)),val5);
            								}
HXDLIN( 687)								int _hx_int = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s + 3))) & 255)) );
HXDLIN( 687)								Float a;
HXDLIN( 687)								if ((_hx_int < 0)) {
HXLINE( 687)									a = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE( 687)									a = (_hx_int + ((Float)0.0));
            								}
HXDLIN( 687)								int a1 = ::Std_obj::_hx_int((a * strength));
HXDLIN( 687)								{
HXLINE( 687)									int val6;
HXDLIN( 687)									if ((a1 < 0)) {
HXLINE( 687)										val6 = 0;
            									}
            									else {
HXLINE( 687)										if ((a1 > 255)) {
HXLINE( 687)											val6 = 255;
            										}
            										else {
HXLINE( 687)											val6 = a1;
            										}
            									}
HXDLIN( 687)									 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 3)),val6);
            								}
            							}
            						}
HXLINE( 688)						x = (x + 1);
            					}
HXLINE( 690)					y = (y + 1);
            				}
            			}
            			else {
HXLINE( 695)				y = (h - 1);
HXLINE( 696)				while((y >= 0)){
HXLINE( 698)					x = (w - 1);
HXLINE( 699)					while((x >= 0)){
HXLINE( 701)						{
HXLINE( 701)							 ::lime::math::Rectangle sourceRect2 = sourceImage->get_rect();
HXDLIN( 701)							int d1 = (4 * ((y * ::Std_obj::_hx_int(image->get_rect()->width)) + x));
HXDLIN( 701)							int sourceX1 = (x - ::Std_obj::_hx_int(destPoint->x));
HXDLIN( 701)							int sourceY1 = (y - ::Std_obj::_hx_int(destPoint->y));
HXDLIN( 701)							int offset2 = 0;
HXDLIN( 701)							bool _hx_tmp4;
HXDLIN( 701)							bool _hx_tmp5;
HXDLIN( 701)							bool _hx_tmp6;
HXDLIN( 701)							if ((sourceX1 >= 0)) {
HXLINE( 701)								_hx_tmp6 = (sourceY1 < 0);
            							}
            							else {
HXLINE( 701)								_hx_tmp6 = true;
            							}
HXDLIN( 701)							if (!(_hx_tmp6)) {
HXLINE( 701)								_hx_tmp5 = (sourceX1 >= sourceRect2->width);
            							}
            							else {
HXLINE( 701)								_hx_tmp5 = true;
            							}
HXDLIN( 701)							if (!(_hx_tmp5)) {
HXLINE( 701)								_hx_tmp4 = (sourceY1 >= sourceRect2->height);
            							}
            							else {
HXLINE( 701)								_hx_tmp4 = true;
            							}
HXDLIN( 701)							if (_hx_tmp4) {
HXLINE( 701)								offset2 = -1;
            							}
            							else {
HXLINE( 701)								offset2 = (4 * ((sourceY1 * ::Std_obj::_hx_int(sourceRect2->width)) + sourceX1));
            							}
HXDLIN( 701)							int s1 = offset2;
HXDLIN( 701)							if ((s1 < 0)) {
HXLINE( 701)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d1 + 3)),0);
HXDLIN( 701)								int val7 = 0;
HXDLIN( 701)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d1 + 2)),val7);
HXDLIN( 701)								int val8 = val7;
HXDLIN( 701)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d1 + 1)),val8);
HXDLIN( 701)								int val9 = val8;
HXDLIN( 701)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d1),val9);
            							}
            							else {
HXLINE( 701)								{
HXLINE( 701)									int val10 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + s1)) & 255)) );
HXDLIN( 701)									 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d1),val10);
            								}
HXDLIN( 701)								{
HXLINE( 701)									int val11 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s1 + 1))) & 255)) );
HXDLIN( 701)									 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d1 + 1)),val11);
            								}
HXDLIN( 701)								{
HXLINE( 701)									int val12 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s1 + 2))) & 255)) );
HXDLIN( 701)									 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d1 + 2)),val12);
            								}
HXDLIN( 701)								int int1 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s1 + 3))) & 255)) );
HXDLIN( 701)								Float a2;
HXDLIN( 701)								if ((int1 < 0)) {
HXLINE( 701)									a2 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE( 701)									a2 = (int1 + ((Float)0.0));
            								}
HXDLIN( 701)								int a3 = ::Std_obj::_hx_int((a2 * strength));
HXDLIN( 701)								{
HXLINE( 701)									int val13;
HXDLIN( 701)									if ((a3 < 0)) {
HXLINE( 701)										val13 = 0;
            									}
            									else {
HXLINE( 701)										if ((a3 > 255)) {
HXLINE( 701)											val13 = 255;
            										}
            										else {
HXLINE( 701)											val13 = a3;
            										}
            									}
HXDLIN( 701)									 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d1 + 3)),val13);
            								}
            							}
            						}
HXLINE( 702)						x = (x - 1);
            					}
HXLINE( 704)					y = (y - 1);
            				}
            			}
            		}
HXLINE( 709)		image->dirty = true;
HXLINE( 710)		image->version++;
HXLINE( 711)		sourceImage->dirty = true;
HXLINE( 712)		sourceImage->version++;
HXLINE( 714)		if (imagePremultiplied) {
HXLINE( 714)			image->set_premultiplied(true);
            		}
HXLINE( 715)		if (sourceImagePremultiplied) {
HXLINE( 715)			sourceImage->set_premultiplied(true);
            		}
HXLINE( 717)		if (hx::IsEq( imgB,image->get_data() )) {
HXLINE( 717)			return image;
            		}
HXLINE( 718)		return sourceImage;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(ImageDataUtil_obj,gaussianBlur,return )

 ::lime::math::Rectangle ImageDataUtil_obj::getColorBoundsRect( ::lime::graphics::Image image,int mask,int color,bool findColor,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_722_getColorBoundsRect)
HXLINE( 723)		int left = (image->width + 1);
HXLINE( 724)		int right = 0;
HXLINE( 725)		int top = (image->height + 1);
HXLINE( 726)		int bottom = 0;
HXLINE( 728)		int _color;
HXDLIN( 728)		int _mask;
HXLINE( 730)		switch((int)(format)){
            			case (int)1: {
HXLINE( 733)				int argb = color;
HXDLIN( 733)				int this1 = 0;
HXDLIN( 733)				int rgba = this1;
HXDLIN( 733)				rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN( 733)				_color = rgba;
HXLINE( 734)				int argb1 = mask;
HXDLIN( 734)				int this2 = 0;
HXDLIN( 734)				int rgba1 = this2;
HXDLIN( 734)				rgba1 = ((((((hx::UShr(argb1,16) & 255) & 255) << 24) | (((hx::UShr(argb1,8) & 255) & 255) << 16)) | (((argb1 & 255) & 255) << 8)) | ((hx::UShr(argb1,24) & 255) & 255));
HXDLIN( 734)				_mask = rgba1;
            			}
            			break;
            			case (int)2: {
HXLINE( 737)				int bgra = color;
HXDLIN( 737)				int this3 = 0;
HXDLIN( 737)				int rgba2 = this3;
HXDLIN( 737)				rgba2 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN( 737)				_color = rgba2;
HXLINE( 738)				int bgra1 = mask;
HXDLIN( 738)				int this4 = 0;
HXDLIN( 738)				int rgba3 = this4;
HXDLIN( 738)				rgba3 = ((((((hx::UShr(bgra1,8) & 255) & 255) << 24) | (((hx::UShr(bgra1,16) & 255) & 255) << 16)) | (((hx::UShr(bgra1,24) & 255) & 255) << 8)) | ((bgra1 & 255) & 255));
HXDLIN( 738)				_mask = rgba3;
            			}
            			break;
            			default:{
HXLINE( 741)				_color = color;
HXLINE( 742)				_mask = mask;
            			}
            		}
HXLINE( 745)		if (!(image->get_transparent())) {
HXLINE( 747)			_color = ((((((hx::UShr(_color,24) & 255) & 255) << 24) | (((hx::UShr(_color,16) & 255) & 255) << 16)) | (((hx::UShr(_color,8) & 255) & 255) << 8)) | 255);
HXLINE( 748)			_mask = ((((((hx::UShr(_mask,24) & 255) & 255) << 24) | (((hx::UShr(_mask,16) & 255) & 255) << 16)) | (((hx::UShr(_mask,8) & 255) & 255) << 8)) | 255);
            		}
HXLINE( 751)		int pixel;
HXDLIN( 751)		bool hit;
HXLINE( 753)		{
HXLINE( 753)			int _g = 0;
HXDLIN( 753)			int _g1 = image->width;
HXDLIN( 753)			while((_g < _g1)){
HXLINE( 753)				_g = (_g + 1);
HXDLIN( 753)				int x = (_g - 1);
HXLINE( 755)				hit = false;
HXLINE( 757)				{
HXLINE( 757)					int _g2 = 0;
HXDLIN( 757)					int _g11 = image->height;
HXDLIN( 757)					while((_g2 < _g11)){
HXLINE( 757)						_g2 = (_g2 + 1);
HXDLIN( 757)						int y = (_g2 - 1);
HXLINE( 759)						pixel = image->getPixel32(x,y,0);
HXLINE( 760)						if (findColor) {
HXLINE( 760)							hit = ((pixel & _mask) == _color);
            						}
            						else {
HXLINE( 760)							hit = ((pixel & _mask) != _color);
            						}
HXLINE( 762)						if (hit) {
HXLINE( 764)							if ((x < left)) {
HXLINE( 764)								left = x;
            							}
HXLINE( 765)							goto _hx_goto_38;
            						}
            					}
            					_hx_goto_38:;
            				}
HXLINE( 769)				if (hit) {
HXLINE( 771)					goto _hx_goto_37;
            				}
            			}
            			_hx_goto_37:;
            		}
HXLINE( 775)		int ix;
HXLINE( 777)		{
HXLINE( 777)			int _g21 = 0;
HXDLIN( 777)			int _g3 = image->width;
HXDLIN( 777)			while((_g21 < _g3)){
HXLINE( 777)				_g21 = (_g21 + 1);
HXDLIN( 777)				int x1 = (_g21 - 1);
HXLINE( 779)				ix = ((image->width - 1) - x1);
HXLINE( 780)				hit = false;
HXLINE( 782)				{
HXLINE( 782)					int _g22 = 0;
HXDLIN( 782)					int _g31 = image->height;
HXDLIN( 782)					while((_g22 < _g31)){
HXLINE( 782)						_g22 = (_g22 + 1);
HXDLIN( 782)						int y1 = (_g22 - 1);
HXLINE( 784)						pixel = image->getPixel32(ix,y1,0);
HXLINE( 785)						if (findColor) {
HXLINE( 785)							hit = ((pixel & _mask) == _color);
            						}
            						else {
HXLINE( 785)							hit = ((pixel & _mask) != _color);
            						}
HXLINE( 787)						if (hit) {
HXLINE( 789)							if ((ix > right)) {
HXLINE( 789)								right = ix;
            							}
HXLINE( 790)							goto _hx_goto_40;
            						}
            					}
            					_hx_goto_40:;
            				}
HXLINE( 794)				if (hit) {
HXLINE( 796)					goto _hx_goto_39;
            				}
            			}
            			_hx_goto_39:;
            		}
HXLINE( 800)		{
HXLINE( 800)			int _g4 = 0;
HXDLIN( 800)			int _g5 = image->height;
HXDLIN( 800)			while((_g4 < _g5)){
HXLINE( 800)				_g4 = (_g4 + 1);
HXDLIN( 800)				int y2 = (_g4 - 1);
HXLINE( 802)				hit = false;
HXLINE( 804)				{
HXLINE( 804)					int _g41 = 0;
HXDLIN( 804)					int _g51 = image->width;
HXDLIN( 804)					while((_g41 < _g51)){
HXLINE( 804)						_g41 = (_g41 + 1);
HXDLIN( 804)						int x2 = (_g41 - 1);
HXLINE( 806)						pixel = image->getPixel32(x2,y2,0);
HXLINE( 807)						if (findColor) {
HXLINE( 807)							hit = ((pixel & _mask) == _color);
            						}
            						else {
HXLINE( 807)							hit = ((pixel & _mask) != _color);
            						}
HXLINE( 809)						if (hit) {
HXLINE( 811)							if ((y2 < top)) {
HXLINE( 811)								top = y2;
            							}
HXLINE( 812)							goto _hx_goto_42;
            						}
            					}
            					_hx_goto_42:;
            				}
HXLINE( 816)				if (hit) {
HXLINE( 818)					goto _hx_goto_41;
            				}
            			}
            			_hx_goto_41:;
            		}
HXLINE( 822)		int iy;
HXLINE( 824)		{
HXLINE( 824)			int _g6 = 0;
HXDLIN( 824)			int _g7 = image->height;
HXDLIN( 824)			while((_g6 < _g7)){
HXLINE( 824)				_g6 = (_g6 + 1);
HXDLIN( 824)				int y3 = (_g6 - 1);
HXLINE( 826)				iy = ((image->height - 1) - y3);
HXLINE( 827)				hit = false;
HXLINE( 829)				{
HXLINE( 829)					int _g61 = 0;
HXDLIN( 829)					int _g71 = image->width;
HXDLIN( 829)					while((_g61 < _g71)){
HXLINE( 829)						_g61 = (_g61 + 1);
HXDLIN( 829)						int x3 = (_g61 - 1);
HXLINE( 831)						pixel = image->getPixel32(x3,iy,0);
HXLINE( 832)						if (findColor) {
HXLINE( 832)							hit = ((pixel & _mask) == _color);
            						}
            						else {
HXLINE( 832)							hit = ((pixel & _mask) != _color);
            						}
HXLINE( 834)						if (hit) {
HXLINE( 836)							if ((iy > bottom)) {
HXLINE( 836)								bottom = iy;
            							}
HXLINE( 837)							goto _hx_goto_44;
            						}
            					}
            					_hx_goto_44:;
            				}
HXLINE( 841)				if (hit) {
HXLINE( 843)					goto _hx_goto_43;
            				}
            			}
            			_hx_goto_43:;
            		}
HXLINE( 847)		int w = (right - left);
HXLINE( 848)		int h = (bottom - top);
HXLINE( 850)		if ((w > 0)) {
HXLINE( 850)			w = (w + 1);
            		}
HXLINE( 851)		if ((h > 0)) {
HXLINE( 851)			h = (h + 1);
            		}
HXLINE( 853)		if ((w < 0)) {
HXLINE( 853)			w = 0;
            		}
HXLINE( 854)		if ((h < 0)) {
HXLINE( 854)			h = 0;
            		}
HXLINE( 856)		if ((left == right)) {
HXLINE( 856)			w = 1;
            		}
HXLINE( 857)		if ((top == bottom)) {
HXLINE( 857)			h = 1;
            		}
HXLINE( 859)		if ((left > image->width)) {
HXLINE( 859)			left = 0;
            		}
HXLINE( 860)		if ((top > image->height)) {
HXLINE( 860)			top = 0;
            		}
HXLINE( 862)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,left,top,w,h);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,getColorBoundsRect,return )

int ImageDataUtil_obj::getPixel( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_866_getPixel)
HXLINE( 867)		int pixel;
HXLINE( 869)		{
HXLINE( 869)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 869)			int offset = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN( 869)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 869)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 869)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 869)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 869)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 869)					pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            				case (int)1: {
HXLINE( 869)					int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 869)					int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 869)					int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 869)					pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            				}
            				break;
            				case (int)2: {
HXLINE( 869)					int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 869)					int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 869)					int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 869)					pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            			}
HXDLIN( 869)			if (premultiplied) {
HXLINE( 869)				bool _hx_tmp;
HXDLIN( 869)				if (((pixel & 255) != 0)) {
HXLINE( 869)					_hx_tmp = ((pixel & 255) != 255);
            				}
            				else {
HXLINE( 869)					_hx_tmp = false;
            				}
HXDLIN( 869)				if (_hx_tmp) {
HXLINE( 869)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN( 869)					{
HXLINE( 869)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 869)						int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 869)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 869)						int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 869)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 869)						pixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            					}
            				}
            			}
            		}
HXLINE( 871)		pixel = ((((((hx::UShr(pixel,24) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,8) & 255) & 255) << 8)) | 0);
HXLINE( 873)		switch((int)(format)){
            			case (int)1: {
HXLINE( 876)				int this4 = 0;
HXDLIN( 876)				int argb = this4;
HXDLIN( 876)				argb = ((((((pixel & 255) & 255) << 24) | (((hx::UShr(pixel,24) & 255) & 255) << 16)) | (((hx::UShr(pixel,16) & 255) & 255) << 8)) | ((hx::UShr(pixel,8) & 255) & 255));
HXDLIN( 876)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 878)				int this5 = 0;
HXDLIN( 878)				int bgra = this5;
HXDLIN( 878)				bgra = ((((((hx::UShr(pixel,8) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,24) & 255) & 255) << 8)) | ((pixel & 255) & 255));
HXDLIN( 878)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 880)				return pixel;
            			}
            		}
HXLINE( 873)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel,return )

int ImageDataUtil_obj::getPixel32( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_885_getPixel32)
HXLINE( 886)		int pixel;
HXLINE( 888)		{
HXLINE( 888)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 888)			int offset = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN( 888)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 888)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 888)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 888)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 888)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 888)					pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            				case (int)1: {
HXLINE( 888)					int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 888)					int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 888)					int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN( 888)					pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            				}
            				break;
            				case (int)2: {
HXLINE( 888)					int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN( 888)					int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN( 888)					int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN( 888)					pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            			}
HXDLIN( 888)			if (premultiplied) {
HXLINE( 888)				bool _hx_tmp;
HXDLIN( 888)				if (((pixel & 255) != 0)) {
HXLINE( 888)					_hx_tmp = ((pixel & 255) != 255);
            				}
            				else {
HXLINE( 888)					_hx_tmp = false;
            				}
HXDLIN( 888)				if (_hx_tmp) {
HXLINE( 888)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN( 888)					{
HXLINE( 888)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 888)						int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 888)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 888)						int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 888)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 888)						pixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            					}
            				}
            			}
            		}
HXLINE( 891)		switch((int)(format)){
            			case (int)1: {
HXLINE( 894)				int this4 = 0;
HXDLIN( 894)				int argb = this4;
HXDLIN( 894)				argb = ((((((pixel & 255) & 255) << 24) | (((hx::UShr(pixel,24) & 255) & 255) << 16)) | (((hx::UShr(pixel,16) & 255) & 255) << 8)) | ((hx::UShr(pixel,8) & 255) & 255));
HXDLIN( 894)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 896)				int this5 = 0;
HXDLIN( 896)				int bgra = this5;
HXDLIN( 896)				bgra = ((((((hx::UShr(pixel,8) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,24) & 255) & 255) << 8)) | ((pixel & 255) & 255));
HXDLIN( 896)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 898)				return pixel;
            			}
            		}
HXLINE( 891)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel32,return )

 ::haxe::io::Bytes ImageDataUtil_obj::getPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_903_getPixels)
HXLINE( 904)		if (hx::IsNull( image->buffer->data )) {
HXLINE( 904)			return null();
            		}
HXLINE( 906)		int length = ::Std_obj::_hx_int((rect->width * rect->height));
HXLINE( 907)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((length * 4));
HXLINE( 910)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 910)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_get_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),format,hx::DynamicPtr(bytes));
            		}
            		else {
HXLINE( 914)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 915)			int sourceFormat = image->buffer->format;
HXLINE( 916)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 918)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 919)			int position;
HXDLIN( 919)			int argb;
HXDLIN( 919)			int bgra;
HXDLIN( 919)			int pixel;
HXLINE( 920)			int destPosition = 0;
HXLINE( 922)			{
HXLINE( 922)				int _g = 0;
HXDLIN( 922)				int _g1 = dataView->height;
HXDLIN( 922)				while((_g < _g1)){
HXLINE( 922)					_g = (_g + 1);
HXDLIN( 922)					int y = (_g - 1);
HXLINE( 924)					position = (dataView->byteOffset + (dataView->stride * y));
HXLINE( 926)					{
HXLINE( 926)						int _g2 = 0;
HXDLIN( 926)						int _g11 = dataView->width;
HXDLIN( 926)						while((_g2 < _g11)){
HXLINE( 926)							_g2 = (_g2 + 1);
HXDLIN( 926)							int x = (_g2 - 1);
HXLINE( 928)							{
HXLINE( 928)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 928)										int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & 255)) );
HXDLIN( 928)										int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 1))) & 255)) );
HXDLIN( 928)										int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 2))) & 255)) );
HXDLIN( 928)										pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 928)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 1))) & 255)) );
HXDLIN( 928)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 2))) & 255)) );
HXDLIN( 928)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 3))) & 255)) );
HXDLIN( 928)										pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 928)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 2))) & 255)) );
HXDLIN( 928)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 1))) & 255)) );
HXDLIN( 928)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & 255)) );
HXDLIN( 928)										pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (position + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 928)								if (premultiplied) {
HXLINE( 928)									bool _hx_tmp;
HXDLIN( 928)									if (((pixel & 255) != 0)) {
HXLINE( 928)										_hx_tmp = ((pixel & 255) != 255);
            									}
            									else {
HXLINE( 928)										_hx_tmp = false;
            									}
HXDLIN( 928)									if (_hx_tmp) {
HXLINE( 928)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN( 928)										{
HXLINE( 928)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 928)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 928)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 928)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 928)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 928)											pixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 930)							switch((int)(format)){
            								case (int)1: {
HXLINE( 933)									int this4 = 0;
HXDLIN( 933)									int argb1 = this4;
HXDLIN( 933)									argb1 = ((((((pixel & 255) & 255) << 24) | (((hx::UShr(pixel,24) & 255) & 255) << 16)) | (((hx::UShr(pixel,16) & 255) & 255) << 8)) | ((hx::UShr(pixel,8) & 255) & 255));
HXDLIN( 933)									argb = argb1;
HXLINE( 934)									pixel = argb;
            								}
            								break;
            								case (int)2: {
HXLINE( 936)									int this5 = 0;
HXDLIN( 936)									int bgra1 = this5;
HXDLIN( 936)									bgra1 = ((((((hx::UShr(pixel,8) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,24) & 255) & 255) << 8)) | ((pixel & 255) & 255));
HXDLIN( 936)									bgra = bgra1;
HXLINE( 937)									pixel = bgra;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 941)							{
HXLINE( 941)								destPosition = (destPosition + 1);
HXDLIN( 941)								bytes->b[(destPosition - 1)] = ( (unsigned char)((hx::UShr(pixel,24) & 255)) );
            							}
HXLINE( 942)							{
HXLINE( 942)								destPosition = (destPosition + 1);
HXDLIN( 942)								bytes->b[(destPosition - 1)] = ( (unsigned char)((hx::UShr(pixel,16) & 255)) );
            							}
HXLINE( 943)							{
HXLINE( 943)								destPosition = (destPosition + 1);
HXDLIN( 943)								bytes->b[(destPosition - 1)] = ( (unsigned char)((hx::UShr(pixel,8) & 255)) );
            							}
HXLINE( 944)							{
HXLINE( 944)								destPosition = (destPosition + 1);
HXDLIN( 944)								bytes->b[(destPosition - 1)] = ( (unsigned char)((pixel & 255)) );
            							}
HXLINE( 946)							position = (position + 4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 951)		return bytes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,getPixels,return )

void ImageDataUtil_obj::merge( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_956_merge)
HXLINE( 957)		bool _hx_tmp;
HXDLIN( 957)		if (hx::IsNotNull( image->buffer->data )) {
HXLINE( 957)			_hx_tmp = hx::IsNull( sourceImage->buffer->data );
            		}
            		else {
HXLINE( 957)			_hx_tmp = true;
            		}
HXDLIN( 957)		if (_hx_tmp) {
HXLINE( 957)			return;
            		}
HXLINE( 960)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 960)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_merge(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            		}
            		else {
HXLINE( 965)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 966)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height));
HXLINE( 968)			 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 969)			 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 970)			int sourceFormat = sourceImage->buffer->format;
HXLINE( 971)			int destFormat = image->buffer->format;
HXLINE( 972)			bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 973)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 975)			int sourcePosition;
HXDLIN( 975)			int destPosition;
HXDLIN( 975)			int sourcePixel;
HXDLIN( 975)			int destPixel;
HXLINE( 977)			{
HXLINE( 977)				int _g = 0;
HXDLIN( 977)				int _g1 = destView->height;
HXDLIN( 977)				while((_g < _g1)){
HXLINE( 977)					_g = (_g + 1);
HXDLIN( 977)					int y = (_g - 1);
HXLINE( 979)					sourcePosition = (sourceView->byteOffset + (sourceView->stride * y));
HXLINE( 980)					destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE( 982)					{
HXLINE( 982)						int _g2 = 0;
HXDLIN( 982)						int _g11 = destView->width;
HXDLIN( 982)						while((_g2 < _g11)){
HXLINE( 982)							_g2 = (_g2 + 1);
HXDLIN( 982)							int x = (_g2 - 1);
HXLINE( 984)							{
HXLINE( 984)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 984)										int r = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 984)										int g = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 984)										int b = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 984)										sourcePixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 984)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 984)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 984)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) );
HXDLIN( 984)										sourcePixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 984)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 2))) & 255)) );
HXDLIN( 984)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 1))) & 255)) );
HXDLIN( 984)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & 255)) );
HXDLIN( 984)										sourcePixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + (sourcePosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 984)								if (sourcePremultiplied) {
HXLINE( 984)									bool _hx_tmp1;
HXDLIN( 984)									if (((sourcePixel & 255) != 0)) {
HXLINE( 984)										_hx_tmp1 = ((sourcePixel & 255) != 255);
            									}
            									else {
HXLINE( 984)										_hx_tmp1 = false;
            									}
HXDLIN( 984)									if (_hx_tmp1) {
HXLINE( 984)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((sourcePixel & 255)) ));
HXDLIN( 984)										{
HXLINE( 984)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 984)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 984)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 984)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 984)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 984)											sourcePixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(sourcePixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((sourcePixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 985)							{
HXLINE( 985)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 985)										int r4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 985)										int g4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 985)										int b3 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 985)										destPixel = (((((r4 & 255) << 24) | ((g4 & 255) << 16)) | ((b3 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE( 985)										int r5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 985)										int g5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 985)										int b4 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) );
HXDLIN( 985)										destPixel = (((((r5 & 255) << 24) | ((g5 & 255) << 16)) | ((b4 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE( 985)										int r6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2))) & 255)) );
HXDLIN( 985)										int g6 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1))) & 255)) );
HXDLIN( 985)										int b5 = ( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & 255)) );
HXDLIN( 985)										destPixel = (((((r6 & 255) << 24) | ((g6 & 255) << 16)) | ((b5 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN( 985)								if (destPremultiplied) {
HXLINE( 985)									bool _hx_tmp2;
HXDLIN( 985)									if (((destPixel & 255) != 0)) {
HXLINE( 985)										_hx_tmp2 = ((destPixel & 255) != 255);
            									}
            									else {
HXLINE( 985)										_hx_tmp2 = false;
            									}
HXDLIN( 985)									if (_hx_tmp2) {
HXLINE( 985)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((destPixel & 255)) ));
HXDLIN( 985)										{
HXLINE( 985)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 985)											int r7 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 985)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 985)											int g7 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN( 985)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 985)											destPixel = (((((r7 & 255) << 24) | ((g7 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(destPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE( 987)							{
HXLINE( 987)								int value = ::Std_obj::_hx_int((( (Float)((((hx::UShr(sourcePixel,24) & 255) * redMultiplier) + ((hx::UShr(destPixel,24) & 255) * (256 - redMultiplier)))) ) / ( (Float)(256) )));
HXDLIN( 987)								destPixel = (((((value & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            							}
HXLINE( 988)							{
HXLINE( 988)								int value1 = ::Std_obj::_hx_int((( (Float)((((hx::UShr(sourcePixel,16) & 255) * greenMultiplier) + ((hx::UShr(destPixel,16) & 255) * (256 - greenMultiplier)))) ) / ( (Float)(256) )));
HXDLIN( 988)								destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | ((value1 & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | ((destPixel & 255) & 255));
            							}
HXLINE( 989)							{
HXLINE( 989)								int value2 = ::Std_obj::_hx_int((( (Float)((((hx::UShr(sourcePixel,8) & 255) * blueMultiplier) + ((hx::UShr(destPixel,8) & 255) * (256 - blueMultiplier)))) ) / ( (Float)(256) )));
HXDLIN( 989)								destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | ((value2 & 255) << 8)) | ((destPixel & 255) & 255));
            							}
HXLINE( 990)							{
HXLINE( 990)								int value3 = ::Std_obj::_hx_int((( (Float)((((sourcePixel & 255) * alphaMultiplier) + ((destPixel & 255) * (256 - alphaMultiplier)))) ) / ( (Float)(256) )));
HXDLIN( 990)								destPixel = ((((((hx::UShr(destPixel,24) & 255) & 255) << 24) | (((hx::UShr(destPixel,16) & 255) & 255) << 16)) | (((hx::UShr(destPixel,8) & 255) & 255) << 8)) | (value3 & 255));
            							}
HXLINE( 992)							{
HXLINE( 992)								if (destPremultiplied) {
HXLINE( 992)									if (((destPixel & 255) == 0)) {
HXLINE( 992)										if ((destPixel != 0)) {
HXLINE( 992)											destPixel = 0;
            										}
            									}
            									else {
HXLINE( 992)										if (((destPixel & 255) != 255)) {
HXLINE( 992)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 992)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this7->buffer->b,(this7->byteOffset + ((destPixel & 255) * 4)))) );
HXDLIN( 992)											destPixel = ((((((((hx::UShr(destPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(destPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(destPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((destPixel & 255) & 255));
            										}
            									}
            								}
HXDLIN( 992)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 992)										{
HXLINE( 992)											int val = (hx::UShr(destPixel,24) & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 992)										{
HXLINE( 992)											int val1 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            										}
HXDLIN( 992)										{
HXLINE( 992)											int val2 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            										}
HXDLIN( 992)										{
HXLINE( 992)											int val3 = (destPixel & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 992)										{
HXLINE( 992)											int val4 = (destPixel & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 992)										{
HXLINE( 992)											int val5 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val5);
            										}
HXDLIN( 992)										{
HXLINE( 992)											int val6 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val6);
            										}
HXDLIN( 992)										{
HXLINE( 992)											int val7 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val7);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 992)										{
HXLINE( 992)											int val8 = (hx::UShr(destPixel,8) & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 992)										{
HXLINE( 992)											int val9 = (hx::UShr(destPixel,16) & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val9);
            										}
HXDLIN( 992)										{
HXLINE( 992)											int val10 = (hx::UShr(destPixel,24) & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val10);
            										}
HXDLIN( 992)										{
HXLINE( 992)											int val11 = (destPixel & 255);
HXDLIN( 992)											 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val11);
            										}
            									}
            									break;
            								}
            							}
HXLINE( 994)							sourcePosition = (sourcePosition + 4);
HXLINE( 995)							destPosition = (destPosition + 4);
            						}
            					}
            				}
            			}
            		}
HXLINE(1000)		image->dirty = true;
HXLINE(1001)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageDataUtil_obj,merge,(void))

void ImageDataUtil_obj::multiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1005_multiplyAlpha)
HXLINE(1006)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1007)		bool _hx_tmp;
HXDLIN(1007)		if (hx::IsNotNull( data )) {
HXLINE(1007)			_hx_tmp = !(image->buffer->transparent);
            		}
            		else {
HXLINE(1007)			_hx_tmp = true;
            		}
HXDLIN(1007)		if (_hx_tmp) {
HXLINE(1007)			return;
            		}
HXLINE(1010)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1010)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_multiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE(1014)			int format = image->buffer->format;
HXLINE(1015)			int length = ::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(4) )));
HXLINE(1016)			int pixel;
HXLINE(1018)			{
HXLINE(1018)				int _g = 0;
HXDLIN(1018)				int _g1 = length;
HXDLIN(1018)				while((_g < _g1)){
HXLINE(1018)					_g = (_g + 1);
HXDLIN(1018)					int i = (_g - 1);
HXLINE(1020)					{
HXLINE(1020)						int offset = (i * 4);
HXDLIN(1020)						switch((int)(format)){
            							case (int)0: {
HXLINE(1020)								int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1020)								int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1020)								int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1020)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            							case (int)1: {
HXLINE(1020)								int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1020)								int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1020)								int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN(1020)								pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            							}
            							break;
            							case (int)2: {
HXLINE(1020)								int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1020)								int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1020)								int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1020)								pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            						}
            					}
HXLINE(1021)					{
HXLINE(1021)						int offset1 = (i * 4);
HXDLIN(1021)						if (((pixel & 255) == 0)) {
HXLINE(1021)							if ((pixel != 0)) {
HXLINE(1021)								pixel = 0;
            							}
            						}
            						else {
HXLINE(1021)							if (((pixel & 255) != 255)) {
HXLINE(1021)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1021)								::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this1->buffer->b,(this1->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN(1021)								pixel = ((((((((hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            							}
            						}
HXDLIN(1021)						switch((int)(format)){
            							case (int)0: {
HXLINE(1021)								{
HXLINE(1021)									int val = (hx::UShr(pixel,24) & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1021)								{
HXLINE(1021)									int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val1);
            								}
HXDLIN(1021)								{
HXLINE(1021)									int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val2);
            								}
HXDLIN(1021)								{
HXLINE(1021)									int val3 = (pixel & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val3);
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1021)								{
HXLINE(1021)									int val4 = (pixel & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN(1021)								{
HXLINE(1021)									int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val5);
            								}
HXDLIN(1021)								{
HXLINE(1021)									int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val6);
            								}
HXDLIN(1021)								{
HXLINE(1021)									int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val7);
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1021)								{
HXLINE(1021)									int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN(1021)								{
HXLINE(1021)									int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val9);
            								}
HXDLIN(1021)								{
HXLINE(1021)									int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val10);
            								}
HXDLIN(1021)								{
HXLINE(1021)									int val11 = (pixel & 255);
HXDLIN(1021)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val11);
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1025)		image->buffer->premultiplied = true;
HXLINE(1026)		image->dirty = true;
HXLINE(1027)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,multiplyAlpha,(void))

void ImageDataUtil_obj::resize( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1031_resize)
HXLINE(1032)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE(1033)		bool _hx_tmp;
HXDLIN(1033)		if ((buffer->width == newWidth)) {
HXLINE(1033)			_hx_tmp = (buffer->height == newHeight);
            		}
            		else {
HXLINE(1033)			_hx_tmp = false;
            		}
HXDLIN(1033)		if (_hx_tmp) {
HXLINE(1033)			return;
            		}
HXLINE(1034)		 ::Dynamic elements = ((newWidth * newHeight) * 4);
HXDLIN(1034)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(1034)		if (hx::IsNotNull( elements )) {
HXLINE(1034)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            		}
            		else {
HXLINE(1034)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(1034)		 ::lime::graphics::ImageBuffer newBuffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,newWidth,newHeight,null(),null());
HXLINE(1037)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1037)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_resize(hx::DynamicPtr(image),hx::DynamicPtr(newBuffer),newWidth,newHeight);
            		}
            		else {
HXLINE(1041)			int imageWidth = image->width;
HXLINE(1042)			int imageHeight = image->height;
HXLINE(1044)			 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE(1045)			 ::lime::utils::ArrayBufferView newData = newBuffer->data;
HXLINE(1046)			int sourceIndex;
HXDLIN(1046)			int sourceIndexX;
HXDLIN(1046)			int sourceIndexY;
HXDLIN(1046)			int sourceIndexXY;
HXDLIN(1046)			int index;
HXLINE(1047)			int sourceX;
HXDLIN(1047)			int sourceY;
HXLINE(1048)			Float u;
HXDLIN(1048)			Float v;
HXDLIN(1048)			Float uRatio;
HXDLIN(1048)			Float vRatio;
HXDLIN(1048)			Float uOpposite;
HXDLIN(1048)			Float vOpposite;
HXLINE(1050)			{
HXLINE(1050)				int _g = 0;
HXDLIN(1050)				int _g1 = newHeight;
HXDLIN(1050)				while((_g < _g1)){
HXLINE(1050)					_g = (_g + 1);
HXDLIN(1050)					int y = (_g - 1);
HXLINE(1052)					{
HXLINE(1052)						int _g2 = 0;
HXDLIN(1052)						int _g11 = newWidth;
HXDLIN(1052)						while((_g2 < _g11)){
HXLINE(1052)							_g2 = (_g2 + 1);
HXDLIN(1052)							int x = (_g2 - 1);
HXLINE(1056)							u = ((((x + ((Float)0.5)) / ( (Float)(newWidth) )) * ( (Float)(imageWidth) )) - ((Float)0.5));
HXLINE(1057)							v = ((((y + ((Float)0.5)) / ( (Float)(newHeight) )) * ( (Float)(imageHeight) )) - ((Float)0.5));
HXLINE(1059)							sourceX = ::Std_obj::_hx_int(u);
HXLINE(1060)							sourceY = ::Std_obj::_hx_int(v);
HXLINE(1062)							sourceIndex = (((sourceY * imageWidth) + sourceX) * 4);
HXLINE(1063)							if ((sourceX < (imageWidth - 1))) {
HXLINE(1063)								sourceIndexX = (sourceIndex + 4);
            							}
            							else {
HXLINE(1063)								sourceIndexX = sourceIndex;
            							}
HXLINE(1064)							if ((sourceY < (imageHeight - 1))) {
HXLINE(1064)								sourceIndexY = (sourceIndex + (imageWidth * 4));
            							}
            							else {
HXLINE(1064)								sourceIndexY = sourceIndex;
            							}
HXLINE(1065)							if ((sourceIndexX != sourceIndex)) {
HXLINE(1065)								sourceIndexXY = (sourceIndexY + 4);
            							}
            							else {
HXLINE(1065)								sourceIndexXY = sourceIndexY;
            							}
HXLINE(1067)							index = (((y * newWidth) + x) * 4);
HXLINE(1069)							uRatio = (u - ( (Float)(sourceX) ));
HXLINE(1070)							vRatio = (v - ( (Float)(sourceY) ));
HXLINE(1071)							uOpposite = (( (Float)(1) ) - uRatio);
HXLINE(1072)							vOpposite = (( (Float)(1) ) - vRatio);
HXLINE(1074)							{
HXLINE(1074)								int _hx_int = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & 255)) );
HXDLIN(1074)								Float val;
HXDLIN(1074)								if ((_hx_int < 0)) {
HXLINE(1074)									val = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE(1074)									val = (_hx_int + ((Float)0.0));
            								}
HXDLIN(1074)								int int1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexX)) & 255)) );
HXDLIN(1074)								Float val1;
HXDLIN(1074)								if ((int1 < 0)) {
HXLINE(1074)									val1 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE(1074)									val1 = (int1 + ((Float)0.0));
            								}
HXLINE(1075)								int int2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexY)) & 255)) );
HXDLIN(1075)								Float val2;
HXDLIN(1075)								if ((int2 < 0)) {
HXLINE(1075)									val2 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE(1075)									val2 = (int2 + ((Float)0.0));
            								}
HXDLIN(1075)								int int3 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexXY)) & 255)) );
HXDLIN(1075)								Float val3;
HXDLIN(1075)								if ((int3 < 0)) {
HXLINE(1075)									val3 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE(1075)									val3 = (int3 + ((Float)0.0));
            								}
HXLINE(1074)								int val4 = ::Std_obj::_hx_int(((((val * uOpposite) + (val1 * uRatio)) * vOpposite) + (((val2 * uOpposite) + (val3 * uRatio)) * vRatio)));
HXDLIN(1074)								 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val4);
            							}
HXLINE(1076)							{
HXLINE(1076)								int int4 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 1))) & 255)) );
HXDLIN(1076)								Float val5;
HXDLIN(1076)								if ((int4 < 0)) {
HXLINE(1076)									val5 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE(1076)									val5 = (int4 + ((Float)0.0));
            								}
HXDLIN(1076)								int int5 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexX + 1))) & 255)) );
HXDLIN(1076)								Float val6;
HXDLIN(1076)								if ((int5 < 0)) {
HXLINE(1076)									val6 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE(1076)									val6 = (int5 + ((Float)0.0));
            								}
HXLINE(1077)								int int6 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexY + 1))) & 255)) );
HXDLIN(1077)								Float val7;
HXDLIN(1077)								if ((int6 < 0)) {
HXLINE(1077)									val7 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE(1077)									val7 = (int6 + ((Float)0.0));
            								}
HXDLIN(1077)								int int7 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexXY + 1))) & 255)) );
HXDLIN(1077)								Float val8;
HXDLIN(1077)								if ((int7 < 0)) {
HXLINE(1077)									val8 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE(1077)									val8 = (int7 + ((Float)0.0));
            								}
HXLINE(1076)								int val9 = ::Std_obj::_hx_int(((((val5 * uOpposite) + (val6 * uRatio)) * vOpposite) + (((val7 * uOpposite) + (val8 * uRatio)) * vRatio)));
HXDLIN(1076)								 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 1)),val9);
            							}
HXLINE(1078)							{
HXLINE(1078)								int int8 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 2))) & 255)) );
HXDLIN(1078)								Float val10;
HXDLIN(1078)								if ((int8 < 0)) {
HXLINE(1078)									val10 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE(1078)									val10 = (int8 + ((Float)0.0));
            								}
HXDLIN(1078)								int int9 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexX + 2))) & 255)) );
HXDLIN(1078)								Float val11;
HXDLIN(1078)								if ((int9 < 0)) {
HXLINE(1078)									val11 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE(1078)									val11 = (int9 + ((Float)0.0));
            								}
HXLINE(1079)								int int10 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexY + 2))) & 255)) );
HXDLIN(1079)								Float val12;
HXDLIN(1079)								if ((int10 < 0)) {
HXLINE(1079)									val12 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE(1079)									val12 = (int10 + ((Float)0.0));
            								}
HXDLIN(1079)								int int11 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexXY + 2))) & 255)) );
HXDLIN(1079)								Float val13;
HXDLIN(1079)								if ((int11 < 0)) {
HXLINE(1079)									val13 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE(1079)									val13 = (int11 + ((Float)0.0));
            								}
HXLINE(1078)								int val14 = ::Std_obj::_hx_int(((((val10 * uOpposite) + (val11 * uRatio)) * vOpposite) + (((val12 * uOpposite) + (val13 * uRatio)) * vRatio)));
HXDLIN(1078)								 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 2)),val14);
            							}
HXLINE(1083)							bool _hx_tmp1;
HXDLIN(1083)							bool _hx_tmp2;
HXDLIN(1083)							if ((( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexX + 3))) & 255)) ) != 0)) {
HXLINE(1083)								_hx_tmp2 = (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexY + 3))) & 255)) ) == 0);
            							}
            							else {
HXLINE(1083)								_hx_tmp2 = true;
            							}
HXDLIN(1083)							if (!(_hx_tmp2)) {
HXLINE(1083)								_hx_tmp1 = (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndexXY + 3))) & 255)) ) == 0);
            							}
            							else {
HXLINE(1083)								_hx_tmp1 = true;
            							}
HXDLIN(1083)							if (_hx_tmp1) {
HXLINE(1085)								 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 3)),0);
            							}
            							else {
HXLINE(1089)								int val15 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 3))) & 255)) );
HXDLIN(1089)								 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 3)),val15);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1095)		buffer->data = newBuffer->data;
HXLINE(1096)		buffer->width = newWidth;
HXLINE(1097)		buffer->height = newHeight;
HXLINE(1106)		image->dirty = true;
HXLINE(1107)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resize,(void))

void ImageDataUtil_obj::resizeBuffer( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1111_resizeBuffer)
HXLINE(1112)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE(1113)		 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE(1114)		 ::Dynamic elements = ((newWidth * newHeight) * 4);
HXDLIN(1114)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(1114)		if (hx::IsNotNull( elements )) {
HXLINE(1114)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            		}
            		else {
HXLINE(1114)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(1114)		 ::lime::utils::ArrayBufferView newData = this1;
HXLINE(1115)		int sourceIndex;
HXDLIN(1115)		int index;
HXLINE(1117)		{
HXLINE(1117)			int _g = 0;
HXDLIN(1117)			int _g1 = buffer->height;
HXDLIN(1117)			while((_g < _g1)){
HXLINE(1117)				_g = (_g + 1);
HXDLIN(1117)				int y = (_g - 1);
HXLINE(1119)				{
HXLINE(1119)					int _g2 = 0;
HXDLIN(1119)					int _g11 = buffer->width;
HXDLIN(1119)					while((_g2 < _g11)){
HXLINE(1119)						_g2 = (_g2 + 1);
HXDLIN(1119)						int x = (_g2 - 1);
HXLINE(1121)						sourceIndex = (((y * buffer->width) + x) * 4);
HXLINE(1122)						index = (((y * newWidth) + x) * 4);
HXLINE(1124)						{
HXLINE(1124)							int val = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & 255)) );
HXDLIN(1124)							 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val);
            						}
HXLINE(1125)						{
HXLINE(1125)							int val1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 1))) & 255)) );
HXDLIN(1125)							 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 1)),val1);
            						}
HXLINE(1126)						{
HXLINE(1126)							int val2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 2))) & 255)) );
HXDLIN(1126)							 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 2)),val2);
            						}
HXLINE(1127)						{
HXLINE(1127)							int val3 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (sourceIndex + 3))) & 255)) );
HXDLIN(1127)							 ::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + (index + 3)),val3);
            						}
            					}
            				}
            			}
            		}
HXLINE(1131)		buffer->data = newData;
HXLINE(1132)		buffer->width = newWidth;
HXLINE(1133)		buffer->height = newHeight;
HXLINE(1142)		image->dirty = true;
HXLINE(1143)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resizeBuffer,(void))

void ImageDataUtil_obj::setFormat( ::lime::graphics::Image image,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1147_setFormat)
HXLINE(1148)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1149)		if (hx::IsNull( data )) {
HXLINE(1149)			return;
            		}
HXLINE(1152)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1152)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_set_format(hx::DynamicPtr(image),format);
            		}
            		else {
HXLINE(1156)			int index;
HXDLIN(1156)			 ::Dynamic a16;
HXLINE(1157)			int length = ::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(4) )));
HXLINE(1158)			int r1;
HXDLIN(1158)			int g1;
HXDLIN(1158)			int b1;
HXDLIN(1158)			int a1;
HXDLIN(1158)			int r2;
HXDLIN(1158)			int g2;
HXDLIN(1158)			int b2;
HXDLIN(1158)			int a2;
HXLINE(1159)			 ::Dynamic r;
HXDLIN(1159)			 ::Dynamic g;
HXDLIN(1159)			 ::Dynamic b;
HXDLIN(1159)			 ::Dynamic a;
HXLINE(1161)			switch((int)(image->get_format())){
            				case (int)0: {
HXLINE(1164)					r1 = 0;
HXLINE(1165)					g1 = 1;
HXLINE(1166)					b1 = 2;
HXLINE(1167)					a1 = 3;
            				}
            				break;
            				case (int)1: {
HXLINE(1170)					r1 = 1;
HXLINE(1171)					g1 = 2;
HXLINE(1172)					b1 = 3;
HXLINE(1173)					a1 = 0;
            				}
            				break;
            				case (int)2: {
HXLINE(1176)					r1 = 2;
HXLINE(1177)					g1 = 1;
HXLINE(1178)					b1 = 0;
HXLINE(1179)					a1 = 3;
            				}
            				break;
            			}
HXLINE(1182)			switch((int)(format)){
            				case (int)0: {
HXLINE(1185)					r2 = 0;
HXLINE(1186)					g2 = 1;
HXLINE(1187)					b2 = 2;
HXLINE(1188)					a2 = 3;
            				}
            				break;
            				case (int)1: {
HXLINE(1191)					r2 = 1;
HXLINE(1192)					g2 = 2;
HXLINE(1193)					b2 = 3;
HXLINE(1194)					a2 = 0;
            				}
            				break;
            				case (int)2: {
HXLINE(1197)					r2 = 2;
HXLINE(1198)					g2 = 1;
HXLINE(1199)					b2 = 0;
HXLINE(1200)					a2 = 3;
            				}
            				break;
            			}
HXLINE(1203)			{
HXLINE(1203)				int _g1 = 0;
HXDLIN(1203)				int _g2 = length;
HXDLIN(1203)				while((_g1 < _g2)){
HXLINE(1203)					_g1 = (_g1 + 1);
HXDLIN(1203)					int i = (_g1 - 1);
HXLINE(1205)					index = (i * 4);
HXLINE(1207)					r = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + r1))) & 255);
HXLINE(1208)					g = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + g1))) & 255);
HXLINE(1209)					b = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + b1))) & 255);
HXLINE(1210)					a = ( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (index + a1))) & 255);
HXLINE(1212)					{
HXLINE(1212)						int val = ( (int)(r) );
HXDLIN(1212)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + r2)),val);
            					}
HXLINE(1213)					{
HXLINE(1213)						int val1 = ( (int)(g) );
HXDLIN(1213)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + g2)),val1);
            					}
HXLINE(1214)					{
HXLINE(1214)						int val2 = ( (int)(b) );
HXDLIN(1214)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + b2)),val2);
            					}
HXLINE(1215)					{
HXLINE(1215)						int val3 = ( (int)(a) );
HXDLIN(1215)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (index + a2)),val3);
            					}
            				}
            			}
            		}
HXLINE(1219)		image->buffer->format = format;
HXLINE(1220)		image->dirty = true;
HXLINE(1221)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,setFormat,(void))

void ImageDataUtil_obj::setPixel( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1225_setPixel)
HXLINE(1226)		int pixel;
HXLINE(1228)		switch((int)(format)){
            			case (int)1: {
HXLINE(1231)				int argb = color;
HXDLIN(1231)				int this1 = 0;
HXDLIN(1231)				int rgba = this1;
HXDLIN(1231)				rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN(1231)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1233)				int bgra = color;
HXDLIN(1233)				int this2 = 0;
HXDLIN(1233)				int rgba1 = this2;
HXDLIN(1233)				rgba1 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN(1233)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1235)				pixel = color;
            			}
            		}
HXLINE(1240)		int this3 = 0;
HXDLIN(1240)		int source = this3;
HXLINE(1241)		{
HXLINE(1241)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1241)			int offset = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN(1241)			bool premultiplied = image->buffer->premultiplied;
HXDLIN(1241)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE(1241)					int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1241)					int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1241)					int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1241)					source = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            				case (int)1: {
HXLINE(1241)					int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1241)					int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1241)					int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN(1241)					source = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            				}
            				break;
            				case (int)2: {
HXLINE(1241)					int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1241)					int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1241)					int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1241)					source = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            				}
            				break;
            			}
HXDLIN(1241)			if (premultiplied) {
HXLINE(1241)				bool _hx_tmp;
HXDLIN(1241)				if (((source & 255) != 0)) {
HXLINE(1241)					_hx_tmp = ((source & 255) != 255);
            				}
            				else {
HXLINE(1241)					_hx_tmp = false;
            				}
HXDLIN(1241)				if (_hx_tmp) {
HXLINE(1241)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((source & 255)) ));
HXDLIN(1241)					{
HXLINE(1241)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1241)						int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(source,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1241)						 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1241)						int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(source,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1241)						 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1241)						source = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(source,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((source & 255) & 255));
            					}
            				}
            			}
            		}
HXLINE(1244)		{
HXLINE(1244)			int value = (source & 255);
HXDLIN(1244)			pixel = ((((((hx::UShr(pixel,24) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,8) & 255) & 255) << 8)) | (value & 255));
            		}
HXLINE(1245)		{
HXLINE(1245)			 ::lime::utils::ArrayBufferView data1 = image->buffer->data;
HXDLIN(1245)			int offset1 = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN(1245)			int format1 = image->buffer->format;
HXDLIN(1245)			if (image->buffer->premultiplied) {
HXLINE(1245)				if (((pixel & 255) == 0)) {
HXLINE(1245)					if ((pixel != 0)) {
HXLINE(1245)						pixel = 0;
            					}
            				}
            				else {
HXLINE(1245)					if (((pixel & 255) != 255)) {
HXLINE(1245)						 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1245)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this7->buffer->b,(this7->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN(1245)						pixel = ((((((((hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            					}
            				}
            			}
HXDLIN(1245)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1245)					{
HXLINE(1245)						int val = (hx::UShr(pixel,24) & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),val);
            					}
HXDLIN(1245)					{
HXLINE(1245)						int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 1)),val1);
            					}
HXDLIN(1245)					{
HXLINE(1245)						int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 2)),val2);
            					}
HXDLIN(1245)					{
HXLINE(1245)						int val3 = (pixel & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 3)),val3);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1245)					{
HXLINE(1245)						int val4 = (pixel & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),val4);
            					}
HXDLIN(1245)					{
HXLINE(1245)						int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 1)),val5);
            					}
HXDLIN(1245)					{
HXLINE(1245)						int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 2)),val6);
            					}
HXDLIN(1245)					{
HXLINE(1245)						int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 3)),val7);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1245)					{
HXLINE(1245)						int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + offset1),val8);
            					}
HXDLIN(1245)					{
HXLINE(1245)						int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 1)),val9);
            					}
HXDLIN(1245)					{
HXLINE(1245)						int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 2)),val10);
            					}
HXDLIN(1245)					{
HXLINE(1245)						int val11 = (pixel & 255);
HXDLIN(1245)						 ::__hxcpp_memory_set_byte(data1->buffer->b,(data1->byteOffset + (offset1 + 3)),val11);
            					}
            				}
            				break;
            			}
            		}
HXLINE(1248)		image->dirty = true;
HXLINE(1249)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel,(void))

void ImageDataUtil_obj::setPixel32( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1253_setPixel32)
HXLINE(1254)		int pixel;
HXLINE(1256)		switch((int)(format)){
            			case (int)1: {
HXLINE(1259)				int argb = color;
HXDLIN(1259)				int this1 = 0;
HXDLIN(1259)				int rgba = this1;
HXDLIN(1259)				rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN(1259)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1261)				int bgra = color;
HXDLIN(1261)				int this2 = 0;
HXDLIN(1261)				int rgba1 = this2;
HXDLIN(1261)				rgba1 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN(1261)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1263)				pixel = color;
            			}
            		}
HXLINE(1266)		if (!(image->get_transparent())) {
HXLINE(1266)			pixel = ((((((hx::UShr(pixel,24) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,8) & 255) & 255) << 8)) | 255);
            		}
HXLINE(1267)		{
HXLINE(1267)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1267)			int offset = (((4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * 4));
HXDLIN(1267)			int format1 = image->buffer->format;
HXDLIN(1267)			if (image->buffer->premultiplied) {
HXLINE(1267)				if (((pixel & 255) == 0)) {
HXLINE(1267)					if ((pixel != 0)) {
HXLINE(1267)						pixel = 0;
            					}
            				}
            				else {
HXLINE(1267)					if (((pixel & 255) != 255)) {
HXLINE(1267)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1267)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this3->buffer->b,(this3->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN(1267)						pixel = ((((((((hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            					}
            				}
            			}
HXDLIN(1267)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1267)					{
HXLINE(1267)						int val = (hx::UShr(pixel,24) & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            					}
HXDLIN(1267)					{
HXLINE(1267)						int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            					}
HXDLIN(1267)					{
HXLINE(1267)						int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            					}
HXDLIN(1267)					{
HXLINE(1267)						int val3 = (pixel & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1267)					{
HXLINE(1267)						int val4 = (pixel & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            					}
HXDLIN(1267)					{
HXLINE(1267)						int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val5);
            					}
HXDLIN(1267)					{
HXLINE(1267)						int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val6);
            					}
HXDLIN(1267)					{
HXLINE(1267)						int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val7);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1267)					{
HXLINE(1267)						int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            					}
HXDLIN(1267)					{
HXLINE(1267)						int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val9);
            					}
HXDLIN(1267)					{
HXLINE(1267)						int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val10);
            					}
HXDLIN(1267)					{
HXLINE(1267)						int val11 = (pixel & 255);
HXDLIN(1267)						 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val11);
            					}
            				}
            				break;
            			}
            		}
HXLINE(1270)		image->dirty = true;
HXLINE(1271)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel32,(void))

void ImageDataUtil_obj::setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::BytePointerData bytePointer,int format, ::lime::_hx_system::Endian endian){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1275_setPixels)
HXLINE(1276)		if (hx::IsNull( image->buffer->data )) {
HXLINE(1276)			return;
            		}
HXLINE(1279)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1279)			int _hx_tmp;
HXDLIN(1279)			if (hx::IsEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() )) {
HXLINE(1279)				_hx_tmp = 1;
            			}
            			else {
HXLINE(1279)				_hx_tmp = 0;
            			}
HXDLIN(1279)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_set_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(bytePointer->bytes),bytePointer->offset,format,_hx_tmp);
            		}
            		else {
HXLINE(1283)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1284)			int sourceFormat = image->buffer->format;
HXLINE(1285)			bool premultiplied = image->buffer->premultiplied;
HXLINE(1286)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE(1287)			int row;
HXDLIN(1287)			int color;
HXDLIN(1287)			int pixel;
HXLINE(1288)			bool transparent = image->get_transparent();
HXLINE(1289)			 ::haxe::io::Bytes bytes = bytePointer->bytes;
HXLINE(1290)			int dataPosition = bytePointer->offset;
HXLINE(1291)			bool littleEndian = hx::IsNotEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() );
HXLINE(1293)			{
HXLINE(1293)				int _g = 0;
HXDLIN(1293)				int _g1 = dataView->height;
HXDLIN(1293)				while((_g < _g1)){
HXLINE(1293)					_g = (_g + 1);
HXDLIN(1293)					int y = (_g - 1);
HXLINE(1295)					row = (dataView->byteOffset + (dataView->stride * y));
HXLINE(1297)					{
HXLINE(1297)						int _g2 = 0;
HXDLIN(1297)						int _g11 = dataView->width;
HXDLIN(1297)						while((_g2 < _g11)){
HXLINE(1297)							_g2 = (_g2 + 1);
HXDLIN(1297)							int x = (_g2 - 1);
HXLINE(1299)							if (littleEndian) {
HXLINE(1301)								color = (((( (int)(bytes->b->__get(dataPosition)) ) | (( (int)(bytes->b->__get((dataPosition + 1))) ) << 8)) | (( (int)(bytes->b->__get((dataPosition + 2))) ) << 16)) | (( (int)(bytes->b->__get((dataPosition + 3))) ) << 24));
            							}
            							else {
HXLINE(1305)								color = (((( (int)(bytes->b->__get((dataPosition + 3))) ) | (( (int)(bytes->b->__get((dataPosition + 2))) ) << 8)) | (( (int)(bytes->b->__get((dataPosition + 1))) ) << 16)) | (( (int)(bytes->b->__get(dataPosition)) ) << 24));
            							}
HXLINE(1309)							dataPosition = (dataPosition + 4);
HXLINE(1311)							switch((int)(format)){
            								case (int)1: {
HXLINE(1314)									int argb = color;
HXDLIN(1314)									int this1 = 0;
HXDLIN(1314)									int rgba = this1;
HXDLIN(1314)									rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN(1314)									pixel = rgba;
            								}
            								break;
            								case (int)2: {
HXLINE(1316)									int bgra = color;
HXDLIN(1316)									int this2 = 0;
HXDLIN(1316)									int rgba1 = this2;
HXDLIN(1316)									rgba1 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN(1316)									pixel = rgba1;
            								}
            								break;
            								default:{
HXLINE(1318)									pixel = color;
            								}
            							}
HXLINE(1321)							if (!(transparent)) {
HXLINE(1321)								pixel = ((((((hx::UShr(pixel,24) & 255) & 255) << 24) | (((hx::UShr(pixel,16) & 255) & 255) << 16)) | (((hx::UShr(pixel,8) & 255) & 255) << 8)) | 255);
            							}
HXLINE(1322)							{
HXLINE(1322)								int offset = (row + (x * 4));
HXDLIN(1322)								if (premultiplied) {
HXLINE(1322)									if (((pixel & 255) == 0)) {
HXLINE(1322)										if ((pixel != 0)) {
HXLINE(1322)											pixel = 0;
            										}
            									}
            									else {
HXLINE(1322)										if (((pixel & 255) != 255)) {
HXLINE(1322)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1322)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this3->buffer->b,(this3->byteOffset + ((pixel & 255) * 4)))) );
HXDLIN(1322)											pixel = ((((((((hx::UShr(pixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(pixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(pixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((pixel & 255) & 255));
            										}
            									}
            								}
HXDLIN(1322)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE(1322)										{
HXLINE(1322)											int val = (hx::UShr(pixel,24) & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN(1322)										{
HXLINE(1322)											int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val1);
            										}
HXDLIN(1322)										{
HXLINE(1322)											int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val2);
            										}
HXDLIN(1322)										{
HXLINE(1322)											int val3 = (pixel & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val3);
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(1322)										{
HXLINE(1322)											int val4 = (pixel & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN(1322)										{
HXLINE(1322)											int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val5);
            										}
HXDLIN(1322)										{
HXLINE(1322)											int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val6);
            										}
HXDLIN(1322)										{
HXLINE(1322)											int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val7);
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(1322)										{
HXLINE(1322)											int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN(1322)										{
HXLINE(1322)											int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 1)),val9);
            										}
HXDLIN(1322)										{
HXLINE(1322)											int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 2)),val10);
            										}
HXDLIN(1322)										{
HXLINE(1322)											int val11 = (pixel & 255);
HXDLIN(1322)											 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset + 3)),val11);
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1327)		image->dirty = true;
HXLINE(1328)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixels,(void))

int ImageDataUtil_obj::threshold( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,int threshold,int color,int mask,bool copySource,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1333_threshold)
HXLINE(1334)		int _color;
HXDLIN(1334)		int _mask;
HXDLIN(1334)		int _threshold;
HXLINE(1336)		switch((int)(format)){
            			case (int)1: {
HXLINE(1339)				int argb = color;
HXDLIN(1339)				int this1 = 0;
HXDLIN(1339)				int rgba = this1;
HXDLIN(1339)				rgba = ((((((hx::UShr(argb,16) & 255) & 255) << 24) | (((hx::UShr(argb,8) & 255) & 255) << 16)) | (((argb & 255) & 255) << 8)) | ((hx::UShr(argb,24) & 255) & 255));
HXDLIN(1339)				_color = rgba;
HXLINE(1340)				int argb1 = mask;
HXDLIN(1340)				int this2 = 0;
HXDLIN(1340)				int rgba1 = this2;
HXDLIN(1340)				rgba1 = ((((((hx::UShr(argb1,16) & 255) & 255) << 24) | (((hx::UShr(argb1,8) & 255) & 255) << 16)) | (((argb1 & 255) & 255) << 8)) | ((hx::UShr(argb1,24) & 255) & 255));
HXDLIN(1340)				_mask = rgba1;
HXLINE(1341)				int argb2 = threshold;
HXDLIN(1341)				int this3 = 0;
HXDLIN(1341)				int rgba2 = this3;
HXDLIN(1341)				rgba2 = ((((((hx::UShr(argb2,16) & 255) & 255) << 24) | (((hx::UShr(argb2,8) & 255) & 255) << 16)) | (((argb2 & 255) & 255) << 8)) | ((hx::UShr(argb2,24) & 255) & 255));
HXDLIN(1341)				_threshold = rgba2;
            			}
            			break;
            			case (int)2: {
HXLINE(1344)				int bgra = color;
HXDLIN(1344)				int this4 = 0;
HXDLIN(1344)				int rgba3 = this4;
HXDLIN(1344)				rgba3 = ((((((hx::UShr(bgra,8) & 255) & 255) << 24) | (((hx::UShr(bgra,16) & 255) & 255) << 16)) | (((hx::UShr(bgra,24) & 255) & 255) << 8)) | ((bgra & 255) & 255));
HXDLIN(1344)				_color = rgba3;
HXLINE(1345)				int bgra1 = mask;
HXDLIN(1345)				int this5 = 0;
HXDLIN(1345)				int rgba4 = this5;
HXDLIN(1345)				rgba4 = ((((((hx::UShr(bgra1,8) & 255) & 255) << 24) | (((hx::UShr(bgra1,16) & 255) & 255) << 16)) | (((hx::UShr(bgra1,24) & 255) & 255) << 8)) | ((bgra1 & 255) & 255));
HXDLIN(1345)				_mask = rgba4;
HXLINE(1346)				int bgra2 = threshold;
HXDLIN(1346)				int this6 = 0;
HXDLIN(1346)				int rgba5 = this6;
HXDLIN(1346)				rgba5 = ((((((hx::UShr(bgra2,8) & 255) & 255) << 24) | (((hx::UShr(bgra2,16) & 255) & 255) << 16)) | (((hx::UShr(bgra2,24) & 255) & 255) << 8)) | ((bgra2 & 255) & 255));
HXDLIN(1346)				_threshold = rgba5;
            			}
            			break;
            			default:{
HXLINE(1349)				_color = color;
HXLINE(1350)				_mask = mask;
HXLINE(1351)				_threshold = threshold;
            			}
            		}
HXLINE(1354)		int _operation;
HXDLIN(1354)		::String _hx_switch_0 = operation;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE(1354)			_operation = 0;
HXDLIN(1354)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE(1354)			_operation = 2;
HXDLIN(1354)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE(1354)			_operation = 3;
HXDLIN(1354)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE(1354)			_operation = 1;
HXDLIN(1354)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE(1354)			_operation = 4;
HXDLIN(1354)			goto _hx_goto_69;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE(1354)			_operation = 5;
HXDLIN(1354)			goto _hx_goto_69;
            		}
            		/* default */{
HXLINE(1354)			_operation = -1;
            		}
            		_hx_goto_69:;
HXLINE(1365)		if ((_operation == -1)) {
HXLINE(1365)			return 0;
            		}
HXLINE(1367)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE(1368)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE(1370)		bool _hx_tmp;
HXDLIN(1370)		if (hx::IsNotNull( srcData )) {
HXLINE(1370)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE(1370)			_hx_tmp = true;
            		}
HXDLIN(1370)		if (_hx_tmp) {
HXLINE(1370)			return 0;
            		}
HXLINE(1372)		int hits = 0;
HXLINE(1375)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1375)			hits = ::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_threshold(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),_operation,((_threshold >> 16) & 65535),(_threshold & 65535),((_color >> 16) & 65535),(_color & 65535),((_mask >> 16) & 65535),(_mask & 65535),copySource);
            		}
            		else {
HXLINE(1380)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView srcView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE(1381)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE(1383)			int srcFormat = sourceImage->buffer->format;
HXLINE(1384)			int destFormat = image->buffer->format;
HXLINE(1385)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE(1386)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE(1388)			int srcPosition;
HXDLIN(1388)			int destPosition;
HXDLIN(1388)			int srcPixel;
HXDLIN(1388)			int destPixel;
HXDLIN(1388)			int pixelMask;
HXDLIN(1388)			bool test;
HXDLIN(1388)			int value;
HXLINE(1390)			{
HXLINE(1390)				int _g = 0;
HXDLIN(1390)				int _g1 = destView->height;
HXDLIN(1390)				while((_g < _g1)){
HXLINE(1390)					_g = (_g + 1);
HXDLIN(1390)					int y = (_g - 1);
HXLINE(1392)					srcPosition = (srcView->byteOffset + (srcView->stride * y));
HXLINE(1393)					destPosition = (destView->byteOffset + (destView->stride * y));
HXLINE(1395)					{
HXLINE(1395)						int _g2 = 0;
HXDLIN(1395)						int _g11 = destView->width;
HXDLIN(1395)						while((_g2 < _g11)){
HXLINE(1395)							_g2 = (_g2 + 1);
HXDLIN(1395)							int x = (_g2 - 1);
HXLINE(1397)							{
HXLINE(1397)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE(1397)										int r = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) );
HXDLIN(1397)										int g = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN(1397)										int b = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN(1397)										srcPixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            									case (int)1: {
HXLINE(1397)										int r1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN(1397)										int g1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN(1397)										int b1 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) );
HXDLIN(1397)										srcPixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) ) & 255));
            									}
            									break;
            									case (int)2: {
HXLINE(1397)										int r2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 2))) & 255)) );
HXDLIN(1397)										int g2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 1))) & 255)) );
HXDLIN(1397)										int b2 = ( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & 255)) );
HXDLIN(1397)										srcPixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + (srcPosition + 3))) & 255)) ) & 255));
            									}
            									break;
            								}
HXDLIN(1397)								if (srcPremultiplied) {
HXLINE(1397)									bool _hx_tmp1;
HXDLIN(1397)									if (((srcPixel & 255) != 0)) {
HXLINE(1397)										_hx_tmp1 = ((srcPixel & 255) != 255);
            									}
            									else {
HXLINE(1397)										_hx_tmp1 = false;
            									}
HXDLIN(1397)									if (_hx_tmp1) {
HXLINE(1397)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((srcPixel & 255)) ));
HXDLIN(1397)										{
HXLINE(1397)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1397)											int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1397)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1397)											int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1397)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1397)											srcPixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(srcPixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((srcPixel & 255) & 255));
            										}
            									}
            								}
            							}
HXLINE(1399)							pixelMask = (srcPixel & _mask);
HXLINE(1401)							int tmp1 = (hx::UShr(pixelMask,24) & 255);
HXDLIN(1401)							int tmp2 = (hx::UShr(_threshold,24) & 255);
HXDLIN(1401)							if ((tmp1 != tmp2)) {
HXLINE(1401)								bool aNeg = (tmp1 < 0);
HXDLIN(1401)								bool bNeg = (tmp2 < 0);
HXDLIN(1401)								bool value1;
HXDLIN(1401)								if ((aNeg != bNeg)) {
HXLINE(1401)									value1 = aNeg;
            								}
            								else {
HXLINE(1401)									value1 = (tmp1 > tmp2);
            								}
HXDLIN(1401)								if (value1) {
HXLINE(1401)									value = 1;
            								}
            								else {
HXLINE(1401)									value = -1;
            								}
            							}
            							else {
HXLINE(1401)								tmp1 = (hx::UShr(pixelMask,16) & 255);
HXDLIN(1401)								tmp2 = (hx::UShr(_threshold,16) & 255);
HXDLIN(1401)								if ((tmp1 != tmp2)) {
HXLINE(1401)									bool aNeg1 = (tmp1 < 0);
HXDLIN(1401)									bool bNeg1 = (tmp2 < 0);
HXDLIN(1401)									bool value2;
HXDLIN(1401)									if ((aNeg1 != bNeg1)) {
HXLINE(1401)										value2 = aNeg1;
            									}
            									else {
HXLINE(1401)										value2 = (tmp1 > tmp2);
            									}
HXDLIN(1401)									if (value2) {
HXLINE(1401)										value = 1;
            									}
            									else {
HXLINE(1401)										value = -1;
            									}
            								}
            								else {
HXLINE(1401)									tmp1 = (hx::UShr(pixelMask,8) & 255);
HXDLIN(1401)									tmp2 = (hx::UShr(_threshold,8) & 255);
HXDLIN(1401)									if ((tmp1 != tmp2)) {
HXLINE(1401)										bool aNeg2 = (tmp1 < 0);
HXDLIN(1401)										bool bNeg2 = (tmp2 < 0);
HXDLIN(1401)										bool value3;
HXDLIN(1401)										if ((aNeg2 != bNeg2)) {
HXLINE(1401)											value3 = aNeg2;
            										}
            										else {
HXLINE(1401)											value3 = (tmp1 > tmp2);
            										}
HXDLIN(1401)										if (value3) {
HXLINE(1401)											value = 1;
            										}
            										else {
HXLINE(1401)											value = -1;
            										}
            									}
            									else {
HXLINE(1401)										tmp1 = (pixelMask & 255);
HXDLIN(1401)										tmp2 = (_threshold & 255);
HXDLIN(1401)										if ((tmp1 != tmp2)) {
HXLINE(1401)											bool aNeg3 = (tmp1 < 0);
HXDLIN(1401)											bool bNeg3 = (tmp2 < 0);
HXDLIN(1401)											bool value4;
HXDLIN(1401)											if ((aNeg3 != bNeg3)) {
HXLINE(1401)												value4 = aNeg3;
            											}
            											else {
HXLINE(1401)												value4 = (tmp1 > tmp2);
            											}
HXDLIN(1401)											if (value4) {
HXLINE(1401)												value = 1;
            											}
            											else {
HXLINE(1401)												value = -1;
            											}
            										}
            										else {
HXLINE(1401)											value = 0;
            										}
            									}
            								}
            							}
HXLINE(1403)							switch((int)(_operation)){
            								case (int)0: {
HXLINE(1405)									test = (value != 0);
            								}
            								break;
            								case (int)1: {
HXLINE(1406)									test = (value == 0);
            								}
            								break;
            								case (int)2: {
HXLINE(1407)									test = (value == -1);
            								}
            								break;
            								case (int)3: {
HXLINE(1408)									if ((value != 0)) {
HXLINE(1408)										test = (value == -1);
            									}
            									else {
HXLINE(1408)										test = true;
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1409)									test = (value == 1);
            								}
            								break;
            								case (int)5: {
HXLINE(1410)									if ((value != 0)) {
HXLINE(1410)										test = (value == 1);
            									}
            									else {
HXLINE(1410)										test = true;
            									}
            								}
            								break;
            								default:{
HXLINE(1411)									test = false;
            								}
            							}
HXLINE(1414)							if (test) {
HXLINE(1416)								{
HXLINE(1416)									if (destPremultiplied) {
HXLINE(1416)										if (((_color & 255) == 0)) {
HXLINE(1416)											if ((_color != 0)) {
HXLINE(1416)												_color = 0;
            											}
            										}
            										else {
HXLINE(1416)											if (((_color & 255) != 255)) {
HXLINE(1416)												 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1416)												::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this10->buffer->b,(this10->byteOffset + ((_color & 255) * 4)))) );
HXDLIN(1416)												_color = ((((((((hx::UShr(_color,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(_color,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(_color,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((_color & 255) & 255));
            											}
            										}
            									}
HXDLIN(1416)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1416)											{
HXLINE(1416)												int val = (hx::UShr(_color,24) & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val1 = (hx::UShr(_color,16) & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val1);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val2 = (hx::UShr(_color,8) & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val2);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val3 = (_color & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val3);
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1416)											{
HXLINE(1416)												int val4 = (_color & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val5 = (hx::UShr(_color,24) & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val5);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val6 = (hx::UShr(_color,16) & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val6);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val7 = (hx::UShr(_color,8) & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val7);
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1416)											{
HXLINE(1416)												int val8 = (hx::UShr(_color,8) & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val9 = (hx::UShr(_color,16) & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val9);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val10 = (hx::UShr(_color,24) & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val10);
            											}
HXDLIN(1416)											{
HXLINE(1416)												int val11 = (_color & 255);
HXDLIN(1416)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val11);
            											}
            										}
            										break;
            									}
            								}
HXLINE(1417)								hits = (hits + 1);
            							}
            							else {
HXLINE(1419)								if (copySource) {
HXLINE(1421)									if (destPremultiplied) {
HXLINE(1421)										if (((srcPixel & 255) == 0)) {
HXLINE(1421)											if ((srcPixel != 0)) {
HXLINE(1421)												srcPixel = 0;
            											}
            										}
            										else {
HXLINE(1421)											if (((srcPixel & 255) != 255)) {
HXLINE(1421)												 ::lime::utils::ArrayBufferView this11 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1421)												::lime::math::_RGBA::RGBA_Impl__obj::a16 = ( (int)( ::__hxcpp_memory_get_ui32(this11->buffer->b,(this11->byteOffset + ((srcPixel & 255) * 4)))) );
HXDLIN(1421)												srcPixel = ((((((((hx::UShr(srcPixel,24) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 24) | (((((hx::UShr(srcPixel,16) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 16)) | (((((hx::UShr(srcPixel,8) & 255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> 16) & 255) << 8)) | ((srcPixel & 255) & 255));
            											}
            										}
            									}
HXDLIN(1421)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1421)											{
HXLINE(1421)												int val12 = (hx::UShr(srcPixel,24) & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val13 = (hx::UShr(srcPixel,16) & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val13);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val14 = (hx::UShr(srcPixel,8) & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val14);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val15 = (srcPixel & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val15);
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1421)											{
HXLINE(1421)												int val16 = (srcPixel & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val17 = (hx::UShr(srcPixel,24) & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val17);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val18 = (hx::UShr(srcPixel,16) & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val18);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val19 = (hx::UShr(srcPixel,8) & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val19);
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1421)											{
HXLINE(1421)												int val20 = (hx::UShr(srcPixel,8) & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val21 = (hx::UShr(srcPixel,16) & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 1)),val21);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val22 = (hx::UShr(srcPixel,24) & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 2)),val22);
            											}
HXDLIN(1421)											{
HXLINE(1421)												int val23 = (srcPixel & 255);
HXDLIN(1421)												 ::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + (destPosition + 3)),val23);
            											}
            										}
            										break;
            									}
            								}
            							}
HXLINE(1424)							srcPosition = (srcPosition + 4);
HXLINE(1425)							destPosition = (destPosition + 4);
            						}
            					}
            				}
            			}
            		}
HXLINE(1430)		if ((hits > 0)) {
HXLINE(1432)			image->dirty = true;
HXLINE(1433)			image->version++;
            		}
HXLINE(1436)		return hits;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(ImageDataUtil_obj,threshold,return )

void ImageDataUtil_obj::unmultiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1440_unmultiplyAlpha)
HXLINE(1441)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1442)		if (hx::IsNull( data )) {
HXLINE(1442)			return;
            		}
HXLINE(1445)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1445)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_unmultiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE(1449)			int format = image->buffer->format;
HXLINE(1450)			int length = ::Std_obj::_hx_int((( (Float)(data->length) ) / ( (Float)(4) )));
HXLINE(1451)			int pixel;
HXLINE(1453)			{
HXLINE(1453)				int _g = 0;
HXDLIN(1453)				int _g1 = length;
HXDLIN(1453)				while((_g < _g1)){
HXLINE(1453)					_g = (_g + 1);
HXDLIN(1453)					int i = (_g - 1);
HXLINE(1455)					{
HXLINE(1455)						int offset = (i * 4);
HXDLIN(1455)						switch((int)(format)){
            							case (int)0: {
HXLINE(1455)								int r = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1455)								int g = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1455)								int b = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1455)								pixel = (((((r & 255) << 24) | ((g & 255) << 16)) | ((b & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            							case (int)1: {
HXLINE(1455)								int r1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1455)								int g1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1455)								int b1 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) );
HXDLIN(1455)								pixel = (((((r1 & 255) << 24) | ((g1 & 255) << 16)) | ((b1 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) ) & 255));
            							}
            							break;
            							case (int)2: {
HXLINE(1455)								int r2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 2))) & 255)) );
HXDLIN(1455)								int g2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 1))) & 255)) );
HXDLIN(1455)								int b2 = ( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & 255)) );
HXDLIN(1455)								pixel = (((((r2 & 255) << 24) | ((g2 & 255) << 16)) | ((b2 & 255) << 8)) | (( (int)(( ::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + (offset + 3))) & 255)) ) & 255));
            							}
            							break;
            						}
HXDLIN(1455)						bool _hx_tmp;
HXDLIN(1455)						if (((pixel & 255) != 0)) {
HXLINE(1455)							_hx_tmp = ((pixel & 255) != 255);
            						}
            						else {
HXLINE(1455)							_hx_tmp = false;
            						}
HXDLIN(1455)						if (_hx_tmp) {
HXLINE(1455)							::lime::math::_RGBA::RGBA_Impl__obj::unmult = (((Float)255.0) / ( (Float)((pixel & 255)) ));
HXDLIN(1455)							{
HXLINE(1455)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1455)								int r3 = ( (int)(( ::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,24) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1455)								 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1455)								int g3 = ( (int)(( ::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,16) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) );
HXDLIN(1455)								 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1455)								pixel = (((((r3 & 255) << 24) | ((g3 & 255) << 16)) | ((( (int)(( ::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((( (Float)((hx::UShr(pixel,8) & 255)) ) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & 255)) ) & 255) << 8)) | ((pixel & 255) & 255));
            							}
            						}
            					}
HXLINE(1456)					{
HXLINE(1456)						int offset1 = (i * 4);
HXDLIN(1456)						switch((int)(format)){
            							case (int)0: {
HXLINE(1456)								{
HXLINE(1456)									int val = (hx::UShr(pixel,24) & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1456)								{
HXLINE(1456)									int val1 = (hx::UShr(pixel,16) & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val1);
            								}
HXDLIN(1456)								{
HXLINE(1456)									int val2 = (hx::UShr(pixel,8) & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val2);
            								}
HXDLIN(1456)								{
HXLINE(1456)									int val3 = (pixel & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val3);
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1456)								{
HXLINE(1456)									int val4 = (pixel & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN(1456)								{
HXLINE(1456)									int val5 = (hx::UShr(pixel,24) & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val5);
            								}
HXDLIN(1456)								{
HXLINE(1456)									int val6 = (hx::UShr(pixel,16) & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val6);
            								}
HXDLIN(1456)								{
HXLINE(1456)									int val7 = (hx::UShr(pixel,8) & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val7);
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1456)								{
HXLINE(1456)									int val8 = (hx::UShr(pixel,8) & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN(1456)								{
HXLINE(1456)									int val9 = (hx::UShr(pixel,16) & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 1)),val9);
            								}
HXDLIN(1456)								{
HXLINE(1456)									int val10 = (hx::UShr(pixel,24) & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 2)),val10);
            								}
HXDLIN(1456)								{
HXLINE(1456)									int val11 = (pixel & 255);
HXDLIN(1456)									 ::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + (offset1 + 3)),val11);
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1460)		image->buffer->premultiplied = false;
HXLINE(1461)		image->dirty = true;
HXLINE(1462)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,unmultiplyAlpha,(void))

void ImageDataUtil_obj::_hx___boxBlur( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,Float bx,Float by){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1466___boxBlur)
HXLINE(1469)		{
HXLINE(1469)			int offset = 0;
HXDLIN(1469)			if (hx::IsNotNull( imgA )) {
HXLINE(1469)				imgB->buffer->blit((offset * imgB->bytesPerElement),imgA->buffer,imgA->byteOffset,imgA->byteLength);
            			}
            			else {
HXLINE(1469)				HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            			}
            		}
HXLINE(1471)		int bx1 = ::Std_obj::_hx_int(bx);
HXLINE(1472)		int by1 = ::Std_obj::_hx_int(by);
HXLINE(1474)		{
HXLINE(1474)			Float iarr = (( (Float)(1) ) / ( (Float)(((bx1 + bx1) + 1)) ));
HXDLIN(1474)			int ti;
HXDLIN(1474)			int li;
HXDLIN(1474)			int ri;
HXDLIN(1474)			 ::Dynamic fv;
HXDLIN(1474)			 ::Dynamic lv;
HXDLIN(1474)			int val;
HXDLIN(1474)			{
HXLINE(1474)				int _g = 0;
HXDLIN(1474)				int _g1 = h;
HXDLIN(1474)				while((_g < _g1)){
HXLINE(1474)					_g = (_g + 1);
HXDLIN(1474)					int i = (_g - 1);
HXDLIN(1474)					ti = (i * w);
HXDLIN(1474)					li = ti;
HXDLIN(1474)					ri = (ti + bx1);
HXDLIN(1474)					fv = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (ti * 4))) & 255);
HXDLIN(1474)					lv = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (((ti + w) - 1) * 4))) & 255);
HXDLIN(1474)					val = ((bx1 + 1) * ( (int)(fv) ));
HXDLIN(1474)					{
HXLINE(1474)						int _g2 = 0;
HXDLIN(1474)						int _g11 = bx1;
HXDLIN(1474)						while((_g2 < _g11)){
HXLINE(1474)							_g2 = (_g2 + 1);
HXDLIN(1474)							int j = (_g2 - 1);
HXDLIN(1474)							val = (val + ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ti + j) * 4))) & 255)) ));
            						}
            					}
HXDLIN(1474)					{
HXLINE(1474)						int _g21 = 0;
HXDLIN(1474)						int _g3 = (bx1 + 1);
HXDLIN(1474)						while((_g21 < _g3)){
HXLINE(1474)							_g21 = (_g21 + 1);
HXDLIN(1474)							int j1 = (_g21 - 1);
HXDLIN(1474)							val = (val + (( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (ri * 4))) & 255)) ) - ( (int)(fv) )));
HXDLIN(1474)							{
HXLINE(1474)								int _hx_int = val;
HXDLIN(1474)								Float val1;
HXDLIN(1474)								if ((_hx_int < 0)) {
HXLINE(1474)									val1 = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE(1474)									val1 = (_hx_int + ((Float)0.0));
            								}
HXDLIN(1474)								int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1474)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + (ti * 4)),val2);
            							}
HXDLIN(1474)							ri = (ri + 1);
HXDLIN(1474)							ti = (ti + 1);
            						}
            					}
HXDLIN(1474)					{
HXLINE(1474)						int _g4 = (bx1 + 1);
HXDLIN(1474)						int _g5 = (w - bx1);
HXDLIN(1474)						while((_g4 < _g5)){
HXLINE(1474)							_g4 = (_g4 + 1);
HXDLIN(1474)							int j2 = (_g4 - 1);
HXDLIN(1474)							int a = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (ri * 4))) & 255)) );
HXDLIN(1474)							val = (val + (a - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (li * 4))) & 255)) )));
HXDLIN(1474)							{
HXLINE(1474)								int int1 = val;
HXDLIN(1474)								Float val3;
HXDLIN(1474)								if ((int1 < 0)) {
HXLINE(1474)									val3 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE(1474)									val3 = (int1 + ((Float)0.0));
            								}
HXDLIN(1474)								int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1474)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + (ti * 4)),val4);
            							}
HXDLIN(1474)							ri = (ri + 1);
HXDLIN(1474)							li = (li + 1);
HXDLIN(1474)							ti = (ti + 1);
            						}
            					}
HXDLIN(1474)					{
HXLINE(1474)						int _g6 = (w - bx1);
HXDLIN(1474)						int _g7 = w;
HXDLIN(1474)						while((_g6 < _g7)){
HXLINE(1474)							_g6 = (_g6 + 1);
HXDLIN(1474)							int j3 = (_g6 - 1);
HXDLIN(1474)							val = (val + (( (int)(lv) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (li * 4))) & 255)) )));
HXDLIN(1474)							{
HXLINE(1474)								int int2 = val;
HXDLIN(1474)								Float val5;
HXDLIN(1474)								if ((int2 < 0)) {
HXLINE(1474)									val5 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE(1474)									val5 = (int2 + ((Float)0.0));
            								}
HXDLIN(1474)								int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1474)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + (ti * 4)),val6);
            							}
HXDLIN(1474)							li = (li + 1);
HXDLIN(1474)							ti = (ti + 1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1475)		{
HXLINE(1475)			Float iarr1 = (( (Float)(1) ) / ( (Float)(((bx1 + bx1) + 1)) ));
HXDLIN(1475)			int ti1;
HXDLIN(1475)			int li1;
HXDLIN(1475)			int ri1;
HXDLIN(1475)			 ::Dynamic fv1;
HXDLIN(1475)			 ::Dynamic lv1;
HXDLIN(1475)			int val7;
HXDLIN(1475)			{
HXLINE(1475)				int _g8 = 0;
HXDLIN(1475)				int _g12 = h;
HXDLIN(1475)				while((_g8 < _g12)){
HXLINE(1475)					_g8 = (_g8 + 1);
HXDLIN(1475)					int i1 = (_g8 - 1);
HXDLIN(1475)					ti1 = (i1 * w);
HXDLIN(1475)					li1 = ti1;
HXDLIN(1475)					ri1 = (ti1 + bx1);
HXDLIN(1475)					fv1 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ti1 * 4) + 1))) & 255);
HXDLIN(1475)					lv1 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((((ti1 + w) - 1) * 4) + 1))) & 255);
HXDLIN(1475)					val7 = ((bx1 + 1) * ( (int)(fv1) ));
HXDLIN(1475)					{
HXLINE(1475)						int _g9 = 0;
HXDLIN(1475)						int _g13 = bx1;
HXDLIN(1475)						while((_g9 < _g13)){
HXLINE(1475)							_g9 = (_g9 + 1);
HXDLIN(1475)							int j4 = (_g9 - 1);
HXDLIN(1475)							val7 = (val7 + ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (((ti1 + j4) * 4) + 1))) & 255)) ));
            						}
            					}
HXDLIN(1475)					{
HXLINE(1475)						int _g22 = 0;
HXDLIN(1475)						int _g31 = (bx1 + 1);
HXDLIN(1475)						while((_g22 < _g31)){
HXLINE(1475)							_g22 = (_g22 + 1);
HXDLIN(1475)							int j5 = (_g22 - 1);
HXDLIN(1475)							val7 = (val7 + (( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri1 * 4) + 1))) & 255)) ) - ( (int)(fv1) )));
HXDLIN(1475)							{
HXLINE(1475)								int int3 = val7;
HXDLIN(1475)								Float val8;
HXDLIN(1475)								if ((int3 < 0)) {
HXLINE(1475)									val8 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE(1475)									val8 = (int3 + ((Float)0.0));
            								}
HXDLIN(1475)								int val9 = ::Math_obj::round((val8 * iarr1));
HXDLIN(1475)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti1 * 4) + 1)),val9);
            							}
HXDLIN(1475)							ri1 = (ri1 + 1);
HXDLIN(1475)							ti1 = (ti1 + 1);
            						}
            					}
HXDLIN(1475)					{
HXLINE(1475)						int _g41 = (bx1 + 1);
HXDLIN(1475)						int _g51 = (w - bx1);
HXDLIN(1475)						while((_g41 < _g51)){
HXLINE(1475)							_g41 = (_g41 + 1);
HXDLIN(1475)							int j6 = (_g41 - 1);
HXDLIN(1475)							int a1 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri1 * 4) + 1))) & 255)) );
HXDLIN(1475)							val7 = (val7 + (a1 - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li1 * 4) + 1))) & 255)) )));
HXDLIN(1475)							{
HXLINE(1475)								int int4 = val7;
HXDLIN(1475)								Float val10;
HXDLIN(1475)								if ((int4 < 0)) {
HXLINE(1475)									val10 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE(1475)									val10 = (int4 + ((Float)0.0));
            								}
HXDLIN(1475)								int val11 = ::Math_obj::round((val10 * iarr1));
HXDLIN(1475)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti1 * 4) + 1)),val11);
            							}
HXDLIN(1475)							ri1 = (ri1 + 1);
HXDLIN(1475)							li1 = (li1 + 1);
HXDLIN(1475)							ti1 = (ti1 + 1);
            						}
            					}
HXDLIN(1475)					{
HXLINE(1475)						int _g61 = (w - bx1);
HXDLIN(1475)						int _g71 = w;
HXDLIN(1475)						while((_g61 < _g71)){
HXLINE(1475)							_g61 = (_g61 + 1);
HXDLIN(1475)							int j7 = (_g61 - 1);
HXDLIN(1475)							val7 = (val7 + (( (int)(lv1) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li1 * 4) + 1))) & 255)) )));
HXDLIN(1475)							{
HXLINE(1475)								int int5 = val7;
HXDLIN(1475)								Float val12;
HXDLIN(1475)								if ((int5 < 0)) {
HXLINE(1475)									val12 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE(1475)									val12 = (int5 + ((Float)0.0));
            								}
HXDLIN(1475)								int val13 = ::Math_obj::round((val12 * iarr1));
HXDLIN(1475)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti1 * 4) + 1)),val13);
            							}
HXDLIN(1475)							li1 = (li1 + 1);
HXDLIN(1475)							ti1 = (ti1 + 1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1476)		{
HXLINE(1476)			Float iarr2 = (( (Float)(1) ) / ( (Float)(((bx1 + bx1) + 1)) ));
HXDLIN(1476)			int ti2;
HXDLIN(1476)			int li2;
HXDLIN(1476)			int ri2;
HXDLIN(1476)			 ::Dynamic fv2;
HXDLIN(1476)			 ::Dynamic lv2;
HXDLIN(1476)			int val14;
HXDLIN(1476)			{
HXLINE(1476)				int _g10 = 0;
HXDLIN(1476)				int _g14 = h;
HXDLIN(1476)				while((_g10 < _g14)){
HXLINE(1476)					_g10 = (_g10 + 1);
HXDLIN(1476)					int i2 = (_g10 - 1);
HXDLIN(1476)					ti2 = (i2 * w);
HXDLIN(1476)					li2 = ti2;
HXDLIN(1476)					ri2 = (ti2 + bx1);
HXDLIN(1476)					fv2 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ti2 * 4) + 2))) & 255);
HXDLIN(1476)					lv2 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((((ti2 + w) - 1) * 4) + 2))) & 255);
HXDLIN(1476)					val14 = ((bx1 + 1) * ( (int)(fv2) ));
HXDLIN(1476)					{
HXLINE(1476)						int _g15 = 0;
HXDLIN(1476)						int _g16 = bx1;
HXDLIN(1476)						while((_g15 < _g16)){
HXLINE(1476)							_g15 = (_g15 + 1);
HXDLIN(1476)							int j8 = (_g15 - 1);
HXDLIN(1476)							val14 = (val14 + ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (((ti2 + j8) * 4) + 2))) & 255)) ));
            						}
            					}
HXDLIN(1476)					{
HXLINE(1476)						int _g23 = 0;
HXDLIN(1476)						int _g32 = (bx1 + 1);
HXDLIN(1476)						while((_g23 < _g32)){
HXLINE(1476)							_g23 = (_g23 + 1);
HXDLIN(1476)							int j9 = (_g23 - 1);
HXDLIN(1476)							val14 = (val14 + (( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri2 * 4) + 2))) & 255)) ) - ( (int)(fv2) )));
HXDLIN(1476)							{
HXLINE(1476)								int int6 = val14;
HXDLIN(1476)								Float val15;
HXDLIN(1476)								if ((int6 < 0)) {
HXLINE(1476)									val15 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE(1476)									val15 = (int6 + ((Float)0.0));
            								}
HXDLIN(1476)								int val16 = ::Math_obj::round((val15 * iarr2));
HXDLIN(1476)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti2 * 4) + 2)),val16);
            							}
HXDLIN(1476)							ri2 = (ri2 + 1);
HXDLIN(1476)							ti2 = (ti2 + 1);
            						}
            					}
HXDLIN(1476)					{
HXLINE(1476)						int _g42 = (bx1 + 1);
HXDLIN(1476)						int _g52 = (w - bx1);
HXDLIN(1476)						while((_g42 < _g52)){
HXLINE(1476)							_g42 = (_g42 + 1);
HXDLIN(1476)							int j10 = (_g42 - 1);
HXDLIN(1476)							int a2 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri2 * 4) + 2))) & 255)) );
HXDLIN(1476)							val14 = (val14 + (a2 - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li2 * 4) + 2))) & 255)) )));
HXDLIN(1476)							{
HXLINE(1476)								int int7 = val14;
HXDLIN(1476)								Float val17;
HXDLIN(1476)								if ((int7 < 0)) {
HXLINE(1476)									val17 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE(1476)									val17 = (int7 + ((Float)0.0));
            								}
HXDLIN(1476)								int val18 = ::Math_obj::round((val17 * iarr2));
HXDLIN(1476)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti2 * 4) + 2)),val18);
            							}
HXDLIN(1476)							ri2 = (ri2 + 1);
HXDLIN(1476)							li2 = (li2 + 1);
HXDLIN(1476)							ti2 = (ti2 + 1);
            						}
            					}
HXDLIN(1476)					{
HXLINE(1476)						int _g62 = (w - bx1);
HXDLIN(1476)						int _g72 = w;
HXDLIN(1476)						while((_g62 < _g72)){
HXLINE(1476)							_g62 = (_g62 + 1);
HXDLIN(1476)							int j11 = (_g62 - 1);
HXDLIN(1476)							val14 = (val14 + (( (int)(lv2) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li2 * 4) + 2))) & 255)) )));
HXDLIN(1476)							{
HXLINE(1476)								int int8 = val14;
HXDLIN(1476)								Float val19;
HXDLIN(1476)								if ((int8 < 0)) {
HXLINE(1476)									val19 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE(1476)									val19 = (int8 + ((Float)0.0));
            								}
HXDLIN(1476)								int val20 = ::Math_obj::round((val19 * iarr2));
HXDLIN(1476)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti2 * 4) + 2)),val20);
            							}
HXDLIN(1476)							li2 = (li2 + 1);
HXDLIN(1476)							ti2 = (ti2 + 1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1477)		{
HXLINE(1477)			Float iarr3 = (( (Float)(1) ) / ( (Float)(((bx1 + bx1) + 1)) ));
HXDLIN(1477)			int ti3;
HXDLIN(1477)			int li3;
HXDLIN(1477)			int ri3;
HXDLIN(1477)			 ::Dynamic fv3;
HXDLIN(1477)			 ::Dynamic lv3;
HXDLIN(1477)			int val21;
HXDLIN(1477)			{
HXLINE(1477)				int _g17 = 0;
HXDLIN(1477)				int _g18 = h;
HXDLIN(1477)				while((_g17 < _g18)){
HXLINE(1477)					_g17 = (_g17 + 1);
HXDLIN(1477)					int i3 = (_g17 - 1);
HXDLIN(1477)					ti3 = (i3 * w);
HXDLIN(1477)					li3 = ti3;
HXDLIN(1477)					ri3 = (ti3 + bx1);
HXDLIN(1477)					fv3 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ti3 * 4) + 3))) & 255);
HXDLIN(1477)					lv3 = ( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((((ti3 + w) - 1) * 4) + 3))) & 255);
HXDLIN(1477)					val21 = ((bx1 + 1) * ( (int)(fv3) ));
HXDLIN(1477)					{
HXLINE(1477)						int _g19 = 0;
HXDLIN(1477)						int _g110 = bx1;
HXDLIN(1477)						while((_g19 < _g110)){
HXLINE(1477)							_g19 = (_g19 + 1);
HXDLIN(1477)							int j12 = (_g19 - 1);
HXDLIN(1477)							val21 = (val21 + ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (((ti3 + j12) * 4) + 3))) & 255)) ));
            						}
            					}
HXDLIN(1477)					{
HXLINE(1477)						int _g24 = 0;
HXDLIN(1477)						int _g33 = (bx1 + 1);
HXDLIN(1477)						while((_g24 < _g33)){
HXLINE(1477)							_g24 = (_g24 + 1);
HXDLIN(1477)							int j13 = (_g24 - 1);
HXDLIN(1477)							val21 = (val21 + (( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri3 * 4) + 3))) & 255)) ) - ( (int)(fv3) )));
HXDLIN(1477)							{
HXLINE(1477)								int int9 = val21;
HXDLIN(1477)								Float val22;
HXDLIN(1477)								if ((int9 < 0)) {
HXLINE(1477)									val22 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE(1477)									val22 = (int9 + ((Float)0.0));
            								}
HXDLIN(1477)								int val23 = ::Math_obj::round((val22 * iarr3));
HXDLIN(1477)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti3 * 4) + 3)),val23);
            							}
HXDLIN(1477)							ri3 = (ri3 + 1);
HXDLIN(1477)							ti3 = (ti3 + 1);
            						}
            					}
HXDLIN(1477)					{
HXLINE(1477)						int _g43 = (bx1 + 1);
HXDLIN(1477)						int _g53 = (w - bx1);
HXDLIN(1477)						while((_g43 < _g53)){
HXLINE(1477)							_g43 = (_g43 + 1);
HXDLIN(1477)							int j14 = (_g43 - 1);
HXDLIN(1477)							int a3 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((ri3 * 4) + 3))) & 255)) );
HXDLIN(1477)							val21 = (val21 + (a3 - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li3 * 4) + 3))) & 255)) )));
HXDLIN(1477)							{
HXLINE(1477)								int int10 = val21;
HXDLIN(1477)								Float val24;
HXDLIN(1477)								if ((int10 < 0)) {
HXLINE(1477)									val24 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE(1477)									val24 = (int10 + ((Float)0.0));
            								}
HXDLIN(1477)								int val25 = ::Math_obj::round((val24 * iarr3));
HXDLIN(1477)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti3 * 4) + 3)),val25);
            							}
HXDLIN(1477)							ri3 = (ri3 + 1);
HXDLIN(1477)							li3 = (li3 + 1);
HXDLIN(1477)							ti3 = (ti3 + 1);
            						}
            					}
HXDLIN(1477)					{
HXLINE(1477)						int _g63 = (w - bx1);
HXDLIN(1477)						int _g73 = w;
HXDLIN(1477)						while((_g63 < _g73)){
HXLINE(1477)							_g63 = (_g63 + 1);
HXDLIN(1477)							int j15 = (_g63 - 1);
HXDLIN(1477)							val21 = (val21 + (( (int)(lv3) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + ((li3 * 4) + 3))) & 255)) )));
HXDLIN(1477)							{
HXLINE(1477)								int int11 = val21;
HXDLIN(1477)								Float val26;
HXDLIN(1477)								if ((int11 < 0)) {
HXLINE(1477)									val26 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE(1477)									val26 = (int11 + ((Float)0.0));
            								}
HXDLIN(1477)								int val27 = ::Math_obj::round((val26 * iarr3));
HXDLIN(1477)								 ::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA->byteOffset + ((ti3 * 4) + 3)),val27);
            							}
HXDLIN(1477)							li3 = (li3 + 1);
HXDLIN(1477)							ti3 = (ti3 + 1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1479)		{
HXLINE(1479)			Float iarr4 = (( (Float)(1) ) / ( (Float)(((by1 + by1) + 1)) ));
HXDLIN(1479)			int ws = (w * 4);
HXDLIN(1479)			int ti4;
HXDLIN(1479)			int li4;
HXDLIN(1479)			int ri4;
HXDLIN(1479)			 ::Dynamic fv4;
HXDLIN(1479)			 ::Dynamic lv4;
HXDLIN(1479)			int val28;
HXDLIN(1479)			{
HXLINE(1479)				int _g20 = 0;
HXDLIN(1479)				int _g111 = w;
HXDLIN(1479)				while((_g20 < _g111)){
HXLINE(1479)					_g20 = (_g20 + 1);
HXDLIN(1479)					int i4 = (_g20 - 1);
HXDLIN(1479)					ti4 = (i4 * 4);
HXDLIN(1479)					li4 = ti4;
HXDLIN(1479)					ri4 = (ti4 + (by1 * ws));
HXDLIN(1479)					fv4 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti4)) & 255);
HXDLIN(1479)					lv4 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti4 + (ws * (h - 1))))) & 255);
HXDLIN(1479)					val28 = ((by1 + 1) * ( (int)(fv4) ));
HXDLIN(1479)					{
HXLINE(1479)						int _g25 = 0;
HXDLIN(1479)						int _g112 = by1;
HXDLIN(1479)						while((_g25 < _g112)){
HXLINE(1479)							_g25 = (_g25 + 1);
HXDLIN(1479)							int j16 = (_g25 - 1);
HXDLIN(1479)							val28 = (val28 + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti4 + (j16 * ws)))) & 255)) ));
            						}
            					}
HXDLIN(1479)					{
HXLINE(1479)						int _g26 = 0;
HXDLIN(1479)						int _g34 = (by1 + 1);
HXDLIN(1479)						while((_g26 < _g34)){
HXLINE(1479)							_g26 = (_g26 + 1);
HXDLIN(1479)							int j17 = (_g26 - 1);
HXDLIN(1479)							val28 = (val28 + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri4)) & 255)) ) - ( (int)(fv4) )));
HXDLIN(1479)							{
HXLINE(1479)								int int12 = val28;
HXDLIN(1479)								Float val29;
HXDLIN(1479)								if ((int12 < 0)) {
HXLINE(1479)									val29 = (((Float)4294967296.0) + int12);
            								}
            								else {
HXLINE(1479)									val29 = (int12 + ((Float)0.0));
            								}
HXDLIN(1479)								int val30 = ::Math_obj::round((val29 * iarr4));
HXDLIN(1479)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val30);
            							}
HXDLIN(1479)							ri4 = (ri4 + ws);
HXDLIN(1479)							ti4 = (ti4 + ws);
            						}
            					}
HXDLIN(1479)					{
HXLINE(1479)						int _g44 = (by1 + 1);
HXDLIN(1479)						int _g54 = (h - by1);
HXDLIN(1479)						while((_g44 < _g54)){
HXLINE(1479)							_g44 = (_g44 + 1);
HXDLIN(1479)							int j18 = (_g44 - 1);
HXDLIN(1479)							int a4 = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri4)) & 255)) );
HXDLIN(1479)							val28 = (val28 + (a4 - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li4)) & 255)) )));
HXDLIN(1479)							{
HXLINE(1479)								int int13 = val28;
HXDLIN(1479)								Float val31;
HXDLIN(1479)								if ((int13 < 0)) {
HXLINE(1479)									val31 = (((Float)4294967296.0) + int13);
            								}
            								else {
HXLINE(1479)									val31 = (int13 + ((Float)0.0));
            								}
HXDLIN(1479)								int val32 = ::Math_obj::round((val31 * iarr4));
HXDLIN(1479)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val32);
            							}
HXDLIN(1479)							li4 = (li4 + ws);
HXDLIN(1479)							ri4 = (ri4 + ws);
HXDLIN(1479)							ti4 = (ti4 + ws);
            						}
            					}
HXDLIN(1479)					{
HXLINE(1479)						int _g64 = (h - by1);
HXDLIN(1479)						int _g74 = h;
HXDLIN(1479)						while((_g64 < _g74)){
HXLINE(1479)							_g64 = (_g64 + 1);
HXDLIN(1479)							int j19 = (_g64 - 1);
HXDLIN(1479)							val28 = (val28 + (( (int)(lv4) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li4)) & 255)) )));
HXDLIN(1479)							{
HXLINE(1479)								int int14 = val28;
HXDLIN(1479)								Float val33;
HXDLIN(1479)								if ((int14 < 0)) {
HXLINE(1479)									val33 = (((Float)4294967296.0) + int14);
            								}
            								else {
HXLINE(1479)									val33 = (int14 + ((Float)0.0));
            								}
HXDLIN(1479)								int val34 = ::Math_obj::round((val33 * iarr4));
HXDLIN(1479)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val34);
            							}
HXDLIN(1479)							li4 = (li4 + ws);
HXDLIN(1479)							ti4 = (ti4 + ws);
            						}
            					}
            				}
            			}
            		}
HXLINE(1480)		{
HXLINE(1480)			Float iarr5 = (( (Float)(1) ) / ( (Float)(((by1 + by1) + 1)) ));
HXDLIN(1480)			int ws1 = (w * 4);
HXDLIN(1480)			int ti5;
HXDLIN(1480)			int li5;
HXDLIN(1480)			int ri5;
HXDLIN(1480)			 ::Dynamic fv5;
HXDLIN(1480)			 ::Dynamic lv5;
HXDLIN(1480)			int val35;
HXDLIN(1480)			{
HXLINE(1480)				int _g27 = 0;
HXDLIN(1480)				int _g113 = w;
HXDLIN(1480)				while((_g27 < _g113)){
HXLINE(1480)					_g27 = (_g27 + 1);
HXDLIN(1480)					int i5 = (_g27 - 1);
HXDLIN(1480)					ti5 = ((i5 * 4) + 1);
HXDLIN(1480)					li5 = ti5;
HXDLIN(1480)					ri5 = (ti5 + (by1 * ws1));
HXDLIN(1480)					fv5 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti5)) & 255);
HXDLIN(1480)					lv5 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti5 + (ws1 * (h - 1))))) & 255);
HXDLIN(1480)					val35 = ((by1 + 1) * ( (int)(fv5) ));
HXDLIN(1480)					{
HXLINE(1480)						int _g28 = 0;
HXDLIN(1480)						int _g114 = by1;
HXDLIN(1480)						while((_g28 < _g114)){
HXLINE(1480)							_g28 = (_g28 + 1);
HXDLIN(1480)							int j20 = (_g28 - 1);
HXDLIN(1480)							val35 = (val35 + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti5 + (j20 * ws1)))) & 255)) ));
            						}
            					}
HXDLIN(1480)					{
HXLINE(1480)						int _g29 = 0;
HXDLIN(1480)						int _g35 = (by1 + 1);
HXDLIN(1480)						while((_g29 < _g35)){
HXLINE(1480)							_g29 = (_g29 + 1);
HXDLIN(1480)							int j21 = (_g29 - 1);
HXDLIN(1480)							val35 = (val35 + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri5)) & 255)) ) - ( (int)(fv5) )));
HXDLIN(1480)							{
HXLINE(1480)								int int15 = val35;
HXDLIN(1480)								Float val36;
HXDLIN(1480)								if ((int15 < 0)) {
HXLINE(1480)									val36 = (((Float)4294967296.0) + int15);
            								}
            								else {
HXLINE(1480)									val36 = (int15 + ((Float)0.0));
            								}
HXDLIN(1480)								int val37 = ::Math_obj::round((val36 * iarr5));
HXDLIN(1480)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val37);
            							}
HXDLIN(1480)							ri5 = (ri5 + ws1);
HXDLIN(1480)							ti5 = (ti5 + ws1);
            						}
            					}
HXDLIN(1480)					{
HXLINE(1480)						int _g45 = (by1 + 1);
HXDLIN(1480)						int _g55 = (h - by1);
HXDLIN(1480)						while((_g45 < _g55)){
HXLINE(1480)							_g45 = (_g45 + 1);
HXDLIN(1480)							int j22 = (_g45 - 1);
HXDLIN(1480)							int a5 = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri5)) & 255)) );
HXDLIN(1480)							val35 = (val35 + (a5 - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li5)) & 255)) )));
HXDLIN(1480)							{
HXLINE(1480)								int int16 = val35;
HXDLIN(1480)								Float val38;
HXDLIN(1480)								if ((int16 < 0)) {
HXLINE(1480)									val38 = (((Float)4294967296.0) + int16);
            								}
            								else {
HXLINE(1480)									val38 = (int16 + ((Float)0.0));
            								}
HXDLIN(1480)								int val39 = ::Math_obj::round((val38 * iarr5));
HXDLIN(1480)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val39);
            							}
HXDLIN(1480)							li5 = (li5 + ws1);
HXDLIN(1480)							ri5 = (ri5 + ws1);
HXDLIN(1480)							ti5 = (ti5 + ws1);
            						}
            					}
HXDLIN(1480)					{
HXLINE(1480)						int _g65 = (h - by1);
HXDLIN(1480)						int _g75 = h;
HXDLIN(1480)						while((_g65 < _g75)){
HXLINE(1480)							_g65 = (_g65 + 1);
HXDLIN(1480)							int j23 = (_g65 - 1);
HXDLIN(1480)							val35 = (val35 + (( (int)(lv5) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li5)) & 255)) )));
HXDLIN(1480)							{
HXLINE(1480)								int int17 = val35;
HXDLIN(1480)								Float val40;
HXDLIN(1480)								if ((int17 < 0)) {
HXLINE(1480)									val40 = (((Float)4294967296.0) + int17);
            								}
            								else {
HXLINE(1480)									val40 = (int17 + ((Float)0.0));
            								}
HXDLIN(1480)								int val41 = ::Math_obj::round((val40 * iarr5));
HXDLIN(1480)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val41);
            							}
HXDLIN(1480)							li5 = (li5 + ws1);
HXDLIN(1480)							ti5 = (ti5 + ws1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1481)		{
HXLINE(1481)			Float iarr6 = (( (Float)(1) ) / ( (Float)(((by1 + by1) + 1)) ));
HXDLIN(1481)			int ws2 = (w * 4);
HXDLIN(1481)			int ti6;
HXDLIN(1481)			int li6;
HXDLIN(1481)			int ri6;
HXDLIN(1481)			 ::Dynamic fv6;
HXDLIN(1481)			 ::Dynamic lv6;
HXDLIN(1481)			int val42;
HXDLIN(1481)			{
HXLINE(1481)				int _g30 = 0;
HXDLIN(1481)				int _g115 = w;
HXDLIN(1481)				while((_g30 < _g115)){
HXLINE(1481)					_g30 = (_g30 + 1);
HXDLIN(1481)					int i6 = (_g30 - 1);
HXDLIN(1481)					ti6 = ((i6 * 4) + 2);
HXDLIN(1481)					li6 = ti6;
HXDLIN(1481)					ri6 = (ti6 + (by1 * ws2));
HXDLIN(1481)					fv6 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti6)) & 255);
HXDLIN(1481)					lv6 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti6 + (ws2 * (h - 1))))) & 255);
HXDLIN(1481)					val42 = ((by1 + 1) * ( (int)(fv6) ));
HXDLIN(1481)					{
HXLINE(1481)						int _g36 = 0;
HXDLIN(1481)						int _g116 = by1;
HXDLIN(1481)						while((_g36 < _g116)){
HXLINE(1481)							_g36 = (_g36 + 1);
HXDLIN(1481)							int j24 = (_g36 - 1);
HXDLIN(1481)							val42 = (val42 + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti6 + (j24 * ws2)))) & 255)) ));
            						}
            					}
HXDLIN(1481)					{
HXLINE(1481)						int _g210 = 0;
HXDLIN(1481)						int _g37 = (by1 + 1);
HXDLIN(1481)						while((_g210 < _g37)){
HXLINE(1481)							_g210 = (_g210 + 1);
HXDLIN(1481)							int j25 = (_g210 - 1);
HXDLIN(1481)							val42 = (val42 + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri6)) & 255)) ) - ( (int)(fv6) )));
HXDLIN(1481)							{
HXLINE(1481)								int int18 = val42;
HXDLIN(1481)								Float val43;
HXDLIN(1481)								if ((int18 < 0)) {
HXLINE(1481)									val43 = (((Float)4294967296.0) + int18);
            								}
            								else {
HXLINE(1481)									val43 = (int18 + ((Float)0.0));
            								}
HXDLIN(1481)								int val44 = ::Math_obj::round((val43 * iarr6));
HXDLIN(1481)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val44);
            							}
HXDLIN(1481)							ri6 = (ri6 + ws2);
HXDLIN(1481)							ti6 = (ti6 + ws2);
            						}
            					}
HXDLIN(1481)					{
HXLINE(1481)						int _g46 = (by1 + 1);
HXDLIN(1481)						int _g56 = (h - by1);
HXDLIN(1481)						while((_g46 < _g56)){
HXLINE(1481)							_g46 = (_g46 + 1);
HXDLIN(1481)							int j26 = (_g46 - 1);
HXDLIN(1481)							int a6 = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri6)) & 255)) );
HXDLIN(1481)							val42 = (val42 + (a6 - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li6)) & 255)) )));
HXDLIN(1481)							{
HXLINE(1481)								int int19 = val42;
HXDLIN(1481)								Float val45;
HXDLIN(1481)								if ((int19 < 0)) {
HXLINE(1481)									val45 = (((Float)4294967296.0) + int19);
            								}
            								else {
HXLINE(1481)									val45 = (int19 + ((Float)0.0));
            								}
HXDLIN(1481)								int val46 = ::Math_obj::round((val45 * iarr6));
HXDLIN(1481)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val46);
            							}
HXDLIN(1481)							li6 = (li6 + ws2);
HXDLIN(1481)							ri6 = (ri6 + ws2);
HXDLIN(1481)							ti6 = (ti6 + ws2);
            						}
            					}
HXDLIN(1481)					{
HXLINE(1481)						int _g66 = (h - by1);
HXDLIN(1481)						int _g76 = h;
HXDLIN(1481)						while((_g66 < _g76)){
HXLINE(1481)							_g66 = (_g66 + 1);
HXDLIN(1481)							int j27 = (_g66 - 1);
HXDLIN(1481)							val42 = (val42 + (( (int)(lv6) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li6)) & 255)) )));
HXDLIN(1481)							{
HXLINE(1481)								int int20 = val42;
HXDLIN(1481)								Float val47;
HXDLIN(1481)								if ((int20 < 0)) {
HXLINE(1481)									val47 = (((Float)4294967296.0) + int20);
            								}
            								else {
HXLINE(1481)									val47 = (int20 + ((Float)0.0));
            								}
HXDLIN(1481)								int val48 = ::Math_obj::round((val47 * iarr6));
HXDLIN(1481)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val48);
            							}
HXDLIN(1481)							li6 = (li6 + ws2);
HXDLIN(1481)							ti6 = (ti6 + ws2);
            						}
            					}
            				}
            			}
            		}
HXLINE(1482)		{
HXLINE(1482)			Float iarr7 = (( (Float)(1) ) / ( (Float)(((by1 + by1) + 1)) ));
HXDLIN(1482)			int ws3 = (w * 4);
HXDLIN(1482)			int ti7;
HXDLIN(1482)			int li7;
HXDLIN(1482)			int ri7;
HXDLIN(1482)			 ::Dynamic fv7;
HXDLIN(1482)			 ::Dynamic lv7;
HXDLIN(1482)			int val49;
HXDLIN(1482)			{
HXLINE(1482)				int _g38 = 0;
HXDLIN(1482)				int _g117 = w;
HXDLIN(1482)				while((_g38 < _g117)){
HXLINE(1482)					_g38 = (_g38 + 1);
HXDLIN(1482)					int i7 = (_g38 - 1);
HXDLIN(1482)					ti7 = ((i7 * 4) + 3);
HXDLIN(1482)					li7 = ti7;
HXDLIN(1482)					ri7 = (ti7 + (by1 * ws3));
HXDLIN(1482)					fv7 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti7)) & 255);
HXDLIN(1482)					lv7 = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti7 + (ws3 * (h - 1))))) & 255);
HXDLIN(1482)					val49 = ((by1 + 1) * ( (int)(fv7) ));
HXDLIN(1482)					{
HXLINE(1482)						int _g39 = 0;
HXDLIN(1482)						int _g118 = by1;
HXDLIN(1482)						while((_g39 < _g118)){
HXLINE(1482)							_g39 = (_g39 + 1);
HXDLIN(1482)							int j28 = (_g39 - 1);
HXDLIN(1482)							val49 = (val49 + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti7 + (j28 * ws3)))) & 255)) ));
            						}
            					}
HXDLIN(1482)					{
HXLINE(1482)						int _g211 = 0;
HXDLIN(1482)						int _g310 = (by1 + 1);
HXDLIN(1482)						while((_g211 < _g310)){
HXLINE(1482)							_g211 = (_g211 + 1);
HXDLIN(1482)							int j29 = (_g211 - 1);
HXDLIN(1482)							val49 = (val49 + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri7)) & 255)) ) - ( (int)(fv7) )));
HXDLIN(1482)							{
HXLINE(1482)								int int21 = val49;
HXDLIN(1482)								Float val50;
HXDLIN(1482)								if ((int21 < 0)) {
HXLINE(1482)									val50 = (((Float)4294967296.0) + int21);
            								}
            								else {
HXLINE(1482)									val50 = (int21 + ((Float)0.0));
            								}
HXDLIN(1482)								int val51 = ::Math_obj::round((val50 * iarr7));
HXDLIN(1482)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val51);
            							}
HXDLIN(1482)							ri7 = (ri7 + ws3);
HXDLIN(1482)							ti7 = (ti7 + ws3);
            						}
            					}
HXDLIN(1482)					{
HXLINE(1482)						int _g47 = (by1 + 1);
HXDLIN(1482)						int _g57 = (h - by1);
HXDLIN(1482)						while((_g47 < _g57)){
HXLINE(1482)							_g47 = (_g47 + 1);
HXDLIN(1482)							int j30 = (_g47 - 1);
HXDLIN(1482)							int a7 = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri7)) & 255)) );
HXDLIN(1482)							val49 = (val49 + (a7 - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li7)) & 255)) )));
HXDLIN(1482)							{
HXLINE(1482)								int int22 = val49;
HXDLIN(1482)								Float val52;
HXDLIN(1482)								if ((int22 < 0)) {
HXLINE(1482)									val52 = (((Float)4294967296.0) + int22);
            								}
            								else {
HXLINE(1482)									val52 = (int22 + ((Float)0.0));
            								}
HXDLIN(1482)								int val53 = ::Math_obj::round((val52 * iarr7));
HXDLIN(1482)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val53);
            							}
HXDLIN(1482)							li7 = (li7 + ws3);
HXDLIN(1482)							ri7 = (ri7 + ws3);
HXDLIN(1482)							ti7 = (ti7 + ws3);
            						}
            					}
HXDLIN(1482)					{
HXLINE(1482)						int _g67 = (h - by1);
HXDLIN(1482)						int _g77 = h;
HXDLIN(1482)						while((_g67 < _g77)){
HXLINE(1482)							_g67 = (_g67 + 1);
HXDLIN(1482)							int j31 = (_g67 - 1);
HXDLIN(1482)							val49 = (val49 + (( (int)(lv7) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li7)) & 255)) )));
HXDLIN(1482)							{
HXLINE(1482)								int int23 = val49;
HXDLIN(1482)								Float val54;
HXDLIN(1482)								if ((int23 < 0)) {
HXLINE(1482)									val54 = (((Float)4294967296.0) + int23);
            								}
            								else {
HXLINE(1482)									val54 = (int23 + ((Float)0.0));
            								}
HXDLIN(1482)								int val55 = ::Math_obj::round((val54 * iarr7));
HXDLIN(1482)								 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val55);
            							}
HXDLIN(1482)							li7 = (li7 + ws3);
HXDLIN(1482)							ti7 = (ti7 + ws3);
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlur,(void))

void ImageDataUtil_obj::_hx___boxBlurH( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,int r,int off){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1486___boxBlurH)
HXLINE(1487)		Float iarr = (( (Float)(1) ) / ( (Float)(((r + r) + 1)) ));
HXLINE(1488)		int ti;
HXDLIN(1488)		int li;
HXDLIN(1488)		int ri;
HXDLIN(1488)		 ::Dynamic fv;
HXDLIN(1488)		 ::Dynamic lv;
HXDLIN(1488)		int val;
HXLINE(1490)		{
HXLINE(1490)			int _g = 0;
HXDLIN(1490)			int _g1 = h;
HXDLIN(1490)			while((_g < _g1)){
HXLINE(1490)				_g = (_g + 1);
HXDLIN(1490)				int i = (_g - 1);
HXLINE(1492)				ti = (i * w);
HXLINE(1493)				li = ti;
HXLINE(1494)				ri = (ti + r);
HXLINE(1496)				fv = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((ti * 4) + off))) & 255);
HXLINE(1497)				lv = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((((ti + w) - 1) * 4) + off))) & 255);
HXLINE(1498)				val = ((r + 1) * ( (int)(fv) ));
HXLINE(1500)				{
HXLINE(1500)					int _g2 = 0;
HXDLIN(1500)					int _g11 = r;
HXDLIN(1500)					while((_g2 < _g11)){
HXLINE(1500)						_g2 = (_g2 + 1);
HXDLIN(1500)						int j = (_g2 - 1);
HXLINE(1502)						val = (val + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (((ti + j) * 4) + off))) & 255)) ));
            					}
            				}
HXLINE(1505)				{
HXLINE(1505)					int _g21 = 0;
HXDLIN(1505)					int _g3 = (r + 1);
HXDLIN(1505)					while((_g21 < _g3)){
HXLINE(1505)						_g21 = (_g21 + 1);
HXDLIN(1505)						int j1 = (_g21 - 1);
HXLINE(1507)						val = (val + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((ri * 4) + off))) & 255)) ) - ( (int)(fv) )));
HXLINE(1508)						{
HXLINE(1508)							int _hx_int = val;
HXDLIN(1508)							Float val1;
HXDLIN(1508)							if ((_hx_int < 0)) {
HXLINE(1508)								val1 = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE(1508)								val1 = (_hx_int + ((Float)0.0));
            							}
HXDLIN(1508)							int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1508)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ((ti * 4) + off)),val2);
            						}
HXLINE(1509)						ri = (ri + 1);
HXLINE(1510)						ti = (ti + 1);
            					}
            				}
HXLINE(1513)				{
HXLINE(1513)					int _g4 = (r + 1);
HXDLIN(1513)					int _g5 = (w - r);
HXDLIN(1513)					while((_g4 < _g5)){
HXLINE(1513)						_g4 = (_g4 + 1);
HXDLIN(1513)						int j2 = (_g4 - 1);
HXLINE(1515)						int a = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((ri * 4) + off))) & 255)) );
HXDLIN(1515)						val = (val + (a - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((li * 4) + off))) & 255)) )));
HXLINE(1516)						{
HXLINE(1516)							int int1 = val;
HXDLIN(1516)							Float val3;
HXDLIN(1516)							if ((int1 < 0)) {
HXLINE(1516)								val3 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE(1516)								val3 = (int1 + ((Float)0.0));
            							}
HXDLIN(1516)							int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1516)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ((ti * 4) + off)),val4);
            						}
HXLINE(1517)						ri = (ri + 1);
HXLINE(1518)						li = (li + 1);
HXLINE(1519)						ti = (ti + 1);
            					}
            				}
HXLINE(1522)				{
HXLINE(1522)					int _g6 = (w - r);
HXDLIN(1522)					int _g7 = w;
HXDLIN(1522)					while((_g6 < _g7)){
HXLINE(1522)						_g6 = (_g6 + 1);
HXDLIN(1522)						int j3 = (_g6 - 1);
HXLINE(1524)						val = (val + (( (int)(lv) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ((li * 4) + off))) & 255)) )));
HXLINE(1525)						{
HXLINE(1525)							int int2 = val;
HXDLIN(1525)							Float val5;
HXDLIN(1525)							if ((int2 < 0)) {
HXLINE(1525)								val5 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE(1525)								val5 = (int2 + ((Float)0.0));
            							}
HXDLIN(1525)							int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1525)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ((ti * 4) + off)),val6);
            						}
HXLINE(1526)						li = (li + 1);
HXLINE(1527)						ti = (ti + 1);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlurH,(void))

void ImageDataUtil_obj::_hx___boxBlurT( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,int r,int off){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1533___boxBlurT)
HXLINE(1534)		Float iarr = (( (Float)(1) ) / ( (Float)(((r + r) + 1)) ));
HXLINE(1535)		int ws = (w * 4);
HXLINE(1536)		int ti;
HXDLIN(1536)		int li;
HXDLIN(1536)		int ri;
HXDLIN(1536)		 ::Dynamic fv;
HXDLIN(1536)		 ::Dynamic lv;
HXDLIN(1536)		int val;
HXLINE(1538)		{
HXLINE(1538)			int _g = 0;
HXDLIN(1538)			int _g1 = w;
HXDLIN(1538)			while((_g < _g1)){
HXLINE(1538)				_g = (_g + 1);
HXDLIN(1538)				int i = (_g - 1);
HXLINE(1540)				ti = ((i * 4) + off);
HXLINE(1541)				li = ti;
HXLINE(1542)				ri = (ti + (r * ws));
HXLINE(1544)				fv = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti)) & 255);
HXLINE(1545)				lv = ( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti + (ws * (h - 1))))) & 255);
HXLINE(1546)				val = ((r + 1) * ( (int)(fv) ));
HXLINE(1548)				{
HXLINE(1548)					int _g2 = 0;
HXDLIN(1548)					int _g11 = r;
HXDLIN(1548)					while((_g2 < _g11)){
HXLINE(1548)						_g2 = (_g2 + 1);
HXDLIN(1548)						int j = (_g2 - 1);
HXLINE(1550)						val = (val + ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + (ti + (j * ws)))) & 255)) ));
            					}
            				}
HXLINE(1553)				{
HXLINE(1553)					int _g21 = 0;
HXDLIN(1553)					int _g3 = (r + 1);
HXDLIN(1553)					while((_g21 < _g3)){
HXLINE(1553)						_g21 = (_g21 + 1);
HXDLIN(1553)						int j1 = (_g21 - 1);
HXLINE(1555)						val = (val + (( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri)) & 255)) ) - ( (int)(fv) )));
HXLINE(1556)						{
HXLINE(1556)							int _hx_int = val;
HXDLIN(1556)							Float val1;
HXDLIN(1556)							if ((_hx_int < 0)) {
HXLINE(1556)								val1 = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE(1556)								val1 = (_hx_int + ((Float)0.0));
            							}
HXDLIN(1556)							int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1556)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val2);
            						}
HXLINE(1557)						ri = (ri + ws);
HXLINE(1558)						ti = (ti + ws);
            					}
            				}
HXLINE(1561)				{
HXLINE(1561)					int _g4 = (r + 1);
HXDLIN(1561)					int _g5 = (h - r);
HXDLIN(1561)					while((_g4 < _g5)){
HXLINE(1561)						_g4 = (_g4 + 1);
HXDLIN(1561)						int j2 = (_g4 - 1);
HXLINE(1563)						int a = ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri)) & 255)) );
HXDLIN(1563)						val = (val + (a - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li)) & 255)) )));
HXLINE(1564)						{
HXLINE(1564)							int int1 = val;
HXDLIN(1564)							Float val3;
HXDLIN(1564)							if ((int1 < 0)) {
HXLINE(1564)								val3 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE(1564)								val3 = (int1 + ((Float)0.0));
            							}
HXDLIN(1564)							int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1564)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val4);
            						}
HXLINE(1565)						li = (li + ws);
HXLINE(1566)						ri = (ri + ws);
HXLINE(1567)						ti = (ti + ws);
            					}
            				}
HXLINE(1570)				{
HXLINE(1570)					int _g6 = (h - r);
HXDLIN(1570)					int _g7 = h;
HXDLIN(1570)					while((_g6 < _g7)){
HXLINE(1570)						_g6 = (_g6 + 1);
HXDLIN(1570)						int j3 = (_g6 - 1);
HXLINE(1572)						val = (val + (( (int)(lv) ) - ( (int)(( ::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li)) & 255)) )));
HXLINE(1573)						{
HXLINE(1573)							int int2 = val;
HXDLIN(1573)							Float val5;
HXDLIN(1573)							if ((int2 < 0)) {
HXLINE(1573)								val5 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE(1573)								val5 = (int2 + ((Float)0.0));
            							}
HXDLIN(1573)							int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1573)							 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val6);
            						}
HXLINE(1574)						li = (li + ws);
HXLINE(1575)						ti = (ti + ws);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlurT,(void))

int ImageDataUtil_obj::_hx___calculateSourceOffset( ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int destX,int destY){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1585___calculateSourceOffset)
HXLINE(1586)		int sourceX = (destX - ::Std_obj::_hx_int(destPoint->x));
HXLINE(1587)		int sourceY = (destY - ::Std_obj::_hx_int(destPoint->y));
HXLINE(1589)		int offset = 0;
HXLINE(1591)		bool _hx_tmp;
HXDLIN(1591)		bool _hx_tmp1;
HXDLIN(1591)		bool _hx_tmp2;
HXDLIN(1591)		if ((sourceX >= 0)) {
HXLINE(1591)			_hx_tmp2 = (sourceY < 0);
            		}
            		else {
HXLINE(1591)			_hx_tmp2 = true;
            		}
HXDLIN(1591)		if (!(_hx_tmp2)) {
HXLINE(1591)			_hx_tmp1 = (sourceX >= sourceRect->width);
            		}
            		else {
HXLINE(1591)			_hx_tmp1 = true;
            		}
HXDLIN(1591)		if (!(_hx_tmp1)) {
HXLINE(1591)			_hx_tmp = (sourceY >= sourceRect->height);
            		}
            		else {
HXLINE(1591)			_hx_tmp = true;
            		}
HXDLIN(1591)		if (_hx_tmp) {
HXLINE(1593)			offset = -1;
            		}
            		else {
HXLINE(1597)			offset = (4 * ((sourceY * ::Std_obj::_hx_int(sourceRect->width)) + sourceX));
            		}
HXLINE(1600)		return offset;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,_hx___calculateSourceOffset,return )

::Array< Float > ImageDataUtil_obj::_hx___getBoxesForGaussianBlur(Float sigma,int n){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1604___getBoxesForGaussianBlur)
HXLINE(1605)		Float wIdeal = ::Math_obj::sqrt(((((( (Float)(12) ) * sigma) * sigma) / ( (Float)(n) )) + 1));
HXLINE(1606)		int wl = ::Math_obj::floor(wIdeal);
HXLINE(1607)		if ((hx::Mod(wl,2) == 0)) {
HXLINE(1607)			wl = (wl - 1);
            		}
HXLINE(1608)		int wu = (wl + 2);
HXLINE(1610)		Float mIdeal = ((((((( (Float)(12) ) * sigma) * sigma) - ( (Float)(((n * wl) * wl)) )) - ( (Float)(((4 * n) * wl)) )) - ( (Float)((3 * n)) )) / ( (Float)(((-4 * wl) - 4)) ));
HXLINE(1611)		int m = ::Math_obj::round(mIdeal);
HXLINE(1612)		::Array< Float > sizes = ::Array_obj< Float >::__new(0);
HXLINE(1614)		{
HXLINE(1614)			int _g = 0;
HXDLIN(1614)			int _g1 = n;
HXDLIN(1614)			while((_g < _g1)){
HXLINE(1614)				_g = (_g + 1);
HXDLIN(1614)				int i = (_g - 1);
HXLINE(1616)				Float _hx_tmp;
HXDLIN(1616)				if ((i < m)) {
HXLINE(1616)					_hx_tmp = ( (Float)(wl) );
            				}
            				else {
HXLINE(1616)					_hx_tmp = ( (Float)(wu) );
            				}
HXDLIN(1616)				sizes->push(_hx_tmp);
            			}
            		}
HXLINE(1619)		return sizes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___getBoxesForGaussianBlur,return )

int ImageDataUtil_obj::_hx___pixelCompare(int n1,int n2){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1623___pixelCompare)
HXLINE(1624)		int tmp1 = (hx::UShr(n1,24) & 255);
HXLINE(1625)		int tmp2 = (hx::UShr(n2,24) & 255);
HXLINE(1630)		if ((tmp1 != tmp2)) {
HXLINE(1632)			bool aNeg = (tmp1 < 0);
HXDLIN(1632)			bool bNeg = (tmp2 < 0);
HXDLIN(1632)			bool _hx_tmp;
HXDLIN(1632)			if ((aNeg != bNeg)) {
HXLINE(1632)				_hx_tmp = aNeg;
            			}
            			else {
HXLINE(1632)				_hx_tmp = (tmp1 > tmp2);
            			}
HXDLIN(1632)			if (_hx_tmp) {
HXLINE(1632)				return 1;
            			}
            			else {
HXLINE(1632)				return -1;
            			}
            		}
            		else {
HXLINE(1636)			tmp1 = (hx::UShr(n1,16) & 255);
HXLINE(1637)			tmp2 = (hx::UShr(n2,16) & 255);
HXLINE(1639)			if ((tmp1 != tmp2)) {
HXLINE(1641)				bool aNeg1 = (tmp1 < 0);
HXDLIN(1641)				bool bNeg1 = (tmp2 < 0);
HXDLIN(1641)				bool _hx_tmp1;
HXDLIN(1641)				if ((aNeg1 != bNeg1)) {
HXLINE(1641)					_hx_tmp1 = aNeg1;
            				}
            				else {
HXLINE(1641)					_hx_tmp1 = (tmp1 > tmp2);
            				}
HXDLIN(1641)				if (_hx_tmp1) {
HXLINE(1641)					return 1;
            				}
            				else {
HXLINE(1641)					return -1;
            				}
            			}
            			else {
HXLINE(1645)				tmp1 = (hx::UShr(n1,8) & 255);
HXLINE(1646)				tmp2 = (hx::UShr(n2,8) & 255);
HXLINE(1648)				if ((tmp1 != tmp2)) {
HXLINE(1650)					bool aNeg2 = (tmp1 < 0);
HXDLIN(1650)					bool bNeg2 = (tmp2 < 0);
HXDLIN(1650)					bool _hx_tmp2;
HXDLIN(1650)					if ((aNeg2 != bNeg2)) {
HXLINE(1650)						_hx_tmp2 = aNeg2;
            					}
            					else {
HXLINE(1650)						_hx_tmp2 = (tmp1 > tmp2);
            					}
HXDLIN(1650)					if (_hx_tmp2) {
HXLINE(1650)						return 1;
            					}
            					else {
HXLINE(1650)						return -1;
            					}
            				}
            				else {
HXLINE(1654)					tmp1 = (n1 & 255);
HXLINE(1655)					tmp2 = (n2 & 255);
HXLINE(1657)					if ((tmp1 != tmp2)) {
HXLINE(1659)						bool aNeg3 = (tmp1 < 0);
HXDLIN(1659)						bool bNeg3 = (tmp2 < 0);
HXDLIN(1659)						bool _hx_tmp3;
HXDLIN(1659)						if ((aNeg3 != bNeg3)) {
HXLINE(1659)							_hx_tmp3 = aNeg3;
            						}
            						else {
HXLINE(1659)							_hx_tmp3 = (tmp1 > tmp2);
            						}
HXDLIN(1659)						if (_hx_tmp3) {
HXLINE(1659)							return 1;
            						}
            						else {
HXLINE(1659)							return -1;
            						}
            					}
            					else {
HXLINE(1663)						return 0;
            					}
            				}
            			}
            		}
HXLINE(1630)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___pixelCompare,return )

void ImageDataUtil_obj::_hx___translatePixel( ::lime::utils::ArrayBufferView imgB, ::lime::math::Rectangle sourceRect, ::lime::math::Rectangle destRect, ::lime::math::Vector2 destPoint,int destX,int destY,Float strength){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1672___translatePixel)
HXLINE(1673)		int d = (4 * ((destY * ::Std_obj::_hx_int(destRect->width)) + destX));
HXLINE(1674)		int sourceX = (destX - ::Std_obj::_hx_int(destPoint->x));
HXDLIN(1674)		int sourceY = (destY - ::Std_obj::_hx_int(destPoint->y));
HXDLIN(1674)		int offset = 0;
HXDLIN(1674)		bool _hx_tmp;
HXDLIN(1674)		bool _hx_tmp1;
HXDLIN(1674)		bool _hx_tmp2;
HXDLIN(1674)		if ((sourceX >= 0)) {
HXLINE(1674)			_hx_tmp2 = (sourceY < 0);
            		}
            		else {
HXLINE(1674)			_hx_tmp2 = true;
            		}
HXDLIN(1674)		if (!(_hx_tmp2)) {
HXLINE(1674)			_hx_tmp1 = (sourceX >= sourceRect->width);
            		}
            		else {
HXLINE(1674)			_hx_tmp1 = true;
            		}
HXDLIN(1674)		if (!(_hx_tmp1)) {
HXLINE(1674)			_hx_tmp = (sourceY >= sourceRect->height);
            		}
            		else {
HXLINE(1674)			_hx_tmp = true;
            		}
HXDLIN(1674)		if (_hx_tmp) {
HXLINE(1674)			offset = -1;
            		}
            		else {
HXLINE(1674)			offset = (4 * ((sourceY * ::Std_obj::_hx_int(sourceRect->width)) + sourceX));
            		}
HXDLIN(1674)		int s = offset;
HXLINE(1676)		if ((s < 0)) {
HXLINE(1678)			 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 3)),0);
HXDLIN(1678)			int val = 0;
HXDLIN(1678)			 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 2)),val);
HXDLIN(1678)			int val1 = val;
HXDLIN(1678)			 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 1)),val1);
HXDLIN(1678)			int val2 = val1;
HXDLIN(1678)			 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val2);
            		}
            		else {
HXLINE(1682)			{
HXLINE(1682)				int val3 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + s)) & 255)) );
HXDLIN(1682)				 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val3);
            			}
HXLINE(1683)			{
HXLINE(1683)				int val4 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s + 1))) & 255)) );
HXDLIN(1683)				 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 1)),val4);
            			}
HXLINE(1684)			{
HXLINE(1684)				int val5 = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s + 2))) & 255)) );
HXDLIN(1684)				 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 2)),val5);
            			}
HXLINE(1686)			int _hx_int = ( (int)(( ::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + (s + 3))) & 255)) );
HXDLIN(1686)			Float a;
HXDLIN(1686)			if ((_hx_int < 0)) {
HXLINE(1686)				a = (((Float)4294967296.0) + _hx_int);
            			}
            			else {
HXLINE(1686)				a = (_hx_int + ((Float)0.0));
            			}
HXDLIN(1686)			int a1 = ::Std_obj::_hx_int((a * strength));
HXLINE(1687)			{
HXLINE(1687)				int val6;
HXDLIN(1687)				if ((a1 < 0)) {
HXLINE(1687)					val6 = 0;
            				}
            				else {
HXLINE(1687)					if ((a1 > 255)) {
HXLINE(1687)						val6 = 255;
            					}
            					else {
HXLINE(1687)						val6 = a1;
            					}
            				}
HXDLIN(1687)				 ::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + (d + 3)),val6);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,_hx___translatePixel,(void))


ImageDataUtil_obj::ImageDataUtil_obj()
{
}

bool ImageDataUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lerp4f") ) { outValue = lerp4f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { outValue = bilinear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lerpRGBA") ) { outValue = lerpRGBA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel") ) { outValue = getPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { outValue = floodFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixels") ) { outValue = getPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setFormat") ) { outValue = setFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixels") ) { outValue = setPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"threshold") ) { outValue = threshold_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlur") ) { outValue = _hx___boxBlur_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { outValue = copyPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { outValue = getPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { outValue = setPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlurH") ) { outValue = _hx___boxBlurH_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlurT") ) { outValue = _hx___boxBlurT_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"displaceMap") ) { outValue = displaceMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { outValue = copyChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gaussianBlur") ) { outValue = gaussianBlur_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resizeBuffer") ) { outValue = resizeBuffer_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { outValue = colorTransform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__pixelCompare") ) { outValue = _hx___pixelCompare_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__translatePixel") ) { outValue = _hx___translatePixel_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { outValue = getColorBoundsRect_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__calculateSourceOffset") ) { outValue = _hx___calculateSourceOffset_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__getBoxesForGaussianBlur") ) { outValue = _hx___getBoxesForGaussianBlur_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ImageDataUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ImageDataUtil_obj_sStaticStorageInfo = 0;
#endif

hx::Class ImageDataUtil_obj::__mClass;

static ::String ImageDataUtil_obj_sStaticFields[] = {
	HX_("displaceMap",63,ff,45,95),
	HX_("bilinear",ec,b6,3d,e0),
	HX_("lerpRGBA",ab,b2,39,d1),
	HX_("lerp4f",e9,0b,b3,a1),
	HX_("lerp",77,12,b0,47),
	HX_("colorTransform",89,d7,3f,ad),
	HX_("copyChannel",8e,7d,e6,22),
	HX_("copyPixels",c2,54,6e,42),
	HX_("fillRect",47,45,b9,6c),
	HX_("floodFill",61,83,8a,59),
	HX_("gaussianBlur",42,ea,61,f7),
	HX_("getColorBoundsRect",86,ad,e8,80),
	HX_("getPixel",10,d6,7a,22),
	HX_("getPixel32",af,a6,68,d7),
	HX_("getPixels",63,78,00,09),
	HX_("merge",b8,a2,c6,05),
	HX_("multiplyAlpha",9a,f2,1c,6b),
	HX_("resize",f4,59,7b,08),
	HX_("resizeBuffer",14,7a,a2,b4),
	HX_("setFormat",79,04,36,5d),
	HX_("setPixel",84,2f,d8,d0),
	HX_("setPixel32",23,45,e6,da),
	HX_("setPixels",6f,64,51,ec),
	HX_("threshold",ab,c3,a3,34),
	HX_("unmultiplyAlpha",a1,c8,96,28),
	HX_("__boxBlur",32,df,2a,12),
	HX_("__boxBlurH",d6,6c,58,d3),
	HX_("__boxBlurT",e2,6c,58,d3),
	HX_("__calculateSourceOffset",34,ce,66,5a),
	HX_("__getBoxesForGaussianBlur",48,14,ae,9c),
	HX_("__pixelCompare",df,79,e3,8d),
	HX_("__translatePixel",78,af,9b,5e),
	::String(null())
};

void ImageDataUtil_obj::__register()
{
	ImageDataUtil_obj _hx_dummy;
	ImageDataUtil_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("lime._internal.graphics.ImageDataUtil",cf,fd,b0,0e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageDataUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageDataUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ImageDataUtil_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDataUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDataUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace graphics
