// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_lime__internal_unifill_Exception
#include <lime/_internal/unifill/Exception.h>
#endif
#ifndef INCLUDED_lime__internal_unifill_InvalidCodePoint
#include <lime/_internal/unifill/InvalidCodePoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1a966284ab6346e0_26_new,"lime._internal.unifill.InvalidCodePoint","new",0x43085824,"lime._internal.unifill.InvalidCodePoint.new","lime/_internal/unifill/Exception.hx",26,0x1ae400d8)
HX_LOCAL_STACK_FRAME(_hx_pos_1a966284ab6346e0_33_toString,"lime._internal.unifill.InvalidCodePoint","toString",0x34e3a268,"lime._internal.unifill.InvalidCodePoint.toString","lime/_internal/unifill/Exception.hx",33,0x1ae400d8)
namespace lime{
namespace _internal{
namespace unifill{

void InvalidCodePoint_obj::__construct(int code){
            	HX_STACKFRAME(&_hx_pos_1a966284ab6346e0_26_new)
HXLINE(  27)		super::__construct();
HXLINE(  28)		this->code = code;
            	}

Dynamic InvalidCodePoint_obj::__CreateEmpty() { return new InvalidCodePoint_obj; }

void *InvalidCodePoint_obj::_hx_vtable = 0;

Dynamic InvalidCodePoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InvalidCodePoint_obj > _hx_result = new InvalidCodePoint_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool InvalidCodePoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0200bd3b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0200bd3b;
	} else {
		return inClassId==(int)0x56439bb8;
	}
}

::String InvalidCodePoint_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_1a966284ab6346e0_33_toString)
HXDLIN(  33)		return ((HX_("InvalidCodePoint(code: ",af,16,52,d2) + this->code) + HX_(")",29,00,00,00));
            	}



InvalidCodePoint_obj::InvalidCodePoint_obj()
{
}

hx::Val InvalidCodePoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { return hx::Val( code ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InvalidCodePoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InvalidCodePoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("code",2d,b1,c4,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo InvalidCodePoint_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(InvalidCodePoint_obj,code),HX_("code",2d,b1,c4,41)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InvalidCodePoint_obj_sStaticStorageInfo = 0;
#endif

static ::String InvalidCodePoint_obj_sMemberFields[] = {
	HX_("code",2d,b1,c4,41),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class InvalidCodePoint_obj::__mClass;

void InvalidCodePoint_obj::__register()
{
	InvalidCodePoint_obj _hx_dummy;
	InvalidCodePoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("lime._internal.unifill.InvalidCodePoint",32,b6,b0,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InvalidCodePoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InvalidCodePoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InvalidCodePoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InvalidCodePoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace unifill
