// Generated by Haxe 4.0.0-rc.2+77068e1
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#define INCLUDED_lime_text__UTF8String_UTF8String_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS3(lime,text,_UTF8String,UTF8String_Impl_)

namespace lime{
namespace text{
namespace _UTF8String{


class HXCPP_CLASS_ATTRIBUTES UTF8String_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef UTF8String_Impl__obj OBJ_;
		UTF8String_Impl__obj();

	public:
		enum { _hx_ClassId = 0x611dfa9d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.text._UTF8String.UTF8String_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.text._UTF8String.UTF8String_Impl_"); }

		hx::ObjectPtr< UTF8String_Impl__obj > __new() {
			hx::ObjectPtr< UTF8String_Impl__obj > __this = new UTF8String_Impl__obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< UTF8String_Impl__obj > __alloc(hx::Ctx *_hx_ctx) {
			UTF8String_Impl__obj *__this = (UTF8String_Impl__obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(UTF8String_Impl__obj), false, "lime.text._UTF8String.UTF8String_Impl_"));
			*(void **)__this = UTF8String_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~UTF8String_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("UTF8String_Impl_",22,f7,6d,fa); }

		static  ::haxe::ds::IntMap lowercaseMap;
		static  ::haxe::ds::IntMap uppercaseMap;
		static ::String _new(::String str);
		static ::Dynamic _new_dyn();

		static ::String charAt(::String this1,int index);
		static ::Dynamic charAt_dyn();

		static  ::Dynamic charCodeAt(::String this1,int index);
		static ::Dynamic charCodeAt_dyn();

		static ::String fromCharCode(int code);
		static ::Dynamic fromCharCode_dyn();

		static ::String fromCharCodes(::Array< int > codes);
		static ::Dynamic fromCharCodes_dyn();

		static int indexOf(::String this1,::String str,hx::Null< int >  startIndex);
		static ::Dynamic indexOf_dyn();

		static int lastIndexOf(::String this1,::String str, ::Dynamic startIndex);
		static ::Dynamic lastIndexOf_dyn();

		static ::Array< ::String > split(::String this1,::String delimiter);
		static ::Dynamic split_dyn();

		static ::String substr(::String this1,int pos, ::Dynamic len);
		static ::Dynamic substr_dyn();

		static ::String substring(::String this1,int startIndex, ::Dynamic endIndex);
		static ::Dynamic substring_dyn();

		static ::String toLowerCase(::String this1,::String locale);
		static ::Dynamic toLowerCase_dyn();

		static int toLowerCaseLocaleFixes(int v,::String locale);
		static ::Dynamic toLowerCaseLocaleFixes_dyn();

		static ::String toString(::String this1);
		static ::Dynamic toString_dyn();

		static ::String toUpperCase(::String this1,::String locale);
		static ::Dynamic toUpperCase_dyn();

		static int toUpperCaseLocaleFixes(int v,::String locale);
		static ::Dynamic toUpperCaseLocaleFixes_dyn();

		static bool equals(::String a,::String b);
		static ::Dynamic equals_dyn();

		static bool lt(::String a,::String b);
		static ::Dynamic lt_dyn();

		static bool gt(::String a,::String b);
		static ::Dynamic gt_dyn();

		static bool lteq(::String a,::String b);
		static ::Dynamic lteq_dyn();

		static bool gteq(::String a,::String b);
		static ::Dynamic gteq_dyn();

		static ::String plus(::String a,::String b);
		static ::Dynamic plus_dyn();

		static ::String fromDynamic( ::Dynamic value);
		static ::Dynamic fromDynamic_dyn();

		static int get_length(::String this1);
		static ::Dynamic get_length_dyn();

};

} // end namespace lime
} // end namespace text
} // end namespace _UTF8String

#endif /* INCLUDED_lime_text__UTF8String_UTF8String_Impl_ */ 
