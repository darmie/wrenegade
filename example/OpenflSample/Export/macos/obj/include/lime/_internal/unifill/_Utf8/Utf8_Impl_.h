// Generated by Haxe 4.0.0-rc.2+77068e1
#ifndef INCLUDED_lime__internal_unifill__Utf8_Utf8_Impl_
#define INCLUDED_lime__internal_unifill__Utf8_Utf8_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS4(lime,_internal,unifill,_Utf8,Utf8_Impl_)

namespace lime{
namespace _internal{
namespace unifill{
namespace _Utf8{


class HXCPP_CLASS_ATTRIBUTES Utf8_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Utf8_Impl__obj OBJ_;
		Utf8_Impl__obj();

	public:
		enum { _hx_ClassId = 0x1bad0d75 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime._internal.unifill._Utf8.Utf8_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime._internal.unifill._Utf8.Utf8_Impl_"); }

		hx::ObjectPtr< Utf8_Impl__obj > __new() {
			hx::ObjectPtr< Utf8_Impl__obj > __this = new Utf8_Impl__obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Utf8_Impl__obj > __alloc(hx::Ctx *_hx_ctx) {
			Utf8_Impl__obj *__this = (Utf8_Impl__obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Utf8_Impl__obj), false, "lime._internal.unifill._Utf8.Utf8_Impl_"));
			*(void **)__this = Utf8_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Utf8_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Utf8_Impl_",b1,10,72,9d); }

		static ::String fromCodePoint(int codePoint);
		static ::Dynamic fromCodePoint_dyn();

		static ::String fromCodePoints( ::Dynamic codePoints);
		static ::Dynamic fromCodePoints_dyn();

		static ::String fromString(::String s);
		static ::Dynamic fromString_dyn();

		static ::String fromBytes( ::haxe::io::Bytes b);
		static ::Dynamic fromBytes_dyn();

		static void encodeWith( ::Dynamic f,int c);
		static ::Dynamic encodeWith_dyn();

		static int codeUnitAt(::String this1,int index);
		static ::Dynamic codeUnitAt_dyn();

		static int codePointAt(::String this1,int index);
		static ::Dynamic codePointAt_dyn();

		static ::String charAt(::String this1,int index);
		static ::Dynamic charAt_dyn();

		static int codePointCount(::String this1,int beginIndex,int endIndex);
		static ::Dynamic codePointCount_dyn();

		static int codePointWidthAt(::String this1,int index);
		static ::Dynamic codePointWidthAt_dyn();

		static int codePointWidthBefore(::String this1,int index);
		static ::Dynamic codePointWidthBefore_dyn();

		static int offsetByCodePoints(::String this1,int index,int codePointOffset);
		static ::Dynamic offsetByCodePoints_dyn();

		static ::String substr(::String this1,int index, ::Dynamic len);
		static ::Dynamic substr_dyn();

		static void validate(::String this1);
		static ::Dynamic validate_dyn();

		static ::String toString(::String this1);
		static ::Dynamic toString_dyn();

		static  ::haxe::io::Bytes toBytes(::String this1);
		static ::Dynamic toBytes_dyn();

		static ::String _new(::String s);
		static ::Dynamic _new_dyn();

		static int get_length(::String this1);
		static ::Dynamic get_length_dyn();

		static int forward_offset_by_code_points(::String this1,int index,int codePointOffset);
		static ::Dynamic forward_offset_by_code_points_dyn();

		static int backward_offset_by_code_points(::String this1,int index,int codePointOffset);
		static ::Dynamic backward_offset_by_code_points_dyn();

};

} // end namespace lime
} // end namespace _internal
} // end namespace unifill
} // end namespace _Utf8

#endif /* INCLUDED_lime__internal_unifill__Utf8_Utf8_Impl_ */ 
