// Generated by Haxe 4.0.0-rc.2+77068e1
#ifndef INCLUDED_lime__internal_unifill_InvalidCodePoint
#define INCLUDED_lime__internal_unifill_InvalidCodePoint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_lime__internal_unifill_Exception
#include <lime/_internal/unifill/Exception.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_1a966284ab6346e0_26_new)
HX_DECLARE_CLASS3(lime,_internal,unifill,Exception)
HX_DECLARE_CLASS3(lime,_internal,unifill,InvalidCodePoint)

namespace lime{
namespace _internal{
namespace unifill{


class HXCPP_CLASS_ATTRIBUTES InvalidCodePoint_obj : public  ::lime::_internal::unifill::Exception_obj
{
	public:
		typedef  ::lime::_internal::unifill::Exception_obj super;
		typedef InvalidCodePoint_obj OBJ_;
		InvalidCodePoint_obj();

	public:
		enum { _hx_ClassId = 0x56439bb8 };

		void __construct(int code);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime._internal.unifill.InvalidCodePoint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime._internal.unifill.InvalidCodePoint"); }

		hx::ObjectPtr< InvalidCodePoint_obj > __new(int code) {
			hx::ObjectPtr< InvalidCodePoint_obj > __this = new InvalidCodePoint_obj();
			__this->__construct(code);
			return __this;
		}

		static hx::ObjectPtr< InvalidCodePoint_obj > __alloc(hx::Ctx *_hx_ctx,int code) {
			InvalidCodePoint_obj *__this = (InvalidCodePoint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InvalidCodePoint_obj), false, "lime._internal.unifill.InvalidCodePoint"));
			*(void **)__this = InvalidCodePoint_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_1a966284ab6346e0_26_new)
HXLINE(  27)		__this->super::__construct();
HXLINE(  28)		( ( ::lime::_internal::unifill::InvalidCodePoint)(__this) )->code = code;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~InvalidCodePoint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InvalidCodePoint",0c,5a,fa,ab); }

		int code;
		virtual ::String toString();

};

} // end namespace lime
} // end namespace _internal
} // end namespace unifill

#endif /* INCLUDED_lime__internal_unifill_InvalidCodePoint */ 
