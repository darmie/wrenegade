// Generated by Haxe 4.0.0-rc.2+77068e1
#ifndef INCLUDED_lime__internal_unifill_Unicode
#define INCLUDED_lime__internal_unifill_Unicode

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,_internal,unifill,Unicode)

namespace lime{
namespace _internal{
namespace unifill{


class HXCPP_CLASS_ATTRIBUTES Unicode_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Unicode_obj OBJ_;
		Unicode_obj();

	public:
		enum { _hx_ClassId = 0x1551a3ed };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime._internal.unifill.Unicode")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime._internal.unifill.Unicode"); }

		hx::ObjectPtr< Unicode_obj > __new() {
			hx::ObjectPtr< Unicode_obj > __this = new Unicode_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Unicode_obj > __alloc(hx::Ctx *_hx_ctx) {
			Unicode_obj *__this = (Unicode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Unicode_obj), false, "lime._internal.unifill.Unicode"));
			*(void **)__this = Unicode_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Unicode_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Unicode",fd,b8,b9,80); }

		static void __boot();
		static int minCodePoint;
		static int maxCodePoint;
		static int minHighSurrogate;
		static int maxHighSurrogate;
		static int minLowSurrogate;
		static int maxLowSurrogate;
		static int decodeSurrogate(int hi,int lo);
		static ::Dynamic decodeSurrogate_dyn();

		static int encodeHighSurrogate(int c);
		static ::Dynamic encodeHighSurrogate_dyn();

		static int encodeLowSurrogate(int c);
		static ::Dynamic encodeLowSurrogate_dyn();

		static bool isScalar(int code);
		static ::Dynamic isScalar_dyn();

		static bool isHighSurrogate(int code);
		static ::Dynamic isHighSurrogate_dyn();

		static bool isLowSurrogate(int code);
		static ::Dynamic isLowSurrogate_dyn();

};

} // end namespace lime
} // end namespace _internal
} // end namespace unifill

#endif /* INCLUDED_lime__internal_unifill_Unicode */ 
