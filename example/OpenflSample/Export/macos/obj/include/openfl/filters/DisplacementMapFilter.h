// Generated by Haxe 4.0.0-rc.2+77068e1
#ifndef INCLUDED_openfl_filters_DisplacementMapFilter
#define INCLUDED_openfl_filters_DisplacementMapFilter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectRenderer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilterShader)
HX_DECLARE_CLASS2(openfl,filters,DisplacementMapFilter)
HX_DECLARE_CLASS3(openfl,filters,_DisplacementMapFilter,DisplacementMapShader)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace openfl{
namespace filters{


class HXCPP_CLASS_ATTRIBUTES DisplacementMapFilter_obj : public  ::openfl::filters::BitmapFilter_obj
{
	public:
		typedef  ::openfl::filters::BitmapFilter_obj super;
		typedef DisplacementMapFilter_obj OBJ_;
		DisplacementMapFilter_obj();

	public:
		enum { _hx_ClassId = 0x4c04d6b2 };

		void __construct( ::openfl::display::BitmapData mapBitmap, ::openfl::geom::Point mapPoint,hx::Null< int >  __o_componentX,hx::Null< int >  __o_componentY,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,::String __o_mode,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.filters.DisplacementMapFilter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl.filters.DisplacementMapFilter"); }
		static hx::ObjectPtr< DisplacementMapFilter_obj > __new( ::openfl::display::BitmapData mapBitmap, ::openfl::geom::Point mapPoint,hx::Null< int >  __o_componentX,hx::Null< int >  __o_componentY,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,::String __o_mode,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha);
		static hx::ObjectPtr< DisplacementMapFilter_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display::BitmapData mapBitmap, ::openfl::geom::Point mapPoint,hx::Null< int >  __o_componentX,hx::Null< int >  __o_componentY,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,::String __o_mode,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DisplacementMapFilter_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DisplacementMapFilter",7d,a5,e7,d3); }

		static void __boot();
		static  ::openfl::filters::_DisplacementMapFilter::DisplacementMapShader _hx___displacementMapShader;
		static ::Array< Float > _hx___matrixData;
		static ::Array< Float > _hx___offset;
		Float _hx___alpha;
		int _hx___color;
		int _hx___componentX;
		int _hx___componentY;
		 ::openfl::display::BitmapData _hx___mapBitmap;
		 ::openfl::geom::Point _hx___mapPoint;
		::String _hx___mode;
		Float _hx___scaleX;
		Float _hx___scaleY;
		 ::openfl::filters::BitmapFilter clone();

		 ::openfl::display::BitmapData _hx___applyFilter( ::openfl::display::BitmapData bitmapData, ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint);

		 ::openfl::display::Shader _hx___initShader( ::openfl::display::DisplayObjectRenderer renderer,int pass);

		void _hx___updateMapMatrix();
		::Dynamic _hx___updateMapMatrix_dyn();

		Float get_alpha();
		::Dynamic get_alpha_dyn();

		Float set_alpha(Float value);
		::Dynamic set_alpha_dyn();

		int get_componentX();
		::Dynamic get_componentX_dyn();

		int set_componentX(int value);
		::Dynamic set_componentX_dyn();

		int get_componentY();
		::Dynamic get_componentY_dyn();

		int set_componentY(int value);
		::Dynamic set_componentY_dyn();

		int get_color();
		::Dynamic get_color_dyn();

		int set_color(int value);
		::Dynamic set_color_dyn();

		Float get_scaleX();
		::Dynamic get_scaleX_dyn();

		Float set_scaleX(Float value);
		::Dynamic set_scaleX_dyn();

		Float get_scaleY();
		::Dynamic get_scaleY_dyn();

		Float set_scaleY(Float value);
		::Dynamic set_scaleY_dyn();

		 ::openfl::display::BitmapData get_mapBitmap();
		::Dynamic get_mapBitmap_dyn();

		 ::openfl::display::BitmapData set_mapBitmap( ::openfl::display::BitmapData value);
		::Dynamic set_mapBitmap_dyn();

		 ::openfl::geom::Point get_mapPoint();
		::Dynamic get_mapPoint_dyn();

		 ::openfl::geom::Point set_mapPoint( ::openfl::geom::Point value);
		::Dynamic set_mapPoint_dyn();

		::String get_mode();
		::Dynamic get_mode_dyn();

		::String set_mode(::String value);
		::Dynamic set_mode_dyn();

};

} // end namespace openfl
} // end namespace filters

#endif /* INCLUDED_openfl_filters_DisplacementMapFilter */ 
